!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=448)}([function(t,e,n){var r=n(4),o=n(20),i=n(13),u=n(14),a=n(21),c=function(t,e,n){var s,l,f,p,h=t&c.F,d=t&c.G,v=t&c.S,y=t&c.P,m=t&c.B,g=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,_=d?o:o[e]||(o[e]={}),b=_.prototype||(_.prototype={});for(s in d&&(n=e),n)f=((l=!h&&g&&void 0!==g[s])?g:n)[s],p=m&&l?a(f,r):y&&"function"==typeof f?a(Function.call,f):f,g&&u(g,s,f,t&c.U),_[s]!=f&&i(_,s,p),y&&b[s]!=f&&(b[s]=f)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){"use strict";t.exports=n(190)},function(t,e,n){t.exports=n(435)()},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(72)("wks"),o=n(45),i=n(4).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,e,n){t.exports=!n(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(3),o=n(131),i=n(26),u=Object.defineProperty;e.f=n(8)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(28),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(27);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(9),o=n(44);t.exports=n(8)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(4),o=n(13),i=n(16),u=n(45)("src"),a=Function.toString,c=(""+a).split("toString");n(20).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,n,a){var s="function"==typeof n;s&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(s&&(i(n,u)||o(n,u,t[e]?""+t[e]:c.join(String(e)))),t===r?t[e]=n:a?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(t,e,n){var r=n(0),o=n(5),i=n(27),u=/"/g,a=function(t,e,n,r){var o=String(i(t)),a="<"+e;return""!==n&&(a+=" "+n+'="'+String(r).replace(u,"&quot;")+'"'),a+">"+o+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(a),r(r.P+r.F*o(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(66),o=n(27);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(67),o=n(44),i=n(17),u=n(26),a=n(16),c=n(131),s=Object.getOwnPropertyDescriptor;e.f=n(8)?s:function(t,e){if(t=i(t),e=u(e,!0),c)try{return s(t,e)}catch(t){}if(a(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(16),o=n(11),i=n(92)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(12);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){"use strict";var r=n(5);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o,i,u,a){if(!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,u,a],l=0;(c=new Error(e.replace(/%s/g,function(){return s[l++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=function(){};t.exports=r},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(0),o=n(20),i=n(5);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",u)}},function(t,e,n){var r=n(21),o=n(66),i=n(11),u=n(10),a=n(109);t.exports=function(t,e){var n=1==t,c=2==t,s=3==t,l=4==t,f=6==t,p=5==t||f,h=e||a;return function(e,a,d){for(var v,y,m=i(e),g=o(m),_=r(a,d,3),b=u(g.length),w=0,S=n?h(e,b):c?h(e,0):void 0;b>w;w++)if((p||w in g)&&(y=_(v=g[w],w,m),t))if(n)S[w]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:S.push(v)}else if(l)return!1;return f?-1:s||l?l:S}}},function(t,e,n){"use strict";if(n(8)){var r=n(35),o=n(4),i=n(5),u=n(0),a=n(83),c=n(115),s=n(21),l=n(51),f=n(44),p=n(13),h=n(53),d=n(28),v=n(10),y=n(157),m=n(47),g=n(26),_=n(16),b=n(68),w=n(6),S=n(11),x=n(106),E=n(48),k=n(19),O=n(49).f,P=n(108),T=n(45),C=n(7),M=n(30),I=n(73),j=n(80),N=n(111),A=n(59),R=n(77),D=n(50),F=n(110),z=n(147),L=n(9),U=n(18),W=L.f,q=U.f,B=o.RangeError,V=o.TypeError,K=o.Uint8Array,H=Array.prototype,G=c.ArrayBuffer,$=c.DataView,Y=M(0),J=M(2),Q=M(3),X=M(4),Z=M(5),tt=M(6),et=I(!0),nt=I(!1),rt=N.values,ot=N.keys,it=N.entries,ut=H.lastIndexOf,at=H.reduce,ct=H.reduceRight,st=H.join,lt=H.sort,ft=H.slice,pt=H.toString,ht=H.toLocaleString,dt=C("iterator"),vt=C("toStringTag"),yt=T("typed_constructor"),mt=T("def_constructor"),gt=a.CONSTR,_t=a.TYPED,bt=a.VIEW,wt=M(1,function(t,e){return Ot(j(t,t[mt]),e)}),St=i(function(){return 1===new K(new Uint16Array([1]).buffer)[0]}),xt=!!K&&!!K.prototype.set&&i(function(){new K(1).set({})}),Et=function(t,e){var n=d(t);if(n<0||n%e)throw B("Wrong offset!");return n},kt=function(t){if(w(t)&&_t in t)return t;throw V(t+" is not a typed array!")},Ot=function(t,e){if(!(w(t)&&yt in t))throw V("It is not a typed array constructor!");return new t(e)},Pt=function(t,e){return Tt(j(t,t[mt]),e)},Tt=function(t,e){for(var n=0,r=e.length,o=Ot(t,r);r>n;)o[n]=e[n++];return o},Ct=function(t,e,n){W(t,e,{get:function(){return this._d[n]}})},Mt=function(t){var e,n,r,o,i,u,a=S(t),c=arguments.length,l=c>1?arguments[1]:void 0,f=void 0!==l,p=P(a);if(void 0!=p&&!x(p)){for(u=p.call(a),r=[],e=0;!(i=u.next()).done;e++)r.push(i.value);a=r}for(f&&c>2&&(l=s(l,arguments[2],2)),e=0,n=v(a.length),o=Ot(this,n);n>e;e++)o[e]=f?l(a[e],e):a[e];return o},It=function(){for(var t=0,e=arguments.length,n=Ot(this,e);e>t;)n[t]=arguments[t++];return n},jt=!!K&&i(function(){ht.call(new K(1))}),Nt=function(){return ht.apply(jt?ft.call(kt(this)):kt(this),arguments)},At={copyWithin:function(t,e){return z.call(kt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return X(kt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return F.apply(kt(this),arguments)},filter:function(t){return Pt(this,J(kt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Z(kt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(kt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Y(kt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(kt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(kt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(kt(this),arguments)},lastIndexOf:function(t){return ut.apply(kt(this),arguments)},map:function(t){return wt(kt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return at.apply(kt(this),arguments)},reduceRight:function(t){return ct.apply(kt(this),arguments)},reverse:function(){for(var t,e=kt(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return Q(kt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return lt.call(kt(this),t)},subarray:function(t,e){var n=kt(this),r=n.length,o=m(t,r);return new(j(n,n[mt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===e?r:m(e,r))-o))}},Rt=function(t,e){return Pt(this,ft.call(kt(this),t,e))},Dt=function(t){kt(this);var e=Et(arguments[1],1),n=this.length,r=S(t),o=v(r.length),i=0;if(o+e>n)throw B("Wrong length!");for(;i<o;)this[e+i]=r[i++]},Ft={entries:function(){return it.call(kt(this))},keys:function(){return ot.call(kt(this))},values:function(){return rt.call(kt(this))}},zt=function(t,e){return w(t)&&t[_t]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Lt=function(t,e){return zt(t,e=g(e,!0))?f(2,t[e]):q(t,e)},Ut=function(t,e,n){return!(zt(t,e=g(e,!0))&&w(n)&&_(n,"value"))||_(n,"get")||_(n,"set")||n.configurable||_(n,"writable")&&!n.writable||_(n,"enumerable")&&!n.enumerable?W(t,e,n):(t[e]=n.value,t)};gt||(U.f=Lt,L.f=Ut),u(u.S+u.F*!gt,"Object",{getOwnPropertyDescriptor:Lt,defineProperty:Ut}),i(function(){pt.call({})})&&(pt=ht=function(){return st.call(this)});var Wt=h({},At);h(Wt,Ft),p(Wt,dt,Ft.values),h(Wt,{slice:Rt,set:Dt,constructor:function(){},toString:pt,toLocaleString:Nt}),Ct(Wt,"buffer","b"),Ct(Wt,"byteOffset","o"),Ct(Wt,"byteLength","l"),Ct(Wt,"length","e"),W(Wt,vt,{get:function(){return this[_t]}}),t.exports=function(t,e,n,c){var s=t+((c=!!c)?"Clamped":"")+"Array",f="get"+t,h="set"+t,d=o[s],m=d||{},g=d&&k(d),_=!d||!a.ABV,S={},x=d&&d.prototype,P=function(t,n){W(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,St)}(this,n)},set:function(t){return function(t,n,r){var o=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[h](n*e+o.o,r,St)}(this,n,t)},enumerable:!0})};_?(d=n(function(t,n,r,o){l(t,d,s,"_d");var i,u,a,c,f=0,h=0;if(w(n)){if(!(n instanceof G||"ArrayBuffer"==(c=b(n))||"SharedArrayBuffer"==c))return _t in n?Tt(d,n):Mt.call(d,n);i=n,h=Et(r,e);var m=n.byteLength;if(void 0===o){if(m%e)throw B("Wrong length!");if((u=m-h)<0)throw B("Wrong length!")}else if((u=v(o)*e)+h>m)throw B("Wrong length!");a=u/e}else a=y(n),i=new G(u=a*e);for(p(t,"_d",{b:i,o:h,l:u,e:a,v:new $(i)});f<a;)P(t,f++)}),x=d.prototype=E(Wt),p(x,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&R(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=n(function(t,n,r,o){var i;return l(t,d,s),w(n)?n instanceof G||"ArrayBuffer"==(i=b(n))||"SharedArrayBuffer"==i?void 0!==o?new m(n,Et(r,e),o):void 0!==r?new m(n,Et(r,e)):new m(n):_t in n?Tt(d,n):Mt.call(d,n):new m(y(n))}),Y(g!==Function.prototype?O(m).concat(O(g)):O(m),function(t){t in d||p(d,t,m[t])}),d.prototype=x,r||(x.constructor=d));var T=x[dt],C=!!T&&("values"==T.name||void 0==T.name),M=Ft.values;p(d,yt,!0),p(x,_t,s),p(x,bt,!0),p(x,mt,d),(c?new d(1)[vt]==s:vt in x)||W(x,vt,{get:function(){return s}}),S[s]=d,u(u.G+u.W+u.F*(d!=m),S),u(u.S,s,{BYTES_PER_ELEMENT:e}),u(u.S+u.F*i(function(){m.of.call(d,1)}),s,{from:Mt,of:It}),"BYTES_PER_ELEMENT"in x||p(x,"BYTES_PER_ELEMENT",e),u(u.P,s,At),D(s),u(u.P+u.F*xt,s,{set:Dt}),u(u.P+u.F*!C,s,Ft),r||x.toString==pt||(x.toString=pt),u(u.P+u.F*i(function(){new d(1).slice()}),s,{slice:Rt}),u(u.P+u.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){x.toLocaleString.call([1,2])})),s,{toLocaleString:Nt}),A[s]=C?T:M,r||C||p(x,dt,M)}}else t.exports=function(){}},function(t,e,n){var r=n(152),o=n(0),i=n(72)("metadata"),u=i.store||(i.store=new(n(155))),a=function(t,e,n){var o=u.get(t);if(!o){if(!n)return;u.set(t,o=new r)}var i=o.get(e);if(!i){if(!n)return;o.set(e,i=new r)}return i};t.exports={store:u,map:a,has:function(t,e,n){var r=a(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=a(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){a(n,r,!0).set(t,e)},keys:function(t,e){var n=a(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,e){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(45)("meta"),o=n(6),i=n(16),u=n(9).f,a=0,c=Object.isExtensible||function(){return!0},s=!n(5)(function(){return c(Object.preventExtensions({}))}),l=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return s&&f.NEED&&c(t)&&!i(t,r)&&l(t),t}}},function(t,e){t.exports=!1},function(t,e,n){var r=n(7)("unscopables"),o=Array.prototype;void 0==o[r]&&n(13)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){t.exports=function(){"use strict";var t=Array.prototype.slice;function e(t,e){e&&(t.prototype=Object.create(e.prototype)),t.prototype.constructor=t}function n(t){return u(t)?t:H(t)}function r(t){return a(t)?t:G(t)}function o(t){return c(t)?t:$(t)}function i(t){return u(t)&&!s(t)?t:Y(t)}function u(t){return!(!t||!t[f])}function a(t){return!(!t||!t[p])}function c(t){return!(!t||!t[h])}function s(t){return a(t)||c(t)}function l(t){return!(!t||!t[d])}e(r,n),e(o,n),e(i,n),n.isIterable=u,n.isKeyed=a,n.isIndexed=c,n.isAssociative=s,n.isOrdered=l,n.Keyed=r,n.Indexed=o,n.Set=i;var f="@@__IMMUTABLE_ITERABLE__@@",p="@@__IMMUTABLE_KEYED__@@",h="@@__IMMUTABLE_INDEXED__@@",d="@@__IMMUTABLE_ORDERED__@@",v=5,y=1<<v,m=y-1,g={},_={value:!1},b={value:!1};function w(t){return t.value=!1,t}function S(t){t&&(t.value=!0)}function x(){}function E(t,e){e=e||0;for(var n=Math.max(0,t.length-e),r=new Array(n),o=0;o<n;o++)r[o]=t[o+e];return r}function k(t){return void 0===t.size&&(t.size=t.__iterate(P)),t.size}function O(t,e){if("number"!=typeof e){var n=e>>>0;if(""+n!==e||4294967295===n)return NaN;e=n}return e<0?k(t)+e:e}function P(){return!0}function T(t,e,n){return(0===t||void 0!==n&&t<=-n)&&(void 0===e||void 0!==n&&e>=n)}function C(t,e){return I(t,e,0)}function M(t,e){return I(t,e,e)}function I(t,e,n){return void 0===t?n:t<0?Math.max(0,e+t):void 0===e?t:Math.min(e,t)}var j=0,N=1,A=2,R="function"==typeof Symbol&&Symbol.iterator,D="@@iterator",F=R||D;function z(t){this.next=t}function L(t,e,n,r){var o=0===t?e:1===t?n:[e,n];return r?r.value=o:r={value:o,done:!1},r}function U(){return{value:void 0,done:!0}}function W(t){return!!V(t)}function q(t){return t&&"function"==typeof t.next}function B(t){var e=V(t);return e&&e.call(t)}function V(t){var e=t&&(R&&t[R]||t[D]);if("function"==typeof e)return e}function K(t){return t&&"number"==typeof t.length}function H(t){return null===t||void 0===t?it():u(t)?t.toSeq():function(t){var e=ct(t)||"object"==typeof t&&new et(t);if(!e)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+t);return e}(t)}function G(t){return null===t||void 0===t?it().toKeyedSeq():u(t)?a(t)?t.toSeq():t.fromEntrySeq():ut(t)}function $(t){return null===t||void 0===t?it():u(t)?a(t)?t.entrySeq():t.toIndexedSeq():at(t)}function Y(t){return(null===t||void 0===t?it():u(t)?a(t)?t.entrySeq():t:at(t)).toSetSeq()}z.prototype.toString=function(){return"[Iterator]"},z.KEYS=j,z.VALUES=N,z.ENTRIES=A,z.prototype.inspect=z.prototype.toSource=function(){return this.toString()},z.prototype[F]=function(){return this},e(H,n),H.of=function(){return H(arguments)},H.prototype.toSeq=function(){return this},H.prototype.toString=function(){return this.__toString("Seq {","}")},H.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},H.prototype.__iterate=function(t,e){return st(this,t,e,!0)},H.prototype.__iterator=function(t,e){return lt(this,t,e,!0)},e(G,H),G.prototype.toKeyedSeq=function(){return this},e($,H),$.of=function(){return $(arguments)},$.prototype.toIndexedSeq=function(){return this},$.prototype.toString=function(){return this.__toString("Seq [","]")},$.prototype.__iterate=function(t,e){return st(this,t,e,!1)},$.prototype.__iterator=function(t,e){return lt(this,t,e,!1)},e(Y,H),Y.of=function(){return Y(arguments)},Y.prototype.toSetSeq=function(){return this},H.isSeq=ot,H.Keyed=G,H.Set=Y,H.Indexed=$;var J,Q,X,Z="@@__IMMUTABLE_SEQ__@@";function tt(t){this._array=t,this.size=t.length}function et(t){var e=Object.keys(t);this._object=t,this._keys=e,this.size=e.length}function nt(t){this._iterable=t,this.size=t.length||t.size}function rt(t){this._iterator=t,this._iteratorCache=[]}function ot(t){return!(!t||!t[Z])}function it(){return J||(J=new tt([]))}function ut(t){var e=Array.isArray(t)?new tt(t).fromEntrySeq():q(t)?new rt(t).fromEntrySeq():W(t)?new nt(t).fromEntrySeq():"object"==typeof t?new et(t):void 0;if(!e)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+t);return e}function at(t){var e=ct(t);if(!e)throw new TypeError("Expected Array or iterable object of values: "+t);return e}function ct(t){return K(t)?new tt(t):q(t)?new rt(t):W(t)?new nt(t):void 0}function st(t,e,n,r){var o=t._cache;if(o){for(var i=o.length-1,u=0;u<=i;u++){var a=o[n?i-u:u];if(!1===e(a[1],r?a[0]:u,t))return u+1}return u}return t.__iterateUncached(e,n)}function lt(t,e,n,r){var o=t._cache;if(o){var i=o.length-1,u=0;return new z(function(){var t=o[n?i-u:u];return u++>i?{value:void 0,done:!0}:L(e,r?t[0]:u-1,t[1])})}return t.__iteratorUncached(e,n)}function ft(t,e){return e?function t(e,n,r,o){return Array.isArray(n)?e.call(o,r,$(n).map(function(r,o){return t(e,r,o,n)})):ht(n)?e.call(o,r,G(n).map(function(r,o){return t(e,r,o,n)})):n}(e,t,"",{"":t}):pt(t)}function pt(t){return Array.isArray(t)?$(t).map(pt).toList():ht(t)?G(t).map(pt).toMap():t}function ht(t){return t&&(t.constructor===Object||void 0===t.constructor)}function dt(t,e){if(t===e||t!=t&&e!=e)return!0;if(!t||!e)return!1;if("function"==typeof t.valueOf&&"function"==typeof e.valueOf){if(t=t.valueOf(),e=e.valueOf(),t===e||t!=t&&e!=e)return!0;if(!t||!e)return!1}return!("function"!=typeof t.equals||"function"!=typeof e.equals||!t.equals(e))}function vt(t,e){if(t===e)return!0;if(!u(e)||void 0!==t.size&&void 0!==e.size&&t.size!==e.size||void 0!==t.__hash&&void 0!==e.__hash&&t.__hash!==e.__hash||a(t)!==a(e)||c(t)!==c(e)||l(t)!==l(e))return!1;if(0===t.size&&0===e.size)return!0;var n=!s(t);if(l(t)){var r=t.entries();return e.every(function(t,e){var o=r.next().value;return o&&dt(o[1],t)&&(n||dt(o[0],e))})&&r.next().done}var o=!1;if(void 0===t.size)if(void 0===e.size)"function"==typeof t.cacheResult&&t.cacheResult();else{o=!0;var i=t;t=e,e=i}var f=!0,p=e.__iterate(function(e,r){if(n?!t.has(e):o?!dt(e,t.get(r,g)):!dt(t.get(r,g),e))return f=!1,!1});return f&&t.size===p}function yt(t,e){if(!(this instanceof yt))return new yt(t,e);if(this._value=t,this.size=void 0===e?1/0:Math.max(0,e),0===this.size){if(Q)return Q;Q=this}}function mt(t,e){if(!t)throw new Error(e)}function gt(t,e,n){if(!(this instanceof gt))return new gt(t,e,n);if(mt(0!==n,"Cannot step a Range by 0"),t=t||0,void 0===e&&(e=1/0),n=void 0===n?1:Math.abs(n),e<t&&(n=-n),this._start=t,this._end=e,this._step=n,this.size=Math.max(0,Math.ceil((e-t)/n-1)+1),0===this.size){if(X)return X;X=this}}function _t(){throw TypeError("Abstract")}function bt(){}function wt(){}function St(){}H.prototype[Z]=!0,e(tt,$),tt.prototype.get=function(t,e){return this.has(t)?this._array[O(this,t)]:e},tt.prototype.__iterate=function(t,e){for(var n=this._array,r=n.length-1,o=0;o<=r;o++)if(!1===t(n[e?r-o:o],o,this))return o+1;return o},tt.prototype.__iterator=function(t,e){var n=this._array,r=n.length-1,o=0;return new z(function(){return o>r?{value:void 0,done:!0}:L(t,o,n[e?r-o++:o++])})},e(et,G),et.prototype.get=function(t,e){return void 0===e||this.has(t)?this._object[t]:e},et.prototype.has=function(t){return this._object.hasOwnProperty(t)},et.prototype.__iterate=function(t,e){for(var n=this._object,r=this._keys,o=r.length-1,i=0;i<=o;i++){var u=r[e?o-i:i];if(!1===t(n[u],u,this))return i+1}return i},et.prototype.__iterator=function(t,e){var n=this._object,r=this._keys,o=r.length-1,i=0;return new z(function(){var u=r[e?o-i:i];return i++>o?{value:void 0,done:!0}:L(t,u,n[u])})},et.prototype[d]=!0,e(nt,$),nt.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);var n=this._iterable,r=B(n),o=0;if(q(r))for(var i;!(i=r.next()).done&&!1!==t(i.value,o++,this););return o},nt.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var n=this._iterable,r=B(n);if(!q(r))return new z(U);var o=0;return new z(function(){var e=r.next();return e.done?e:L(t,o++,e.value)})},e(rt,$),rt.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);for(var n,r=this._iterator,o=this._iteratorCache,i=0;i<o.length;)if(!1===t(o[i],i++,this))return i;for(;!(n=r.next()).done;){var u=n.value;if(o[i]=u,!1===t(u,i++,this))break}return i},rt.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var n=this._iterator,r=this._iteratorCache,o=0;return new z(function(){if(o>=r.length){var e=n.next();if(e.done)return e;r[o]=e.value}return L(t,o,r[o++])})},e(yt,$),yt.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},yt.prototype.get=function(t,e){return this.has(t)?this._value:e},yt.prototype.includes=function(t){return dt(this._value,t)},yt.prototype.slice=function(t,e){var n=this.size;return T(t,e,n)?this:new yt(this._value,M(e,n)-C(t,n))},yt.prototype.reverse=function(){return this},yt.prototype.indexOf=function(t){return dt(this._value,t)?0:-1},yt.prototype.lastIndexOf=function(t){return dt(this._value,t)?this.size:-1},yt.prototype.__iterate=function(t,e){for(var n=0;n<this.size;n++)if(!1===t(this._value,n,this))return n+1;return n},yt.prototype.__iterator=function(t,e){var n=this,r=0;return new z(function(){return r<n.size?L(t,r++,n._value):{value:void 0,done:!0}})},yt.prototype.equals=function(t){return t instanceof yt?dt(this._value,t._value):vt(t)},e(gt,$),gt.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},gt.prototype.get=function(t,e){return this.has(t)?this._start+O(this,t)*this._step:e},gt.prototype.includes=function(t){var e=(t-this._start)/this._step;return e>=0&&e<this.size&&e===Math.floor(e)},gt.prototype.slice=function(t,e){return T(t,e,this.size)?this:(t=C(t,this.size),(e=M(e,this.size))<=t?new gt(0,0):new gt(this.get(t,this._end),this.get(e,this._end),this._step))},gt.prototype.indexOf=function(t){var e=t-this._start;if(e%this._step==0){var n=e/this._step;if(n>=0&&n<this.size)return n}return-1},gt.prototype.lastIndexOf=function(t){return this.indexOf(t)},gt.prototype.__iterate=function(t,e){for(var n=this.size-1,r=this._step,o=e?this._start+n*r:this._start,i=0;i<=n;i++){if(!1===t(o,i,this))return i+1;o+=e?-r:r}return i},gt.prototype.__iterator=function(t,e){var n=this.size-1,r=this._step,o=e?this._start+n*r:this._start,i=0;return new z(function(){var u=o;return o+=e?-r:r,i>n?{value:void 0,done:!0}:L(t,i++,u)})},gt.prototype.equals=function(t){return t instanceof gt?this._start===t._start&&this._end===t._end&&this._step===t._step:vt(this,t)},e(_t,n),e(bt,_t),e(wt,_t),e(St,_t),_t.Keyed=bt,_t.Indexed=wt,_t.Set=St;var xt="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(t,e){var n=65535&(t|=0),r=65535&(e|=0);return n*r+((t>>>16)*r+n*(e>>>16)<<16>>>0)|0};function Et(t){return t>>>1&1073741824|3221225471&t}function kt(t){if(!1===t||null===t||void 0===t)return 0;if("function"==typeof t.valueOf&&(!1===(t=t.valueOf())||null===t||void 0===t))return 0;if(!0===t)return 1;var e=typeof t;if("number"===e){if(t!=t||t===1/0)return 0;var n=0|t;for(n!==t&&(n^=4294967295*t);t>4294967295;)n^=t/=4294967295;return Et(n)}if("string"===e)return t.length>Nt?function(t){var e=Dt[t];return void 0===e&&(e=Ot(t),Rt===At&&(Rt=0,Dt={}),Rt++,Dt[t]=e),e}(t):Ot(t);if("function"==typeof t.hashCode)return t.hashCode();if("object"===e)return function(t){var e;if(Mt&&void 0!==(e=Pt.get(t)))return e;if(void 0!==(e=t[jt]))return e;if(!Ct){if(void 0!==(e=t.propertyIsEnumerable&&t.propertyIsEnumerable[jt]))return e;if(void 0!==(e=function(t){if(t&&t.nodeType>0)switch(t.nodeType){case 1:return t.uniqueID;case 9:return t.documentElement&&t.documentElement.uniqueID}}(t)))return e}if(e=++It,1073741824&It&&(It=0),Mt)Pt.set(t,e);else{if(void 0!==Tt&&!1===Tt(t))throw new Error("Non-extensible objects are not allowed as keys.");if(Ct)Object.defineProperty(t,jt,{enumerable:!1,configurable:!1,writable:!1,value:e});else if(void 0!==t.propertyIsEnumerable&&t.propertyIsEnumerable===t.constructor.prototype.propertyIsEnumerable)t.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},t.propertyIsEnumerable[jt]=e;else{if(void 0===t.nodeType)throw new Error("Unable to set a non-enumerable property on object.");t[jt]=e}}return e}(t);if("function"==typeof t.toString)return Ot(t.toString());throw new Error("Value type "+e+" cannot be hashed.")}function Ot(t){for(var e=0,n=0;n<t.length;n++)e=31*e+t.charCodeAt(n)|0;return Et(e)}var Pt,Tt=Object.isExtensible,Ct=function(){try{return Object.defineProperty({},"@",{}),!0}catch(t){return!1}}(),Mt="function"==typeof WeakMap;Mt&&(Pt=new WeakMap);var It=0,jt="__immutablehash__";"function"==typeof Symbol&&(jt=Symbol(jt));var Nt=16,At=255,Rt=0,Dt={};function Ft(t){mt(t!==1/0,"Cannot perform this action with an infinite size.")}function zt(t){return null===t||void 0===t?Xt():Lt(t)&&!l(t)?t:Xt().withMutations(function(e){var n=r(t);Ft(n.size),n.forEach(function(t,n){return e.set(n,t)})})}function Lt(t){return!(!t||!t[Wt])}e(zt,bt),zt.of=function(){var e=t.call(arguments,0);return Xt().withMutations(function(t){for(var n=0;n<e.length;n+=2){if(n+1>=e.length)throw new Error("Missing value for key: "+e[n]);t.set(e[n],e[n+1])}})},zt.prototype.toString=function(){return this.__toString("Map {","}")},zt.prototype.get=function(t,e){return this._root?this._root.get(0,void 0,t,e):e},zt.prototype.set=function(t,e){return Zt(this,t,e)},zt.prototype.setIn=function(t,e){return this.updateIn(t,g,function(){return e})},zt.prototype.remove=function(t){return Zt(this,t,g)},zt.prototype.deleteIn=function(t){return this.updateIn(t,function(){return g})},zt.prototype.update=function(t,e,n){return 1===arguments.length?t(this):this.updateIn([t],e,n)},zt.prototype.updateIn=function(t,e,n){n||(n=e,e=void 0);var r=function t(e,n,r,o){var i=e===g,u=n.next();if(u.done){var a=i?r:e,c=o(a);return c===a?e:c}mt(i||e&&e.set,"invalid keyPath");var s=u.value,l=i?g:e.get(s,g),f=t(l,n,r,o);return f===l?e:f===g?e.remove(s):(i?Xt():e).set(s,f)}(this,nn(t),e,n);return r===g?void 0:r},zt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Xt()},zt.prototype.merge=function(){return re(this,void 0,arguments)},zt.prototype.mergeWith=function(e){var n=t.call(arguments,1);return re(this,e,n)},zt.prototype.mergeIn=function(e){var n=t.call(arguments,1);return this.updateIn(e,Xt(),function(t){return"function"==typeof t.merge?t.merge.apply(t,n):n[n.length-1]})},zt.prototype.mergeDeep=function(){return re(this,oe,arguments)},zt.prototype.mergeDeepWith=function(e){var n=t.call(arguments,1);return re(this,ie(e),n)},zt.prototype.mergeDeepIn=function(e){var n=t.call(arguments,1);return this.updateIn(e,Xt(),function(t){return"function"==typeof t.mergeDeep?t.mergeDeep.apply(t,n):n[n.length-1]})},zt.prototype.sort=function(t){return Ce(Ke(this,t))},zt.prototype.sortBy=function(t,e){return Ce(Ke(this,e,t))},zt.prototype.withMutations=function(t){var e=this.asMutable();return t(e),e.wasAltered()?e.__ensureOwner(this.__ownerID):this},zt.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new x)},zt.prototype.asImmutable=function(){return this.__ensureOwner()},zt.prototype.wasAltered=function(){return this.__altered},zt.prototype.__iterator=function(t,e){return new $t(this,t,e)},zt.prototype.__iterate=function(t,e){var n=this,r=0;return this._root&&this._root.iterate(function(e){return r++,t(e[1],e[0],n)},e),r},zt.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Qt(this.size,this._root,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},zt.isMap=Lt;var Ut,Wt="@@__IMMUTABLE_MAP__@@",qt=zt.prototype;function Bt(t,e){this.ownerID=t,this.entries=e}function Vt(t,e,n){this.ownerID=t,this.bitmap=e,this.nodes=n}function Kt(t,e,n){this.ownerID=t,this.count=e,this.nodes=n}function Ht(t,e,n){this.ownerID=t,this.keyHash=e,this.entries=n}function Gt(t,e,n){this.ownerID=t,this.keyHash=e,this.entry=n}function $t(t,e,n){this._type=e,this._reverse=n,this._stack=t._root&&Jt(t._root)}function Yt(t,e){return L(t,e[0],e[1])}function Jt(t,e){return{node:t,index:0,__prev:e}}function Qt(t,e,n,r){var o=Object.create(qt);return o.size=t,o._root=e,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Xt(){return Ut||(Ut=Qt(0))}function Zt(t,e,n){var r,o;if(t._root){var i=w(_),u=w(b);if(r=te(t._root,t.__ownerID,0,void 0,e,n,i,u),!u.value)return t;o=t.size+(i.value?n===g?-1:1:0)}else{if(n===g)return t;o=1,r=new Bt(t.__ownerID,[[e,n]])}return t.__ownerID?(t.size=o,t._root=r,t.__hash=void 0,t.__altered=!0,t):r?Qt(o,r):Xt()}function te(t,e,n,r,o,i,u,a){return t?t.update(e,n,r,o,i,u,a):i===g?t:(S(a),S(u),new Gt(e,r,[o,i]))}function ee(t){return t.constructor===Gt||t.constructor===Ht}function ne(t,e,n,r,o){if(t.keyHash===r)return new Ht(e,r,[t.entry,o]);var i,u=(0===n?t.keyHash:t.keyHash>>>n)&m,a=(0===n?r:r>>>n)&m,c=u===a?[ne(t,e,n+v,r,o)]:(i=new Gt(e,r,o),u<a?[t,i]:[i,t]);return new Vt(e,1<<u|1<<a,c)}function re(t,e,n){for(var o=[],i=0;i<n.length;i++){var a=n[i],c=r(a);u(a)||(c=c.map(function(t){return ft(t)})),o.push(c)}return ue(t,e,o)}function oe(t,e,n){return t&&t.mergeDeep&&u(e)?t.mergeDeep(e):dt(t,e)?t:e}function ie(t){return function(e,n,r){if(e&&e.mergeDeepWith&&u(n))return e.mergeDeepWith(t,n);var o=t(e,n,r);return dt(e,o)?e:o}}function ue(t,e,n){return 0===(n=n.filter(function(t){return 0!==t.size})).length?t:0!==t.size||t.__ownerID||1!==n.length?t.withMutations(function(t){for(var r=e?function(n,r){t.update(r,g,function(t){return t===g?n:e(t,n,r)})}:function(e,n){t.set(n,e)},o=0;o<n.length;o++)n[o].forEach(r)}):t.constructor(n[0])}function ae(t){return t=(t=(858993459&(t-=t>>1&1431655765))+(t>>2&858993459))+(t>>4)&252645135,t+=t>>8,127&(t+=t>>16)}function ce(t,e,n,r){var o=r?t:E(t);return o[e]=n,o}qt[Wt]=!0,qt.delete=qt.remove,qt.removeIn=qt.deleteIn,Bt.prototype.get=function(t,e,n,r){for(var o=this.entries,i=0,u=o.length;i<u;i++)if(dt(n,o[i][0]))return o[i][1];return r},Bt.prototype.update=function(t,e,n,r,o,i,u){for(var a=o===g,c=this.entries,s=0,l=c.length;s<l&&!dt(r,c[s][0]);s++);var f=s<l;if(f?c[s][1]===o:a)return this;if(S(u),(a||!f)&&S(i),!a||1!==c.length){if(!f&&!a&&c.length>=se)return function(t,e,n,r){t||(t=new x);for(var o=new Gt(t,kt(n),[n,r]),i=0;i<e.length;i++){var u=e[i];o=o.update(t,0,void 0,u[0],u[1])}return o}(t,c,r,o);var p=t&&t===this.ownerID,h=p?c:E(c);return f?a?s===l-1?h.pop():h[s]=h.pop():h[s]=[r,o]:h.push([r,o]),p?(this.entries=h,this):new Bt(t,h)}},Vt.prototype.get=function(t,e,n,r){void 0===e&&(e=kt(n));var o=1<<((0===t?e:e>>>t)&m),i=this.bitmap;return 0==(i&o)?r:this.nodes[ae(i&o-1)].get(t+v,e,n,r)},Vt.prototype.update=function(t,e,n,r,o,i,u){void 0===n&&(n=kt(r));var a=(0===e?n:n>>>e)&m,c=1<<a,s=this.bitmap,l=0!=(s&c);if(!l&&o===g)return this;var f=ae(s&c-1),p=this.nodes,h=l?p[f]:void 0,d=te(h,t,e+v,n,r,o,i,u);if(d===h)return this;if(!l&&d&&p.length>=le)return function(t,e,n,r,o){for(var i=0,u=new Array(y),a=0;0!==n;a++,n>>>=1)u[a]=1&n?e[i++]:void 0;return u[r]=o,new Kt(t,i+1,u)}(t,p,s,a,d);if(l&&!d&&2===p.length&&ee(p[1^f]))return p[1^f];if(l&&d&&1===p.length&&ee(d))return d;var _=t&&t===this.ownerID,b=l?d?s:s^c:s|c,w=l?d?ce(p,f,d,_):function(t,e,n){var r=t.length-1;if(n&&e===r)return t.pop(),t;for(var o=new Array(r),i=0,u=0;u<r;u++)u===e&&(i=1),o[u]=t[u+i];return o}(p,f,_):function(t,e,n,r){var o=t.length+1;if(r&&e+1===o)return t[e]=n,t;for(var i=new Array(o),u=0,a=0;a<o;a++)a===e?(i[a]=n,u=-1):i[a]=t[a+u];return i}(p,f,d,_);return _?(this.bitmap=b,this.nodes=w,this):new Vt(t,b,w)},Kt.prototype.get=function(t,e,n,r){void 0===e&&(e=kt(n));var o=(0===t?e:e>>>t)&m,i=this.nodes[o];return i?i.get(t+v,e,n,r):r},Kt.prototype.update=function(t,e,n,r,o,i,u){void 0===n&&(n=kt(r));var a=(0===e?n:n>>>e)&m,c=o===g,s=this.nodes,l=s[a];if(c&&!l)return this;var f=te(l,t,e+v,n,r,o,i,u);if(f===l)return this;var p=this.count;if(l){if(!f&&--p<fe)return function(t,e,n,r){for(var o=0,i=0,u=new Array(n),a=0,c=1,s=e.length;a<s;a++,c<<=1){var l=e[a];void 0!==l&&a!==r&&(o|=c,u[i++]=l)}return new Vt(t,o,u)}(t,s,p,a)}else p++;var h=t&&t===this.ownerID,d=ce(s,a,f,h);return h?(this.count=p,this.nodes=d,this):new Kt(t,p,d)},Ht.prototype.get=function(t,e,n,r){for(var o=this.entries,i=0,u=o.length;i<u;i++)if(dt(n,o[i][0]))return o[i][1];return r},Ht.prototype.update=function(t,e,n,r,o,i,u){void 0===n&&(n=kt(r));var a=o===g;if(n!==this.keyHash)return a?this:(S(u),S(i),ne(this,t,e,n,[r,o]));for(var c=this.entries,s=0,l=c.length;s<l&&!dt(r,c[s][0]);s++);var f=s<l;if(f?c[s][1]===o:a)return this;if(S(u),(a||!f)&&S(i),a&&2===l)return new Gt(t,this.keyHash,c[1^s]);var p=t&&t===this.ownerID,h=p?c:E(c);return f?a?s===l-1?h.pop():h[s]=h.pop():h[s]=[r,o]:h.push([r,o]),p?(this.entries=h,this):new Ht(t,this.keyHash,h)},Gt.prototype.get=function(t,e,n,r){return dt(n,this.entry[0])?this.entry[1]:r},Gt.prototype.update=function(t,e,n,r,o,i,u){var a=o===g,c=dt(r,this.entry[0]);return(c?o===this.entry[1]:a)?this:(S(u),a?void S(i):c?t&&t===this.ownerID?(this.entry[1]=o,this):new Gt(t,this.keyHash,[r,o]):(S(i),ne(this,t,e,kt(r),[r,o])))},Bt.prototype.iterate=Ht.prototype.iterate=function(t,e){for(var n=this.entries,r=0,o=n.length-1;r<=o;r++)if(!1===t(n[e?o-r:r]))return!1},Vt.prototype.iterate=Kt.prototype.iterate=function(t,e){for(var n=this.nodes,r=0,o=n.length-1;r<=o;r++){var i=n[e?o-r:r];if(i&&!1===i.iterate(t,e))return!1}},Gt.prototype.iterate=function(t,e){return t(this.entry)},e($t,z),$t.prototype.next=function(){for(var t=this._type,e=this._stack;e;){var n,r=e.node,o=e.index++;if(r.entry){if(0===o)return Yt(t,r.entry)}else if(r.entries){if(n=r.entries.length-1,o<=n)return Yt(t,r.entries[this._reverse?n-o:o])}else if(n=r.nodes.length-1,o<=n){var i=r.nodes[this._reverse?n-o:o];if(i){if(i.entry)return Yt(t,i.entry);e=this._stack=Jt(i,e)}continue}e=this._stack=this._stack.__prev}return{value:void 0,done:!0}};var se=y/4,le=y/2,fe=y/4;function pe(t){var e=Se();if(null===t||void 0===t)return e;if(he(t))return t;var n=o(t),r=n.size;return 0===r?e:(Ft(r),r>0&&r<y?we(0,r,v,null,new ye(n.toArray())):e.withMutations(function(t){t.setSize(r),n.forEach(function(e,n){return t.set(n,e)})}))}function he(t){return!(!t||!t[de])}e(pe,wt),pe.of=function(){return this(arguments)},pe.prototype.toString=function(){return this.__toString("List [","]")},pe.prototype.get=function(t,e){if((t=O(this,t))>=0&&t<this.size){var n=ke(this,t+=this._origin);return n&&n.array[t&m]}return e},pe.prototype.set=function(t,e){return function(t,e,n){if((e=O(t,e))!=e)return t;if(e>=t.size||e<0)return t.withMutations(function(t){e<0?Oe(t,e).set(0,n):Oe(t,0,e+1).set(e,n)});e+=t._origin;var r=t._tail,o=t._root,i=w(b);return e>=Te(t._capacity)?r=xe(r,t.__ownerID,0,e,n,i):o=xe(o,t.__ownerID,t._level,e,n,i),i.value?t.__ownerID?(t._root=o,t._tail=r,t.__hash=void 0,t.__altered=!0,t):we(t._origin,t._capacity,t._level,o,r):t}(this,t,e)},pe.prototype.remove=function(t){return this.has(t)?0===t?this.shift():t===this.size-1?this.pop():this.splice(t,1):this},pe.prototype.insert=function(t,e){return this.splice(t,0,e)},pe.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=v,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):Se()},pe.prototype.push=function(){var t=arguments,e=this.size;return this.withMutations(function(n){Oe(n,0,e+t.length);for(var r=0;r<t.length;r++)n.set(e+r,t[r])})},pe.prototype.pop=function(){return Oe(this,0,-1)},pe.prototype.unshift=function(){var t=arguments;return this.withMutations(function(e){Oe(e,-t.length);for(var n=0;n<t.length;n++)e.set(n,t[n])})},pe.prototype.shift=function(){return Oe(this,1)},pe.prototype.merge=function(){return Pe(this,void 0,arguments)},pe.prototype.mergeWith=function(e){var n=t.call(arguments,1);return Pe(this,e,n)},pe.prototype.mergeDeep=function(){return Pe(this,oe,arguments)},pe.prototype.mergeDeepWith=function(e){var n=t.call(arguments,1);return Pe(this,ie(e),n)},pe.prototype.setSize=function(t){return Oe(this,0,t)},pe.prototype.slice=function(t,e){var n=this.size;return T(t,e,n)?this:Oe(this,C(t,n),M(e,n))},pe.prototype.__iterator=function(t,e){var n=0,r=be(this,e);return new z(function(){var e=r();return e===_e?{value:void 0,done:!0}:L(t,n++,e)})},pe.prototype.__iterate=function(t,e){for(var n,r=0,o=be(this,e);(n=o())!==_e&&!1!==t(n,r++,this););return r},pe.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?we(this._origin,this._capacity,this._level,this._root,this._tail,t,this.__hash):(this.__ownerID=t,this)},pe.isList=he;var de="@@__IMMUTABLE_LIST__@@",ve=pe.prototype;function ye(t,e){this.array=t,this.ownerID=e}ve[de]=!0,ve.delete=ve.remove,ve.setIn=qt.setIn,ve.deleteIn=ve.removeIn=qt.removeIn,ve.update=qt.update,ve.updateIn=qt.updateIn,ve.mergeIn=qt.mergeIn,ve.mergeDeepIn=qt.mergeDeepIn,ve.withMutations=qt.withMutations,ve.asMutable=qt.asMutable,ve.asImmutable=qt.asImmutable,ve.wasAltered=qt.wasAltered,ye.prototype.removeBefore=function(t,e,n){if(n===e?1<<e:0===this.array.length)return this;var r=n>>>e&m;if(r>=this.array.length)return new ye([],t);var o,i=0===r;if(e>0){var u=this.array[r];if((o=u&&u.removeBefore(t,e-v,n))===u&&i)return this}if(i&&!o)return this;var a=Ee(this,t);if(!i)for(var c=0;c<r;c++)a.array[c]=void 0;return o&&(a.array[r]=o),a},ye.prototype.removeAfter=function(t,e,n){if(n===(e?1<<e:0)||0===this.array.length)return this;var r,o=n-1>>>e&m;if(o>=this.array.length)return this;if(e>0){var i=this.array[o];if((r=i&&i.removeAfter(t,e-v,n))===i&&o===this.array.length-1)return this}var u=Ee(this,t);return u.array.splice(o+1),r&&(u.array[o]=r),u};var me,ge,_e={};function be(t,e){var n=t._origin,r=t._capacity,o=Te(r),i=t._tail;return u(t._root,t._level,0);function u(t,a,c){return 0===a?function(t,u){var a=u===o?i&&i.array:t&&t.array,c=u>n?0:n-u,s=r-u;return s>y&&(s=y),function(){if(c===s)return _e;var t=e?--s:c++;return a&&a[t]}}(t,c):function(t,o,i){var a,c=t&&t.array,s=i>n?0:n-i>>o,l=1+(r-i>>o);return l>y&&(l=y),function(){for(;;){if(a){var t=a();if(t!==_e)return t;a=null}if(s===l)return _e;var n=e?--l:s++;a=u(c&&c[n],o-v,i+(n<<o))}}}(t,a,c)}}function we(t,e,n,r,o,i,u){var a=Object.create(ve);return a.size=e-t,a._origin=t,a._capacity=e,a._level=n,a._root=r,a._tail=o,a.__ownerID=i,a.__hash=u,a.__altered=!1,a}function Se(){return me||(me=we(0,0,v))}function xe(t,e,n,r,o,i){var u,a=r>>>n&m,c=t&&a<t.array.length;if(!c&&void 0===o)return t;if(n>0){var s=t&&t.array[a],l=xe(s,e,n-v,r,o,i);return l===s?t:((u=Ee(t,e)).array[a]=l,u)}return c&&t.array[a]===o?t:(S(i),u=Ee(t,e),void 0===o&&a===u.array.length-1?u.array.pop():u.array[a]=o,u)}function Ee(t,e){return e&&t&&e===t.ownerID?t:new ye(t?t.array.slice():[],e)}function ke(t,e){if(e>=Te(t._capacity))return t._tail;if(e<1<<t._level+v){for(var n=t._root,r=t._level;n&&r>0;)n=n.array[e>>>r&m],r-=v;return n}}function Oe(t,e,n){void 0!==e&&(e|=0),void 0!==n&&(n|=0);var r=t.__ownerID||new x,o=t._origin,i=t._capacity,u=o+e,a=void 0===n?i:n<0?i+n:o+n;if(u===o&&a===i)return t;if(u>=a)return t.clear();for(var c=t._level,s=t._root,l=0;u+l<0;)s=new ye(s&&s.array.length?[void 0,s]:[],r),l+=1<<(c+=v);l&&(u+=l,o+=l,a+=l,i+=l);for(var f=Te(i),p=Te(a);p>=1<<c+v;)s=new ye(s&&s.array.length?[s]:[],r),c+=v;var h=t._tail,d=p<f?ke(t,a-1):p>f?new ye([],r):h;if(h&&p>f&&u<i&&h.array.length){for(var y=s=Ee(s,r),g=c;g>v;g-=v){var _=f>>>g&m;y=y.array[_]=Ee(y.array[_],r)}y.array[f>>>v&m]=h}if(a<i&&(d=d&&d.removeAfter(r,0,a)),u>=p)u-=p,a-=p,c=v,s=null,d=d&&d.removeBefore(r,0,u);else if(u>o||p<f){for(l=0;s;){var b=u>>>c&m;if(b!==p>>>c&m)break;b&&(l+=(1<<c)*b),c-=v,s=s.array[b]}s&&u>o&&(s=s.removeBefore(r,c,u-l)),s&&p<f&&(s=s.removeAfter(r,c,p-l)),l&&(u-=l,a-=l)}return t.__ownerID?(t.size=a-u,t._origin=u,t._capacity=a,t._level=c,t._root=s,t._tail=d,t.__hash=void 0,t.__altered=!0,t):we(u,a,c,s,d)}function Pe(t,e,n){for(var r=[],i=0,a=0;a<n.length;a++){var c=n[a],s=o(c);s.size>i&&(i=s.size),u(c)||(s=s.map(function(t){return ft(t)})),r.push(s)}return i>t.size&&(t=t.setSize(i)),ue(t,e,r)}function Te(t){return t<y?0:t-1>>>v<<v}function Ce(t){return null===t||void 0===t?je():Me(t)?t:je().withMutations(function(e){var n=r(t);Ft(n.size),n.forEach(function(t,n){return e.set(n,t)})})}function Me(t){return Lt(t)&&l(t)}function Ie(t,e,n,r){var o=Object.create(Ce.prototype);return o.size=t?t.size:0,o._map=t,o._list=e,o.__ownerID=n,o.__hash=r,o}function je(){return ge||(ge=Ie(Xt(),Se()))}function Ne(t,e,n){var r,o,i=t._map,u=t._list,a=i.get(e),c=void 0!==a;if(n===g){if(!c)return t;u.size>=y&&u.size>=2*i.size?(o=u.filter(function(t,e){return void 0!==t&&a!==e}),r=o.toKeyedSeq().map(function(t){return t[0]}).flip().toMap(),t.__ownerID&&(r.__ownerID=o.__ownerID=t.__ownerID)):(r=i.remove(e),o=a===u.size-1?u.pop():u.set(a,void 0))}else if(c){if(n===u.get(a)[1])return t;r=i,o=u.set(a,[e,n])}else r=i.set(e,u.size),o=u.set(u.size,[e,n]);return t.__ownerID?(t.size=r.size,t._map=r,t._list=o,t.__hash=void 0,t):Ie(r,o)}function Ae(t,e){this._iter=t,this._useKeys=e,this.size=t.size}function Re(t){this._iter=t,this.size=t.size}function De(t){this._iter=t,this.size=t.size}function Fe(t){this._iter=t,this.size=t.size}function ze(t){var e=Ze(t);return e._iter=t,e.size=t.size,e.flip=function(){return t},e.reverse=function(){var e=t.reverse.apply(this);return e.flip=function(){return t.reverse()},e},e.has=function(e){return t.includes(e)},e.includes=function(e){return t.has(e)},e.cacheResult=tn,e.__iterateUncached=function(e,n){var r=this;return t.__iterate(function(t,n){return!1!==e(n,t,r)},n)},e.__iteratorUncached=function(e,n){if(e===A){var r=t.__iterator(e,n);return new z(function(){var t=r.next();if(!t.done){var e=t.value[0];t.value[0]=t.value[1],t.value[1]=e}return t})}return t.__iterator(e===N?j:N,n)},e}function Le(t,e,n){var r=Ze(t);return r.size=t.size,r.has=function(e){return t.has(e)},r.get=function(r,o){var i=t.get(r,g);return i===g?o:e.call(n,i,r,t)},r.__iterateUncached=function(r,o){var i=this;return t.__iterate(function(t,o,u){return!1!==r(e.call(n,t,o,u),o,i)},o)},r.__iteratorUncached=function(r,o){var i=t.__iterator(A,o);return new z(function(){var o=i.next();if(o.done)return o;var u=o.value,a=u[0];return L(r,a,e.call(n,u[1],a,t),o)})},r}function Ue(t,e){var n=Ze(t);return n._iter=t,n.size=t.size,n.reverse=function(){return t},t.flip&&(n.flip=function(){var e=ze(t);return e.reverse=function(){return t.flip()},e}),n.get=function(n,r){return t.get(e?n:-1-n,r)},n.has=function(n){return t.has(e?n:-1-n)},n.includes=function(e){return t.includes(e)},n.cacheResult=tn,n.__iterate=function(e,n){var r=this;return t.__iterate(function(t,n){return e(t,n,r)},!n)},n.__iterator=function(e,n){return t.__iterator(e,!n)},n}function We(t,e,n,r){var o=Ze(t);return r&&(o.has=function(r){var o=t.get(r,g);return o!==g&&!!e.call(n,o,r,t)},o.get=function(r,o){var i=t.get(r,g);return i!==g&&e.call(n,i,r,t)?i:o}),o.__iterateUncached=function(o,i){var u=this,a=0;return t.__iterate(function(t,i,c){if(e.call(n,t,i,c))return a++,o(t,r?i:a-1,u)},i),a},o.__iteratorUncached=function(o,i){var u=t.__iterator(A,i),a=0;return new z(function(){for(;;){var i=u.next();if(i.done)return i;var c=i.value,s=c[0],l=c[1];if(e.call(n,l,s,t))return L(o,r?s:a++,l,i)}})},o}function qe(t,e,n,r){var o=t.size;if(void 0!==e&&(e|=0),void 0!==n&&(n===1/0?n=o:n|=0),T(e,n,o))return t;var i=C(e,o),u=M(n,o);if(i!=i||u!=u)return qe(t.toSeq().cacheResult(),e,n,r);var a,c=u-i;c==c&&(a=c<0?0:c);var s=Ze(t);return s.size=0===a?a:t.size&&a||void 0,!r&&ot(t)&&a>=0&&(s.get=function(e,n){return(e=O(this,e))>=0&&e<a?t.get(e+i,n):n}),s.__iterateUncached=function(e,n){var o=this;if(0===a)return 0;if(n)return this.cacheResult().__iterate(e,n);var u=0,c=!0,s=0;return t.__iterate(function(t,n){if(!c||!(c=u++<i))return s++,!1!==e(t,r?n:s-1,o)&&s!==a}),s},s.__iteratorUncached=function(e,n){if(0!==a&&n)return this.cacheResult().__iterator(e,n);var o=0!==a&&t.__iterator(e,n),u=0,c=0;return new z(function(){for(;u++<i;)o.next();if(++c>a)return{value:void 0,done:!0};var t=o.next();return r||e===N?t:L(e,c-1,e===j?void 0:t.value[1],t)})},s}function Be(t,e,n,r){var o=Ze(t);return o.__iterateUncached=function(o,i){var u=this;if(i)return this.cacheResult().__iterate(o,i);var a=!0,c=0;return t.__iterate(function(t,i,s){if(!a||!(a=e.call(n,t,i,s)))return c++,o(t,r?i:c-1,u)}),c},o.__iteratorUncached=function(o,i){var u=this;if(i)return this.cacheResult().__iterator(o,i);var a=t.__iterator(A,i),c=!0,s=0;return new z(function(){var t,i,l;do{if((t=a.next()).done)return r||o===N?t:L(o,s++,o===j?void 0:t.value[1],t);var f=t.value;i=f[0],l=f[1],c&&(c=e.call(n,l,i,u))}while(c);return o===A?t:L(o,i,l,t)})},o}function Ve(t,e,n){var r=Ze(t);return r.__iterateUncached=function(r,o){var i=0,a=!1;return function t(c,s){var l=this;c.__iterate(function(o,c){return(!e||s<e)&&u(o)?t(o,s+1):!1===r(o,n?c:i++,l)&&(a=!0),!a},o)}(t,0),i},r.__iteratorUncached=function(r,o){var i=t.__iterator(r,o),a=[],c=0;return new z(function(){for(;i;){var t=i.next();if(!1===t.done){var s=t.value;if(r===A&&(s=s[1]),e&&!(a.length<e)||!u(s))return n?t:L(r,c++,s,t);a.push(i),i=s.__iterator(r,o)}else i=a.pop()}return{value:void 0,done:!0}})},r}function Ke(t,e,n){e||(e=en);var r=a(t),o=0,i=t.toSeq().map(function(e,r){return[r,e,o++,n?n(e,r,t):e]}).toArray();return i.sort(function(t,n){return e(t[3],n[3])||t[2]-n[2]}).forEach(r?function(t,e){i[e].length=2}:function(t,e){i[e]=t[1]}),r?G(i):c(t)?$(i):Y(i)}function He(t,e,n){if(e||(e=en),n){var r=t.toSeq().map(function(e,r){return[e,n(e,r,t)]}).reduce(function(t,n){return Ge(e,t[1],n[1])?n:t});return r&&r[0]}return t.reduce(function(t,n){return Ge(e,t,n)?n:t})}function Ge(t,e,n){var r=t(n,e);return 0===r&&n!==e&&(void 0===n||null===n||n!=n)||r>0}function $e(t,e,r){var o=Ze(t);return o.size=new tt(r).map(function(t){return t.size}).min(),o.__iterate=function(t,e){for(var n,r=this.__iterator(N,e),o=0;!(n=r.next()).done&&!1!==t(n.value,o++,this););return o},o.__iteratorUncached=function(t,o){var i=r.map(function(t){return t=n(t),B(o?t.reverse():t)}),u=0,a=!1;return new z(function(){var n;return a||(n=i.map(function(t){return t.next()}),a=n.some(function(t){return t.done})),a?{value:void 0,done:!0}:L(t,u++,e.apply(null,n.map(function(t){return t.value})))})},o}function Ye(t,e){return ot(t)?e:t.constructor(e)}function Je(t){if(t!==Object(t))throw new TypeError("Expected [K, V] tuple: "+t)}function Qe(t){return Ft(t.size),k(t)}function Xe(t){return a(t)?r:c(t)?o:i}function Ze(t){return Object.create((a(t)?G:c(t)?$:Y).prototype)}function tn(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):H.prototype.cacheResult.call(this)}function en(t,e){return t>e?1:t<e?-1:0}function nn(t){var e=B(t);if(!e){if(!K(t))throw new TypeError("Expected iterable or array-like: "+t);e=B(n(t))}return e}function rn(t,e){var n,r=function(i){if(i instanceof r)return i;if(!(this instanceof r))return new r(i);if(!n){n=!0;var u=Object.keys(t);!function(t,e){try{e.forEach(function(t,e){Object.defineProperty(t,e,{get:function(){return this.get(e)},set:function(t){mt(this.__ownerID,"Cannot set on an immutable record."),this.set(e,t)}})}.bind(void 0,t))}catch(t){}}(o,u),o.size=u.length,o._name=e,o._keys=u,o._defaultValues=t}this._map=zt(i)},o=r.prototype=Object.create(on);return o.constructor=r,r}e(Ce,zt),Ce.of=function(){return this(arguments)},Ce.prototype.toString=function(){return this.__toString("OrderedMap {","}")},Ce.prototype.get=function(t,e){var n=this._map.get(t);return void 0!==n?this._list.get(n)[1]:e},Ce.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):je()},Ce.prototype.set=function(t,e){return Ne(this,t,e)},Ce.prototype.remove=function(t){return Ne(this,t,g)},Ce.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},Ce.prototype.__iterate=function(t,e){var n=this;return this._list.__iterate(function(e){return e&&t(e[1],e[0],n)},e)},Ce.prototype.__iterator=function(t,e){return this._list.fromEntrySeq().__iterator(t,e)},Ce.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t),n=this._list.__ensureOwner(t);return t?Ie(e,n,t,this.__hash):(this.__ownerID=t,this._map=e,this._list=n,this)},Ce.isOrderedMap=Me,Ce.prototype[d]=!0,Ce.prototype.delete=Ce.prototype.remove,e(Ae,G),Ae.prototype.get=function(t,e){return this._iter.get(t,e)},Ae.prototype.has=function(t){return this._iter.has(t)},Ae.prototype.valueSeq=function(){return this._iter.valueSeq()},Ae.prototype.reverse=function(){var t=this,e=Ue(this,!0);return this._useKeys||(e.valueSeq=function(){return t._iter.toSeq().reverse()}),e},Ae.prototype.map=function(t,e){var n=this,r=Le(this,t,e);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(t,e)}),r},Ae.prototype.__iterate=function(t,e){var n,r=this;return this._iter.__iterate(this._useKeys?function(e,n){return t(e,n,r)}:(n=e?Qe(this):0,function(o){return t(o,e?--n:n++,r)}),e)},Ae.prototype.__iterator=function(t,e){if(this._useKeys)return this._iter.__iterator(t,e);var n=this._iter.__iterator(N,e),r=e?Qe(this):0;return new z(function(){var o=n.next();return o.done?o:L(t,e?--r:r++,o.value,o)})},Ae.prototype[d]=!0,e(Re,$),Re.prototype.includes=function(t){return this._iter.includes(t)},Re.prototype.__iterate=function(t,e){var n=this,r=0;return this._iter.__iterate(function(e){return t(e,r++,n)},e)},Re.prototype.__iterator=function(t,e){var n=this._iter.__iterator(N,e),r=0;return new z(function(){var e=n.next();return e.done?e:L(t,r++,e.value,e)})},e(De,Y),De.prototype.has=function(t){return this._iter.includes(t)},De.prototype.__iterate=function(t,e){var n=this;return this._iter.__iterate(function(e){return t(e,e,n)},e)},De.prototype.__iterator=function(t,e){var n=this._iter.__iterator(N,e);return new z(function(){var e=n.next();return e.done?e:L(t,e.value,e.value,e)})},e(Fe,G),Fe.prototype.entrySeq=function(){return this._iter.toSeq()},Fe.prototype.__iterate=function(t,e){var n=this;return this._iter.__iterate(function(e){if(e){Je(e);var r=u(e);return t(r?e.get(1):e[1],r?e.get(0):e[0],n)}},e)},Fe.prototype.__iterator=function(t,e){var n=this._iter.__iterator(N,e);return new z(function(){for(;;){var e=n.next();if(e.done)return e;var r=e.value;if(r){Je(r);var o=u(r);return L(t,o?r.get(0):r[0],o?r.get(1):r[1],e)}}})},Re.prototype.cacheResult=Ae.prototype.cacheResult=De.prototype.cacheResult=Fe.prototype.cacheResult=tn,e(rn,bt),rn.prototype.toString=function(){return this.__toString(an(this)+" {","}")},rn.prototype.has=function(t){return this._defaultValues.hasOwnProperty(t)},rn.prototype.get=function(t,e){if(!this.has(t))return e;var n=this._defaultValues[t];return this._map?this._map.get(t,n):n},rn.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var t=this.constructor;return t._empty||(t._empty=un(this,Xt()))},rn.prototype.set=function(t,e){if(!this.has(t))throw new Error('Cannot set unknown key "'+t+'" on '+an(this));if(this._map&&!this._map.has(t)){var n=this._defaultValues[t];if(e===n)return this}var r=this._map&&this._map.set(t,e);return this.__ownerID||r===this._map?this:un(this,r)},rn.prototype.remove=function(t){if(!this.has(t))return this;var e=this._map&&this._map.remove(t);return this.__ownerID||e===this._map?this:un(this,e)},rn.prototype.wasAltered=function(){return this._map.wasAltered()},rn.prototype.__iterator=function(t,e){var n=this;return r(this._defaultValues).map(function(t,e){return n.get(e)}).__iterator(t,e)},rn.prototype.__iterate=function(t,e){var n=this;return r(this._defaultValues).map(function(t,e){return n.get(e)}).__iterate(t,e)},rn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map&&this._map.__ensureOwner(t);return t?un(this,e,t):(this.__ownerID=t,this._map=e,this)};var on=rn.prototype;function un(t,e,n){var r=Object.create(Object.getPrototypeOf(t));return r._map=e,r.__ownerID=n,r}function an(t){return t._name||t.constructor.name||"Record"}function cn(t){return null===t||void 0===t?vn():sn(t)&&!l(t)?t:vn().withMutations(function(e){var n=i(t);Ft(n.size),n.forEach(function(t){return e.add(t)})})}function sn(t){return!(!t||!t[fn])}on.delete=on.remove,on.deleteIn=on.removeIn=qt.removeIn,on.merge=qt.merge,on.mergeWith=qt.mergeWith,on.mergeIn=qt.mergeIn,on.mergeDeep=qt.mergeDeep,on.mergeDeepWith=qt.mergeDeepWith,on.mergeDeepIn=qt.mergeDeepIn,on.setIn=qt.setIn,on.update=qt.update,on.updateIn=qt.updateIn,on.withMutations=qt.withMutations,on.asMutable=qt.asMutable,on.asImmutable=qt.asImmutable,e(cn,St),cn.of=function(){return this(arguments)},cn.fromKeys=function(t){return this(r(t).keySeq())},cn.prototype.toString=function(){return this.__toString("Set {","}")},cn.prototype.has=function(t){return this._map.has(t)},cn.prototype.add=function(t){return hn(this,this._map.set(t,!0))},cn.prototype.remove=function(t){return hn(this,this._map.remove(t))},cn.prototype.clear=function(){return hn(this,this._map.clear())},cn.prototype.union=function(){var e=t.call(arguments,0);return 0===(e=e.filter(function(t){return 0!==t.size})).length?this:0!==this.size||this.__ownerID||1!==e.length?this.withMutations(function(t){for(var n=0;n<e.length;n++)i(e[n]).forEach(function(e){return t.add(e)})}):this.constructor(e[0])},cn.prototype.intersect=function(){var e=t.call(arguments,0);if(0===e.length)return this;e=e.map(function(t){return i(t)});var n=this;return this.withMutations(function(t){n.forEach(function(n){e.every(function(t){return t.includes(n)})||t.remove(n)})})},cn.prototype.subtract=function(){var e=t.call(arguments,0);if(0===e.length)return this;e=e.map(function(t){return i(t)});var n=this;return this.withMutations(function(t){n.forEach(function(n){e.some(function(t){return t.includes(n)})&&t.remove(n)})})},cn.prototype.merge=function(){return this.union.apply(this,arguments)},cn.prototype.mergeWith=function(e){var n=t.call(arguments,1);return this.union.apply(this,n)},cn.prototype.sort=function(t){return yn(Ke(this,t))},cn.prototype.sortBy=function(t,e){return yn(Ke(this,e,t))},cn.prototype.wasAltered=function(){return this._map.wasAltered()},cn.prototype.__iterate=function(t,e){var n=this;return this._map.__iterate(function(e,r){return t(r,r,n)},e)},cn.prototype.__iterator=function(t,e){return this._map.map(function(t,e){return e}).__iterator(t,e)},cn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t);return t?this.__make(e,t):(this.__ownerID=t,this._map=e,this)},cn.isSet=sn;var ln,fn="@@__IMMUTABLE_SET__@@",pn=cn.prototype;function hn(t,e){return t.__ownerID?(t.size=e.size,t._map=e,t):e===t._map?t:0===e.size?t.__empty():t.__make(e)}function dn(t,e){var n=Object.create(pn);return n.size=t?t.size:0,n._map=t,n.__ownerID=e,n}function vn(){return ln||(ln=dn(Xt()))}function yn(t){return null===t||void 0===t?wn():mn(t)?t:wn().withMutations(function(e){var n=i(t);Ft(n.size),n.forEach(function(t){return e.add(t)})})}function mn(t){return sn(t)&&l(t)}pn[fn]=!0,pn.delete=pn.remove,pn.mergeDeep=pn.merge,pn.mergeDeepWith=pn.mergeWith,pn.withMutations=qt.withMutations,pn.asMutable=qt.asMutable,pn.asImmutable=qt.asImmutable,pn.__empty=vn,pn.__make=dn,e(yn,cn),yn.of=function(){return this(arguments)},yn.fromKeys=function(t){return this(r(t).keySeq())},yn.prototype.toString=function(){return this.__toString("OrderedSet {","}")},yn.isOrderedSet=mn;var gn,_n=yn.prototype;function bn(t,e){var n=Object.create(_n);return n.size=t?t.size:0,n._map=t,n.__ownerID=e,n}function wn(){return gn||(gn=bn(je()))}function Sn(t){return null===t||void 0===t?Tn():xn(t)?t:Tn().unshiftAll(t)}function xn(t){return!(!t||!t[kn])}_n[d]=!0,_n.__empty=wn,_n.__make=bn,e(Sn,wt),Sn.of=function(){return this(arguments)},Sn.prototype.toString=function(){return this.__toString("Stack [","]")},Sn.prototype.get=function(t,e){var n=this._head;for(t=O(this,t);n&&t--;)n=n.next;return n?n.value:e},Sn.prototype.peek=function(){return this._head&&this._head.value},Sn.prototype.push=function(){if(0===arguments.length)return this;for(var t=this.size+arguments.length,e=this._head,n=arguments.length-1;n>=0;n--)e={value:arguments[n],next:e};return this.__ownerID?(this.size=t,this._head=e,this.__hash=void 0,this.__altered=!0,this):Pn(t,e)},Sn.prototype.pushAll=function(t){if(0===(t=o(t)).size)return this;Ft(t.size);var e=this.size,n=this._head;return t.reverse().forEach(function(t){e++,n={value:t,next:n}}),this.__ownerID?(this.size=e,this._head=n,this.__hash=void 0,this.__altered=!0,this):Pn(e,n)},Sn.prototype.pop=function(){return this.slice(1)},Sn.prototype.unshift=function(){return this.push.apply(this,arguments)},Sn.prototype.unshiftAll=function(t){return this.pushAll(t)},Sn.prototype.shift=function(){return this.pop.apply(this,arguments)},Sn.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Tn()},Sn.prototype.slice=function(t,e){if(T(t,e,this.size))return this;var n=C(t,this.size),r=M(e,this.size);if(r!==this.size)return wt.prototype.slice.call(this,t,e);for(var o=this.size-n,i=this._head;n--;)i=i.next;return this.__ownerID?(this.size=o,this._head=i,this.__hash=void 0,this.__altered=!0,this):Pn(o,i)},Sn.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Pn(this.size,this._head,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},Sn.prototype.__iterate=function(t,e){if(e)return this.reverse().__iterate(t);for(var n=0,r=this._head;r&&!1!==t(r.value,n++,this);)r=r.next;return n},Sn.prototype.__iterator=function(t,e){if(e)return this.reverse().__iterator(t);var n=0,r=this._head;return new z(function(){if(r){var e=r.value;return r=r.next,L(t,n++,e)}return{value:void 0,done:!0}})},Sn.isStack=xn;var En,kn="@@__IMMUTABLE_STACK__@@",On=Sn.prototype;function Pn(t,e,n,r){var o=Object.create(On);return o.size=t,o._head=e,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Tn(){return En||(En=Pn(0))}function Cn(t,e){var n=function(n){t.prototype[n]=e[n]};return Object.keys(e).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach(n),t}On[kn]=!0,On.withMutations=qt.withMutations,On.asMutable=qt.asMutable,On.asImmutable=qt.asImmutable,On.wasAltered=qt.wasAltered,n.Iterator=z,Cn(n,{toArray:function(){Ft(this.size);var t=new Array(this.size||0);return this.valueSeq().__iterate(function(e,n){t[n]=e}),t},toIndexedSeq:function(){return new Re(this)},toJS:function(){return this.toSeq().map(function(t){return t&&"function"==typeof t.toJS?t.toJS():t}).__toJS()},toJSON:function(){return this.toSeq().map(function(t){return t&&"function"==typeof t.toJSON?t.toJSON():t}).__toJS()},toKeyedSeq:function(){return new Ae(this,!0)},toMap:function(){return zt(this.toKeyedSeq())},toObject:function(){Ft(this.size);var t={};return this.__iterate(function(e,n){t[n]=e}),t},toOrderedMap:function(){return Ce(this.toKeyedSeq())},toOrderedSet:function(){return yn(a(this)?this.valueSeq():this)},toSet:function(){return cn(a(this)?this.valueSeq():this)},toSetSeq:function(){return new De(this)},toSeq:function(){return c(this)?this.toIndexedSeq():a(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Sn(a(this)?this.valueSeq():this)},toList:function(){return pe(a(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(t,e){return 0===this.size?t+e:t+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+e},concat:function(){var e=t.call(arguments,0);return Ye(this,function(t,e){var n=a(t),o=[t].concat(e).map(function(t){return u(t)?n&&(t=r(t)):t=n?ut(t):at(Array.isArray(t)?t:[t]),t}).filter(function(t){return 0!==t.size});if(0===o.length)return t;if(1===o.length){var i=o[0];if(i===t||n&&a(i)||c(t)&&c(i))return i}var s=new tt(o);return n?s=s.toKeyedSeq():c(t)||(s=s.toSetSeq()),(s=s.flatten(!0)).size=o.reduce(function(t,e){if(void 0!==t){var n=e.size;if(void 0!==n)return t+n}},0),s}(this,e))},includes:function(t){return this.some(function(e){return dt(e,t)})},entries:function(){return this.__iterator(A)},every:function(t,e){Ft(this.size);var n=!0;return this.__iterate(function(r,o,i){if(!t.call(e,r,o,i))return n=!1,!1}),n},filter:function(t,e){return Ye(this,We(this,t,e,!0))},find:function(t,e,n){var r=this.findEntry(t,e);return r?r[1]:n},forEach:function(t,e){return Ft(this.size),this.__iterate(e?t.bind(e):t)},join:function(t){Ft(this.size),t=void 0!==t?""+t:",";var e="",n=!0;return this.__iterate(function(r){n?n=!1:e+=t,e+=null!==r&&void 0!==r?r.toString():""}),e},keys:function(){return this.__iterator(j)},map:function(t,e){return Ye(this,Le(this,t,e))},reduce:function(t,e,n){var r,o;return Ft(this.size),arguments.length<2?o=!0:r=e,this.__iterate(function(e,i,u){o?(o=!1,r=e):r=t.call(n,r,e,i,u)}),r},reduceRight:function(t,e,n){var r=this.toKeyedSeq().reverse();return r.reduce.apply(r,arguments)},reverse:function(){return Ye(this,Ue(this,!0))},slice:function(t,e){return Ye(this,qe(this,t,e,!0))},some:function(t,e){return!this.every(An(t),e)},sort:function(t){return Ye(this,Ke(this,t))},values:function(){return this.__iterator(N)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(t,e){return k(t?this.toSeq().filter(t,e):this)},countBy:function(t,e){return function(t,e,n){var r=zt().asMutable();return t.__iterate(function(o,i){r.update(e.call(n,o,i,t),0,function(t){return t+1})}),r.asImmutable()}(this,t,e)},equals:function(t){return vt(this,t)},entrySeq:function(){var t=this;if(t._cache)return new tt(t._cache);var e=t.toSeq().map(Nn).toIndexedSeq();return e.fromEntrySeq=function(){return t.toSeq()},e},filterNot:function(t,e){return this.filter(An(t),e)},findEntry:function(t,e,n){var r=n;return this.__iterate(function(n,o,i){if(t.call(e,n,o,i))return r=[o,n],!1}),r},findKey:function(t,e){var n=this.findEntry(t,e);return n&&n[0]},findLast:function(t,e,n){return this.toKeyedSeq().reverse().find(t,e,n)},findLastEntry:function(t,e,n){return this.toKeyedSeq().reverse().findEntry(t,e,n)},findLastKey:function(t,e){return this.toKeyedSeq().reverse().findKey(t,e)},first:function(){return this.find(P)},flatMap:function(t,e){return Ye(this,function(t,e,n){var r=Xe(t);return t.toSeq().map(function(o,i){return r(e.call(n,o,i,t))}).flatten(!0)}(this,t,e))},flatten:function(t){return Ye(this,Ve(this,t,!0))},fromEntrySeq:function(){return new Fe(this)},get:function(t,e){return this.find(function(e,n){return dt(n,t)},void 0,e)},getIn:function(t,e){for(var n,r=this,o=nn(t);!(n=o.next()).done;){var i=n.value;if((r=r&&r.get?r.get(i,g):g)===g)return e}return r},groupBy:function(t,e){return function(t,e,n){var r=a(t),o=(l(t)?Ce():zt()).asMutable();t.__iterate(function(i,u){o.update(e.call(n,i,u,t),function(t){return(t=t||[]).push(r?[u,i]:i),t})});var i=Xe(t);return o.map(function(e){return Ye(t,i(e))})}(this,t,e)},has:function(t){return this.get(t,g)!==g},hasIn:function(t){return this.getIn(t,g)!==g},isSubset:function(t){return t="function"==typeof t.includes?t:n(t),this.every(function(e){return t.includes(e)})},isSuperset:function(t){return(t="function"==typeof t.isSubset?t:n(t)).isSubset(this)},keyOf:function(t){return this.findKey(function(e){return dt(e,t)})},keySeq:function(){return this.toSeq().map(jn).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},lastKeyOf:function(t){return this.toKeyedSeq().reverse().keyOf(t)},max:function(t){return He(this,t)},maxBy:function(t,e){return He(this,e,t)},min:function(t){return He(this,t?Rn(t):zn)},minBy:function(t,e){return He(this,e?Rn(e):zn,t)},rest:function(){return this.slice(1)},skip:function(t){return this.slice(Math.max(0,t))},skipLast:function(t){return Ye(this,this.toSeq().reverse().skip(t).reverse())},skipWhile:function(t,e){return Ye(this,Be(this,t,e,!0))},skipUntil:function(t,e){return this.skipWhile(An(t),e)},sortBy:function(t,e){return Ye(this,Ke(this,e,t))},take:function(t){return this.slice(0,Math.max(0,t))},takeLast:function(t){return Ye(this,this.toSeq().reverse().take(t).reverse())},takeWhile:function(t,e){return Ye(this,function(t,e,n){var r=Ze(t);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var u=0;return t.__iterate(function(t,o,a){return e.call(n,t,o,a)&&++u&&r(t,o,i)}),u},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var u=t.__iterator(A,o),a=!0;return new z(function(){if(!a)return{value:void 0,done:!0};var t=u.next();if(t.done)return t;var o=t.value,c=o[0],s=o[1];return e.call(n,s,c,i)?r===A?t:L(r,c,s,t):(a=!1,{value:void 0,done:!0})})},r}(this,t,e))},takeUntil:function(t,e){return this.takeWhile(An(t),e)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(t){if(t.size===1/0)return 0;var e=l(t),n=a(t),r=e?1:0;return function(t,e){return e=xt(e,3432918353),e=xt(e<<15|e>>>-15,461845907),e=xt(e<<13|e>>>-13,5),e=xt((e=(e+3864292196|0)^t)^e>>>16,2246822507),e=Et((e=xt(e^e>>>13,3266489909))^e>>>16)}(t.__iterate(n?e?function(t,e){r=31*r+Ln(kt(t),kt(e))|0}:function(t,e){r=r+Ln(kt(t),kt(e))|0}:e?function(t){r=31*r+kt(t)|0}:function(t){r=r+kt(t)|0}),r)}(this))}});var Mn=n.prototype;Mn[f]=!0,Mn[F]=Mn.values,Mn.__toJS=Mn.toArray,Mn.__toStringMapper=Dn,Mn.inspect=Mn.toSource=function(){return this.toString()},Mn.chain=Mn.flatMap,Mn.contains=Mn.includes,Cn(r,{flip:function(){return Ye(this,ze(this))},mapEntries:function(t,e){var n=this,r=0;return Ye(this,this.toSeq().map(function(o,i){return t.call(e,[i,o],r++,n)}).fromEntrySeq())},mapKeys:function(t,e){var n=this;return Ye(this,this.toSeq().flip().map(function(r,o){return t.call(e,r,o,n)}).flip())}});var In=r.prototype;function jn(t,e){return e}function Nn(t,e){return[e,t]}function An(t){return function(){return!t.apply(this,arguments)}}function Rn(t){return function(){return-t.apply(this,arguments)}}function Dn(t){return"string"==typeof t?JSON.stringify(t):String(t)}function Fn(){return E(arguments)}function zn(t,e){return t<e?1:t>e?-1:0}function Ln(t,e){return t^e+2654435769+(t<<6)+(t>>2)|0}return In[p]=!0,In[F]=Mn.entries,In.__toJS=Mn.toObject,In.__toStringMapper=function(t,e){return JSON.stringify(e)+": "+Dn(t)},Cn(o,{toKeyedSeq:function(){return new Ae(this,!1)},filter:function(t,e){return Ye(this,We(this,t,e,!1))},findIndex:function(t,e){var n=this.findEntry(t,e);return n?n[0]:-1},indexOf:function(t){var e=this.keyOf(t);return void 0===e?-1:e},lastIndexOf:function(t){var e=this.lastKeyOf(t);return void 0===e?-1:e},reverse:function(){return Ye(this,Ue(this,!1))},slice:function(t,e){return Ye(this,qe(this,t,e,!1))},splice:function(t,e){var n=arguments.length;if(e=Math.max(0|e,0),0===n||2===n&&!e)return this;t=C(t,t<0?this.count():this.size);var r=this.slice(0,t);return Ye(this,1===n?r:r.concat(E(arguments,2),this.slice(t+e)))},findLastIndex:function(t,e){var n=this.findLastEntry(t,e);return n?n[0]:-1},first:function(){return this.get(0)},flatten:function(t){return Ye(this,Ve(this,t,!1))},get:function(t,e){return(t=O(this,t))<0||this.size===1/0||void 0!==this.size&&t>this.size?e:this.find(function(e,n){return n===t},void 0,e)},has:function(t){return(t=O(this,t))>=0&&(void 0!==this.size?this.size===1/0||t<this.size:-1!==this.indexOf(t))},interpose:function(t){return Ye(this,function(t,e){var n=Ze(t);return n.size=t.size&&2*t.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return t.__iterate(function(t,r){return(!i||!1!==n(e,i++,o))&&!1!==n(t,i++,o)},r),i},n.__iteratorUncached=function(n,r){var o,i=t.__iterator(N,r),u=0;return new z(function(){return(!o||u%2)&&(o=i.next()).done?o:u%2?L(n,u++,e):L(n,u++,o.value,o)})},n}(this,t))},interleave:function(){var t=[this].concat(E(arguments)),e=$e(this.toSeq(),$.of,t),n=e.flatten(!0);return e.size&&(n.size=e.size*t.length),Ye(this,n)},keySeq:function(){return gt(0,this.size)},last:function(){return this.get(-1)},skipWhile:function(t,e){return Ye(this,Be(this,t,e,!1))},zip:function(){return Ye(this,$e(this,Fn,[this].concat(E(arguments))))},zipWith:function(t){var e=E(arguments);return e[0]=this,Ye(this,$e(this,t,e))}}),o.prototype[h]=!0,o.prototype[d]=!0,Cn(i,{get:function(t,e){return this.has(t)?t:e},includes:function(t){return this.has(t)},keySeq:function(){return this.valueSeq()}}),i.prototype.has=Mn.includes,i.prototype.contains=i.prototype.includes,Cn(G,r.prototype),Cn($,o.prototype),Cn(Y,i.prototype),Cn(bt,r.prototype),Cn(wt,o.prototype),Cn(St,i.prototype),{Iterable:n,Seq:H,Collection:_t,Map:zt,OrderedMap:Ce,List:pe,Stack:Sn,Set:cn,OrderedSet:yn,Record:rn,Range:gt,Repeat:yt,is:dt,fromJS:ft}}()},function(t,e,n){t.exports={default:n(396),__esModule:!0}},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(400));e.default=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,r.default)(t,o.key,o)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}()},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(170));e.default=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==(void 0===e?"undefined":(0,r.default)(e))&&"function"!=typeof e?t:e}},function(t,e,n){"use strict";e.__esModule=!0;var r=u(n(428)),o=u(n(432)),i=u(n(170));function u(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":(0,i.default)(e)));t.prototype=(0,o.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(r.default?(0,r.default)(t,e):t.__proto__=e)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(133),o=n(93);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(28),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(3),o=n(134),i=n(93),u=n(92)("IE_PROTO"),a=function(){},c=function(){var t,e=n(90)("iframe"),r=i.length;for(e.style.display="none",n(94).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(a.prototype=r(t),n=new a,a.prototype=null,n[u]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(133),o=n(93).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){"use strict";var r=n(4),o=n(9),i=n(8),u=n(7)("species");t.exports=function(t){var e=r[t];i&&e&&!e[u]&&o.f(e,u,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(21),o=n(145),i=n(106),u=n(3),a=n(10),c=n(108),s={},l={};(e=t.exports=function(t,e,n,f,p){var h,d,v,y,m=p?function(){return t}:c(t),g=r(n,f,e?2:1),_=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(h=a(t.length);h>_;_++)if((y=e?g(u(d=t[_])[0],d[1]):g(t[_]))===s||y===l)return y}else for(v=m.call(t);!(d=v.next()).done;)if((y=o(v,g,d.value,e))===s||y===l)return y}).BREAK=s,e.RETURN=l},function(t,e,n){var r=n(14);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(69),o=n(168),i=n(119),u=Object.defineProperty;e.f=n(56)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(70)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(9).f,o=n(16),i=n(7)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(0),o=n(27),i=n(5),u=n(96),a="["+u+"]",c=RegExp("^"+a+a+"*"),s=RegExp(a+a+"*$"),l=function(t,e,n){var o={},a=i(function(){return!!u[t]()||"​"!="​"[t]()}),c=o[t]=a?e(f):u[t];n&&(o[n]=c),r(r.P+r.F*a,"String",o)},f=l.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(s,"")),t};t.exports=l},function(t,e){t.exports={}},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){var r=n(37),o=n(33),i=n(167),u=n(62),a=n(54),c=function(t,e,n){var s,l,f,p=t&c.F,h=t&c.G,d=t&c.S,v=t&c.P,y=t&c.B,m=t&c.W,g=h?o:o[e]||(o[e]={}),_=g.prototype,b=h?r:d?r[e]:(r[e]||{}).prototype;for(s in h&&(n=e),n)(l=!p&&b&&void 0!==b[s])&&a(g,s)||(f=l?b[s]:n[s],g[s]=h&&"function"!=typeof b[s]?n[s]:y&&l?i(f,r):m&&b[s]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[s]=f,t&c.R&&_&&!_[s]&&u(_,s,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){var r=n(55),o=n(89);t.exports=n(56)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(409),o=n(116);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(118)("wks"),o=n(88),i=n(37).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(22);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(22),o=n(7)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){var r=n(63);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(20),o=n(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(35)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(17),o=n(10),i=n(47);t.exports=function(t){return function(e,n,u){var a,c=r(e),s=o(c.length),l=i(u,s);if(t&&n!=n){for(;s>l;)if((a=c[l++])!=a)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(22);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(6),o=n(22),i=n(7)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(7)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},t(i)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(3);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(13),o=n(14),i=n(5),u=n(27),a=n(7);t.exports=function(t,e,n){var c=a(t),s=n(u,c,""[t]),l=s[0],f=s[1];i(function(){var e={};return e[c]=function(){return 7},7!=""[t](e)})&&(o(String.prototype,t,l),r(RegExp.prototype,c,2==e?function(t,e){return f.call(t,this,e)}:function(t){return f.call(t,this)}))}},function(t,e,n){var r=n(3),o=n(12),i=n(7)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||void 0==(n=r(u)[i])?e:o(n)}},function(t,e,n){var r=n(4).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(4),o=n(0),i=n(14),u=n(53),a=n(34),c=n(52),s=n(51),l=n(6),f=n(5),p=n(77),h=n(57),d=n(97);t.exports=function(t,e,n,v,y,m){var g=r[t],_=g,b=y?"set":"add",w=_&&_.prototype,S={},x=function(t){var e=w[t];i(w,t,"delete"==t?function(t){return!(m&&!l(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!l(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof _&&(m||w.forEach&&!f(function(){(new _).entries().next()}))){var E=new _,k=E[b](m?{}:-0,1)!=E,O=f(function(){E.has(1)}),P=p(function(t){new _(t)}),T=!m&&f(function(){for(var t=new _,e=5;e--;)t[b](e,e);return!t.has(-0)});P||((_=e(function(e,n){s(e,_,t);var r=d(new g,e,_);return void 0!=n&&c(n,y,r[b],r),r})).prototype=w,w.constructor=_),(O||T)&&(x("delete"),x("has"),y&&x("get")),(T||k)&&x(b),m&&w.clear&&delete w.clear}else _=v.getConstructor(e,t,y,b),u(_.prototype,n),a.NEED=!0;return h(_,t),S[t]=_,o(o.G+o.W+o.F*(_!=g),S),m||v.setStrong(_,t,y),_}},function(t,e,n){for(var r,o=n(4),i=n(13),u=n(45),a=u("typed_array"),c=u("view"),s=!(!o.ArrayBuffer||!o.DataView),l=s,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,a,!0),i(r.prototype,c,!0)):l=!1;t.exports={ABV:s,CONSTR:l,TYPED:a,VIEW:c}},function(t,e,n){"use strict";t.exports=n(35)||!n(5)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete n(4)[t]})},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";var r=n(0),o=n(12),i=n(21),u=n(52);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,a,c=arguments[1];return o(this),(e=void 0!==c)&&o(c),void 0==t?new this:(n=[],e?(r=0,a=i(c,arguments[2],2),u(t,!1,function(t){n.push(a(t,r++))})):u(t,!1,n.push,n),new this(n))}})}},function(t,e){t.exports=!0},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(6),o=n(4).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(4),o=n(20),i=n(35),u=n(132),a=n(9).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:u.f(t)})}},function(t,e,n){var r=n(72)("keys"),o=n(45);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(4).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(6),o=n(3),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(21)(Function.call,n(18).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(6),o=n(95).set;t.exports=function(t,e,n){var i,u=e.constructor;return u!==n&&"function"==typeof u&&(i=u.prototype)!==n.prototype&&r(i)&&o&&o(t,i),t}},function(t,e,n){"use strict";var r=n(28),o=n(27);t.exports=function(t){var e=String(o(this)),n="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){var r=n(28),o=n(27);t.exports=function(t){return function(e,n){var i,u,a=String(o(e)),c=r(n),s=a.length;return c<0||c>=s?t?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):i:t?a.slice(c,c+2):u-56320+(i-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(35),o=n(0),i=n(14),u=n(13),a=n(59),c=n(103),s=n(57),l=n(19),f=n(7)("iterator"),p=!([].keys&&"next"in[].keys()),h=function(){return this};t.exports=function(t,e,n,d,v,y,m){c(n,e,d);var g,_,b,w=function(t){if(!p&&t in k)return k[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",x="values"==v,E=!1,k=t.prototype,O=k[f]||k["@@iterator"]||v&&k[v],P=O||w(v),T=v?x?w("entries"):P:void 0,C="Array"==e&&k.entries||O;if(C&&(b=l(C.call(new t)))!==Object.prototype&&b.next&&(s(b,S,!0),r||"function"==typeof b[f]||u(b,f,h)),x&&O&&"values"!==O.name&&(E=!0,P=function(){return O.call(this)}),r&&!m||!p&&!E&&k[f]||u(k,f,P),a[e]=P,a[S]=h,v)if(g={values:x?P:w("values"),keys:y?P:w("keys"),entries:T},m)for(_ in g)_ in k||i(k,_,g[_]);else o(o.P+o.F*(p||E),e,g);return g}},function(t,e,n){"use strict";var r=n(48),o=n(44),i=n(57),u={};n(13)(u,n(7)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(76),o=n(27);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){var r=n(7)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(59),o=n(7)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){"use strict";var r=n(9),o=n(44);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(68),o=n(7)("iterator"),i=n(59);t.exports=n(20).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){var r=n(286);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){"use strict";var r=n(11),o=n(47),i=n(10);t.exports=function(t){for(var e=r(this),n=i(e.length),u=arguments.length,a=o(u>1?arguments[1]:void 0,n),c=u>2?arguments[2]:void 0,s=void 0===c?n:o(c,n);s>a;)e[a++]=t;return e}},function(t,e,n){"use strict";var r=n(36),o=n(148),i=n(59),u=n(17);t.exports=n(102)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){var r,o,i,u=n(21),a=n(138),c=n(94),s=n(90),l=n(4),f=l.process,p=l.setImmediate,h=l.clearImmediate,d=l.MessageChannel,v=l.Dispatch,y=0,m={},g=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},_=function(t){g.call(t.data)};p&&h||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return m[++y]=function(){a("function"==typeof t?t:Function(t),e)},r(y),y},h=function(t){delete m[t]},"process"==n(22)(f)?r=function(t){f.nextTick(u(g,t,1))}:v&&v.now?r=function(t){v.now(u(g,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=_,r=u(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",_,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),g.call(t)}}:function(t){setTimeout(u(g,t,1),0)}),t.exports={set:p,clear:h}},function(t,e,n){var r=n(4),o=n(112).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==n(22)(u);t.exports=function(){var t,e,n,s=function(){var r,o;for(c&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(c)n=function(){u.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var l=a.resolve(void 0);n=function(){l.then(s)}}else n=function(){o.call(r,s)};else{var f=!0,p=document.createTextNode("");new i(s).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){"use strict";var r=n(12);t.exports.f=function(t){return new function(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}(t)}},function(t,e,n){"use strict";var r=n(4),o=n(8),i=n(35),u=n(83),a=n(13),c=n(53),s=n(5),l=n(51),f=n(28),p=n(10),h=n(157),d=n(49).f,v=n(9).f,y=n(110),m=n(57),g="prototype",_="Wrong index!",b=r.ArrayBuffer,w=r.DataView,S=r.Math,x=r.RangeError,E=r.Infinity,k=b,O=S.abs,P=S.pow,T=S.floor,C=S.log,M=S.LN2,I=o?"_b":"buffer",j=o?"_l":"byteLength",N=o?"_o":"byteOffset";function A(t,e,n){var r,o,i,u=new Array(n),a=8*n-e-1,c=(1<<a)-1,s=c>>1,l=23===e?P(2,-24)-P(2,-77):0,f=0,p=t<0||0===t&&1/t<0?1:0;for((t=O(t))!=t||t===E?(o=t!=t?1:0,r=c):(r=T(C(t)/M),t*(i=P(2,-r))<1&&(r--,i*=2),(t+=r+s>=1?l/i:l*P(2,1-s))*i>=2&&(r++,i/=2),r+s>=c?(o=0,r=c):r+s>=1?(o=(t*i-1)*P(2,e),r+=s):(o=t*P(2,s-1)*P(2,e),r=0));e>=8;u[f++]=255&o,o/=256,e-=8);for(r=r<<e|o,a+=e;a>0;u[f++]=255&r,r/=256,a-=8);return u[--f]|=128*p,u}function R(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,u=i>>1,a=o-7,c=n-1,s=t[c--],l=127&s;for(s>>=7;a>0;l=256*l+t[c],c--,a-=8);for(r=l&(1<<-a)-1,l>>=-a,a+=e;a>0;r=256*r+t[c],c--,a-=8);if(0===l)l=1-u;else{if(l===i)return r?NaN:s?-E:E;r+=P(2,e),l-=u}return(s?-1:1)*r*P(2,l-e)}function D(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function F(t){return[255&t]}function z(t){return[255&t,t>>8&255]}function L(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function U(t){return A(t,52,8)}function W(t){return A(t,23,4)}function q(t,e,n){v(t[g],e,{get:function(){return this[n]}})}function B(t,e,n,r){var o=h(+n);if(o+e>t[j])throw x(_);var i=t[I]._b,u=o+t[N],a=i.slice(u,u+e);return r?a:a.reverse()}function V(t,e,n,r,o,i){var u=h(+n);if(u+e>t[j])throw x(_);for(var a=t[I]._b,c=u+t[N],s=r(+o),l=0;l<e;l++)a[c+l]=s[i?l:e-l-1]}if(u.ABV){if(!s(function(){b(1)})||!s(function(){new b(-1)})||s(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var K,H=(b=function(t){return l(this,b),new k(h(t))})[g]=k[g],G=d(k),$=0;G.length>$;)(K=G[$++])in b||a(b,K,k[K]);i||(H.constructor=b)}var Y=new w(new b(2)),J=w[g].setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||c(w[g],{setInt8:function(t,e){J.call(this,t,e<<24>>24)},setUint8:function(t,e){J.call(this,t,e<<24>>24)}},!0)}else b=function(t){l(this,b,"ArrayBuffer");var e=h(t);this._b=y.call(new Array(e),0),this[j]=e},w=function(t,e,n){l(this,w,"DataView"),l(t,b,"DataView");var r=t[j],o=f(e);if(o<0||o>r)throw x("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw x("Wrong length!");this[I]=t,this[N]=o,this[j]=n},o&&(q(b,"byteLength","_l"),q(w,"buffer","_b"),q(w,"byteLength","_l"),q(w,"byteOffset","_o")),c(w[g],{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var e=B(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=B(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return D(B(this,4,t,arguments[1]))},getUint32:function(t){return D(B(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(B(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(B(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){V(this,1,t,F,e)},setUint8:function(t,e){V(this,1,t,F,e)},setInt16:function(t,e){V(this,2,t,z,e,arguments[2])},setUint16:function(t,e){V(this,2,t,z,e,arguments[2])},setInt32:function(t,e){V(this,4,t,L,e,arguments[2])},setUint32:function(t,e){V(this,4,t,L,e,arguments[2])},setFloat32:function(t,e){V(this,4,t,W,e,arguments[2])},setFloat64:function(t,e){V(this,8,t,U,e,arguments[2])}});m(b,"ArrayBuffer"),m(w,"DataView"),a(w[g],u.VIEW,!0),e.ArrayBuffer=b,e.DataView=w},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(118)("keys"),o=n(88);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(33),o=n(37),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(87)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(63);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports={}},function(t,e,n){var r=n(69),o=n(408),i=n(124),u=n(117)("IE_PROTO"),a=function(){},c=function(){var t,e=n(169)("iframe"),r=i.length;for(e.style.display="none",n(413).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(a.prototype=r(t),n=new a,a.prototype=null,n[u]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(173),o=n(124);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(55).f,o=n(54),i=n(65)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){e.f=n(65)},function(t,e,n){var r=n(37),o=n(33),i=n(87),u=n(126),a=n(55).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:u.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){"use strict";(function(t,r){var o,i=n(184);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var u=Object(i.a)(o);e.a=u}).call(this,n(71),n(437)(t))},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,u,a=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(a[s]=n[s]);if(r){u=r(n);for(var l=0;l<u.length;l++)i.call(n,u[l])&&(a[u[l]]=n[u[l]])}}return a}},function(t,e,n){t.exports=!n(8)&&!n(5)(function(){return 7!=Object.defineProperty(n(90)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){e.f=n(7)},function(t,e,n){var r=n(16),o=n(17),i=n(73)(!1),u=n(92)("IE_PROTO");t.exports=function(t,e){var n,a=o(t),c=0,s=[];for(n in a)n!=u&&r(a,n)&&s.push(n);for(;e.length>c;)r(a,n=e[c++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(9),o=n(3),i=n(46);t.exports=n(8)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),a=u.length,c=0;a>c;)r.f(t,n=u[c++],e[n]);return t}},function(t,e,n){var r=n(17),o=n(49).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e,n){"use strict";var r=n(46),o=n(74),i=n(67),u=n(11),a=n(66),c=Object.assign;t.exports=!c||n(5)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r})?function(t,e){for(var n=u(t),c=arguments.length,s=1,l=o.f,f=i.f;c>s;)for(var p,h=a(arguments[s++]),d=l?r(h).concat(l(h)):r(h),v=d.length,y=0;v>y;)f.call(h,p=d[y++])&&(n[p]=h[p]);return n}:c},function(t,e,n){"use strict";var r=n(12),o=n(6),i=n(138),u=[].slice,a={};t.exports=Function.bind||function(t){var e=r(this),n=u.call(arguments,1),c=function(){var r=n.concat(u.call(arguments));return this instanceof c?function(t,e,n){if(!(e in a)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";a[e]=Function("F,a","return new F("+r.join(",")+")")}return a[e](t,n)}(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(c.prototype=e.prototype),c}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(4).parseInt,o=n(58).trim,i=n(96),u=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(u.test(n)?16:10))}:r},function(t,e,n){var r=n(4).parseFloat,o=n(58).trim;t.exports=1/r(n(96)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(22);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(6),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(99),o=Math.pow,i=o(2,-52),u=o(2,-23),a=o(2,127)*(2-u),c=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=Math.abs(t),s=r(t);return o<c?s*function(t){return t+1/i-1/i}(o/c/u)*c*u:(n=(e=(1+u/i)*o)-(e-o))>a||n!=n?s*(1/0):s*n}},function(t,e,n){var r=n(3);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(12),o=n(11),i=n(66),u=n(10);t.exports=function(t,e,n,a,c){r(e);var s=o(t),l=i(s),f=u(s.length),p=c?f-1:0,h=c?-1:1;if(n<2)for(;;){if(p in l){a=l[p],p+=h;break}if(p+=h,c?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;c?p>=0:f>p;p+=h)p in l&&(a=e(a,l[p],p,s));return a}},function(t,e,n){"use strict";var r=n(11),o=n(47),i=n(10);t.exports=[].copyWithin||function(t,e){var n=r(this),u=i(n.length),a=o(t,u),c=o(e,u),s=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===s?u:o(s,u))-c,u-a),f=1;for(c<a&&a<c+l&&(f=-1,c+=l-1,a+=l-1);l-- >0;)c in n?n[a]=n[c]:delete n[a],a+=f,c+=f;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){n(8)&&"g"!=/./g.flags&&n(9).f(RegExp.prototype,"flags",{configurable:!0,get:n(78)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r=n(3),o=n(6),i=n(114);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(153),o=n(60);t.exports=n(82)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(o(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(o(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(9).f,o=n(48),i=n(53),u=n(21),a=n(51),c=n(52),s=n(102),l=n(148),f=n(50),p=n(8),h=n(34).fastKey,d=n(60),v=p?"_s":"size",y=function(t,e){var n,r=h(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,s){var l=t(function(t,r){a(t,l,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,void 0!=r&&c(r,n,t[s],t)});return i(l.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=d(this,e),r=y(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(t){d(this,e);for(var n,r=u(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!y(d(this,e),t)}}),p&&r(l.prototype,"size",{get:function(){return d(this,e)[v]}}),l},def:function(t,e,n){var r,o,i=y(t,e);return i?i.v=n:(t._l=i={i:o=h(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:y,setStrong:function(t,e,n){s(t,e,function(t,n){this._t=d(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?l(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,l(1))},n?"entries":"values",!n,!0),f(e)}}},function(t,e,n){"use strict";var r=n(153),o=n(60);t.exports=n(82)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,o=n(30)(0),i=n(14),u=n(34),a=n(136),c=n(156),s=n(6),l=n(5),f=n(60),p=u.getWeak,h=Object.isExtensible,d=c.ufstore,v={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(s(t)){var e=p(t);return!0===e?d(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(f(this,"WeakMap"),t,e)}},g=t.exports=n(82)("WeakMap",y,m,c,!0,!0);l(function(){return 7!=(new g).set((Object.freeze||Object)(v),7).get(v)})&&(a((r=c.getConstructor(y,"WeakMap")).prototype,m),u.NEED=!0,o(["delete","has","get","set"],function(t){var e=g.prototype,n=e[t];i(e,t,function(e,o){if(s(e)&&!h(e)){this._f||(this._f=new r);var i=this._f[t](e,o);return"set"==t?this:i}return n.call(this,e,o)})}))},function(t,e,n){"use strict";var r=n(53),o=n(34).getWeak,i=n(3),u=n(6),a=n(51),c=n(52),s=n(30),l=n(16),f=n(60),p=s(5),h=s(6),d=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},m=function(t,e){return p(t.a,function(t){return t[0]===e})};y.prototype={get:function(t){var e=m(this,t);if(e)return e[1]},has:function(t){return!!m(this,t)},set:function(t,e){var n=m(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=h(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var s=t(function(t,r){a(t,s,e,"_i"),t._t=e,t._i=d++,t._l=void 0,void 0!=r&&c(r,n,t[i],t)});return r(s.prototype,{delete:function(t){if(!u(t))return!1;var n=o(t);return!0===n?v(f(this,e)).delete(t):n&&l(n,this._i)&&delete n[this._i]},has:function(t){if(!u(t))return!1;var n=o(t);return!0===n?v(f(this,e)).has(t):n&&l(n,this._i)}}),s},def:function(t,e,n){var r=o(i(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){var r=n(28),o=n(10);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){var r=n(49),o=n(74),i=n(3),u=n(4).Reflect;t.exports=u&&u.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){"use strict";var r=n(75),o=n(6),i=n(10),u=n(21),a=n(7)("isConcatSpreadable");t.exports=function t(e,n,c,s,l,f,p,h){for(var d,v,y=l,m=0,g=!!p&&u(p,h,3);m<s;){if(m in c){if(d=g?g(c[m],m,n):c[m],v=!1,o(d)&&(v=void 0!==(v=d[a])?!!v:r(d)),v&&f>0)y=t(e,n,d,i(d.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();e[y]=d}y++}m++}return y}},function(t,e,n){var r=n(10),o=n(98),i=n(27);t.exports=function(t,e,n,u){var a=String(i(t)),c=a.length,s=void 0===n?" ":String(n),l=r(e);if(l<=c||""==s)return a;var f=l-c,p=o.call(s,Math.ceil(f/s.length));return p.length>f&&(p=p.slice(0,f)),u?p+a:a+p}},function(t,e,n){var r=n(46),o=n(17),i=n(67).f;t.exports=function(t){return function(e){for(var n,u=o(e),a=r(u),c=a.length,s=0,l=[];c>s;)i.call(u,n=a[s++])&&l.push(t?[n,u[n]]:u[n]);return l}}},function(t,e,n){var r=n(68),o=n(163);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,e,n){var r=n(52);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e){t.exports=Math.scale||function(t,e,n,r,o){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-e)*(o-r)/(n-e)+r}},function(t,e,n){var r=n(116);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(54),o=n(165),i=n(117)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(399);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){t.exports=!n(56)&&!n(70)(function(){return 7!=Object.defineProperty(n(169)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(63),o=n(37).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){"use strict";e.__esModule=!0;var r=u(n(403)),o=u(n(418)),i="function"==typeof o.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":typeof t};function u(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof o.default&&"symbol"===i(r.default)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":void 0===t?"undefined":i(t)}},function(t,e,n){"use strict";var r=n(87),o=n(61),i=n(172),u=n(62),a=n(121),c=n(407),s=n(125),l=n(166),f=n(65)("iterator"),p=!([].keys&&"next"in[].keys()),h=function(){return this};t.exports=function(t,e,n,d,v,y,m){c(n,e,d);var g,_,b,w=function(t){if(!p&&t in k)return k[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",x="values"==v,E=!1,k=t.prototype,O=k[f]||k["@@iterator"]||v&&k[v],P=O||w(v),T=v?x?w("entries"):P:void 0,C="Array"==e&&k.entries||O;if(C&&(b=l(C.call(new t)))!==Object.prototype&&b.next&&(s(b,S,!0),r||"function"==typeof b[f]||u(b,f,h)),x&&O&&"values"!==O.name&&(E=!0,P=function(){return O.call(this)}),r&&!m||!p&&!E&&k[f]||u(k,f,P),a[e]=P,a[S]=h,v)if(g={values:x?P:w("values"),keys:y?P:w("keys"),entries:T},m)for(_ in g)_ in k||i(k,_,g[_]);else o(o.P+o.F*(p||E),e,g);return g}},function(t,e,n){t.exports=n(62)},function(t,e,n){var r=n(54),o=n(64),i=n(410)(!1),u=n(117)("IE_PROTO");t.exports=function(t,e){var n,a=o(t),c=0,s=[];for(n in a)n!=u&&r(a,n)&&s.push(n);for(;e.length>c;)r(a,n=e[c++])&&(~i(s,n)||s.push(n));return s}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(173),o=n(124).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(128),o=n(89),i=n(64),u=n(119),a=n(54),c=n(168),s=Object.getOwnPropertyDescriptor;e.f=n(56)?s:function(t,e){if(t=i(t),e=u(e,!0),c)try{return s(t,e)}catch(t){}if(a(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){"use strict";e.__esModule=!0;e.addLeadingSlash=function(t){return"/"===t.charAt(0)?t:"/"+t},e.stripLeadingSlash=function(t){return"/"===t.charAt(0)?t.substr(1):t};var r=e.hasBasename=function(t,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(t)};e.stripBasename=function(t,e){return r(t,e)?t.substr(e.length):t},e.stripTrailingSlash=function(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t},e.parsePath=function(t){var e=t||"/",n="",r="",o=e.indexOf("#");-1!==o&&(r=e.substr(o),e=e.substr(0,o));var i=e.indexOf("?");return-1!==i&&(n=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===n?"":n,hash:"#"===r?"":r}},e.createPath=function(t){var e=t.pathname,n=t.search,r=t.hash,o=e||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return t&&"@@redux/INIT"===t.type?"initialState argument passed to createStore":"previous state received by the reducer"},t.exports=e.default},function(t,e,n){"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(191)},function(t,e,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,u=Object.getOwnPropertyNames,a=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,s=Object.getPrototypeOf,l=s&&s(Object);t.exports=function t(e,n,f){if("string"!=typeof n){if(l){var p=s(n);p&&p!==l&&t(e,p,f)}var h=u(n);a&&(h=h.concat(a(n)));for(var d=0;d<h.length;++d){var v=h[d];if(!(r[v]||o[v]||f&&f[v])){var y=c(n,v);try{i(e,v,y)}catch(t){}}}return e}return e}},function(t,e,n){"use strict";(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.a=n}).call(this,n(71))},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";e.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=f(n(178)),u=f(n(24)),a=n(438),c=n(179),s=f(n(441)),l=n(442);function f(t){return t&&t.__esModule?t:{default:t}}var p=function(){try{return window.history.state||{}}catch(t){return{}}};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,u.default)(l.canUseDOM,"Browser history needs a DOM");var e=window.history,n=(0,l.supportsHistory)(),f=!(0,l.supportsPopStateOnHashChange)(),h=t.forceRefresh,d=void 0!==h&&h,v=t.getUserConfirmation,y=void 0===v?l.getConfirmation:v,m=t.keyLength,g=void 0===m?6:m,_=t.basename?(0,c.stripTrailingSlash)((0,c.addLeadingSlash)(t.basename)):"",b=function(t){var e=t||{},n=e.key,r=e.state,o=window.location,u=o.pathname+o.search+o.hash;return(0,i.default)(!_||(0,c.hasBasename)(u,_),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+u+'" to begin with "'+_+'".'),_&&(u=(0,c.stripBasename)(u,_)),(0,a.createLocation)(u,r,n)},w=function(){return Math.random().toString(36).substr(2,g)},S=(0,s.default)(),x=function(t){o(D,t),D.length=e.length,S.notifyListeners(D.location,D.action)},E=function(t){(0,l.isExtraneousPopstateEvent)(t)||P(b(t.state))},k=function(){P(b(p()))},O=!1,P=function(t){O?(O=!1,x()):S.confirmTransitionTo(t,"POP",y,function(e){e?x({action:"POP",location:t}):T(t)})},T=function(t){var e=D.location,n=M.indexOf(e.key);-1===n&&(n=0);var r=M.indexOf(t.key);-1===r&&(r=0);var o=n-r;o&&(O=!0,j(o))},C=b(p()),M=[C.key],I=function(t){return _+(0,c.createPath)(t)},j=function(t){e.go(t)},N=0,A=function(t){1===(N+=t)?((0,l.addEventListener)(window,"popstate",E),f&&(0,l.addEventListener)(window,"hashchange",k)):0===N&&((0,l.removeEventListener)(window,"popstate",E),f&&(0,l.removeEventListener)(window,"hashchange",k))},R=!1,D={length:e.length,action:"POP",location:C,createHref:I,push:function(t,o){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var u=(0,a.createLocation)(t,o,w(),D.location);S.confirmTransitionTo(u,"PUSH",y,function(t){if(t){var r=I(u),o=u.key,a=u.state;if(n)if(e.pushState({key:o,state:a},null,r),d)window.location.href=r;else{var c=M.indexOf(D.location.key),s=M.slice(0,-1===c?0:c+1);s.push(u.key),M=s,x({action:"PUSH",location:u})}else(0,i.default)(void 0===a,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(t,o){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var u=(0,a.createLocation)(t,o,w(),D.location);S.confirmTransitionTo(u,"REPLACE",y,function(t){if(t){var r=I(u),o=u.key,a=u.state;if(n)if(e.replaceState({key:o,state:a},null,r),d)window.location.replace(r);else{var c=M.indexOf(D.location.key);-1!==c&&(M[c]=u.key),x({action:"REPLACE",location:u})}else(0,i.default)(void 0===a,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:j,goBack:function(){return j(-1)},goForward:function(){return j(1)},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=S.setPrompt(t);return R||(A(1),R=!0),function(){return R&&(R=!1,A(-1)),e()}},listen:function(t){var e=S.appendListener(t);return A(1),function(){A(-1),e()}}};return D}},function(t,e,n){"use strict";function r(t,e){return t===e}function o(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,n=null,o=null;return function(){return function(t,e,n){if(null===e||null===n||e.length!==n.length)return!1;for(var r=e.length,o=0;o<r;o++)if(!t(e[o],n[o]))return!1;return!0}(e,n,arguments)||(o=t.apply(null,arguments)),n=arguments,o}}function i(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(){for(var e=arguments.length,r=Array(e),i=0;i<e;i++)r[i]=arguments[i];var u=0,a=r.pop(),c=function(t){var e=Array.isArray(t[0])?t[0]:t;if(!e.every(function(t){return"function"==typeof t})){var n=e.map(function(t){return typeof t}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return e}(r),s=t.apply(void 0,[function(){return u++,a.apply(null,arguments)}].concat(n)),l=o(function(){for(var t=[],e=c.length,n=0;n<e;n++)t.push(c[n].apply(null,arguments));return s.apply(null,t)});return l.resultFunc=a,l.recomputations=function(){return u},l.resetRecomputations=function(){return u=0},l}}e.__esModule=!0,e.defaultMemoize=o,e.createSelectorCreator=i,e.createStructuredSelector=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u;if("object"!=typeof t)throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof t);var n=Object.keys(t);return e(n.map(function(e){return t[e]}),function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return e.reduce(function(t,e,r){return t[n[r]]=e,t},{})})};var u=e.createSelector=i(o)},function(t,e,n){var r=n(443);t.exports=d,t.exports.parse=i,t.exports.compile=function(t,e){return c(i(t,e))},t.exports.tokensToFunction=c,t.exports.tokensToRegExp=h;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(t,e){for(var n,r=[],i=0,u=0,a="",c=e&&e.delimiter||"/";null!=(n=o.exec(t));){var f=n[0],p=n[1],h=n.index;if(a+=t.slice(u,h),u=h+f.length,p)a+=p[1];else{var d=t[u],v=n[2],y=n[3],m=n[4],g=n[5],_=n[6],b=n[7];a&&(r.push(a),a="");var w=null!=v&&null!=d&&d!==v,S="+"===_||"*"===_,x="?"===_||"*"===_,E=n[2]||c,k=m||g;r.push({name:y||i++,prefix:v||"",delimiter:E,optional:x,repeat:S,partial:w,asterisk:!!b,pattern:k?l(k):b?".*":"[^"+s(E)+"]+?"})}}return u<t.length&&(a+=t.substr(u)),a&&r.push(a),r}function u(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function a(t){return encodeURI(t).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function c(t){for(var e=new Array(t.length),n=0;n<t.length;n++)"object"==typeof t[n]&&(e[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,o){for(var i="",c=n||{},s=(o||{}).pretty?u:encodeURIComponent,l=0;l<t.length;l++){var f=t[l];if("string"!=typeof f){var p,h=c[f.name];if(null==h){if(f.optional){f.partial&&(i+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(r(h)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var d=0;d<h.length;d++){if(p=s(h[d]),!e[l].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");i+=(0===d?f.prefix:f.delimiter)+p}}else{if(p=f.asterisk?a(h):s(h),!e[l].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');i+=f.prefix+p}}else i+=f}return i}}function s(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function f(t,e){return t.keys=e,t}function p(t){return t.sensitive?"":"i"}function h(t,e,n){r(e)||(n=e||n,e=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,u="",a=0;a<t.length;a++){var c=t[a];if("string"==typeof c)u+=s(c);else{var l=s(c.prefix),h="(?:"+c.pattern+")";e.push(c),c.repeat&&(h+="(?:"+l+h+")*"),u+=h=c.optional?c.partial?l+"("+h+")?":"(?:"+l+"("+h+"))?":l+"("+h+")"}}var d=s(n.delimiter||"/"),v=u.slice(-d.length)===d;return o||(u=(v?u.slice(0,-d.length):u)+"(?:"+d+"(?=$))?"),u+=i?"$":o&&v?"":"(?="+d+"|$)",f(new RegExp("^"+u,p(n)),e)}function d(t,e,n){return r(e)||(n=e||n,e=[]),n=n||{},t instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(t,e)}(t,e):r(t)?function(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(d(t[o],e,n).source);return f(new RegExp("(?:"+r.join("|")+")",p(n)),e)}(t,e,n):function(t,e,n){return h(i(t,n),e,n)}(t,e,n)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.combineReducers=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(444));e.combineReducers=r.default},,function(t,e,n){"use strict";
/** @license React v16.5.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(130),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,u=o?Symbol.for("react.portal"):60106,a=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.async_mode"):60111,h=o?Symbol.for("react.forward_ref"):60112;o&&Symbol.for("react.placeholder");var d="function"==typeof Symbol&&Symbol.iterator;function v(t){for(var e=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(t,e,n,r,o,i,u,a){if(!t){if(t=void 0,void 0===e)t=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,u,a],s=0;(t=Error(e.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw t.framesToPop=1,t}}(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(t,e,n){this.props=t,this.context=e,this.refs=m,this.updater=n||y}function _(){}function b(t,e,n){this.props=t,this.context=e,this.refs=m,this.updater=n||y}g.prototype.isReactComponent={},g.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t&&v("85"),this.updater.enqueueSetState(this,t,e,"setState")},g.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},_.prototype=g.prototype;var w=b.prototype=new _;w.constructor=b,r(w,g.prototype),w.isPureReactComponent=!0;var S={current:null,currentDispatcher:null},x=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,n){var r=void 0,o={},u=null,a=null;if(null!=e)for(r in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(u=""+e.key),e)x.call(e,r)&&!E.hasOwnProperty(r)&&(o[r]=e[r]);var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){for(var s=Array(c),l=0;l<c;l++)s[l]=arguments[l+2];o.children=s}if(t&&t.defaultProps)for(r in c=t.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:i,type:t,key:u,ref:a,props:o,_owner:S.current}}function O(t){return"object"==typeof t&&null!==t&&t.$$typeof===i}var P=/\/+/g,T=[];function C(t,e,n,r){if(T.length){var o=T.pop();return o.result=t,o.keyPrefix=e,o.func=n,o.context=r,o.count=0,o}return{result:t,keyPrefix:e,func:n,context:r,count:0}}function M(t){t.result=null,t.keyPrefix=null,t.func=null,t.context=null,t.count=0,10>T.length&&T.push(t)}function I(t,e,n){return null==t?0:function t(e,n,r,o){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var c=!1;if(null===e)c=!0;else switch(a){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case i:case u:c=!0}}if(c)return r(o,e,""===n?"."+j(e,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(e))for(var s=0;s<e.length;s++){var l=n+j(a=e[s],s);c+=t(a,l,r,o)}else if(l=null===e||"object"!=typeof e?null:"function"==typeof(l=d&&e[d]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),s=0;!(a=e.next()).done;)c+=t(a=a.value,l=n+j(a,s++),r,o);else"object"===a&&v("31","[object Object]"==(r=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":r,"");return c}(t,"",e,n)}function j(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})}(t.key):e.toString(36)}function N(t,e){t.func.call(t.context,e,t.count++)}function A(t,e,n){var r=t.result,o=t.keyPrefix;t=t.func.call(t.context,e,t.count++),Array.isArray(t)?R(t,r,n,function(t){return t}):null!=t&&(O(t)&&(t=function(t,e){return{$$typeof:i,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(t,o+(!t.key||e&&e.key===t.key?"":(""+t.key).replace(P,"$&/")+"/")+n)),r.push(t))}function R(t,e,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),I(t,A,e=C(e,i,r,o)),M(e)}var D={Children:{map:function(t,e,n){if(null==t)return t;var r=[];return R(t,r,null,e,n),r},forEach:function(t,e,n){if(null==t)return t;I(t,N,e=C(null,null,e,n)),M(e)},count:function(t){return I(t,function(){return null},null)},toArray:function(t){var e=[];return R(t,e,null,function(t){return t}),e},only:function(t){return O(t)||v("143"),t}},createRef:function(){return{current:null}},Component:g,PureComponent:b,createContext:function(t,e){return void 0===e&&(e=null),(t={$$typeof:f,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,Provider:null,Consumer:null,unstable_read:null}).Provider={$$typeof:l,_context:t},t.Consumer=t,t.unstable_read=function(t,e){var n=S.currentDispatcher;return null===n&&v("277"),n.readContext(t,e)}.bind(null,t),t},forwardRef:function(t){return{$$typeof:h,render:t}},Fragment:a,StrictMode:c,unstable_AsyncMode:p,unstable_Profiler:s,createElement:k,cloneElement:function(t,e,n){(null===t||void 0===t)&&v("267",t);var o=void 0,u=r({},t.props),a=t.key,c=t.ref,s=t._owner;if(null!=e){void 0!==e.ref&&(c=e.ref,s=S.current),void 0!==e.key&&(a=""+e.key);var l=void 0;for(o in t.type&&t.type.defaultProps&&(l=t.type.defaultProps),e)x.call(e,o)&&!E.hasOwnProperty(o)&&(u[o]=void 0===e[o]&&void 0!==l?l[o]:e[o])}if(1===(o=arguments.length-2))u.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];u.children=l}return{$$typeof:i,type:t.type,key:a,ref:c,props:u,_owner:s}},createFactory:function(t){var e=k.bind(null,t);return e.type=t,e},isValidElement:O,version:"16.5.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:r}},F={default:D},z=F&&D||F;t.exports=z.default||z},function(t,e,n){"use strict";
/** @license React v16.5.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(130),i=n(192);function u(t){for(var e=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(t,e,n,r,o,i,u,a){if(!t){if(t=void 0,void 0===e)t=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,u,a],s=0;(t=Error(e.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw t.framesToPop=1,t}}(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||u("227");var a=!1,c=null,s=!1,l=null,f={onError:function(t){a=!0,c=t}};function p(t,e,n,r,o,i,u,s,l){a=!1,c=null,function(t,e,n,r,o,i,u,a,c){var s=Array.prototype.slice.call(arguments,3);try{e.apply(n,s)}catch(t){this.onError(t)}}.apply(f,arguments)}var h=null,d={};function v(){if(h)for(var t in d){var e=d[t],n=h.indexOf(t);if(-1<n||u("96",t),!m[n])for(var r in e.extractEvents||u("97",t),m[n]=e,n=e.eventTypes){var o=void 0,i=n[r],a=e,c=r;g.hasOwnProperty(c)&&u("99",c),g[c]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&y(s[o],a,c);o=!0}else i.registrationName?(y(i.registrationName,a,c),o=!0):o=!1;o||u("98",r,t)}}}function y(t,e,n){_[t]&&u("100",t),_[t]=e,b[t]=e.eventTypes[n].dependencies}var m=[],g={},_={},b={},w=null,S=null,x=null;function E(t,e,n,r){e=t.type||"unknown-event",t.currentTarget=x(r),function(t,e,n,r,o,i,f,h,d){if(p.apply(this,arguments),a){if(a){var v=c;a=!1,c=null}else u("198"),v=void 0;s||(s=!0,l=v)}}(e,n,void 0,t),t.currentTarget=null}function k(t,e){return null==e&&u("30"),null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}function O(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}var P=null;function T(t,e){if(t){var n=t._dispatchListeners,r=t._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!t.isPropagationStopped();o++)E(t,e,n[o],r[o]);else n&&E(t,e,n,r);t._dispatchListeners=null,t._dispatchInstances=null,t.isPersistent()||t.constructor.release(t)}}function C(t){return T(t,!0)}function M(t){return T(t,!1)}var I=function(t){h&&u("101"),h=Array.prototype.slice.call(t),v()},j=function(t){var e,n=!1;for(e in t)if(t.hasOwnProperty(e)){var r=t[e];d.hasOwnProperty(e)&&d[e]===r||(d[e]&&u("102",e),d[e]=r,n=!0)}n&&v()};function N(t,e){var n=t.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}return t?null:(n&&"function"!=typeof n&&u("231",e,typeof n),n)}function A(t,e){if(null!==t&&(P=k(P,t)),t=P,P=null,t&&(O(t,e?C:M),P&&u("95"),s))throw e=l,s=!1,l=null,e}var R=Math.random().toString(36).slice(2),D="__reactInternalInstance$"+R,F="__reactEventHandlers$"+R;function z(t){if(t[D])return t[D];for(;!t[D];){if(!t.parentNode)return null;t=t.parentNode}return 7===(t=t[D]).tag||8===t.tag?t:null}function L(t){return!(t=t[D])||7!==t.tag&&8!==t.tag?null:t}function U(t){if(7===t.tag||8===t.tag)return t.stateNode;u("33")}function W(t){return t[F]||null}function q(t){do{t=t.return}while(t&&7!==t.tag);return t||null}function B(t,e,n){(e=N(t,n.dispatchConfig.phasedRegistrationNames[e]))&&(n._dispatchListeners=k(n._dispatchListeners,e),n._dispatchInstances=k(n._dispatchInstances,t))}function V(t){if(t&&t.dispatchConfig.phasedRegistrationNames){for(var e=t._targetInst,n=[];e;)n.push(e),e=q(e);for(e=n.length;0<e--;)B(n[e],"captured",t);for(e=0;e<n.length;e++)B(n[e],"bubbled",t)}}function K(t,e,n){t&&n&&n.dispatchConfig.registrationName&&(e=N(t,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,e),n._dispatchInstances=k(n._dispatchInstances,t))}function H(t){t&&t.dispatchConfig.registrationName&&K(t._targetInst,null,t)}function G(t){O(t,V)}var $=!("undefined"==typeof window||!window.document||!window.document.createElement);function Y(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var J={animationend:Y("Animation","AnimationEnd"),animationiteration:Y("Animation","AnimationIteration"),animationstart:Y("Animation","AnimationStart"),transitionend:Y("Transition","TransitionEnd")},Q={},X={};function Z(t){if(Q[t])return Q[t];if(!J[t])return t;var e,n=J[t];for(e in n)if(n.hasOwnProperty(e)&&e in X)return Q[t]=n[e];return t}$&&(X=document.createElement("div").style,"AnimationEvent"in window||(delete J.animationend.animation,delete J.animationiteration.animation,delete J.animationstart.animation),"TransitionEvent"in window||delete J.transitionend.transition);var tt=Z("animationend"),et=Z("animationiteration"),nt=Z("animationstart"),rt=Z("transitionend"),ot="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),it=null,ut=null,at=null;function ct(){if(at)return at;var t,e,n=ut,r=n.length,o="value"in it?it.value:it.textContent,i=o.length;for(t=0;t<r&&n[t]===o[t];t++);var u=r-t;for(e=1;e<=u&&n[r-e]===o[i-e];e++);return at=o.slice(t,1<e?1-e:void 0)}function st(){return!0}function lt(){return!1}function ft(t,e,n,r){for(var o in this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n,t=this.constructor.Interface)t.hasOwnProperty(o)&&((e=t[o])?this[o]=e(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?st:lt,this.isPropagationStopped=lt,this}function pt(t,e,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}function ht(t){t instanceof this||u("279"),t.destructor(),10>this.eventPool.length&&this.eventPool.push(t)}function dt(t){t.eventPool=[],t.getPooled=pt,t.release=ht}o(ft.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=st)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=st)},persist:function(){this.isPersistent=st},isPersistent:lt,destructor:function(){var t,e=this.constructor.Interface;for(t in e)this[t]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=lt,this._dispatchInstances=this._dispatchListeners=null}}),ft.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ft.extend=function(t){function e(){}function n(){return r.apply(this,arguments)}var r=this;e.prototype=r.prototype;var i=new e;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,t),n.extend=r.extend,dt(n),n},dt(ft);var vt=ft.extend({data:null}),yt=ft.extend({data:null}),mt=[9,13,27,32],gt=$&&"CompositionEvent"in window,_t=null;$&&"documentMode"in document&&(_t=document.documentMode);var bt=$&&"TextEvent"in window&&!_t,wt=$&&(!gt||_t&&8<_t&&11>=_t),St=String.fromCharCode(32),xt={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Et=!1;function kt(t,e){switch(t){case"keyup":return-1!==mt.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ot(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Pt=!1;var Tt={eventTypes:xt,extractEvents:function(t,e,n,r){var o=void 0,i=void 0;if(gt)t:{switch(t){case"compositionstart":o=xt.compositionStart;break t;case"compositionend":o=xt.compositionEnd;break t;case"compositionupdate":o=xt.compositionUpdate;break t}o=void 0}else Pt?kt(t,n)&&(o=xt.compositionEnd):"keydown"===t&&229===n.keyCode&&(o=xt.compositionStart);return o?(wt&&"ko"!==n.locale&&(Pt||o!==xt.compositionStart?o===xt.compositionEnd&&Pt&&(i=ct()):(ut="value"in(it=r)?it.value:it.textContent,Pt=!0)),o=vt.getPooled(o,e,n,r),i?o.data=i:null!==(i=Ot(n))&&(o.data=i),G(o),i=o):i=null,(t=bt?function(t,e){switch(t){case"compositionend":return Ot(e);case"keypress":return 32!==e.which?null:(Et=!0,St);case"textInput":return(t=e.data)===St&&Et?null:t;default:return null}}(t,n):function(t,e){if(Pt)return"compositionend"===t||!gt&&kt(t,e)?(t=ct(),at=ut=it=null,Pt=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return wt&&"ko"!==e.locale?null:e.data;default:return null}}(t,n))?((e=yt.getPooled(xt.beforeInput,e,n,r)).data=t,G(e)):e=null,null===i?e:null===e?i:[i,e]}},Ct=null,Mt=null,It=null;function jt(t){if(t=S(t)){"function"!=typeof Ct&&u("280");var e=w(t.stateNode);Ct(t.stateNode,t.type,e)}}function Nt(t){Mt?It?It.push(t):It=[t]:Mt=t}function At(){if(Mt){var t=Mt,e=It;if(It=Mt=null,jt(t),e)for(t=0;t<e.length;t++)jt(e[t])}}function Rt(t,e){return t(e)}function Dt(t,e,n){return t(e,n)}function Ft(){}var zt=!1;function Lt(t,e){if(zt)return t(e);zt=!0;try{return Rt(t,e)}finally{zt=!1,(null!==Mt||null!==It)&&(Ft(),At())}}var Ut={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wt(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Ut[t.type]:"textarea"===e}function qt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}function Bt(t){if(!$)return!1;var e=(t="on"+t)in document;return e||((e=document.createElement("div")).setAttribute(t,"return;"),e="function"==typeof e[t]),e}function Vt(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function Kt(t){t._valueTracker||(t._valueTracker=function(t){var e=Vt(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return o.call(this)},set:function(t){r=""+t,i.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function Ht(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Vt(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}var Gt=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,$t=/^(.*)[\\\/]/,Yt="function"==typeof Symbol&&Symbol.for,Jt=Yt?Symbol.for("react.element"):60103,Qt=Yt?Symbol.for("react.portal"):60106,Xt=Yt?Symbol.for("react.fragment"):60107,Zt=Yt?Symbol.for("react.strict_mode"):60108,te=Yt?Symbol.for("react.profiler"):60114,ee=Yt?Symbol.for("react.provider"):60109,ne=Yt?Symbol.for("react.context"):60110,re=Yt?Symbol.for("react.async_mode"):60111,oe=Yt?Symbol.for("react.forward_ref"):60112,ie=Yt?Symbol.for("react.placeholder"):60113,ue="function"==typeof Symbol&&Symbol.iterator;function ae(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=ue&&t[ue]||t["@@iterator"])?t:null}function ce(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case re:return"AsyncMode";case Xt:return"Fragment";case Qt:return"Portal";case te:return"Profiler";case Zt:return"StrictMode";case ie:return"Placeholder"}if("object"==typeof t){switch(t.$$typeof){case ne:return"Context.Consumer";case ee:return"Context.Provider";case oe:return""!==(t=(t=t.render).displayName||t.name||"")?"ForwardRef("+t+")":"ForwardRef"}if("function"==typeof t.then&&(t=1===t._reactStatus?t._reactResult:null))return ce(t)}return null}function se(t){var e="";do{t:switch(t.tag){case 4:case 0:case 1:case 2:case 3:case 7:case 10:var n=t._debugOwner,r=t._debugSource,o=ce(t.type),i=null;n&&(i=ce(n.type)),n=o,o="",r?o=" (at "+r.fileName.replace($t,"")+":"+r.lineNumber+")":i&&(o=" (created by "+i+")"),i="\n    in "+(n||"Unknown")+o;break t;default:i=""}e+=i,t=t.return}while(t);return e}var le=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,fe=Object.prototype.hasOwnProperty,pe={},he={};function de(t,e,n,r,o){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=t,this.type=e}var ve={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){ve[t]=new de(t,0,!1,t,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];ve[e]=new de(e,1,!1,t[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(t){ve[t]=new de(t,2,!1,t.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){ve[t]=new de(t,2,!1,t,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){ve[t]=new de(t,3,!1,t.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(t){ve[t]=new de(t,3,!0,t,null)}),["capture","download"].forEach(function(t){ve[t]=new de(t,4,!1,t,null)}),["cols","rows","size","span"].forEach(function(t){ve[t]=new de(t,6,!1,t,null)}),["rowSpan","start"].forEach(function(t){ve[t]=new de(t,5,!1,t.toLowerCase(),null)});var ye=/[\-:]([a-z])/g;function me(t){return t[1].toUpperCase()}function ge(t,e,n,r){var o=ve.hasOwnProperty(e)?ve[e]:null;(null!==o?0===o.type:!r&&(2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])))||(function(t,e,n,r){if(null===e||void 0===e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,o,r)&&(n=null),r||null===o?function(t){return!!fe.call(he,t)||!fe.call(pe,t)&&(le.test(t)?he[t]=!0:(pe[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):o.mustUseProperty?t[o.propertyName]=null===n?3!==o.type&&"":n:(e=o.attributeName,r=o.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}function _e(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function be(t,e){var n=e.checked;return o({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function we(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=_e(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function Se(t,e){null!=(e=e.checked)&&ge(t,"checked",e,!1)}function xe(t,e){Se(t,e);var n=_e(e.value),r=e.type;if(null!=n)"number"===r?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===r||"reset"===r)return void t.removeAttribute("value");e.hasOwnProperty("value")?ke(t,e.type,n):e.hasOwnProperty("defaultValue")&&ke(t,e.type,_e(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function Ee(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,r=t.value,n||e===r||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!t.defaultChecked,t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function ke(t,e,n){"number"===e&&t.ownerDocument.activeElement===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(ye,me);ve[e]=new de(e,1,!1,t,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(ye,me);ve[e]=new de(e,1,!1,t,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(ye,me);ve[e]=new de(e,1,!1,t,"http://www.w3.org/XML/1998/namespace")}),ve.tabIndex=new de("tabIndex",1,!1,"tabindex",null);var Oe={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Pe(t,e,n){return(t=ft.getPooled(Oe.change,t,e,n)).type="change",Nt(n),G(t),t}var Te=null,Ce=null;function Me(t){A(t,!1)}function Ie(t){if(Ht(U(t)))return t}function je(t,e){if("change"===t)return e}var Ne=!1;function Ae(){Te&&(Te.detachEvent("onpropertychange",Re),Ce=Te=null)}function Re(t){"value"===t.propertyName&&Ie(Ce)&&Lt(Me,t=Pe(Ce,t,qt(t)))}function De(t,e,n){"focus"===t?(Ae(),Ce=n,(Te=e).attachEvent("onpropertychange",Re)):"blur"===t&&Ae()}function Fe(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Ie(Ce)}function ze(t,e){if("click"===t)return Ie(e)}function Le(t,e){if("input"===t||"change"===t)return Ie(e)}$&&(Ne=Bt("input")&&(!document.documentMode||9<document.documentMode));var Ue={eventTypes:Oe,_isInputEventSupported:Ne,extractEvents:function(t,e,n,r){var o=e?U(e):window,i=void 0,u=void 0,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type?i=je:Wt(o)?Ne?i=Le:(i=Fe,u=De):(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=ze),i&&(i=i(t,e)))return Pe(i,n,r);u&&u(t,o,e),"blur"===t&&(t=o._wrapperState)&&t.controlled&&"number"===o.type&&ke(o,"number",o.value)}},We=ft.extend({view:null,detail:null}),qe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Be(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=qe[t])&&!!e[t]}function Ve(){return Be}var Ke=0,He=0,Ge=!1,$e=!1,Ye=We.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ve,button:null,buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)},movementX:function(t){if("movementX"in t)return t.movementX;var e=Ke;return Ke=t.screenX,Ge?"mousemove"===t.type?t.screenX-e:0:(Ge=!0,0)},movementY:function(t){if("movementY"in t)return t.movementY;var e=He;return He=t.screenY,$e?"mousemove"===t.type?t.screenY-e:0:($e=!0,0)}}),Je=Ye.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Qe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xe={eventTypes:Qe,extractEvents:function(t,e,n,r){var o="mouseover"===t||"pointerover"===t,i="mouseout"===t||"pointerout"===t;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=e,e=(e=n.relatedTarget||n.toElement)?z(e):null):i=null,i===e)return null;var u=void 0,a=void 0,c=void 0,s=void 0;"mouseout"===t||"mouseover"===t?(u=Ye,a=Qe.mouseLeave,c=Qe.mouseEnter,s="mouse"):"pointerout"!==t&&"pointerover"!==t||(u=Je,a=Qe.pointerLeave,c=Qe.pointerEnter,s="pointer");var l=null==i?o:U(i);if(o=null==e?o:U(e),(t=u.getPooled(a,i,n,r)).type=s+"leave",t.target=l,t.relatedTarget=o,(n=u.getPooled(c,e,n,r)).type=s+"enter",n.target=o,n.relatedTarget=l,r=e,i&&r)t:{for(o=r,s=0,u=e=i;u;u=q(u))s++;for(u=0,c=o;c;c=q(c))u++;for(;0<s-u;)e=q(e),s--;for(;0<u-s;)o=q(o),u--;for(;s--;){if(e===o||e===o.alternate)break t;e=q(e),o=q(o)}e=null}else e=null;for(o=e,e=[];i&&i!==o&&(null===(s=i.alternate)||s!==o);)e.push(i),i=q(i);for(i=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)i.push(r),r=q(r);for(r=0;r<e.length;r++)K(e[r],"bubbled",t);for(r=i.length;0<r--;)K(i[r],"captured",n);return[t,n]}},Ze=Object.prototype.hasOwnProperty;function tn(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function en(t,e){if(tn(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Ze.call(e,n[r])||!tn(t[n[r]],e[n[r]]))return!1;return!0}function nn(t){var e=t;if(t.alternate)for(;e.return;)e=e.return;else{if(0!=(2&e.effectTag))return 1;for(;e.return;)if(0!=(2&(e=e.return).effectTag))return 1}return 5===e.tag?2:3}function rn(t){2!==nn(t)&&u("188")}function on(t){if(!(t=function(t){var e=t.alternate;if(!e)return 3===(e=nn(t))&&u("188"),1===e?null:t;for(var n=t,r=e;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return rn(o),t;if(a===r)return rn(o),e;a=a.sibling}u("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var c=o.child;c;){if(c===n){a=!0,n=o,r=i;break}if(c===r){a=!0,r=o,n=i;break}c=c.sibling}if(!a){for(c=i.child;c;){if(c===n){a=!0,n=i,r=o;break}if(c===r){a=!0,r=i,n=o;break}c=c.sibling}a||u("189")}}n.alternate!==r&&u("190")}return 5!==n.tag&&u("188"),n.stateNode.current===n?t:e}(t)))return null;for(var e=t;;){if(7===e.tag||8===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}var un=ft.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=ft.extend({clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),cn=We.extend({relatedTarget:null});function sn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}var ln={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pn=We.extend({key:function(t){if(t.key){var e=ln[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=sn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?fn[t.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ve,charCode:function(t){return"keypress"===t.type?sn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?sn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),hn=Ye.extend({dataTransfer:null}),dn=We.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ve}),vn=ft.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yn=Ye.extend({deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),mn=[["abort","abort"],[tt,"animationEnd"],[et,"animationIteration"],[nt,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[rt,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],gn={},_n={};function bn(t,e){var n=t[0],r="on"+((t=t[1])[0].toUpperCase()+t.slice(1));e={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:e},gn[t]=e,_n[n]=e}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(t){bn(t,!0)}),mn.forEach(function(t){bn(t,!1)});var wn={eventTypes:gn,isInteractiveTopLevelEventType:function(t){return void 0!==(t=_n[t])&&!0===t.isInteractive},extractEvents:function(t,e,n,r){var o=_n[t];if(!o)return null;switch(t){case"keypress":if(0===sn(n))return null;case"keydown":case"keyup":t=pn;break;case"blur":case"focus":t=cn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":t=Ye;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":t=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":t=dn;break;case tt:case et:case nt:t=un;break;case rt:t=vn;break;case"scroll":t=We;break;case"wheel":t=yn;break;case"copy":case"cut":case"paste":t=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":t=Je;break;default:t=ft}return G(e=t.getPooled(o,e,n,r)),e}},Sn=wn.isInteractiveTopLevelEventType,xn=[];function En(t){var e=t.targetInst,n=e;do{if(!n){t.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=5!==r.tag?null:r.stateNode.containerInfo))break;t.ancestors.push(n),n=z(r)}while(n);for(n=0;n<t.ancestors.length;n++){e=t.ancestors[n];var o=qt(t.nativeEvent);r=t.topLevelType;for(var i=t.nativeEvent,u=null,a=0;a<m.length;a++){var c=m[a];c&&(c=c.extractEvents(r,e,i,o))&&(u=k(u,c))}A(u,!1)}}var kn=!0;function On(t,e){if(!e)return null;var n=(Sn(t)?Tn:Cn).bind(null,t);e.addEventListener(t,n,!1)}function Pn(t,e){if(!e)return null;var n=(Sn(t)?Tn:Cn).bind(null,t);e.addEventListener(t,n,!0)}function Tn(t,e){Dt(Cn,t,e)}function Cn(t,e){if(kn){var n=qt(e);if(null===(n=z(n))||"number"!=typeof n.tag||2===nn(n)||(n=null),xn.length){var r=xn.pop();r.topLevelType=t,r.nativeEvent=e,r.targetInst=n,t=r}else t={topLevelType:t,nativeEvent:e,targetInst:n,ancestors:[]};try{Lt(En,t)}finally{t.topLevelType=null,t.nativeEvent=null,t.targetInst=null,t.ancestors.length=0,10>xn.length&&xn.push(t)}}}var Mn={},In=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function Nn(t){return Object.prototype.hasOwnProperty.call(t,jn)||(t[jn]=In++,Mn[t[jn]]={}),Mn[t[jn]]}function An(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function Rn(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Dn(t,e){var n,r=Rn(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=Rn(r)}}function Fn(){for(var t=window,e=An();e instanceof t.HTMLIFrameElement;){try{t=e.contentDocument.defaultView}catch(t){break}e=An(t.document)}return e}function zn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var Ln=$&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,qn=null,Bn=null,Vn=!1;function Kn(t,e){var n=e.window===e?e.document:9===e.nodeType?e:e.ownerDocument;return Vn||null==Wn||Wn!==An(n)?null:("selectionStart"in(n=Wn)&&zn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(t=ft.getPooled(Un.select,qn,t,e)).type="select",t.target=Wn,G(t),t))}var Hn={eventTypes:Un,extractEvents:function(t,e,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){t:{i=Nn(i),o=b.onSelect;for(var u=0;u<o.length;u++){var a=o[u];if(!i.hasOwnProperty(a)||!i[a]){i=!1;break t}}i=!0}o=!i}if(o)return null;switch(i=e?U(e):window,t){case"focus":(Wt(i)||"true"===i.contentEditable)&&(Wn=i,qn=e,Bn=null);break;case"blur":Bn=qn=Wn=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Kn(n,r);case"selectionchange":if(Ln)break;case"keydown":case"keyup":return Kn(n,r)}return null}};function Gn(t,e){return t=o({children:void 0},e),(e=function(t){var e="";return r.Children.forEach(t,function(t){null!=t&&(e+=t)}),e}(e.children))&&(t.children=e),t}function $n(t,e,n,r){if(t=t.options,e){e={};for(var o=0;o<n.length;o++)e["$"+n[o]]=!0;for(n=0;n<t.length;n++)o=e.hasOwnProperty("$"+t[n].value),t[n].selected!==o&&(t[n].selected=o),o&&r&&(t[n].defaultSelected=!0)}else{for(n=""+_e(n),e=null,o=0;o<t.length;o++){if(t[o].value===n)return t[o].selected=!0,void(r&&(t[o].defaultSelected=!0));null!==e||t[o].disabled||(e=t[o])}null!==e&&(e.selected=!0)}}function Yn(t,e){return null!=e.dangerouslySetInnerHTML&&u("91"),o({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function Jn(t,e){var n=e.value;null==n&&(n=e.defaultValue,null!=(e=e.children)&&(null!=n&&u("92"),Array.isArray(e)&&(1>=e.length||u("93"),e=e[0]),n=e),null==n&&(n="")),t._wrapperState={initialValue:_e(n)}}function Qn(t,e){var n=_e(e.value);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&(t.defaultValue=n)),null!=e.defaultValue&&(t.defaultValue=""+_e(e.defaultValue))}function Xn(t){var e=t.textContent;e===t._wrapperState.initialValue&&(t.value=e)}I("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=W,S=L,x=U,j({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Xe,ChangeEventPlugin:Ue,SelectEventPlugin:Hn,BeforeInputEventPlugin:Tt});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function tr(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?tr(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var nr=void 0,rr=function(t){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,r,o){MSApp.execUnsafeLocalFunction(function(){return t(e,n)})}:t}(function(t,e){if(t.namespaceURI!==Zn.svg||"innerHTML"in t)t.innerHTML=e;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+e+"</svg>",e=nr.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}});function or(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ur=["Webkit","ms","Moz","O"];function ar(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=e[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||ir.hasOwnProperty(o)&&ir[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?t.setProperty(n,o):t[n]=o}}Object.keys(ir).forEach(function(t){ur.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),ir[e]=ir[t]})});var cr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function sr(t,e){e&&(cr[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML)&&u("137",t,""),null!=e.dangerouslySetInnerHTML&&(null!=e.children&&u("60"),"object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML||u("61")),null!=e.style&&"object"!=typeof e.style&&u("62",""))}function lr(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function fr(t,e){var n=Nn(t=9===t.nodeType||11===t.nodeType?t:t.ownerDocument);e=b[e];for(var r=0;r<e.length;r++){var o=e[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Pn("scroll",t);break;case"focus":case"blur":Pn("focus",t),Pn("blur",t),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Bt(o)&&Pn(o,t);break;case"invalid":case"submit":case"reset":break;default:-1===ot.indexOf(o)&&On(o,t)}n[o]=!0}}}function pr(){}var hr=null,dr=null;function vr(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function yr(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}function mr(t){for(t=t.nextSibling;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t}function gr(t){for(t=t.firstChild;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t}new Set;var _r=[],br=-1;function wr(t){0>br||(t.current=_r[br],_r[br]=null,br--)}function Sr(t,e){_r[++br]=t.current,t.current=e}var xr={},Er={current:xr},kr={current:!1},Or=xr;function Pr(t,e){var n=t.type.contextTypes;if(!n)return xr;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=e[o];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=i),i}function Tr(t){return null!==(t=t.childContextTypes)&&void 0!==t}function Cr(t){wr(kr),wr(Er)}function Mr(t){wr(kr),wr(Er)}function Ir(t,e,n){Er.current!==xr&&u("168"),Sr(Er,e),Sr(kr,n)}function jr(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in t||u("108",ce(e)||"Unknown",i);return o({},n,r)}function Nr(t){var e=t.stateNode;return e=e&&e.__reactInternalMemoizedMergedChildContext||xr,Or=Er.current,Sr(Er,e),Sr(kr,kr.current),!0}function Ar(t,e,n){var r=t.stateNode;r||u("169"),n?(e=jr(t,e,Or),r.__reactInternalMemoizedMergedChildContext=e,wr(kr),wr(Er),Sr(Er,e)):wr(kr),Sr(kr,n)}var Rr=null,Dr=null;function Fr(t){return function(e){try{return t(e)}catch(t){}}}function zr(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=e,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Lr(t){return"object"==typeof(t=t.prototype)&&null!==t&&"object"==typeof t.isReactComponent&&null!==t.isReactComponent}function Ur(t,e,n){var r=t.alternate;return null===r?((r=new zr(t.tag,e,t.key,t.mode)).type=t.type,r.stateNode=t.stateNode,r.alternate=t,t.alternate=r):(r.pendingProps=e,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=t.childExpirationTime,r.expirationTime=e!==t.pendingProps?n:t.expirationTime,r.child=t.child,r.memoizedProps=t.memoizedProps,r.memoizedState=t.memoizedState,r.updateQueue=t.updateQueue,r.firstContextDependency=t.firstContextDependency,r.sibling=t.sibling,r.index=t.index,r.ref=t.ref,r}function Wr(t,e,n){var r=t.type,o=t.key;t=t.props;var i=void 0;if("function"==typeof r)i=Lr(r)?2:4;else if("string"==typeof r)i=7;else t:switch(r){case Xt:return qr(t.children,e,n,o);case re:i=10,e|=3;break;case Zt:i=10,e|=2;break;case te:return(r=new zr(15,t,o,4|e)).type=te,r.expirationTime=n,r;case ie:i=16;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case ee:i=12;break t;case ne:i=11;break t;case oe:i=13;break t;default:if("function"==typeof r.then){i=4;break t}}u("130",null==r?r:typeof r,"")}return(e=new zr(i,t,o,e)).type=r,e.expirationTime=n,e}function qr(t,e,n,r){return(t=new zr(9,t,r,e)).expirationTime=n,t}function Br(t,e,n){return(t=new zr(8,t,null,e)).expirationTime=n,t}function Vr(t,e,n){return(e=new zr(6,null!==t.children?t.children:[],t.key,e)).expirationTime=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Kr(t,e){t.didError=!1;var n=t.earliestPendingTime;0===n?t.earliestPendingTime=t.latestPendingTime=e:n>e?t.earliestPendingTime=e:t.latestPendingTime<e&&(t.latestPendingTime=e),Hr(e,t)}function Hr(t,e){var n=e.earliestSuspendedTime,r=e.latestSuspendedTime,o=e.earliestPendingTime,i=e.latestPingedTime;0===(o=0!==o?o:i)&&(0===t||r>t)&&(o=r),0!==(t=o)&&0!==n&&n<t&&(t=n),e.nextExpirationTimeToWorkOn=o,e.expirationTime=t}var Gr=!1;function $r(t){return{baseState:t,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yr(t){return{baseState:t.baseState,firstUpdate:t.firstUpdate,lastUpdate:t.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Jr(t){return{expirationTime:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Qr(t,e){null===t.lastUpdate?t.firstUpdate=t.lastUpdate=e:(t.lastUpdate.next=e,t.lastUpdate=e)}function Xr(t,e){var n=t.alternate;if(null===n){var r=t.updateQueue,o=null;null===r&&(r=t.updateQueue=$r(t.memoizedState))}else r=t.updateQueue,o=n.updateQueue,null===r?null===o?(r=t.updateQueue=$r(t.memoizedState),o=n.updateQueue=$r(n.memoizedState)):r=t.updateQueue=Yr(o):null===o&&(o=n.updateQueue=Yr(r));null===o||r===o?Qr(r,e):null===r.lastUpdate||null===o.lastUpdate?(Qr(r,e),Qr(o,e)):(Qr(r,e),o.lastUpdate=e)}function Zr(t,e){var n=t.updateQueue;null===(n=null===n?t.updateQueue=$r(t.memoizedState):to(t,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=e:(n.lastCapturedUpdate.next=e,n.lastCapturedUpdate=e)}function to(t,e){var n=t.alternate;return null!==n&&e===n.updateQueue&&(e=t.updateQueue=Yr(e)),e}function eo(t,e,n,r,i,u){switch(n.tag){case 1:return"function"==typeof(t=n.payload)?t.call(u,r,i):t;case 3:t.effectTag=-1025&t.effectTag|64;case 0:if(null===(i="function"==typeof(t=n.payload)?t.call(u,r,i):t)||void 0===i)break;return o({},r,i);case 2:Gr=!0}return r}function no(t,e,n,r,o){Gr=!1;for(var i=(e=to(t,e)).baseState,u=null,a=0,c=e.firstUpdate,s=i;null!==c;){var l=c.expirationTime;l>o?(null===u&&(u=c,i=s),(0===a||a>l)&&(a=l)):(s=eo(t,0,c,s,n,r),null!==c.callback&&(t.effectTag|=32,c.nextEffect=null,null===e.lastEffect?e.firstEffect=e.lastEffect=c:(e.lastEffect.nextEffect=c,e.lastEffect=c))),c=c.next}for(l=null,c=e.firstCapturedUpdate;null!==c;){var f=c.expirationTime;f>o?(null===l&&(l=c,null===u&&(i=s)),(0===a||a>f)&&(a=f)):(s=eo(t,0,c,s,n,r),null!==c.callback&&(t.effectTag|=32,c.nextEffect=null,null===e.lastCapturedEffect?e.firstCapturedEffect=e.lastCapturedEffect=c:(e.lastCapturedEffect.nextEffect=c,e.lastCapturedEffect=c))),c=c.next}null===u&&(e.lastUpdate=null),null===l?e.lastCapturedUpdate=null:t.effectTag|=32,null===u&&null===l&&(i=s),e.baseState=i,e.firstUpdate=u,e.firstCapturedUpdate=l,t.expirationTime=a,t.memoizedState=s}function ro(t,e,n){null!==e.firstCapturedUpdate&&(null!==e.lastUpdate&&(e.lastUpdate.next=e.firstCapturedUpdate,e.lastUpdate=e.lastCapturedUpdate),e.firstCapturedUpdate=e.lastCapturedUpdate=null),oo(e.firstEffect,n),e.firstEffect=e.lastEffect=null,oo(e.firstCapturedEffect,n),e.firstCapturedEffect=e.lastCapturedEffect=null}function oo(t,e){for(;null!==t;){var n=t.callback;if(null!==n){t.callback=null;var r=e;"function"!=typeof n&&u("191",n),n.call(r)}t=t.nextEffect}}function io(t,e){return{value:t,source:e,stack:se(e)}}var uo={current:null},ao=null,co=null,so=null;function lo(t,e){var n=t.type._context;Sr(uo,n._currentValue),n._currentValue=e}function fo(t){var e=uo.current;wr(uo),t.type._context._currentValue=e}function po(t){ao=t,so=co=null,t.firstContextDependency=null}function ho(t,e){return so!==t&&!1!==e&&0!==e&&("number"==typeof e&&1073741823!==e||(so=t,e=1073741823),e={context:t,observedBits:e,next:null},null===co?(null===ao&&u("277"),ao.firstContextDependency=co=e):co=co.next=e),t._currentValue}var vo={},yo={current:vo},mo={current:vo},go={current:vo};function _o(t){return t===vo&&u("174"),t}function bo(t,e){Sr(go,e),Sr(mo,t),Sr(yo,vo);var n=e.nodeType;switch(n){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:er(null,"");break;default:e=er(e=(n=8===n?e.parentNode:e).namespaceURI||null,n=n.tagName)}wr(yo),Sr(yo,e)}function wo(t){wr(yo),wr(mo),wr(go)}function So(t){_o(go.current);var e=_o(yo.current),n=er(e,t.type);e!==n&&(Sr(mo,t),Sr(yo,n))}function xo(t){mo.current===t&&(wr(yo),wr(mo))}var Eo=(new r.Component).refs;function ko(t,e,n,r){n=null===(n=n(r,e=t.memoizedState))||void 0===n?e:o({},e,n),t.memoizedState=n,null!==(r=t.updateQueue)&&0===t.expirationTime&&(r.baseState=n)}var Oo={isMounted:function(t){return!!(t=t._reactInternalFiber)&&2===nn(t)},enqueueSetState:function(t,e,n){t=t._reactInternalFiber;var r=au(),o=Jr(r=Ni(r,t));o.payload=e,void 0!==n&&null!==n&&(o.callback=n),Xr(t,o),Ai(t,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternalFiber;var r=au(),o=Jr(r=Ni(r,t));o.tag=1,o.payload=e,void 0!==n&&null!==n&&(o.callback=n),Xr(t,o),Ai(t,r)},enqueueForceUpdate:function(t,e){t=t._reactInternalFiber;var n=au(),r=Jr(n=Ni(n,t));r.tag=2,void 0!==e&&null!==e&&(r.callback=e),Xr(t,r),Ai(t,n)}};function Po(t,e,n,r,o,i,u){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,i,u):!e.prototype||!e.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function To(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&Oo.enqueueReplaceState(e,e.state,null)}function Co(t,e,n,r){var o=t.stateNode,i=Tr(e)?Or:Er.current;o.props=n,o.state=t.memoizedState,o.refs=Eo,o.context=Pr(t,i),null!==(i=t.updateQueue)&&(no(t,i,n,o,r),o.state=t.memoizedState),"function"==typeof(i=e.getDerivedStateFromProps)&&(ko(t,e,i,n),o.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(e=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),e!==o.state&&Oo.enqueueReplaceState(o,o.state,null),null!==(i=t.updateQueue)&&(no(t,i,n,o,r),o.state=t.memoizedState)),"function"==typeof o.componentDidMount&&(t.effectTag|=4)}var Mo=Array.isArray;function Io(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&3!==n.tag&&u("110"),r=n.stateNode),r||u("147",t);var o=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===o?e.ref:((e=function(t){var e=r.refs;e===Eo&&(e=r.refs={}),null===t?delete e[o]:e[o]=t})._stringRef=o,e)}"string"!=typeof t&&u("284"),n._owner||u("254",t)}return t}function jo(t,e){"textarea"!==t.type&&u("31","[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e,"")}function No(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(t,e,n){return(t=Ur(t,e,n)).index=0,t.sibling=null,t}function i(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=2,n):r:(e.effectTag=2,n):n}function a(e){return t&&null===e.alternate&&(e.effectTag=2),e}function c(t,e,n,r){return null===e||8!==e.tag?((e=Br(n,t.mode,r)).return=t,e):((e=o(e,n,r)).return=t,e)}function s(t,e,n,r){return null!==e&&e.type===n.type?((r=o(e,n.props,r)).ref=Io(t,e,n),r.return=t,r):((r=Wr(n,t.mode,r)).ref=Io(t,e,n),r.return=t,r)}function l(t,e,n,r){return null===e||6!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Vr(n,t.mode,r)).return=t,e):((e=o(e,n.children||[],r)).return=t,e)}function f(t,e,n,r,i){return null===e||9!==e.tag?((e=qr(n,t.mode,r,i)).return=t,e):((e=o(e,n,r)).return=t,e)}function p(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Br(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case Jt:return(n=Wr(e,t.mode,n)).ref=Io(t,null,e),n.return=t,n;case Qt:return(e=Vr(e,t.mode,n)).return=t,e}if(Mo(e)||ae(e))return(e=qr(e,t.mode,n,null)).return=t,e;jo(t,e)}return null}function h(t,e,n,r){var o=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:c(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Jt:return n.key===o?n.type===Xt?f(t,e,n.props.children,r,o):s(t,e,n,r):null;case Qt:return n.key===o?l(t,e,n,r):null}if(Mo(n)||ae(n))return null!==o?null:f(t,e,n,r,null);jo(t,n)}return null}function d(t,e,n,r,o){if("string"==typeof r||"number"==typeof r)return c(e,t=t.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Jt:return t=t.get(null===r.key?n:r.key)||null,r.type===Xt?f(e,t,r.props.children,o,r.key):s(e,t,r,o);case Qt:return l(e,t=t.get(null===r.key?n:r.key)||null,r,o)}if(Mo(r)||ae(r))return f(e,t=t.get(n)||null,r,o,null);jo(e,r)}return null}function v(o,u,a,c){for(var s=null,l=null,f=u,v=u=0,y=null;null!==f&&v<a.length;v++){f.index>v?(y=f,f=null):y=f.sibling;var m=h(o,f,a[v],c);if(null===m){null===f&&(f=y);break}t&&f&&null===m.alternate&&e(o,f),u=i(m,u,v),null===l?s=m:l.sibling=m,l=m,f=y}if(v===a.length)return n(o,f),s;if(null===f){for(;v<a.length;v++)(f=p(o,a[v],c))&&(u=i(f,u,v),null===l?s=f:l.sibling=f,l=f);return s}for(f=r(o,f);v<a.length;v++)(y=d(f,o,v,a[v],c))&&(t&&null!==y.alternate&&f.delete(null===y.key?v:y.key),u=i(y,u,v),null===l?s=y:l.sibling=y,l=y);return t&&f.forEach(function(t){return e(o,t)}),s}function y(o,a,c,s){var l=ae(c);"function"!=typeof l&&u("150"),null==(c=l.call(c))&&u("151");for(var f=l=null,v=a,y=a=0,m=null,g=c.next();null!==v&&!g.done;y++,g=c.next()){v.index>y?(m=v,v=null):m=v.sibling;var _=h(o,v,g.value,s);if(null===_){v||(v=m);break}t&&v&&null===_.alternate&&e(o,v),a=i(_,a,y),null===f?l=_:f.sibling=_,f=_,v=m}if(g.done)return n(o,v),l;if(null===v){for(;!g.done;y++,g=c.next())null!==(g=p(o,g.value,s))&&(a=i(g,a,y),null===f?l=g:f.sibling=g,f=g);return l}for(v=r(o,v);!g.done;y++,g=c.next())null!==(g=d(v,o,y,g.value,s))&&(t&&null!==g.alternate&&v.delete(null===g.key?y:g.key),a=i(g,a,y),null===f?l=g:f.sibling=g,f=g);return t&&v.forEach(function(t){return e(o,t)}),l}return function(t,r,i,c){var s="object"==typeof i&&null!==i&&i.type===Xt&&null===i.key;s&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case Jt:t:{for(l=i.key,s=r;null!==s;){if(s.key===l){if(9===s.tag?i.type===Xt:s.type===i.type){n(t,s.sibling),(r=o(s,i.type===Xt?i.props.children:i.props,c)).ref=Io(t,s,i),r.return=t,t=r;break t}n(t,s);break}e(t,s),s=s.sibling}i.type===Xt?((r=qr(i.props.children,t.mode,c,i.key)).return=t,t=r):((c=Wr(i,t.mode,c)).ref=Io(t,r,i),c.return=t,t=c)}return a(t);case Qt:t:{for(s=i.key;null!==r;){if(r.key===s){if(6===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(t,r.sibling),(r=o(r,i.children||[],c)).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Vr(i,t.mode,c)).return=t,t=r}return a(t)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&8===r.tag?(n(t,r.sibling),(r=o(r,i,c)).return=t,t=r):(n(t,r),(r=Br(i,t.mode,c)).return=t,t=r),a(t);if(Mo(i))return v(t,r,i,c);if(ae(i))return y(t,r,i,c);if(l&&jo(t,i),void 0===i&&!s)switch(t.tag){case 2:case 3:case 0:u("152",(c=t.type).displayName||c.name||"Component")}return n(t,r)}}var Ao=No(!0),Ro=No(!1),Do=null,Fo=null,zo=!1;function Lo(t,e){var n=new zr(7,null,null,0);n.type="DELETED",n.stateNode=e,n.return=t,n.effectTag=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Uo(t,e){switch(t.tag){case 7:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 8:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function Wo(t){if(zo){var e=Fo;if(e){var n=e;if(!Uo(t,e)){if(!(e=mr(n))||!Uo(t,e))return t.effectTag|=2,zo=!1,void(Do=t);Lo(Do,n)}Do=t,Fo=gr(e)}else t.effectTag|=2,zo=!1,Do=t}}function qo(t){for(t=t.return;null!==t&&7!==t.tag&&5!==t.tag;)t=t.return;Do=t}function Bo(t){if(t!==Do)return!1;if(!zo)return qo(t),zo=!0,!1;var e=t.type;if(7!==t.tag||"head"!==e&&"body"!==e&&!yr(e,t.memoizedProps))for(e=Fo;e;)Lo(t,e),e=mr(e);return qo(t),Fo=Do?mr(t.stateNode):null,!0}function Vo(){Fo=Do=null,zo=!1}var Ko=Gt.ReactCurrentOwner;function Ho(t,e,n,r){e.child=null===t?Ro(e,null,n,r):Ao(e,t.child,n,r)}function Go(t,e,n,r,o){n=n.render;var i=e.ref;return kr.current||e.memoizedProps!==r||i!==(null!==t?t.ref:null)?(Ho(t,e,n=n(r,i),o),e.memoizedProps=r,e.child):ti(t,e,o)}function $o(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.effectTag|=128)}function Yo(t,e,n,r,o){var i=Tr(n)?Or:Er.current;return i=Pr(e,i),po(e),n=n(r,i),e.effectTag|=1,Ho(t,e,n,o),e.memoizedProps=r,e.child}function Jo(t,e,n,r,o){if(Tr(n)){var i=!0;Nr(e)}else i=!1;if(po(e),null===t)if(null===e.stateNode){var u=Tr(n)?Or:Er.current,a=n.contextTypes,c=null!==a&&void 0!==a,s=new n(r,a=c?Pr(e,u):xr);e.memoizedState=null!==s.state&&void 0!==s.state?s.state:null,s.updater=Oo,e.stateNode=s,s._reactInternalFiber=e,c&&((c=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=u,c.__reactInternalMemoizedMaskedChildContext=a),Co(e,n,r,o),r=!0}else{u=e.stateNode,a=e.memoizedProps,u.props=a;var l=u.context;c=Pr(e,c=Tr(n)?Or:Er.current);var f=n.getDerivedStateFromProps;(s="function"==typeof f||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(a!==r||l!==c)&&To(e,u,r,c),Gr=!1;var p=e.memoizedState;l=u.state=p;var h=e.updateQueue;null!==h&&(no(e,h,r,u,o),l=e.memoizedState),a!==r||p!==l||kr.current||Gr?("function"==typeof f&&(ko(e,n,f,r),l=e.memoizedState),(a=Gr||Po(e,n,a,r,p,l,c))?(s||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),e.memoizedProps=r,e.memoizedState=l),u.props=r,u.state=l,u.context=c,r=a):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r=!1)}else u=e.stateNode,a=e.memoizedProps,u.props=a,l=u.context,c=Pr(e,c=Tr(n)?Or:Er.current),(s="function"==typeof(f=n.getDerivedStateFromProps)||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(a!==r||l!==c)&&To(e,u,r,c),Gr=!1,l=e.memoizedState,p=u.state=l,null!==(h=e.updateQueue)&&(no(e,h,r,u,o),p=e.memoizedState),a!==r||l!==p||kr.current||Gr?("function"==typeof f&&(ko(e,n,f,r),p=e.memoizedState),(f=Gr||Po(e,n,a,r,l,p,c))?(s||"function"!=typeof u.UNSAFE_componentWillUpdate&&"function"!=typeof u.componentWillUpdate||("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(r,p,c),"function"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof u.componentDidUpdate&&(e.effectTag|=4),"function"==typeof u.getSnapshotBeforeUpdate&&(e.effectTag|=256)):("function"!=typeof u.componentDidUpdate||a===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||a===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=256),e.memoizedProps=r,e.memoizedState=p),u.props=r,u.state=p,u.context=c,r=f):("function"!=typeof u.componentDidUpdate||a===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||a===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=256),r=!1);return Qo(t,e,n,r,i,o)}function Qo(t,e,n,r,o,i){$o(t,e);var u=0!=(64&e.effectTag);if(!r&&!u)return o&&Ar(e,n,!1),ti(t,e,i);r=e.stateNode,Ko.current=e;var a=u?null:r.render();return e.effectTag|=1,null!==t&&u&&(Ho(t,e,null,i),e.child=null),Ho(t,e,a,i),e.memoizedState=r.state,e.memoizedProps=r.props,o&&Ar(e,n,!0),e.child}function Xo(t){var e=t.stateNode;e.pendingContext?Ir(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Ir(0,e.context,!1),bo(t,e.containerInfo)}function Zo(t,e){if(t&&t.defaultProps)for(var n in e=o({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}function ti(t,e,n){null!==t&&(e.firstContextDependency=t.firstContextDependency);var r=e.childExpirationTime;if(0===r||r>n)return null;if(null!==t&&e.child!==t.child&&u("153"),null!==e.child){for(n=Ur(t=e.child,t.pendingProps,t.expirationTime),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Ur(t,t.pendingProps,t.expirationTime)).return=e;n.sibling=null}return e.child}function ei(t,e,n){var r=e.expirationTime;if(!kr.current&&(0===r||r>n)){switch(e.tag){case 5:Xo(e),Vo();break;case 7:So(e);break;case 2:Tr(e.type)&&Nr(e);break;case 3:Tr(e.type._reactResult)&&Nr(e);break;case 6:bo(e,e.stateNode.containerInfo);break;case 12:lo(e,e.memoizedProps.value)}return ti(t,e,n)}switch(e.expirationTime=0,e.tag){case 4:return function(t,e,n,r){null!==t&&u("155");var o=e.pendingProps;if("object"==typeof n&&null!==n&&"function"==typeof n.then){var i=n=function(t){switch(t._reactStatus){case 1:return t._reactResult;case 2:throw t._reactResult;case 0:throw t;default:throw t._reactStatus=0,t.then(function(e){if(0===t._reactStatus){if(t._reactStatus=1,"object"==typeof e&&null!==e){var n=e.default;e=void 0!==n&&null!==n?n:e}t._reactResult=e}},function(e){0===t._reactStatus&&(t._reactStatus=2,t._reactResult=e)}),t}}(n);i="function"==typeof i?Lr(i)?3:1:void 0!==i&&null!==i&&i.$$typeof?14:4,i=e.tag=i;var a=Zo(n,o);switch(i){case 1:return Yo(t,e,n,a,r);case 3:return Jo(t,e,n,a,r);case 14:return Go(t,e,n,a,r);default:u("283",n)}}if(i=Pr(e,Er.current),po(e),i=n(o,i),e.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){e.tag=2,Tr(n)?(a=!0,Nr(e)):a=!1,e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var c=n.getDerivedStateFromProps;return"function"==typeof c&&ko(e,n,c,o),i.updater=Oo,e.stateNode=i,i._reactInternalFiber=e,Co(e,n,o,r),Qo(t,e,n,!0,a,r)}return e.tag=0,Ho(t,e,i,r),e.memoizedProps=o,e.child}(t,e,e.type,n);case 0:return Yo(t,e,e.type,e.pendingProps,n);case 1:var o=e.type._reactResult;return t=Yo(t,e,o,Zo(o,r=e.pendingProps),n),e.memoizedProps=r,t;case 2:return Jo(t,e,e.type,e.pendingProps,n);case 3:return t=Jo(t,e,o=e.type._reactResult,Zo(o,r=e.pendingProps),n),e.memoizedProps=r,t;case 5:return Xo(e),null===(r=e.updateQueue)&&u("282"),o=null!==(o=e.memoizedState)?o.element:null,no(e,r,e.pendingProps,null,n),(r=e.memoizedState.element)===o?(Vo(),e=ti(t,e,n)):(o=e.stateNode,(o=(null===t||null===t.child)&&o.hydrate)&&(Fo=gr(e.stateNode.containerInfo),Do=e,o=zo=!0),o?(e.effectTag|=2,e.child=Ro(e,null,r,n)):(Ho(t,e,r,n),Vo()),e=e.child),e;case 7:So(e),null===t&&Wo(e),r=e.type,o=e.pendingProps;var i=null!==t?t.memoizedProps:null,a=o.children;return yr(r,o)?a=null:null!==i&&yr(r,i)&&(e.effectTag|=16),$o(t,e),1073741823!==n&&1&e.mode&&o.hidden?(e.expirationTime=1073741823,e.memoizedProps=o,e=null):(Ho(t,e,a,n),e.memoizedProps=o,e=e.child),e;case 8:return null===t&&Wo(e),e.memoizedProps=e.pendingProps,null;case 16:return null;case 6:return bo(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=Ao(e,null,r,n):Ho(t,e,r,n),e.memoizedProps=r,e.child;case 13:return Go(t,e,e.type,e.pendingProps,n);case 14:return t=Go(t,e,o=e.type._reactResult,Zo(o,r=e.pendingProps),n),e.memoizedProps=r,t;case 9:return Ho(t,e,r=e.pendingProps,n),e.memoizedProps=r,e.child;case 10:return Ho(t,e,r=e.pendingProps.children,n),e.memoizedProps=r,e.child;case 15:return Ho(t,e,(r=e.pendingProps).children,n),e.memoizedProps=r,e.child;case 12:t:{if(r=e.type._context,o=e.pendingProps,a=e.memoizedProps,i=o.value,e.memoizedProps=o,lo(e,i),null!==a){var c=a.value;if(0===(i=c===i&&(0!==c||1/c==1/i)||c!=c&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(c,i):1073741823))){if(a.children===o.children&&!kr.current){e=ti(t,e,n);break t}}else for(null!==(a=e.child)&&(a.return=e);null!==a;){if(null!==(c=a.firstContextDependency))do{if(c.context===r&&0!=(c.observedBits&i)){if(2===a.tag||3===a.tag){var s=Jr(n);s.tag=2,Xr(a,s)}(0===a.expirationTime||a.expirationTime>n)&&(a.expirationTime=n),null!==(s=a.alternate)&&(0===s.expirationTime||s.expirationTime>n)&&(s.expirationTime=n);for(var l=a.return;null!==l;){if(s=l.alternate,0===l.childExpirationTime||l.childExpirationTime>n)l.childExpirationTime=n,null!==s&&(0===s.childExpirationTime||s.childExpirationTime>n)&&(s.childExpirationTime=n);else{if(null===s||!(0===s.childExpirationTime||s.childExpirationTime>n))break;s.childExpirationTime=n}l=l.return}}s=a.child,c=c.next}while(null!==c);else s=12===a.tag&&a.type===e.type?null:a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===e){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}}Ho(t,e,o.children,n),e=e.child}return e;case 11:return i=e.type,o=(r=e.pendingProps).children,po(e),o=o(i=ho(i,r.unstable_observedBits)),e.effectTag|=1,Ho(t,e,o,n),e.memoizedProps=r,e.child;default:u("156")}}function ni(t){t.effectTag|=4}var ri=void 0,oi=void 0,ii=void 0;function ui(t,e){var n=e.source,r=e.stack;null===r&&null!==n&&(r=se(n)),null!==n&&ce(n.type),e=e.value,null!==t&&2===t.tag&&ce(t.type);try{console.error(e)}catch(t){setTimeout(function(){throw t})}}function ai(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){ji(t,e)}else e.current=null}function ci(t){switch("function"==typeof Dr&&Dr(t),t.tag){case 2:case 3:ai(t);var e=t.stateNode;if("function"==typeof e.componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ji(t,e)}break;case 7:ai(t);break;case 6:fi(t)}}function si(t){return 7===t.tag||5===t.tag||6===t.tag}function li(t){t:{for(var e=t.return;null!==e;){if(si(e)){var n=e;break t}e=e.return}u("160"),n=void 0}var r=e=void 0;switch(n.tag){case 7:e=n.stateNode,r=!1;break;case 5:case 6:e=n.stateNode.containerInfo,r=!0;break;default:u("161")}16&n.effectTag&&(or(e,""),n.effectTag&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||si(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;7!==n.tag&&8!==n.tag;){if(2&n.effectTag)continue e;if(null===n.child||6===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break t}}for(var o=t;;){if(7===o.tag||8===o.tag)if(n)if(r){var i=e,a=o.stateNode,c=n;8===i.nodeType?i.parentNode.insertBefore(a,c):i.insertBefore(a,c)}else e.insertBefore(o.stateNode,n);else r?(i=e,a=o.stateNode,8===i.nodeType?(c=i.parentNode).insertBefore(a,i):(c=i).appendChild(a),null===c.onclick&&(c.onclick=pr)):e.appendChild(o.stateNode);else if(6!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function fi(t){for(var e=t,n=!1,r=void 0,o=void 0;;){if(!n){n=e.return;t:for(;;){switch(null===n&&u("160"),n.tag){case 7:r=n.stateNode,o=!1;break t;case 5:case 6:r=n.stateNode.containerInfo,o=!0;break t}n=n.return}n=!0}if(7===e.tag||8===e.tag){t:for(var i=e,a=i;;)if(ci(a),null!==a.child&&6!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break t;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=e.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(e.stateNode)}else if(6===e.tag?(r=e.stateNode.containerInfo,o=!0):ci(e),null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;6===(e=e.return).tag&&(n=!1)}e.sibling.return=e.return,e=e.sibling}}function pi(t,e){switch(e.tag){case 2:case 3:break;case 7:var n=e.stateNode;if(null!=n){var r=e.memoizedProps,o=null!==t?t.memoizedProps:r;t=e.type;var i=e.updateQueue;if(e.updateQueue=null,null!==i){for(n[F]=r,"input"===t&&"radio"===r.type&&null!=r.name&&Se(n,r),lr(t,o),e=lr(t,r),o=0;o<i.length;o+=2){var a=i[o],c=i[o+1];"style"===a?ar(n,c):"dangerouslySetInnerHTML"===a?rr(n,c):"children"===a?or(n,c):ge(n,a,c,e)}switch(t){case"input":xe(n,r);break;case"textarea":Qn(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?$n(n,!!r.multiple,i,!1):t!==!!r.multiple&&(null!=r.defaultValue?$n(n,!!r.multiple,r.defaultValue,!0):$n(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 8:null===e.stateNode&&u("162"),e.stateNode.nodeValue=e.memoizedProps;break;case 5:case 15:case 16:break;default:u("163")}}function hi(t,e,n){(n=Jr(n)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){du(r),ui(t,e)},n}function di(t,e,n){(n=Jr(n)).tag=3;var r=t.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===Pi?Pi=new Set([this]):Pi.add(this);var n=e.value,r=e.stack;ui(t,e),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function vi(t){switch(t.tag){case 2:Tr(t.type)&&Cr();var e=t.effectTag;return 1024&e?(t.effectTag=-1025&e|64,t):null;case 3:return Tr(t.type._reactResult)&&Cr(),1024&(e=t.effectTag)?(t.effectTag=-1025&e|64,t):null;case 5:return wo(),Mr(),0!=(64&(e=t.effectTag))&&u("285"),t.effectTag=-1025&e|64,t;case 7:return xo(t),null;case 16:return 1024&(e=t.effectTag)?(t.effectTag=-1025&e|64,t):null;case 6:return wo(),null;case 12:return fo(t),null;default:return null}}ri=function(){},oi=function(t,e,n){(e.updateQueue=n)&&ni(e)},ii=function(t,e,n,r){n!==r&&ni(e)};var yi={readContext:ho},mi=Gt.ReactCurrentOwner,gi=0,_i=0,bi=!1,wi=null,Si=null,xi=0,Ei=!1,ki=null,Oi=!1,Pi=null;function Ti(){if(null!==wi)for(var t=wi.return;null!==t;){var e=t;switch(e.tag){case 2:var n=e.type.childContextTypes;null!==n&&void 0!==n&&Cr();break;case 3:null!==(n=e.type._reactResult.childContextTypes)&&void 0!==n&&Cr();break;case 5:wo(),Mr();break;case 7:xo(e);break;case 6:wo();break;case 12:fo(e)}t=t.return}Si=null,xi=0,Ei=!1,wi=null}function Ci(t){for(;;){var e=t.alternate,n=t.return,r=t.sibling;if(0==(512&t.effectTag)){var i=e,a=(e=t).pendingProps;switch(e.tag){case 0:case 1:break;case 2:Tr(e.type)&&Cr();break;case 3:Tr(e.type._reactResult)&&Cr();break;case 5:wo(),Mr(),(a=e.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==i&&null!==i.child||(Bo(e),e.effectTag&=-3),ri(e);break;case 7:xo(e);var c=_o(go.current),s=e.type;if(null!==i&&null!=e.stateNode){var l=i.memoizedProps;if(l!==a){var f=e.stateNode,p=_o(yo.current),h=f,d=s,v=l,y=a;f=c;var m=null;switch(d){case"input":v=be(h,v),y=be(h,y),m=[];break;case"option":v=Gn(h,v),y=Gn(h,y),m=[];break;case"select":v=o({},v,{value:void 0}),y=o({},y,{value:void 0}),m=[];break;case"textarea":v=Yn(h,v),y=Yn(h,y),m=[];break;default:"function"!=typeof v.onClick&&"function"==typeof y.onClick&&(h.onclick=pr)}sr(d,y),d=h=void 0;var g=null;for(h in v)if(!y.hasOwnProperty(h)&&v.hasOwnProperty(h)&&null!=v[h])if("style"===h){var b=v[h];for(d in b)b.hasOwnProperty(d)&&(g||(g={}),g[d]="")}else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(_.hasOwnProperty(h)?m||(m=[]):(m=m||[]).push(h,null));for(h in y){var w=y[h];if(b=null!=v?v[h]:void 0,y.hasOwnProperty(h)&&w!==b&&(null!=w||null!=b))if("style"===h)if(b){for(d in b)!b.hasOwnProperty(d)||w&&w.hasOwnProperty(d)||(g||(g={}),g[d]="");for(d in w)w.hasOwnProperty(d)&&b[d]!==w[d]&&(g||(g={}),g[d]=w[d])}else g||(m||(m=[]),m.push(h,g)),g=w;else"dangerouslySetInnerHTML"===h?(w=w?w.__html:void 0,b=b?b.__html:void 0,null!=w&&b!==w&&(m=m||[]).push(h,""+w)):"children"===h?b===w||"string"!=typeof w&&"number"!=typeof w||(m=m||[]).push(h,""+w):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(_.hasOwnProperty(h)?(null!=w&&fr(f,h),m||b===w||(m=[])):(m=m||[]).push(h,w))}g&&(m=m||[]).push("style",g),oi(i,e,m,s,l,a,c,p)}i.ref!==e.ref&&(e.effectTag|=128)}else if(a){if(m=_o(yo.current),Bo(e)){switch(f=(a=e).stateNode,i=a.type,l=a.memoizedProps,p=c,f[D]=a,f[F]=l,s=void 0,c=f,i){case"iframe":case"object":On("load",c);break;case"video":case"audio":for(f=0;f<ot.length;f++)On(ot[f],c);break;case"source":On("error",c);break;case"img":case"image":case"link":On("error",c),On("load",c);break;case"form":On("reset",c),On("submit",c);break;case"details":On("toggle",c);break;case"input":we(c,l),On("invalid",c),fr(p,"onChange");break;case"select":c._wrapperState={wasMultiple:!!l.multiple},On("invalid",c),fr(p,"onChange");break;case"textarea":Jn(c,l),On("invalid",c),fr(p,"onChange")}for(s in sr(i,l),f=null,l)l.hasOwnProperty(s)&&(m=l[s],"children"===s?"string"==typeof m?c.textContent!==m&&(f=["children",m]):"number"==typeof m&&c.textContent!==""+m&&(f=["children",""+m]):_.hasOwnProperty(s)&&null!=m&&fr(p,s));switch(i){case"input":Kt(c),Ee(c,l,!0);break;case"textarea":Kt(c),Xn(c);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(c.onclick=pr)}s=f,a.updateQueue=s,(a=null!==s)&&ni(e)}else{l=e,i=s,p=a,f=9===c.nodeType?c:c.ownerDocument,m===Zn.html&&(m=tr(i)),m===Zn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof p.is?f=f.createElement(i,{is:p.is}):(f=f.createElement(i),"select"===i&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(m,i),(i=f)[D]=l,i[F]=a;t:for(l=i,p=e,f=p.child;null!==f;){if(7===f.tag||8===f.tag)l.appendChild(f.stateNode);else if(6!==f.tag&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===p)break;for(;null===f.sibling;){if(null===f.return||f.return===p)break t;f=f.return}f.sibling.return=f.return,f=f.sibling}switch(p=i,h=c,g=lr(f=s,l=a),f){case"iframe":case"object":On("load",p),c=l;break;case"video":case"audio":for(c=0;c<ot.length;c++)On(ot[c],p);c=l;break;case"source":On("error",p),c=l;break;case"img":case"image":case"link":On("error",p),On("load",p),c=l;break;case"form":On("reset",p),On("submit",p),c=l;break;case"details":On("toggle",p),c=l;break;case"input":we(p,l),c=be(p,l),On("invalid",p),fr(h,"onChange");break;case"option":c=Gn(p,l);break;case"select":p._wrapperState={wasMultiple:!!l.multiple},c=o({},l,{value:void 0}),On("invalid",p),fr(h,"onChange");break;case"textarea":Jn(p,l),c=Yn(p,l),On("invalid",p),fr(h,"onChange");break;default:c=l}for(m in sr(f,c),m=void 0,v=f,y=p,d=c)d.hasOwnProperty(m)&&(b=d[m],"style"===m?ar(y,b):"dangerouslySetInnerHTML"===m?null!=(b=b?b.__html:void 0)&&rr(y,b):"children"===m?"string"==typeof b?("textarea"!==v||""!==b)&&or(y,b):"number"==typeof b&&or(y,""+b):"suppressContentEditableWarning"!==m&&"suppressHydrationWarning"!==m&&"autoFocus"!==m&&(_.hasOwnProperty(m)?null!=b&&fr(h,m):null!=b&&ge(y,m,b,g)));switch(f){case"input":Kt(p),Ee(p,l,!1);break;case"textarea":Kt(p),Xn(p);break;case"option":null!=l.value&&p.setAttribute("value",""+_e(l.value));break;case"select":(c=p).multiple=!!l.multiple,null!=(p=l.value)?$n(c,!!l.multiple,p,!1):null!=l.defaultValue&&$n(c,!!l.multiple,l.defaultValue,!0);break;default:"function"==typeof c.onClick&&(p.onclick=pr)}(a=vr(s,a))&&ni(e),e.stateNode=i}null!==e.ref&&(e.effectTag|=128)}else null===e.stateNode&&u("166");break;case 8:i&&null!=e.stateNode?ii(i,e,i.memoizedProps,a):("string"!=typeof a&&(null===e.stateNode&&u("166")),c=_o(go.current),_o(yo.current),Bo(e)?(s=(a=e).stateNode,c=a.memoizedProps,s[D]=a,(a=s.nodeValue!==c)&&ni(e)):(s=e,(a=(9===c.nodeType?c:c.ownerDocument).createTextNode(a))[D]=s,e.stateNode=a));break;case 13:case 14:case 16:case 9:case 10:case 15:break;case 6:wo(),ri(e);break;case 12:fo(e);break;case 11:break;case 4:u("167");default:u("156")}if(e=wi=null,a=t,1073741823===xi||1073741823!==a.childExpirationTime){for(s=0,c=a.child;null!==c;)i=c.expirationTime,l=c.childExpirationTime,(0===s||0!==i&&i<s)&&(s=i),(0===s||0!==l&&l<s)&&(s=l),c=c.sibling;a.childExpirationTime=s}if(null!==e)return e;null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=t.firstEffect),n.lastEffect=t.lastEffect),1<t.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=t:n.firstEffect=t,n.lastEffect=t))}else{if(null!==(t=vi(t)))return t.effectTag&=511,t;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512)}if(null!==r)return r;if(null===n)break;t=n}return null}function Mi(t){var e=ei(t.alternate,t,xi);return null===e&&(e=Ci(t)),mi.current=null,e}function Ii(t,e,n){bi&&u("243"),bi=!0,mi.currentDispatcher=yi;var r=t.nextExpirationTimeToWorkOn;r===xi&&t===Si&&null!==wi||(Ti(),xi=r,wi=Ur((Si=t).current,null,xi),t.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(e)for(;null!==wi&&!hu();)wi=Mi(wi);else for(;null!==wi;)wi=Mi(wi)}catch(t){if(null===wi)o=!0,du(t);else{null===wi&&u("271");var i=wi,a=i.return;if(null!==a){t:{var c=a,s=i,l=t;a=xi,s.effectTag|=512,s.firstEffect=s.lastEffect=null,Ei=!0,l=io(l,s);do{switch(c.tag){case 5:c.effectTag|=1024,c.expirationTime=a,Zr(c,a=hi(c,l,a));break t;case 2:case 3:s=l;var f=c.stateNode;if(0==(64&c.effectTag)&&null!==f&&"function"==typeof f.componentDidCatch&&(null===Pi||!Pi.has(f))){c.effectTag|=1024,c.expirationTime=a,Zr(c,a=di(c,s,a));break t}}c=c.return}while(null!==c)}wi=Ci(i);continue}o=!0,du(t)}}break}if(bi=!1,so=co=ao=mi.currentDispatcher=null,o)Si=null,t.finishedWork=null;else if(null!==wi)t.finishedWork=null;else{if(null===(e=t.current.alternate)&&u("281"),Si=null,Ei){if(o=t.latestPendingTime,i=t.latestSuspendedTime,a=t.latestPingedTime,0!==o&&o>r||0!==i&&i>r||0!==a&&a>r)return t.didError=!1,0!==(n=t.latestPingedTime)&&n<=r&&(t.latestPingedTime=0),n=t.earliestPendingTime,e=t.latestPendingTime,n===r?t.earliestPendingTime=e===r?t.latestPendingTime=0:e:e===r&&(t.latestPendingTime=n),n=t.earliestSuspendedTime,e=t.latestSuspendedTime,0===n?t.earliestSuspendedTime=t.latestSuspendedTime=r:n>r?t.earliestSuspendedTime=r:e<r&&(t.latestSuspendedTime=r),Hr(r,t),void(t.expirationTime=t.expirationTime);if(!t.didError&&!n)return t.didError=!0,t.nextExpirationTimeToWorkOn=r,r=t.expirationTime=1,void(t.expirationTime=r)}t.pendingCommitExpirationTime=r,t.finishedWork=e}}function ji(t,e){var n;t:{for(bi&&!Oi&&u("263"),n=t.return;null!==n;){switch(n.tag){case 2:case 3:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===Pi||!Pi.has(r))){Xr(n,t=di(n,t=io(e,t),1)),Ai(n,1),n=void 0;break t}break;case 5:Xr(n,t=hi(n,t=io(e,t),1)),Ai(n,1),n=void 0;break t}n=n.return}5===t.tag&&(Xr(t,n=hi(t,n=io(e,t),1)),Ai(t,1)),n=void 0}return n}function Ni(t,e){return 0!==_i?t=_i:bi?t=Oi?1:xi:1&e.mode?(t=Ji?2+10*(1+((t-2+15)/10|0)):2+25*(1+((t-2+500)/25|0)),null!==Si&&t===xi&&(t+=1)):t=1,Ji&&(0===Bi||t>Bi)&&(Bi=t),t}function Ai(t,e){t:{(0===t.expirationTime||t.expirationTime>e)&&(t.expirationTime=e);var n=t.alternate;null!==n&&(0===n.expirationTime||n.expirationTime>e)&&(n.expirationTime=e);var r=t.return;if(null===r&&5===t.tag)t=t.stateNode;else{for(;null!==r;){if(n=r.alternate,(0===r.childExpirationTime||r.childExpirationTime>e)&&(r.childExpirationTime=e),null!==n&&(0===n.childExpirationTime||n.childExpirationTime>e)&&(n.childExpirationTime=e),null===r.return&&5===r.tag){t=r.stateNode;break t}r=r.return}t=null}}null!==t&&(!bi&&0!==xi&&e<xi&&Ti(),Kr(t,e),bi&&!Oi&&Si===t||(e=t,t=t.expirationTime,null===e.nextScheduledRoot?(e.expirationTime=t,null===Fi?(Di=Fi=e,e.nextScheduledRoot=e):(Fi=Fi.nextScheduledRoot=e).nextScheduledRoot=Di):(0===(n=e.expirationTime)||t<n)&&(e.expirationTime=t),Ui||($i?Yi&&(Wi=e,qi=1,fu(e,1,!0)):1===t?lu(1,null):uu(e,t))),nu>eu&&(nu=0,u("185")))}function Ri(t,e,n,r,o){var i=_i;_i=1;try{return t(e,n,r,o)}finally{_i=i}}var Di=null,Fi=null,zi=0,Li=void 0,Ui=!1,Wi=null,qi=0,Bi=0,Vi=!1,Ki=!1,Hi=null,Gi=null,$i=!1,Yi=!1,Ji=!1,Qi=null,Xi=i.unstable_now(),Zi=2+(Xi/10|0),tu=Zi,eu=50,nu=0,ru=null,ou=1;function iu(){Zi=2+((i.unstable_now()-Xi)/10|0)}function uu(t,e){if(0!==zi){if(e>zi)return;null!==Li&&i.unstable_cancelScheduledWork(Li)}zi=e,t=i.unstable_now()-Xi,Li=i.unstable_scheduleWork(su,{timeout:10*(e-2)-t})}function au(){return Ui?tu:(cu(),0!==qi&&1073741823!==qi||(iu(),tu=Zi),tu)}function cu(){var t=0,e=null;if(null!==Fi)for(var n=Fi,r=Di;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===Fi)&&u("244"),r===r.nextScheduledRoot){Di=Fi=r.nextScheduledRoot=null;break}if(r===Di)Di=o=r.nextScheduledRoot,Fi.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Fi){(Fi=n).nextScheduledRoot=Di,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===t||o<t)&&(t=o,e=r),r===Fi)break;if(1===t)break;n=r,r=r.nextScheduledRoot}}Wi=e,qi=t}function su(t){if(t.didTimeout&&null!==Di){iu();var e=Di;do{var n=e.expirationTime;0!==n&&Zi>=n&&(e.nextExpirationTimeToWorkOn=Zi),e=e.nextScheduledRoot}while(e!==Di)}lu(0,t)}function lu(t,e){if(Gi=e,cu(),null!==Gi)for(iu(),tu=Zi;null!==Wi&&0!==qi&&(0===t||t>=qi)&&(!Vi||Zi>=qi);)fu(Wi,qi,Zi>=qi),cu(),iu(),tu=Zi;else for(;null!==Wi&&0!==qi&&(0===t||t>=qi);)fu(Wi,qi,!0),cu();if(null!==Gi&&(zi=0,Li=null),0!==qi&&uu(Wi,qi),Gi=null,Vi=!1,nu=0,ru=null,null!==Qi)for(t=Qi,Qi=null,e=0;e<t.length;e++){var n=t[e];try{n._onComplete()}catch(t){Ki||(Ki=!0,Hi=t)}}if(Ki)throw t=Hi,Hi=null,Ki=!1,t}function fu(t,e,n){if(Ui&&u("245"),Ui=!0,null===Gi||n){var r=t.finishedWork;null!==r?pu(t,r,e):(t.finishedWork=null,Ii(t,!1,n),null!==(r=t.finishedWork)&&pu(t,r,e))}else null!==(r=t.finishedWork)?pu(t,r,e):(t.finishedWork=null,Ii(t,!0,n),null!==(r=t.finishedWork)&&(hu()?t.finishedWork=r:pu(t,r,e)));Ui=!1}function pu(t,e,n){var r=t.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Qi?Qi=[r]:Qi.push(r),r._defer))return t.finishedWork=e,void(t.expirationTime=0);t.finishedWork=null,t===ru?nu++:(ru=t,nu=0),Oi=bi=!0,t.current===e&&u("177"),0===(n=t.pendingCommitExpirationTime)&&u("261"),t.pendingCommitExpirationTime=0,r=e.expirationTime;var o=e.childExpirationTime;if(r=0===r||0!==o&&o<r?o:r,t.didError=!1,0===r?(t.earliestPendingTime=0,t.latestPendingTime=0,t.earliestSuspendedTime=0,t.latestSuspendedTime=0,t.latestPingedTime=0):(0!==(o=t.latestPendingTime)&&(o<r?t.earliestPendingTime=t.latestPendingTime=0:t.earliestPendingTime<r&&(t.earliestPendingTime=t.latestPendingTime)),0===(o=t.earliestSuspendedTime)?Kr(t,r):r>t.latestSuspendedTime?(t.earliestSuspendedTime=0,t.latestSuspendedTime=0,t.latestPingedTime=0,Kr(t,r)):r<o&&Kr(t,r)),Hr(0,t),mi.current=null,1<e.effectTag?null!==e.lastEffect?(e.lastEffect.nextEffect=e,r=e.firstEffect):r=e:r=e.firstEffect,hr=kn,zn(o=Fn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else t:{var a=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(a&&0!==a.rangeCount){i=a.anchorNode;var c=a.anchorOffset,s=a.focusNode;a=a.focusOffset;try{i.nodeType,s.nodeType}catch(t){i=null;break t}var l=0,f=-1,p=-1,h=0,d=0,v=o,y=null;e:for(;;){for(var m;v!==i||0!==c&&3!==v.nodeType||(f=l+c),v!==s||0!==a&&3!==v.nodeType||(p=l+a),3===v.nodeType&&(l+=v.nodeValue.length),null!==(m=v.firstChild);)y=v,v=m;for(;;){if(v===o)break e;if(y===i&&++h===c&&(f=l),y===s&&++d===a&&(p=l),null!==(m=v.nextSibling))break;y=(v=y).parentNode}v=m}i=-1===f||-1===p?null:{start:f,end:p}}else i=null}i=i||{start:0,end:0}}else i=null;for(dr={focusedElem:o,selectionRange:i},kn=!1,ki=r;null!==ki;){o=!1,i=void 0;try{for(;null!==ki;){if(256&ki.effectTag){var g=ki.alternate;t:switch(c=ki,c.tag){case 2:case 3:if(256&c.effectTag&&null!==g){var _=g.memoizedProps,b=g.memoizedState,w=c.stateNode;w.props=c.memoizedProps,w.state=c.memoizedState;var S=w.getSnapshotBeforeUpdate(_,b);w.__reactInternalSnapshotBeforeUpdate=S}break t;case 5:case 7:case 8:case 6:break t;default:u("163")}}ki=ki.nextEffect}}catch(t){o=!0,i=t}o&&(null===ki&&u("178"),ji(ki,i),null!==ki&&(ki=ki.nextEffect))}for(ki=r;null!==ki;){g=!1,_=void 0;try{for(;null!==ki;){var x=ki.effectTag;if(16&x&&or(ki.stateNode,""),128&x){var E=ki.alternate;if(null!==E){var k=E.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(14&x){case 2:li(ki),ki.effectTag&=-3;break;case 6:li(ki),ki.effectTag&=-3,pi(ki.alternate,ki);break;case 4:pi(ki.alternate,ki);break;case 8:fi(b=ki),b.return=null,b.child=null,b.alternate&&(b.alternate.child=null,b.alternate.return=null)}ki=ki.nextEffect}}catch(t){g=!0,_=t}g&&(null===ki&&u("178"),ji(ki,_),null!==ki&&(ki=ki.nextEffect))}if(k=dr,E=Fn(),x=k.focusedElem,_=k.selectionRange,E!==x&&x&&x.ownerDocument&&function t(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==_&&zn(x)&&(E=_.start,void 0===(k=_.end)&&(k=E),"selectionStart"in x?(x.selectionStart=E,x.selectionEnd=Math.min(k,x.value.length)):(E=((g=x.ownerDocument||document)?g.defaultView:window).getSelection(),b=x.textContent.length,k=Math.min(_.start,b),_=void 0===_.end?k:Math.min(_.end,b),!E.extend&&k>_&&(b=_,_=k,k=b),b=Dn(x,k),w=Dn(x,_),b&&w&&(1!==E.rangeCount||E.anchorNode!==b.node||E.anchorOffset!==b.offset||E.focusNode!==w.node||E.focusOffset!==w.offset)&&((g=g.createRange()).setStart(b.node,b.offset),E.removeAllRanges(),k>_?(E.addRange(g),E.extend(w.node,w.offset)):(g.setEnd(w.node,w.offset),E.addRange(g))))),E=[];for(k=x;k=k.parentNode;)1===k.nodeType&&E.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<E.length;x++)(k=E[x]).element.scrollLeft=k.left,k.element.scrollTop=k.top}for(dr=null,kn=!!hr,hr=null,t.current=e,ki=r;null!==ki;){r=!1,x=void 0;try{for(E=n;null!==ki;){var O=ki.effectTag;if(36&O){var P=ki.alternate;switch(g=E,(k=ki).tag){case 2:case 3:var T=k.stateNode;if(4&k.effectTag)if(null===P)T.props=k.memoizedProps,T.state=k.memoizedState,T.componentDidMount();else{var C=P.memoizedProps,M=P.memoizedState;T.props=k.memoizedProps,T.state=k.memoizedState,T.componentDidUpdate(C,M,T.__reactInternalSnapshotBeforeUpdate)}var I=k.updateQueue;null!==I&&(T.props=k.memoizedProps,T.state=k.memoizedState,ro(0,I,T));break;case 5:var j=k.updateQueue;if(null!==j){if(_=null,null!==k.child)switch(k.child.tag){case 7:_=k.child.stateNode;break;case 2:case 3:_=k.child.stateNode}ro(0,j,_)}break;case 7:var N=k.stateNode;null===P&&4&k.effectTag&&vr(k.type,k.memoizedProps)&&N.focus();break;case 8:case 6:case 15:case 16:break;default:u("163")}}if(128&O){var A=ki.ref;if(null!==A){var R=ki.stateNode;switch(ki.tag){case 7:var D=R;break;default:D=R}"function"==typeof A?A(D):A.current=D}}var F=ki.nextEffect;ki.nextEffect=null,ki=F}}catch(t){r=!0,x=t}r&&(null===ki&&u("178"),ji(ki,x),null!==ki&&(ki=ki.nextEffect))}bi=Oi=!1,"function"==typeof Rr&&Rr(e.stateNode),O=e.expirationTime,e=e.childExpirationTime,0===(e=0===O||0!==e&&e<O?e:O)&&(Pi=null),t.expirationTime=e,t.finishedWork=null}function hu(){return!!Vi||!(null===Gi||Gi.timeRemaining()>ou)&&(Vi=!0)}function du(t){null===Wi&&u("246"),Wi.expirationTime=0,Ki||(Ki=!0,Hi=t)}function vu(t,e){var n=$i;$i=!0;try{return t(e)}finally{($i=n)||Ui||lu(1,null)}}function yu(t,e){if($i&&!Yi){Yi=!0;try{return t(e)}finally{Yi=!1}}return t(e)}function mu(t,e,n){if(Ji)return t(e,n);$i||Ui||0===Bi||(lu(Bi,null),Bi=0);var r=Ji,o=$i;$i=Ji=!0;try{return t(e,n)}finally{Ji=r,($i=o)||Ui||lu(1,null)}}function gu(t,e,n,r,o){var i=e.current;return n=function(t){if(!t)return xr;t=t._reactInternalFiber;t:{(2!==nn(t)||2!==t.tag&&3!==t.tag)&&u("170");var e=t;do{switch(e.tag){case 5:e=e.stateNode.context;break t;case 2:if(Tr(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break t}break;case 3:if(Tr(e.type._reactResult)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break t}}e=e.return}while(null!==e);u("171"),e=void 0}if(2===t.tag){var n=t.type;if(Tr(n))return jr(t,n,e)}else if(3===t.tag&&Tr(n=t.type._reactResult))return jr(t,n,e);return e}(n),null===e.context?e.context=n:e.pendingContext=n,e=o,(o=Jr(r)).payload={element:t},null!==(e=void 0===e?null:e)&&(o.callback=e),Xr(i,o),Ai(i,r),r}function _u(t,e,n,r){var o=e.current;return gu(t,e,n,o=Ni(au(),o),r)}function bu(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 7:default:return t.child.stateNode}}function wu(t){var e=2+25*(1+((au()-2+500)/25|0));e<=gi&&(e=gi+1),this._expirationTime=gi=e,this._root=t,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Su(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function xu(t,e,n){t={current:e=new zr(5,null,null,e?3:0),containerInfo:t,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=e.stateNode=t}function Eu(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function ku(t,e,n,r,o){Eu(n)||u("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var t=bu(i._internalRoot);a.call(t)}}null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)}else{if(i=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new xu(t,!1,e)}(n,r),"function"==typeof o){var c=o;o=function(){var t=bu(i._internalRoot);c.call(t)}}yu(function(){null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)})}return bu(i._internalRoot)}function Ou(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Eu(e)||u("200"),function(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Qt,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}(t,e,null,n)}Ct=function(t,e,n){switch(e){case"input":if(xe(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var o=W(r);o||u("90"),Ht(r),xe(r,o)}}}break;case"textarea":Qn(t,n);break;case"select":null!=(e=n.value)&&$n(t,!!n.multiple,e,!1)}},wu.prototype.render=function(t){this._defer||u("250"),this._hasChildren=!0,this._children=t;var e=this._root._internalRoot,n=this._expirationTime,r=new Su;return gu(t,e,null,n,r._onCommit),r},wu.prototype.then=function(t){if(this._didComplete)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},wu.prototype.commit=function(){var t=this._root._internalRoot,e=t.firstBatch;if(this._defer&&null!==e||u("251"),this._hasChildren){var n=this._expirationTime;if(e!==this){this._hasChildren&&(n=this._expirationTime=e._expirationTime,this.render(this._children));for(var r=null,o=e;o!==this;)r=o,o=o._next;null===r&&u("251"),r._next=o._next,this._next=e,t.firstBatch=this}this._defer=!1,e=n,Ui&&u("253"),Wi=t,qi=e,fu(t,e,!0),lu(1,null),e=this._next,this._next=null,null!==(e=t.firstBatch=e)&&e._hasChildren&&e.render(e._children)}else this._next=null,this._defer=!1},wu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++)(0,t[e])()}},Su.prototype.then=function(t){if(this._didCommit)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},Su.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++){var n=t[e];"function"!=typeof n&&u("191",n),n()}}},xu.prototype.render=function(t,e){var n=this._internalRoot,r=new Su;return null!==(e=void 0===e?null:e)&&r.then(e),_u(t,n,null,r._onCommit),r},xu.prototype.unmount=function(t){var e=this._internalRoot,n=new Su;return null!==(t=void 0===t?null:t)&&n.then(t),_u(null,e,null,n._onCommit),n},xu.prototype.legacy_renderSubtreeIntoContainer=function(t,e,n){var r=this._internalRoot,o=new Su;return null!==(n=void 0===n?null:n)&&o.then(n),_u(e,r,t,o._onCommit),o},xu.prototype.createBatch=function(){var t=new wu(this),e=t._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=t,t._next=null;else{for(n=null;null!==r&&r._expirationTime<=e;)n=r,r=r._next;t._next=r,null!==n&&(n._next=t)}return t},Rt=vu,Dt=mu,Ft=function(){Ui||0===Bi||(lu(Bi,null),Bi=0)};var Pu={createPortal:Ou,findDOMNode:function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternalFiber;return void 0===e&&("function"==typeof t.render?u("188"):u("268",Object.keys(t))),t=null===(t=on(e))?null:t.stateNode},hydrate:function(t,e,n){return ku(null,t,e,!0,n)},render:function(t,e,n){return ku(null,t,e,!1,n)},unstable_renderSubtreeIntoContainer:function(t,e,n,r){return(null==t||void 0===t._reactInternalFiber)&&u("38"),ku(t,e,n,!1,r)},unmountComponentAtNode:function(t){return Eu(t)||u("40"),!!t._reactRootContainer&&(yu(function(){ku(null,null,t,!1,function(){t._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ou.apply(void 0,arguments)},unstable_batchedUpdates:vu,unstable_interactiveUpdates:mu,flushSync:function(t,e){Ui&&u("187");var n=$i;$i=!0;try{return Ri(t,e)}finally{$i=n,lu(1,null)}},unstable_flushControlled:function(t){var e=$i;$i=!0;try{Ri(t)}finally{($i=e)||Ui||lu(1,null)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[L,U,W,g,G,function(t){O(t,H)},Nt,At,Cn,A]},unstable_createRoot:function(t,e){return Eu(t)||u("278"),new xu(t,!0,null!=e&&!0===e.hydrate)}};!function(t){var e=t.findFiberByHostInstance;(function(t){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(e.isDisabled||!e.supportsFiber)return!0;try{var n=e.inject(t);Rr=Fr(function(t){return e.onCommitFiberRoot(n,t)}),Dr=Fr(function(t){return e.onCommitFiberUnmount(n,t)})}catch(t){}})(o({},t,{findHostInstanceByFiber:function(t){return null===(t=on(t))?null:t.stateNode},findFiberByHostInstance:function(t){return e?e(t):null}}))}({findFiberByHostInstance:z,bundleType:0,version:"16.5.0",rendererPackageName:"react-dom"});var Tu={default:Pu},Cu=Tu&&Pu||Tu;t.exports=Cu.default||Cu},function(t,e,n){"use strict";t.exports=n(193)},function(t,e,n){"use strict";
/** @license React v16.5.0
 * schedule.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(e,"__esModule",{value:!0});var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o=Date,i="function"==typeof setTimeout?setTimeout:void 0,u="function"==typeof clearTimeout?clearTimeout:void 0,a="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,c="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0,s="object"==typeof performance&&"function"==typeof performance.now;if(e.unstable_now=void 0,s){var l=performance;e.unstable_now=function(){return l.now()}}else e.unstable_now=function(){return o.now()};if(e.unstable_scheduleWork=void 0,e.unstable_cancelScheduledWork=void 0,r){var f=null,p=null,h=-1,d=!1,v=!1,y=void 0,m=void 0,g=function(t){y=a(function(e){u(m),t(e)}),m=i(function(){c(y),t(e.unstable_now())},100)},_=0,b=33,w=33,S={didTimeout:!1,timeRemaining:function(){var t=_-e.unstable_now();return 0<t?t:0}},x=function(t,n){var r=t.scheduledCallback,o=!1;try{r(n),o=!0}finally{e.unstable_cancelScheduledWork(t),o||(d=!0,window.postMessage(E,"*"))}},E="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(t){if(t.source===window&&t.data===E&&(d=!1,null!==f)){if(null!==f){var n=e.unstable_now();if(!(-1===h||h>n)){t=-1;for(var r=[],o=f;null!==o;){var i=o.timeoutTime;-1!==i&&i<=n?r.push(o):-1!==i&&(-1===t||i<t)&&(t=i),o=o.next}if(0<r.length)for(S.didTimeout=!0,n=0,o=r.length;n<o;n++)x(r[n],S);h=t}}for(t=e.unstable_now();0<_-t&&null!==f;)t=f,S.didTimeout=!1,x(t,S),t=e.unstable_now();null===f||v||(v=!0,g(k))}},!1);var k=function(t){v=!1;var e=t-_+w;e<w&&b<w?(8>e&&(e=8),w=e<b?b:e):b=e,_=t+w,d||(d=!0,window.postMessage(E,"*"))};e.unstable_scheduleWork=function(t,n){var r=-1;return null!=n&&"number"==typeof n.timeout&&(r=e.unstable_now()+n.timeout),(-1===h||-1!==r&&r<h)&&(h=r),t={scheduledCallback:t,timeoutTime:r,prev:null,next:null},null===f?f=t:null!==(n=t.prev=p)&&(n.next=t),p=t,v||(v=!0,g(k)),t},e.unstable_cancelScheduledWork=function(t){if(null!==t.prev||f===t){var e=t.next,n=t.prev;t.next=null,t.prev=null,null!==e?null!==n?(n.next=e,e.prev=n):(e.prev=null,f=e):null!==n?(n.next=null,p=n):p=f=null}}}else{var O=new Map;e.unstable_scheduleWork=function(t){var e={scheduledCallback:t,timeoutTime:0,next:null,prev:null},n=i(function(){t({timeRemaining:function(){return 1/0},didTimeout:!1})});return O.set(t,n),e},e.unstable_cancelScheduledWork=function(t){var e=O.get(t.scheduledCallback);O.delete(t),u(e)}}},function(t,e,n){"use strict";(function(t){if(n(195),n(392),n(393),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function r(t,n,r){t[n]||Object[e](t,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,n(71))},function(t,e,n){n(196),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(276),n(277),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(111),n(300),n(301),n(149),n(302),n(303),n(304),n(305),n(306),n(152),n(154),n(155),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),n(350),n(351),n(352),n(353),n(354),n(355),n(356),n(357),n(358),n(359),n(360),n(361),n(362),n(363),n(364),n(365),n(366),n(367),n(368),n(369),n(370),n(371),n(372),n(373),n(374),n(375),n(376),n(377),n(378),n(379),n(380),n(381),n(382),n(383),n(384),n(385),n(386),n(387),n(388),n(389),n(390),n(391),t.exports=n(20)},function(t,e,n){"use strict";var r=n(4),o=n(16),i=n(8),u=n(0),a=n(14),c=n(34).KEY,s=n(5),l=n(72),f=n(57),p=n(45),h=n(7),d=n(132),v=n(91),y=n(197),m=n(75),g=n(3),_=n(6),b=n(17),w=n(26),S=n(44),x=n(48),E=n(135),k=n(18),O=n(9),P=n(46),T=k.f,C=O.f,M=E.f,I=r.Symbol,j=r.JSON,N=j&&j.stringify,A=h("_hidden"),R=h("toPrimitive"),D={}.propertyIsEnumerable,F=l("symbol-registry"),z=l("symbols"),L=l("op-symbols"),U=Object.prototype,W="function"==typeof I,q=r.QObject,B=!q||!q.prototype||!q.prototype.findChild,V=i&&s(function(){return 7!=x(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=T(U,e);r&&delete U[e],C(t,e,n),r&&t!==U&&C(U,e,r)}:C,K=function(t){var e=z[t]=x(I.prototype);return e._k=t,e},H=W&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},G=function(t,e,n){return t===U&&G(L,e,n),g(t),e=w(e,!0),g(n),o(z,e)?(n.enumerable?(o(t,A)&&t[A][e]&&(t[A][e]=!1),n=x(n,{enumerable:S(0,!1)})):(o(t,A)||C(t,A,S(1,{})),t[A][e]=!0),V(t,e,n)):C(t,e,n)},$=function(t,e){g(t);for(var n,r=y(e=b(e)),o=0,i=r.length;i>o;)G(t,n=r[o++],e[n]);return t},Y=function(t){var e=D.call(this,t=w(t,!0));return!(this===U&&o(z,t)&&!o(L,t))&&(!(e||!o(this,t)||!o(z,t)||o(this,A)&&this[A][t])||e)},J=function(t,e){if(t=b(t),e=w(e,!0),t!==U||!o(z,e)||o(L,e)){var n=T(t,e);return!n||!o(z,e)||o(t,A)&&t[A][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=M(b(t)),r=[],i=0;n.length>i;)o(z,e=n[i++])||e==A||e==c||r.push(e);return r},X=function(t){for(var e,n=t===U,r=M(n?L:b(t)),i=[],u=0;r.length>u;)!o(z,e=r[u++])||n&&!o(U,e)||i.push(z[e]);return i};W||(a((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(L,n),o(this,A)&&o(this[A],t)&&(this[A][t]=!1),V(this,t,S(1,n))};return i&&B&&V(U,t,{configurable:!0,set:e}),K(t)}).prototype,"toString",function(){return this._k}),k.f=J,O.f=G,n(49).f=E.f=Q,n(67).f=Y,n(74).f=X,i&&!n(35)&&a(U,"propertyIsEnumerable",Y,!0),d.f=function(t){return K(h(t))}),u(u.G+u.W+u.F*!W,{Symbol:I});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)h(Z[tt++]);for(var et=P(h.store),nt=0;et.length>nt;)v(et[nt++]);u(u.S+u.F*!W,"Symbol",{for:function(t){return o(F,t+="")?F[t]:F[t]=I(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in F)if(F[e]===t)return e},useSetter:function(){B=!0},useSimple:function(){B=!1}}),u(u.S+u.F*!W,"Object",{create:function(t,e){return void 0===e?x(t):$(x(t),e)},defineProperty:G,defineProperties:$,getOwnPropertyDescriptor:J,getOwnPropertyNames:Q,getOwnPropertySymbols:X}),j&&u(u.S+u.F*(!W||s(function(){var t=I();return"[null]"!=N([t])||"{}"!=N({a:t})||"{}"!=N(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(_(e)||void 0!==t)&&!H(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!H(e))return e}),r[1]=e,N.apply(j,r)}}),I.prototype[R]||n(13)(I.prototype,R,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){var r=n(46),o=n(74),i=n(67);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,a=n(t),c=i.f,s=0;a.length>s;)c.call(t,u=a[s++])&&e.push(u);return e}},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(48)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperty:n(9).f})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperties:n(134)})},function(t,e,n){var r=n(17),o=n(18).f;n(29)("getOwnPropertyDescriptor",function(){return function(t,e){return o(r(t),e)}})},function(t,e,n){var r=n(11),o=n(19);n(29)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(11),o=n(46);n(29)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){n(29)("getOwnPropertyNames",function(){return n(135).f})},function(t,e,n){var r=n(6),o=n(34).onFreeze;n(29)("freeze",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(6),o=n(34).onFreeze;n(29)("seal",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(6),o=n(34).onFreeze;n(29)("preventExtensions",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(6);n(29)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(6);n(29)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(6);n(29)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(136)})},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(213)})},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(95).set})},function(t,e,n){"use strict";var r=n(68),o={};o[n(7)("toStringTag")]="z",o+""!="[object z]"&&n(14)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(137)})},function(t,e,n){var r=n(9).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(8)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(6),o=n(19),i=n(7)("hasInstance"),u=Function.prototype;i in u||n(9).f(u,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(0),o=n(139);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){var r=n(0),o=n(140);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){"use strict";var r=n(4),o=n(16),i=n(22),u=n(97),a=n(26),c=n(5),s=n(49).f,l=n(18).f,f=n(9).f,p=n(58).trim,h=r.Number,d=h,v=h.prototype,y="Number"==i(n(48)(v)),m="trim"in String.prototype,g=function(t){var e=a(t,!1);if("string"==typeof e&&e.length>2){var n,r,o,i=(e=m?e.trim():p(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+e}for(var u,c=e.slice(2),s=0,l=c.length;s<l;s++)if((u=c.charCodeAt(s))<48||u>o)return NaN;return parseInt(c,r)}}return+e};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof h&&(y?c(function(){v.valueOf.call(n)}):"Number"!=i(n))?u(new d(g(e)),n,h):g(e)};for(var _,b=n(8)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;b.length>w;w++)o(d,_=b[w])&&!o(h,_)&&f(h,_,l(d,_));h.prototype=v,v.constructor=h,n(14)(r,"Number",h)}},function(t,e,n){"use strict";var r=n(0),o=n(28),i=n(141),u=n(98),a=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*s[n],s[n]=r%1e7,r=c(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=s[e],s[e]=c(n/t),n=n%t*1e7},h=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==s[t]){var n=String(s[t]);e=""===e?n:e+u.call("0",7-n.length)+n}return e},d=function(t,e,n){return 0===e?n:e%2==1?d(t,e-1,n*t):d(t*t,e/2,n)};r(r.P+r.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(5)(function(){a.call({})})),"Number",{toFixed:function(t){var e,n,r,a,c=i(this,l),s=o(t),v="",y="0";if(s<0||s>20)throw RangeError(l);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(c*d(2,69,1))-69)<0?c*d(2,-e,1):c/d(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=s;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=h()}else f(0,n),f(1<<-e,0),y=h()+u.call("0",s);return y=s>0?v+((a=y.length)<=s?"0."+u.call("0",s-a)+y:y.slice(0,a-s)+"."+y.slice(a-s)):v+y}})},function(t,e,n){"use strict";var r=n(0),o=n(5),i=n(141),u=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==u.call(1,void 0)})||!o(function(){u.call({})})),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(e):u.call(e,t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var r=n(0),o=n(4).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(142)})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0),o=n(142),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0),o=n(140);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,e,n){var r=n(0),o=n(139);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,e,n){var r=n(0),o=n(143),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),o=n(99);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,e,n){var r=n(0),o=n(100);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(144)})},function(t,e,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,u=0,a=arguments.length,c=0;u<a;)c<(n=o(arguments[u++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,e,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(5)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(143)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(99)})},function(t,e,n){var r=n(0),o=n(100),i=Math.exp;r(r.S+r.F*n(5)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0),o=n(100),i=Math.exp;r(r.S,"Math",{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),o=n(47),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,u=0;r>u;){if(e=+arguments[u++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0),o=n(17),i=n(10);r(r.S,"String",{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,u=[],a=0;n>a;)u.push(String(e[a++])),a<r&&u.push(String(arguments[a]));return u.join("")}})},function(t,e,n){"use strict";n(58)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){"use strict";var r=n(101)(!0);n(102)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(0),o=n(101)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(104),u="".endsWith;r(r.P+r.F*n(105)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(e.length),a=void 0===n?r:Math.min(o(n),r),c=String(t);return u?u.call(e,c,a):e.slice(a-c.length,a)===c}})},function(t,e,n){"use strict";var r=n(0),o=n(104);r(r.P+r.F*n(105)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(98)})},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(104),u="".startsWith;r(r.P+r.F*n(105)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return u?u.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(15)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";n(15)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(15)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(15)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(15)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(15)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(15)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(15)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(15)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(15)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(15)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(15)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(15)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(0),o=n(11),i=n(26);r(r.P+r.F*n(5)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=o(this),n=i(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0),o=n(275);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,e,n){"use strict";var r=n(5),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(n>99?n:"0"+u(n))+"Z"}:i},function(t,e,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(14)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,e,n){var r=n(7)("toPrimitive"),o=Date.prototype;r in o||n(13)(o,r,n(278))},function(t,e,n){"use strict";var r=n(3),o=n(26);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(75)})},function(t,e,n){"use strict";var r=n(21),o=n(0),i=n(11),u=n(145),a=n(106),c=n(10),s=n(107),l=n(108);o(o.S+o.F*!n(77)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,o,f,p=i(t),h="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,m=0,g=l(p);if(y&&(v=r(v,d>2?arguments[2]:void 0,2)),void 0==g||h==Array&&a(g))for(n=new h(e=c(p.length));e>m;m++)s(n,m,y?v(p[m],m):p[m]);else for(f=g.call(p),n=new h;!(o=f.next()).done;m++)s(n,m,y?u(f,v,[o.value,m],!0):o.value);return n.length=m,n}})},function(t,e,n){"use strict";var r=n(0),o=n(107);r(r.S+r.F*n(5)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(0),o=n(17),i=[].join;r(r.P+r.F*(n(66)!=Object||!n(23)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),o=n(94),i=n(22),u=n(47),a=n(10),c=[].slice;r(r.P+r.F*n(5)(function(){o&&c.call(o)}),"Array",{slice:function(t,e){var n=a(this.length),r=i(this);if(e=void 0===e?n:e,"Array"==r)return c.call(this,t,e);for(var o=u(t,n),s=u(e,n),l=a(s-o),f=new Array(l),p=0;p<l;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(t,e,n){"use strict";var r=n(0),o=n(12),i=n(11),u=n(5),a=[].sort,c=[1,2,3];r(r.P+r.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!n(23)(a)),"Array",{sort:function(t){return void 0===t?a.call(i(this)):a.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(0),o=n(30)(0),i=n(23)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,e,n){var r=n(6),o=n(75),i=n(7)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),o=n(30)(1);r(r.P+r.F*!n(23)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(30)(2);r(r.P+r.F*!n(23)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(30)(3);r(r.P+r.F*!n(23)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(30)(4);r(r.P+r.F*!n(23)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(146);r(r.P+r.F*!n(23)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(146);r(r.P+r.F*!n(23)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(73)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!n(23)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(17),i=n(28),u=n(10),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(23)(a)),"Array",{lastIndexOf:function(t){if(c)return a.apply(this,arguments)||0;var e=o(this),n=u(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(147)}),n(36)("copyWithin")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(110)}),n(36)("fill")},function(t,e,n){"use strict";var r=n(0),o=n(30)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(36)("find")},function(t,e,n){"use strict";var r=n(0),o=n(30)(6),i="findIndex",u=!0;i in[]&&Array(1)[i](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(36)(i)},function(t,e,n){n(50)("Array")},function(t,e,n){var r=n(4),o=n(97),i=n(9).f,u=n(49).f,a=n(76),c=n(78),s=r.RegExp,l=s,f=s.prototype,p=/a/g,h=/a/g,d=new s(p)!==p;if(n(8)&&(!d||n(5)(function(){return h[n(7)("match")]=!1,s(p)!=p||s(h)==h||"/a/i"!=s(p,"i")}))){s=function(t,e){var n=this instanceof s,r=a(t),i=void 0===e;return!n&&r&&t.constructor===s&&i?t:o(d?new l(r&&!i?t.source:t,e):l((r=t instanceof s)?t.source:t,r&&i?c.call(t):e),n?this:f,s)};for(var v=function(t){t in s||i(s,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})},y=u(l),m=0;y.length>m;)v(y[m++]);f.constructor=s,s.prototype=f,n(14)(r,"RegExp",s)}n(50)("RegExp")},function(t,e,n){"use strict";n(149);var r=n(3),o=n(78),i=n(8),u=/./.toString,a=function(t){n(14)(RegExp.prototype,"toString",t,!0)};n(5)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?a(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=u.name&&a(function(){return u.call(this)})},function(t,e,n){n(79)("match",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(79)("replace",2,function(t,e,n){return[function(r,o){"use strict";var i=t(this),u=void 0==r?void 0:r[e];return void 0!==u?u.call(r,i,o):n.call(String(i),r,o)},n]})},function(t,e,n){n(79)("search",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(79)("split",2,function(t,e,r){"use strict";var o=n(76),i=r,u=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var a=void 0===/()??/.exec("")[1];r=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!o(t))return i.call(n,t,e);var r,c,s,l,f,p=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,v=void 0===e?4294967295:e>>>0,y=new RegExp(t.source,h+"g");for(a||(r=new RegExp("^"+y.source+"$(?!\\s)",h));(c=y.exec(n))&&!((s=c.index+c[0].length)>d&&(p.push(n.slice(d,c.index)),!a&&c.length>1&&c[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(c[f]=void 0)}),c.length>1&&c.index<n.length&&u.apply(p,c.slice(1)),l=c[0].length,d=s,p.length>=v));)y.lastIndex===c.index&&y.lastIndex++;return d===n.length?!l&&y.test("")||p.push(""):p.push(n.slice(d)),p.length>v?p.slice(0,v):p}}else"0".split(void 0,0).length&&(r=function(t,e){return void 0===t&&0===e?[]:i.call(this,t,e)});return[function(n,o){var i=t(this),u=void 0==n?void 0:n[e];return void 0!==u?u.call(n,i,o):r.call(String(i),n,o)},r]})},function(t,e,n){"use strict";var r,o,i,u,a=n(35),c=n(4),s=n(21),l=n(68),f=n(0),p=n(6),h=n(12),d=n(51),v=n(52),y=n(80),m=n(112).set,g=n(113)(),_=n(114),b=n(150),w=n(81),S=n(151),x=c.TypeError,E=c.process,k=E&&E.versions,O=k&&k.v8||"",P=c.Promise,T="process"==l(E),C=function(){},M=o=_.f,I=!!function(){try{var t=P.resolve(1),e=(t.constructor={})[n(7)("species")]=function(t){t(C,C)};return(T||"function"==typeof PromiseRejectionEvent)&&t.then(C)instanceof e&&0!==O.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),j=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},N=function(t,e){if(!t._n){t._n=!0;var n=t._c;g(function(){for(var r=t._v,o=1==t._s,i=0,u=function(e){var n,i,u,a=o?e.ok:e.fail,c=e.resolve,s=e.reject,l=e.domain;try{a?(o||(2==t._h&&D(t),t._h=1),!0===a?n=r:(l&&l.enter(),n=a(r),l&&(l.exit(),u=!0)),n===e.promise?s(x("Promise-chain cycle")):(i=j(n))?i.call(n,c,s):c(n)):s(r)}catch(t){l&&!u&&l.exit(),s(t)}};n.length>i;)u(n[i++]);t._c=[],t._n=!1,e&&!t._h&&A(t)})}},A=function(t){m.call(c,function(){var e,n,r,o=t._v,i=R(t);if(i&&(e=b(function(){T?E.emit("unhandledRejection",o,t):(n=c.onunhandledrejection)?n({promise:t,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=T||R(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},D=function(t){m.call(c,function(){var e;T?E.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})})},F=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),N(e,!0))},z=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw x("Promise can't be resolved itself");(e=j(t))?g(function(){var r={_w:n,_d:!1};try{e.call(t,s(z,r,1),s(F,r,1))}catch(t){F.call(r,t)}}):(n._v=t,n._s=1,N(n,!1))}catch(t){F.call({_w:n,_d:!1},t)}}};I||(P=function(t){d(this,P,"Promise","_h"),h(t),r.call(this);try{t(s(z,this,1),s(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(53)(P.prototype,{then:function(t,e){var n=M(y(this,P));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=T?E.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&N(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=s(z,t,1),this.reject=s(F,t,1)},_.f=M=function(t){return t===P||t===u?new i(t):o(t)}),f(f.G+f.W+f.F*!I,{Promise:P}),n(57)(P,"Promise"),n(50)("Promise"),u=n(20).Promise,f(f.S+f.F*!I,"Promise",{reject:function(t){var e=M(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(a||!I),"Promise",{resolve:function(t){return S(a&&this===u?P:this,t)}}),f(f.S+f.F*!(I&&n(77)(function(t){P.all(t).catch(C)})),"Promise",{all:function(t){var e=this,n=M(e),r=n.resolve,o=n.reject,i=b(function(){var n=[],i=0,u=1;v(t,!1,function(t){var a=i++,c=!1;n.push(void 0),u++,e.resolve(t).then(function(t){c||(c=!0,n[a]=t,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=M(e),r=n.reject,o=b(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e,n){"use strict";var r=n(156),o=n(60);n(82)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(0),o=n(83),i=n(115),u=n(3),a=n(47),c=n(10),s=n(6),l=n(4).ArrayBuffer,f=n(80),p=i.ArrayBuffer,h=i.DataView,d=o.ABV&&l.isView,v=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(l!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||s(t)&&y in t}}),r(r.P+r.U+r.F*n(5)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(u(this),t);for(var n=u(this).byteLength,r=a(t,n),o=a(void 0===e?n:e,n),i=new(f(this,p))(c(o-r)),s=new h(this),l=new h(i),d=0;r<o;)l.setUint8(d++,s.getUint8(r++));return i}}),n(50)("ArrayBuffer")},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(83).ABV,{DataView:n(115).DataView})},function(t,e,n){n(31)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(31)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(31)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(31)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(31)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(31)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(31)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(31)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(31)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0),o=n(12),i=n(3),u=(n(4).Reflect||{}).apply,a=Function.apply;r(r.S+r.F*!n(5)(function(){u(function(){})}),"Reflect",{apply:function(t,e,n){var r=o(t),c=i(n);return u?u(r,e,c):a.call(r,e,c)}})},function(t,e,n){var r=n(0),o=n(48),i=n(12),u=n(3),a=n(6),c=n(5),s=n(137),l=(n(4).Reflect||{}).construct,f=c(function(){function t(){}return!(l(function(){},[],t)instanceof t)}),p=!c(function(){l(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(t,e){i(t),u(e);var n=arguments.length<3?t:i(arguments[2]);if(p&&!f)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(s.apply(t,r))}var c=n.prototype,h=o(a(c)?c:Object.prototype),d=Function.apply.call(t,h,e);return a(d)?d:h}})},function(t,e,n){var r=n(9),o=n(0),i=n(3),u=n(26);o(o.S+o.F*n(5)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){i(t),e=u(e,!0),i(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),o=n(18).f,i=n(3);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(0),o=n(3),i=function(t){this._t=o(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(103)(i,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,n){var r=n(18),o=n(19),i=n(16),u=n(0),a=n(6),c=n(3);u(u.S,"Reflect",{get:function t(e,n){var u,s,l=arguments.length<3?e:arguments[2];return c(e)===l?e[n]:(u=r.f(e,n))?i(u,"value")?u.value:void 0!==u.get?u.get.call(l):void 0:a(s=o(e))?t(s,n,l):void 0}})},function(t,e,n){var r=n(18),o=n(0),i=n(3);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(i(t),e)}})},function(t,e,n){var r=n(0),o=n(19),i=n(3);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),o=n(3),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(158)})},function(t,e,n){var r=n(0),o=n(3),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(9),o=n(18),i=n(19),u=n(16),a=n(0),c=n(44),s=n(3),l=n(6);a(a.S,"Reflect",{set:function t(e,n,a){var f,p,h=arguments.length<4?e:arguments[3],d=o.f(s(e),n);if(!d){if(l(p=i(e)))return t(p,n,a,h);d=c(0)}if(u(d,"value")){if(!1===d.writable||!l(h))return!1;if(f=o.f(h,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=a,r.f(h,n,f)}else r.f(h,n,c(0,a));return!0}return void 0!==d.set&&(d.set.call(h,a),!0)}})},function(t,e,n){var r=n(0),o=n(95);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){o.check(t,e);try{return o.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){"use strict";var r=n(0),o=n(73)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(36)("includes")},function(t,e,n){"use strict";var r=n(0),o=n(159),i=n(11),u=n(10),a=n(12),c=n(109);r(r.P,"Array",{flatMap:function(t){var e,n,r=i(this);return a(t),e=u(r.length),n=c(r,0),o(n,r,r,e,0,1,t,arguments[1]),n}}),n(36)("flatMap")},function(t,e,n){"use strict";var r=n(0),o=n(159),i=n(11),u=n(10),a=n(28),c=n(109);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),n=u(e.length),r=c(e,0);return o(r,e,e,n,0,void 0===t?1:a(t)),r}}),n(36)("flatten")},function(t,e,n){"use strict";var r=n(0),o=n(101)(!0);r(r.P,"String",{at:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(160),i=n(81);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(160),i=n(81);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";n(58)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){"use strict";n(58)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){"use strict";var r=n(0),o=n(27),i=n(10),u=n(76),a=n(78),c=RegExp.prototype,s=function(t,e){this._r=t,this._s=e};n(103)(s,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!u(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in c?String(t.flags):a.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(t.lastIndex),new s(r,e)}})},function(t,e,n){n(91)("asyncIterator")},function(t,e,n){n(91)("observable")},function(t,e,n){var r=n(0),o=n(158),i=n(17),u=n(18),a=n(107);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=i(t),c=u.f,s=o(r),l={},f=0;s.length>f;)void 0!==(n=c(r,e=s[f++]))&&a(l,e,n);return l}})},function(t,e,n){var r=n(0),o=n(161)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(161)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){"use strict";var r=n(0),o=n(11),i=n(12),u=n(9);n(8)&&r(r.P+n(84),"Object",{__defineGetter__:function(t,e){u.f(o(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(11),i=n(12),u=n(9);n(8)&&r(r.P+n(84),"Object",{__defineSetter__:function(t,e){u.f(o(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(11),i=n(26),u=n(19),a=n(18).f;n(8)&&r(r.P+n(84),"Object",{__lookupGetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=a(n,r))return e.get}while(n=u(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(11),i=n(26),u=n(19),a=n(18).f;n(8)&&r(r.P+n(84),"Object",{__lookupSetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=a(n,r))return e.set}while(n=u(n))}})},function(t,e,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(162)("Map")})},function(t,e,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(162)("Set")})},function(t,e,n){n(85)("Map")},function(t,e,n){n(85)("Set")},function(t,e,n){n(85)("WeakMap")},function(t,e,n){n(85)("WeakSet")},function(t,e,n){n(86)("Map")},function(t,e,n){n(86)("Set")},function(t,e,n){n(86)("WeakMap")},function(t,e,n){n(86)("WeakSet")},function(t,e,n){var r=n(0);r(r.G,{global:n(4)})},function(t,e,n){var r=n(0);r(r.S,"System",{global:n(4)})},function(t,e,n){var r=n(0),o=n(22);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){var r=n(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,e,n){var r=n(0),o=n(164),i=n(144);r(r.S,"Math",{fscale:function(t,e,n,r,u){return i(o(t,e,n,r,u))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,u=n>>16,a=r>>16,c=(u*i>>>0)+(o*i>>>16);return u*a+(c>>16)+((o*a>>>0)+(65535&c)>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){var r=n(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{scale:n(164)})},function(t,e,n){var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,u=n>>>16,a=r>>>16,c=(u*i>>>0)+(o*i>>>16);return u*a+(c>>>16)+((o*a>>>0)+(65535&c)>>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){"use strict";var r=n(0),o=n(20),i=n(4),u=n(80),a=n(151);r(r.P+r.R,"Promise",{finally:function(t){var e=u(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return a(e,t()).then(function(){return n})}:t,n?function(n){return a(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){"use strict";var r=n(0),o=n(114),i=n(150);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){var r=n(32),o=n(3),i=r.key,u=r.set;r.exp({defineMetadata:function(t,e,n,r){u(t,e,o(n),i(r))}})},function(t,e,n){var r=n(32),o=n(3),i=r.key,u=r.map,a=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:i(arguments[2]),r=u(o(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var c=a.get(e);return c.delete(n),!!c.size||a.delete(e)}})},function(t,e,n){var r=n(32),o=n(3),i=n(19),u=r.has,a=r.get,c=r.key,s=function(t,e,n){if(u(t,e,n))return a(t,e,n);var r=i(e);return null!==r?s(t,r,n):void 0};r.exp({getMetadata:function(t,e){return s(t,o(e),arguments.length<3?void 0:c(arguments[2]))}})},function(t,e,n){var r=n(154),o=n(163),i=n(32),u=n(3),a=n(19),c=i.keys,s=i.key,l=function(t,e){var n=c(t,e),i=a(t);if(null===i)return n;var u=l(i,e);return u.length?n.length?o(new r(n.concat(u))):u:n};i.exp({getMetadataKeys:function(t){return l(u(t),arguments.length<2?void 0:s(arguments[1]))}})},function(t,e,n){var r=n(32),o=n(3),i=r.get,u=r.key;r.exp({getOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(32),o=n(3),i=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,e,n){var r=n(32),o=n(3),i=n(19),u=r.has,a=r.key,c=function(t,e,n){if(u(t,e,n))return!0;var r=i(e);return null!==r&&c(t,r,n)};r.exp({hasMetadata:function(t,e){return c(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(32),o=n(3),i=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(32),o=n(3),i=n(12),u=r.key,a=r.set;r.exp({metadata:function(t,e){return function(n,r){a(t,e,(void 0!==r?o:i)(n),u(r))}}})},function(t,e,n){var r=n(0),o=n(113)(),i=n(4).process,u="process"==n(22)(i);r(r.G,{asap:function(t){var e=u&&i.domain;o(e?e.bind(t):t)}})},function(t,e,n){"use strict";var r=n(0),o=n(4),i=n(20),u=n(113)(),a=n(7)("observable"),c=n(12),s=n(3),l=n(51),f=n(53),p=n(13),h=n(52),d=h.RETURN,v=function(t){return null==t?void 0:c(t)},y=function(t){var e=t._c;e&&(t._c=void 0,e())},m=function(t){return void 0===t._o},g=function(t){m(t)||(t._o=void 0,y(t))},_=function(t,e){s(t),this._c=void 0,this._o=t,t=new b(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:c(n),this._c=n)}catch(e){return void t.error(e)}m(this)&&y(this)};_.prototype=f({},{unsubscribe:function(){g(this)}});var b=function(t){this._s=t};b.prototype=f({},{next:function(t){var e=this._s;if(!m(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{g(e)}finally{throw t}}}},error:function(t){var e=this._s;if(m(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{y(e)}finally{throw t}}return y(e),t},complete:function(t){var e=this._s;if(!m(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{y(e)}finally{throw t}}return y(e),t}}});var w=function(t){l(this,w,"Observable","_f")._f=c(t)};f(w.prototype,{subscribe:function(t){return new _(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||o.Promise)(function(n,r){c(t);var o=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n})})}}),f(w,{from:function(t){var e="function"==typeof this?this:w,n=v(s(t)[a]);if(n){var r=s(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return u(function(){if(!n){try{if(h(t,!1,function(t){if(e.next(t),n)return d})===d)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return u(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),p(w.prototype,a,function(){return this}),r(r.G,{Observable:w}),n(50)("Observable")},function(t,e,n){var r=n(4),o=n(0),i=n(81),u=[].slice,a=/MSIE .\./.test(i),c=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};o(o.G+o.B+o.F*a,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,e,n){var r=n(0),o=n(112);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,e,n){for(var r=n(111),o=n(46),i=n(14),u=n(4),a=n(13),c=n(59),s=n(7),l=s("iterator"),f=s("toStringTag"),p=c.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(h),v=0;v<d.length;v++){var y,m=d[v],g=h[m],_=u[m],b=_&&_.prototype;if(b&&(b[l]||a(b,l,p),b[f]||a(b,f,m),c[m]=p,g))for(y in r)b[y]||i(b,y,r[y],!0)}},function(t,e,n){(function(e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",s="object"==typeof t,l=e.regeneratorRuntime;if(l)s&&(t.exports=l);else{(l=e.regeneratorRuntime=s?t.exports:{}).wrap=b;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",v={},y={};y[u]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(I([])));g&&g!==r&&o.call(g,u)&&(y=g);var _=E.prototype=S.prototype=Object.create(y);x.prototype=_.constructor=E,E.constructor=x,E[c]=x.displayName="GeneratorFunction",l.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},l.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(_),t},l.awrap=function(t){return{__await:t}},k(O.prototype),O.prototype[a]=function(){return this},l.AsyncIterator=O,l.async=function(t,e,n,r){var o=new O(b(t,e,n,r));return l.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},k(_),_[c]="Generator",_[u]=function(){return this},_.toString=function(){return"[object Generator]"},l.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},l.values=I,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return a.type="throw",a.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],a=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var c=o.call(u,"catchLoc"),s=o.call(u,"finallyLoc");if(c&&s){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(c){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:I(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function b(t,e,n,r){var o=e&&e.prototype instanceof S?e:S,i=Object.create(o.prototype),u=new M(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return j()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var a=P(u,n);if(a){if(a===v)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var c=w(t,e,n);if("normal"===c.type){if(r=n.done?d:p,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=d,n.method="throw",n.arg=c.arg)}}}(t,n,u),i}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function S(){}function x(){}function E(){}function k(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function O(t){function n(e,r,i,u){var a=w(t[e],t,r);if("throw"!==a.type){var c=a.arg,s=c.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(t){n("next",t,i,u)},function(t){n("throw",t,i,u)}):Promise.resolve(s).then(function(t){c.value=t,i(c)},u)}u(a.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function o(){return new Promise(function(r,o){n(t,e,r,o)})}return r=r?r.then(o,o):o()}}function P(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,P(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=w(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function I(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:j}}function j(){return{value:n,done:!0}}}("object"==typeof e?e:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(71))},function(t,e,n){n(394),t.exports=n(20).RegExp.escape},function(t,e,n){var r=n(0),o=n(395)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,e){t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){n(397),t.exports=n(33).Object.getPrototypeOf},function(t,e,n){var r=n(165),o=n(166);n(398)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(61),o=n(33),i=n(70);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",u)}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){t.exports={default:n(401),__esModule:!0}},function(t,e,n){n(402);var r=n(33).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){var r=n(61);r(r.S+r.F*!n(56),"Object",{defineProperty:n(55).f})},function(t,e,n){t.exports={default:n(404),__esModule:!0}},function(t,e,n){n(405),n(414),t.exports=n(126).f("iterator")},function(t,e,n){"use strict";var r=n(406)(!0);n(171)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var r=n(120),o=n(116);t.exports=function(t){return function(e,n){var i,u,a=String(o(e)),c=r(n),s=a.length;return c<0||c>=s?t?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):i:t?a.slice(c,c+2):u-56320+(i-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(122),o=n(89),i=n(125),u={};n(62)(u,n(65)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(55),o=n(69),i=n(123);t.exports=n(56)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),a=u.length,c=0;a>c;)r.f(t,n=u[c++],e[n]);return t}},function(t,e,n){var r=n(174);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(64),o=n(411),i=n(412);t.exports=function(t){return function(e,n,u){var a,c=r(e),s=o(c.length),l=i(u,s);if(t&&n!=n){for(;s>l;)if((a=c[l++])!=a)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}}},function(t,e,n){var r=n(120),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(120),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(37).document;t.exports=r&&r.documentElement},function(t,e,n){n(415);for(var r=n(37),o=n(62),i=n(121),u=n(65)("toStringTag"),a="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),c=0;c<a.length;c++){var s=a[c],l=r[s],f=l&&l.prototype;f&&!f[u]&&o(f,u,s),i[s]=i.Array}},function(t,e,n){"use strict";var r=n(416),o=n(417),i=n(121),u=n(64);t.exports=n(171)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){t.exports={default:n(419),__esModule:!0}},function(t,e,n){n(420),n(425),n(426),n(427),t.exports=n(33).Symbol},function(t,e,n){"use strict";var r=n(37),o=n(54),i=n(56),u=n(61),a=n(172),c=n(421).KEY,s=n(70),l=n(118),f=n(125),p=n(88),h=n(65),d=n(126),v=n(127),y=n(422),m=n(423),g=n(69),_=n(63),b=n(64),w=n(119),S=n(89),x=n(122),E=n(424),k=n(177),O=n(55),P=n(123),T=k.f,C=O.f,M=E.f,I=r.Symbol,j=r.JSON,N=j&&j.stringify,A=h("_hidden"),R=h("toPrimitive"),D={}.propertyIsEnumerable,F=l("symbol-registry"),z=l("symbols"),L=l("op-symbols"),U=Object.prototype,W="function"==typeof I,q=r.QObject,B=!q||!q.prototype||!q.prototype.findChild,V=i&&s(function(){return 7!=x(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=T(U,e);r&&delete U[e],C(t,e,n),r&&t!==U&&C(U,e,r)}:C,K=function(t){var e=z[t]=x(I.prototype);return e._k=t,e},H=W&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},G=function(t,e,n){return t===U&&G(L,e,n),g(t),e=w(e,!0),g(n),o(z,e)?(n.enumerable?(o(t,A)&&t[A][e]&&(t[A][e]=!1),n=x(n,{enumerable:S(0,!1)})):(o(t,A)||C(t,A,S(1,{})),t[A][e]=!0),V(t,e,n)):C(t,e,n)},$=function(t,e){g(t);for(var n,r=y(e=b(e)),o=0,i=r.length;i>o;)G(t,n=r[o++],e[n]);return t},Y=function(t){var e=D.call(this,t=w(t,!0));return!(this===U&&o(z,t)&&!o(L,t))&&(!(e||!o(this,t)||!o(z,t)||o(this,A)&&this[A][t])||e)},J=function(t,e){if(t=b(t),e=w(e,!0),t!==U||!o(z,e)||o(L,e)){var n=T(t,e);return!n||!o(z,e)||o(t,A)&&t[A][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=M(b(t)),r=[],i=0;n.length>i;)o(z,e=n[i++])||e==A||e==c||r.push(e);return r},X=function(t){for(var e,n=t===U,r=M(n?L:b(t)),i=[],u=0;r.length>u;)!o(z,e=r[u++])||n&&!o(U,e)||i.push(z[e]);return i};W||(a((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(L,n),o(this,A)&&o(this[A],t)&&(this[A][t]=!1),V(this,t,S(1,n))};return i&&B&&V(U,t,{configurable:!0,set:e}),K(t)}).prototype,"toString",function(){return this._k}),k.f=J,O.f=G,n(176).f=E.f=Q,n(128).f=Y,n(175).f=X,i&&!n(87)&&a(U,"propertyIsEnumerable",Y,!0),d.f=function(t){return K(h(t))}),u(u.G+u.W+u.F*!W,{Symbol:I});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)h(Z[tt++]);for(var et=P(h.store),nt=0;et.length>nt;)v(et[nt++]);u(u.S+u.F*!W,"Symbol",{for:function(t){return o(F,t+="")?F[t]:F[t]=I(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in F)if(F[e]===t)return e},useSetter:function(){B=!0},useSimple:function(){B=!1}}),u(u.S+u.F*!W,"Object",{create:function(t,e){return void 0===e?x(t):$(x(t),e)},defineProperty:G,defineProperties:$,getOwnPropertyDescriptor:J,getOwnPropertyNames:Q,getOwnPropertySymbols:X}),j&&u(u.S+u.F*(!W||s(function(){var t=I();return"[null]"!=N([t])||"{}"!=N({a:t})||"{}"!=N(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(_(e)||void 0!==t)&&!H(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!H(e))return e}),r[1]=e,N.apply(j,r)}}),I.prototype[R]||n(62)(I.prototype,R,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){var r=n(88)("meta"),o=n(63),i=n(54),u=n(55).f,a=0,c=Object.isExtensible||function(){return!0},s=!n(70)(function(){return c(Object.preventExtensions({}))}),l=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return s&&f.NEED&&c(t)&&!i(t,r)&&l(t),t}}},function(t,e,n){var r=n(123),o=n(175),i=n(128);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,a=n(t),c=i.f,s=0;a.length>s;)c.call(t,u=a[s++])&&e.push(u);return e}},function(t,e,n){var r=n(174);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(64),o=n(176).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e){},function(t,e,n){n(127)("asyncIterator")},function(t,e,n){n(127)("observable")},function(t,e,n){t.exports={default:n(429),__esModule:!0}},function(t,e,n){n(430),t.exports=n(33).Object.setPrototypeOf},function(t,e,n){var r=n(61);r(r.S,"Object",{setPrototypeOf:n(431).set})},function(t,e,n){var r=n(63),o=n(69),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(167)(Function.call,n(177).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){t.exports={default:n(433),__esModule:!0}},function(t,e,n){n(434);var r=n(33).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){var r=n(61);r(r.S,"Object",{create:n(122)})},function(t,e,n){"use strict";var r=n(436);function o(){}t.exports=function(){function t(t,e,n,o,i,u){if(u!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e};return n.checkPropTypes=o,n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";e.__esModule=!0,e.locationsAreEqual=e.createLocation=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=a(n(439)),i=a(n(440)),u=n(179);function a(t){return t&&t.__esModule?t:{default:t}}e.createLocation=function(t,e,n,i){var a=void 0;"string"==typeof t?(a=(0,u.parsePath)(t)).state=e:(void 0===(a=r({},t)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==e&&void 0===a.state&&(a.state=e));try{a.pathname=decodeURI(a.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return n&&(a.key=n),i?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=(0,o.default)(a.pathname,i.pathname)):a.pathname=i.pathname:a.pathname||(a.pathname="/"),a},e.locationsAreEqual=function(t,e){return t.pathname===e.pathname&&t.search===e.search&&t.hash===e.hash&&t.key===e.key&&(0,i.default)(t.state,e.state)}},function(t,e,n){"use strict";function r(t){return"/"===t.charAt(0)}function o(t,e){for(var n=e,r=n+1,o=t.length;r<o;n+=1,r+=1)t[n]=t[r];t.pop()}n.r(e),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=t&&t.split("/")||[],i=e&&e.split("/")||[],u=t&&r(t),a=e&&r(e),c=u||a;if(t&&r(t)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var s=void 0;if(i.length){var l=i[i.length-1];s="."===l||".."===l||""===l}else s=!1;for(var f=0,p=i.length;p>=0;p--){var h=i[p];"."===h?o(i,p):".."===h?(o(i,p),f++):f&&(o(i,p),f--)}if(!c)for(;f--;f)i.unshift("..");!c||""===i[0]||i[0]&&r(i[0])||i.unshift("");var d=i.join("/");return s&&"/"!==d.substr(-1)&&(d+="/"),d}},function(t,e,n){"use strict";n.r(e);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function t(e,n){if(e===n)return!0;if(null==e||null==n)return!1;if(Array.isArray(e))return Array.isArray(n)&&e.length===n.length&&e.every(function(e,r){return t(e,n[r])});var o=void 0===e?"undefined":r(e);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=e.valueOf(),u=n.valueOf();if(i!==e||u!==n)return t(i,u);var a=Object.keys(e),c=Object.keys(n);return a.length===c.length&&a.every(function(r){return t(e[r],n[r])})}return!1}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(178));e.default=function(){var t=null,e=[];return{setPrompt:function(e){return(0,r.default)(null==t,"A history supports only one prompt at a time"),t=e,function(){t===e&&(t=null)}},confirmTransitionTo:function(e,n,o,i){if(null!=t){var u="function"==typeof t?t(e,n):t;"string"==typeof u?"function"==typeof o?o(u,i):((0,r.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==u)}else i(!0)},appendListener:function(t){var n=!0,r=function(){n&&t.apply(void 0,arguments)};return e.push(r),function(){n=!1,e=e.filter(function(t){return t!==r})}},notifyListeners:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];e.forEach(function(t){return t.apply(void 0,n)})}}}},function(t,e,n){"use strict";e.__esModule=!0;e.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),e.addEventListener=function(t,e,n){return t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent("on"+e,n)},e.removeEventListener=function(t,e,n){return t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent("on"+e,n)},e.getConfirmation=function(t,e){return e(window.confirm(t))},e.supportsHistory=function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},e.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},e.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},e.isExtraneousPopstateEvent=function(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(38)),o=n(445);e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.default.Map,n=Object.keys(t);return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e(),i=arguments[1];return r.withMutations(function(e){n.forEach(function(n){var r=(0,t[n])(e.get(n),i);(0,o.validateNextState)(r,n,i),e.set(n,r)})})}},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.validateNextState=e.getUnexpectedInvocationParameterMessage=e.getStateName=void 0;var r=u(n(180)),o=u(n(446)),i=u(n(447));function u(t){return t&&t.__esModule?t:{default:t}}e.getStateName=r.default,e.getUnexpectedInvocationParameterMessage=o.default,e.validateNextState=i.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(n(38)),o=i(n(180));function i(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e,n){var i=Object.keys(e);if(!i.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";var u=(0,o.default)(n);if(r.default.isImmutable?!r.default.isImmutable(t):!r.default.Iterable.isIterable(t))return"The "+u+' is of unexpected type. Expected argument to be an instance of Immutable.Collection or Immutable.Record with the following properties: "'+i.join('", "')+'".';var a=t.toSeq().keySeq().toArray().filter(function(t){return!e.hasOwnProperty(t)});return a.length>0?"Unexpected "+(1===a.length?"property":"properties")+' "'+a.join('", "')+'" found in '+u+'. Expected to find one of the known reducer property names instead: "'+i.join('", "')+'". Unexpected properties will be ignored.':null},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){if(void 0===t)throw new Error('Reducer "'+e+'" returned undefined when handling "'+n.type+'" action. To ignore an action, you must explicitly return the previous state.')},t.exports=e.default},function(t,e,n){"use strict";n.r(e);var r=n(1),o=n.n(r),i=n(181),u=(n(194),n(39)),a=n.n(u),c=n(40),s=n.n(c),l=n(41),f=n.n(l),p=n(42),h=n.n(p),d=n(43),v=n.n(d),y=n(2),m=n.n(y),g=m.a.shape({trySubscribe:m.a.func.isRequired,tryUnsubscribe:m.a.func.isRequired,notifyNestedSubs:m.a.func.isRequired,isSubscribed:m.a.func.isRequired}),_=m.a.shape({subscribe:m.a.func.isRequired,dispatch:m.a.func.isRequired,getState:m.a.func.isRequired});var b=function(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||e+"Subscription",o=function(t){function o(n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,n,r));return i[e]=n.store,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(o,t),o.prototype.getChildContext=function(){var t;return(t={})[e]=this[e],t[n]=null,t},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:_.isRequired,children:m.a.element.isRequired},o.childContextTypes=((t={})[e]=_.isRequired,t[n]=g,t),o}(),w=n(182),S=n.n(w),x=n(24),E=n.n(x);var k=null,O={notify:function(){}};var P=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.store=e,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=O}return t.prototype.addNestedSub=function(t){return this.trySubscribe(),this.listeners.subscribe(t)},t.prototype.notifyNestedSubs=function(){this.listeners.notify()},t.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},t.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var t=[],e=[];return{clear:function(){e=k,t=k},notify:function(){for(var n=t=e,r=0;r<n.length;r++)n[r]()},get:function(){return e},subscribe:function(n){var r=!0;return e===t&&(e=t.slice()),e.push(n),function(){r&&t!==k&&(r=!1,e===t&&(e=t.slice()),e.splice(e.indexOf(n),1))}}}}())},t.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=O)},t}(),T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var C=0,M={};function I(){}function j(t){var e,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,u=void 0===i?function(t){return"ConnectAdvanced("+t+")"}:i,a=o.methodName,c=void 0===a?"connectAdvanced":a,s=o.renderCountProp,l=void 0===s?void 0:s,f=o.shouldHandleStateChanges,p=void 0===f||f,h=o.storeKey,d=void 0===h?"store":h,v=o.withRef,y=void 0!==v&&v,m=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),b=d+"Subscription",w=C++,x=((e={})[d]=_,e[b]=g,e),k=((n={})[b]=g,n);return function(e){E()("function"==typeof e,"You must pass a component to the function returned by "+c+". Instead received "+JSON.stringify(e));var n=e.displayName||e.name||"Component",o=u(n),i=T({},m,{getDisplayName:u,methodName:c,renderCountProp:l,shouldHandleStateChanges:p,storeKey:d,withRef:y,displayName:o,wrappedComponentName:n,WrappedComponent:e}),a=function(n){function u(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,n.call(this,t,e));return r.version=w,r.state={},r.renderCount=0,r.store=t[d]||e[d],r.propsMode=Boolean(t[d]),r.setWrappedInstance=r.setWrappedInstance.bind(r),E()(r.store,'Could not find "'+d+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+d+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(u,n),u.prototype.getChildContext=function(){var t,e=this.propsMode?null:this.subscription;return(t={})[b]=e||this.context[b],t},u.prototype.componentDidMount=function(){p&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},u.prototype.componentWillReceiveProps=function(t){this.selector.run(t)},u.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},u.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=I,this.store=null,this.selector.run=I,this.selector.shouldComponentUpdate=!1},u.prototype.getWrappedInstance=function(){return E()(y,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},u.prototype.setWrappedInstance=function(t){this.wrappedInstance=t},u.prototype.initSelector=function(){var e=t(this.store.dispatch,i);this.selector=function(t,e){var n={run:function(r){try{var o=t(e.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(t){n.shouldComponentUpdate=!0,n.error=t}}};return n}(e,this.store),this.selector.run(this.props)},u.prototype.initSubscription=function(){if(p){var t=(this.propsMode?this.props:this.context)[b];this.subscription=new P(this.store,t,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},u.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(M)):this.notifyNestedSubs()},u.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},u.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},u.prototype.addExtraProps=function(t){if(!(y||l||this.propsMode&&this.subscription))return t;var e=T({},t);return y&&(e.ref=this.setWrappedInstance),l&&(e[l]=this.renderCount++),this.propsMode&&this.subscription&&(e[b]=this.subscription),e},u.prototype.render=function(){var t=this.selector;if(t.shouldComponentUpdate=!1,t.error)throw t.error;return Object(r.createElement)(e,this.addExtraProps(t.props))},u}(r.Component);return a.WrappedComponent=e,a.displayName=o,a.childContextTypes=k,a.contextTypes=x,a.propTypes=x,S()(a,e)}}var N=Object.prototype.hasOwnProperty;function A(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function R(t,e){if(A(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!N.call(e,n[o])||!A(t[n[o]],e[n[o]]))return!1;return!0}var D=n(129),F={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Object.assign;function L(t){if("object"!==(void 0===t?"undefined":z(t))||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function U(t,e){return function(){return e(t.apply(this,arguments))}}var W=n(183),q="object"==typeof self&&self&&self.Object===Object&&self,B=(W.a||q||Function("return this")()).Symbol,V=Object.prototype;V.hasOwnProperty,V.toString,B&&B.toStringTag;Object.prototype.toString;B&&B.toStringTag;Object.getPrototypeOf,Object;var K=Function.prototype,H=Object.prototype,G=K.toString;H.hasOwnProperty,G.call(Object);function $(t){return function(e,n){var r=t(e,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Y(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function J(t,e){return function(e,n){n.displayName;var r=function(t,e){return r.dependsOnOwnProps?r.mapToProps(t,e):r.mapToProps(t)};return r.dependsOnOwnProps=!0,r.mapToProps=function(e,n){r.mapToProps=t,r.dependsOnOwnProps=Y(t);var o=r(e,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Y(o),o=r(e,n)),o},r}}var Q=[function(t){return"function"==typeof t?J(t):void 0},function(t){return t?void 0:$(function(t){return{dispatch:t}})},function(t){return t&&"object"==typeof t?$(function(e){return function(t,e){if("function"==typeof t)return U(t,e);if("object"!==(void 0===t?"undefined":z(t))||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":void 0===t?"undefined":z(t))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(t),r={},o=0;o<n.length;o++){var i=n[o],u=t[i];"function"==typeof u&&(r[i]=U(u,e))}return r}(t,e)}):void 0}];var X=[function(t){return"function"==typeof t?J(t):void 0},function(t){return t?void 0:$(function(){return{}})}],Z=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function tt(t,e,n){return Z({},n,t,e)}var et=[function(t){return"function"==typeof t?function(t){return function(e,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,u=void 0;return function(e,n,a){var c=t(e,n,a);return i?r&&o(c,u)||(u=c):(i=!0,u=c),u}}}(t):void 0},function(t){return t?void 0:function(){return tt}}];function nt(t,e,n,r){return function(o,i){return n(t(o,i),e(r,i),i)}}function rt(t,e,n,r,o){var i=o.areStatesEqual,u=o.areOwnPropsEqual,a=o.areStatePropsEqual,c=!1,s=void 0,l=void 0,f=void 0,p=void 0,h=void 0;function d(o,c){var d=!u(c,l),v=!i(o,s);return s=o,l=c,d&&v?(f=t(s,l),e.dependsOnOwnProps&&(p=e(r,l)),h=n(f,p,l)):d?(t.dependsOnOwnProps&&(f=t(s,l)),e.dependsOnOwnProps&&(p=e(r,l)),h=n(f,p,l)):v?function(){var e=t(s,l),r=!a(e,f);return f=e,r&&(h=n(f,p,l)),h}():h}return function(o,i){return c?d(o,i):function(o,i){return f=t(s=o,l=i),p=e(r,l),h=n(f,p,l),c=!0,h}(o,i)}}function ot(t,e){var n=e.initMapStateToProps,r=e.initMapDispatchToProps,o=e.initMergeProps,i=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(e,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),u=n(t,i),a=r(t,i),c=o(t,i);return(i.pure?rt:nt)(u,a,c,t,i)}var it=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function ut(t,e,n){for(var r=e.length-1;r>=0;r--){var o=e[r](t);if(o)return o}return function(e,r){throw new Error("Invalid value of type "+typeof t+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function at(t,e){return t===e}var ct=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.connectHOC,n=void 0===e?j:e,r=t.mapStateToPropsFactories,o=void 0===r?X:r,i=t.mapDispatchToPropsFactories,u=void 0===i?Q:i,a=t.mergePropsFactories,c=void 0===a?et:a,s=t.selectorFactory,l=void 0===s?ot:s;return function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=i.pure,s=void 0===a||a,f=i.areStatesEqual,p=void 0===f?at:f,h=i.areOwnPropsEqual,d=void 0===h?R:h,v=i.areStatePropsEqual,y=void 0===v?R:v,m=i.areMergedPropsEqual,g=void 0===m?R:m,_=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),b=ut(t,o,"mapStateToProps"),w=ut(e,u,"mapDispatchToProps"),S=ut(r,c,"mergeProps");return n(l,it({methodName:"connect",getDisplayName:function(t){return"Connect("+t+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:b,initMapDispatchToProps:w,initMergeProps:S,pure:s,areStatesEqual:p,areOwnPropsEqual:d,areStatePropsEqual:y,areMergedPropsEqual:g},_))}}(),st=n(25),lt=n.n(st),ft=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function pt(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var ht=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=r=pt(this,t.call.apply(t,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},pt(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getChildContext=function(){return{router:ft({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},e.prototype.computeMatch=function(t){return{path:"/",url:"/",params:{},isExact:"/"===t}},e.prototype.componentWillMount=function(){var t=this,e=this.props,n=e.children,r=e.history;E()(null==n||1===o.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){t.setState({match:t.computeMatch(r.location.pathname)})})},e.prototype.componentWillReceiveProps=function(t){lt()(this.props.history===t.history,"You cannot change <Router history>")},e.prototype.componentWillUnmount=function(){this.unlisten()},e.prototype.render=function(){var t=this.props.children;return t?o.a.Children.only(t):null},e}(o.a.Component);ht.propTypes={history:m.a.object.isRequired,children:m.a.node},ht.contextTypes={router:m.a.object},ht.childContextTypes={router:m.a.object.isRequired};var dt=ht,vt=n(185),yt=n.n(vt),mt=n(187),gt=n.n(mt),_t={},bt=0,wt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof e&&(e={path:e});var r=e,o=r.path,i=r.exact,u=void 0!==i&&i,a=r.strict,c=void 0!==a&&a,s=r.sensitive,l=void 0!==s&&s;if(null==o)return n;var f=function(t,e){var n=""+e.end+e.strict+e.sensitive,r=_t[n]||(_t[n]={});if(r[t])return r[t];var o=[],i={re:gt()(t,o,e),keys:o};return bt<1e4&&(r[t]=i,bt++),i}(o,{end:u,strict:c,sensitive:l}),p=f.re,h=f.keys,d=p.exec(t);if(!d)return null;var v=d[0],y=d.slice(1),m=t===v;return u&&!m?null:{path:o,url:"/"===o&&""===v?"/":v,isExact:m,params:h.reduce(function(t,e,n){return t[e.name]=y[n],t},{})}},St=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function xt(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var Et=function(t){return 0===o.a.Children.count(t)},kt=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=r=xt(this,t.call.apply(t,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},xt(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getChildContext=function(){return{router:St({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},e.prototype.computeMatch=function(t,e){var n=t.computedMatch,r=t.location,o=t.path,i=t.strict,u=t.exact,a=t.sensitive;if(n)return n;E()(e,"You should not use <Route> or withRouter() outside a <Router>");var c=e.route,s=(r||c.location).pathname;return wt(s,{path:o,strict:i,exact:u,sensitive:a},c.match)},e.prototype.componentWillMount=function(){lt()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),lt()(!(this.props.component&&this.props.children&&!Et(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),lt()(!(this.props.render&&this.props.children&&!Et(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},e.prototype.componentWillReceiveProps=function(t,e){lt()(!(t.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),lt()(!(!t.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(t,e.router)})},e.prototype.render=function(){var t=this.state.match,e=this.props,n=e.children,r=e.component,i=e.render,u=this.context.router,a=u.history,c=u.route,s=u.staticContext,l={match:t,location:this.props.location||c.location,history:a,staticContext:s};return r?t?o.a.createElement(r,l):null:i?t?i(l):null:"function"==typeof n?n(l):n&&!Et(n)?o.a.Children.only(n):null},e}(o.a.Component);kt.propTypes={computedMatch:m.a.object,path:m.a.string,exact:m.a.bool,strict:m.a.bool,sensitive:m.a.bool,component:m.a.func,render:m.a.func,children:m.a.oneOfType([m.a.func,m.a.node]),location:m.a.object},kt.contextTypes={router:m.a.shape({history:m.a.object.isRequired,route:m.a.object.isRequired,staticContext:m.a.object})},kt.childContextTypes={router:m.a.object.isRequired};var Ot=kt;var Pt=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentWillMount=function(){E()(this.context.router,"You should not use <Switch> outside a <Router>")},e.prototype.componentWillReceiveProps=function(t){lt()(!(t.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),lt()(!(!t.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},e.prototype.render=function(){var t=this.context.router.route,e=this.props.children,n=this.props.location||t.location,r=void 0,i=void 0;return o.a.Children.forEach(e,function(e){if(null==r&&o.a.isValidElement(e)){var u=e.props,a=u.path,c=u.exact,s=u.strict,l=u.sensitive,f=u.from,p=a||f;i=e,r=wt(n.pathname,{path:p,exact:c,strict:s,sensitive:l},t.match)}}),r?o.a.cloneElement(i,{location:n,computedMatch:r}):null},e}(o.a.Component);Pt.contextTypes={router:m.a.shape({route:m.a.object.isRequired}).isRequired},Pt.propTypes={children:m.a.node,location:m.a.object};var Tt=Pt,Ct=function(t){function e(){return s()(this,e),h()(this,(e.__proto__||a()(e)).apply(this,arguments))}return v()(e,t),f()(e,[{key:"render",value:function(){return o.a.createElement("div",null,"Home Page")}}]),e}(r.Component),Mt=n(186),It=Object(Mt.createSelector)(function(t){return t.get("firstPage")},function(t){return{list:t.get("list")}}),jt=function(t){function e(){return s()(this,e),h()(this,(e.__proto__||a()(e)).apply(this,arguments))}return v()(e,t),f()(e,[{key:"render",value:function(){var t=this.props.list;return console.log("xxxxxxxx",t),o.a.createElement("div",null,"First Page")}}]),e}(r.Component),Nt=ct(It,function(t){return{}})(jt),At=function(t){function e(){return s()(this,e),h()(this,(e.__proto__||a()(e)).apply(this,arguments))}return v()(e,t),f()(e,[{key:"render",value:function(){return o.a.createElement("div",null,"Second Page")}}]),e}(r.Component);var Rt=n(188),Dt=n(38),Ft=Object(Dt.fromJS)({list:["aa"],data:{}}),zt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ft,e=arguments[1];switch(e.type){case"ADD_TODO_FIRST":return t.set("list",e.list);default:return t}},Lt=Object(Dt.fromJS)({list:[],data:{}}),Ut=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Lt,e=arguments[1];switch(e.type){case"ADD_TODO_SECOND":return t.set("list",e.list);default:return t}},Wt=Object(Dt.fromJS)({list:[],data:{}}),qt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Wt,e=arguments[1];switch(e.type){case"ADD_TODO_HOME":return t.set("list",e.list);default:return t}},Bt=Object(Rt.combineReducers)({firstPage:zt,secondPage:Ut,homePage:qt}),Vt=yt()(),Kt=function t(e,n,r){var o;if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(t)(e,n)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var i=e,u=n,a=[],c=a,s=!1;function l(){c===a&&(c=a.slice())}function f(){if(s)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return u}function p(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(s)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var e=!0;return l(),c.push(t),function(){if(e){if(s)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");e=!1,l();var n=c.indexOf(t);c.splice(n,1)}}}function h(t){if(!L(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(s)throw new Error("Reducers may not dispatch actions.");try{s=!0,u=i(u,t)}finally{s=!1}for(var e=a=c,n=0;n<e.length;n++)(0,e[n])();return t}return h({type:F.INIT}),(o={dispatch:h,subscribe:p,getState:f,replaceReducer:function(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");i=t,h({type:F.REPLACE})}})[D.a]=function(){var t,e=p;return(t={subscribe:function(t){if("object"!==(void 0===t?"undefined":z(t))||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(f())}return n(),{unsubscribe:e(n)}}})[D.a]=function(){return this},t},o}(Bt),Ht=function(t){function e(){return s()(this,e),h()(this,(e.__proto__||a()(e)).apply(this,arguments))}return v()(e,t),f()(e,[{key:"render",value:function(){return o.a.createElement(b,{store:Kt},o.a.createElement(dt,{history:Vt},o.a.createElement(Tt,null,o.a.createElement(Ot,{exact:!0,path:"/",component:Ct}),o.a.createElement(Ot,{exact:!0,path:"/first",component:Nt}),o.a.createElement(Ot,{exact:!0,path:"/second",component:At}))))}}]),e}(r.Component);Object(i.render)(o.a.createElement(Ht,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ltbXV0YWJsZS9kaXN0L2ltbXV0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3Rvcnkvbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWltbXV0YWJsZS9kaXN0L3V0aWxpdGllcy9nZXRTdGF0ZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc2VsZWN0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtaW1tdXRhYmxlL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZS9janMvc2NoZWR1bGUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWltbXV0YWJsZS9kaXN0L2NvbWJpbmVSZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtaW1tdXRhYmxlL2Rpc3QvdXRpbGl0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1pbW11dGFibGUvZGlzdC91dGlsaXRpZXMvZ2V0VW5leHBlY3RlZEludm9jYXRpb25QYXJhbWV0ZXJNZXNzYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1pbW11dGFibGUvZGlzdC91dGlsaXRpZXMvdmFsaWRhdGVOZXh0U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9jb250YWluZXJzL0hvbWVQYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3L2NvbnRhaW5lcnMvRmlyc3RQYWdlL3NlbGVjdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9jb250YWluZXJzL0ZpcnN0UGFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9jb250YWluZXJzL1NlY29uZFBhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvY29udGFpbmVycy9GaXJzdFBhZ2UvcmVkdWNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvY29udGFpbmVycy9TZWNvbmRQYWdlL3JlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3L2NvbnRhaW5lcnMvSG9tZVBhZ2UvcmVkdWNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvY29udGFpbmVycy9Sb290L3JlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3L2NvbnRhaW5lcnMvUm9vdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9yb3V0ZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwidG9JbnRlZ2VyIiwibWluIiwiZGVmaW5lZCIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJJT2JqZWN0IiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJzbGljZSIsIm1ldGhvZCIsImFyZyIsImNvbmRpdGlvbiIsImZvcm1hdCIsImVycm9yIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIndhcm5pbmciLCJ2YWx1ZU9mIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJLRVkiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiaW5kZXgiLCJyZXN1bHQiLCJwdXNoIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCJBcnJheSIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsInZhbHVlcyIsImFycmF5S2V5cyIsImtleXMiLCJhcnJheUVudHJpZXMiLCJlbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInNldCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwibmV4dCIsImRvbmUiLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiZm9yRWFjaCIsImluZGV4T2YiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJtYXAiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCJlbmQiLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwibGVuIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJkYXRhIiwidiIsInJvdW5kIiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsImNvbmNhdCIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJmcm9tIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsIl8iLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIlVOU0NPUEFCTEVTIiwiU0xJQ0UkMCIsImNyZWF0ZUNsYXNzIiwiY3RvciIsInN1cGVyQ2xhc3MiLCJJdGVyYWJsZSIsImlzSXRlcmFibGUiLCJTZXEiLCJLZXllZEl0ZXJhYmxlIiwiaXNLZXllZCIsIktleWVkU2VxIiwiSW5kZXhlZEl0ZXJhYmxlIiwiaXNJbmRleGVkIiwiSW5kZXhlZFNlcSIsIlNldEl0ZXJhYmxlIiwiaXNBc3NvY2lhdGl2ZSIsIlNldFNlcSIsIm1heWJlSXRlcmFibGUiLCJJU19JVEVSQUJMRV9TRU5USU5FTCIsIm1heWJlS2V5ZWQiLCJJU19LRVlFRF9TRU5USU5FTCIsIm1heWJlSW5kZXhlZCIsIklTX0lOREVYRURfU0VOVElORUwiLCJtYXliZUFzc29jaWF0aXZlIiwiaXNPcmRlcmVkIiwibWF5YmVPcmRlcmVkIiwiSVNfT1JERVJFRF9TRU5USU5FTCIsIktleWVkIiwiSW5kZXhlZCIsIlNldCIsIlNISUZUIiwiU0laRSIsIk1BU0siLCJOT1RfU0VUIiwiQ0hBTkdFX0xFTkdUSCIsIkRJRF9BTFRFUiIsIk1ha2VSZWYiLCJyZWYiLCJTZXRSZWYiLCJPd25lcklEIiwiYXJyQ29weSIsImFyciIsIm1heCIsIm5ld0FyciIsImlpIiwiZW5zdXJlU2l6ZSIsInNpemUiLCJfX2l0ZXJhdGUiLCJyZXR1cm5UcnVlIiwid3JhcEluZGV4IiwidWludDMySW5kZXgiLCJOYU4iLCJ3aG9sZVNsaWNlIiwicmVzb2x2ZUJlZ2luIiwicmVzb2x2ZUluZGV4IiwicmVzb2x2ZUVuZCIsImRlZmF1bHRJbmRleCIsIklURVJBVEVfS0VZUyIsIklURVJBVEVfVkFMVUVTIiwiSVRFUkFURV9FTlRSSUVTIiwiUkVBTF9JVEVSQVRPUl9TWU1CT0wiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsIklURVJBVE9SX1NZTUJPTCIsIkl0ZXJhdG9yIiwiaXRlcmF0b3JWYWx1ZSIsImsiLCJpdGVyYXRvclJlc3VsdCIsIml0ZXJhdG9yRG9uZSIsImhhc0l0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JGbiIsImlzSXRlcmF0b3IiLCJtYXliZUl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3IiLCJpdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJpc0FycmF5TGlrZSIsImVtcHR5U2VxdWVuY2UiLCJ0b1NlcSIsInNlcSIsIm1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSIsIk9iamVjdFNlcSIsInNlcUZyb21WYWx1ZSIsInRvS2V5ZWRTZXEiLCJmcm9tRW50cnlTZXEiLCJrZXllZFNlcUZyb21WYWx1ZSIsImVudHJ5U2VxIiwidG9JbmRleGVkU2VxIiwiaW5kZXhlZFNlcUZyb21WYWx1ZSIsInRvU2V0U2VxIiwiS0VZUyIsIlZBTFVFUyIsIkVOVFJJRVMiLCJpbnNwZWN0IiwidG9Tb3VyY2UiLCJfX3RvU3RyaW5nIiwiY2FjaGVSZXN1bHQiLCJfY2FjaGUiLCJfX2l0ZXJhdGVVbmNhY2hlZCIsInRvQXJyYXkiLCJzZXFJdGVyYXRlIiwiX19pdGVyYXRvciIsInNlcUl0ZXJhdG9yIiwiaXNTZXEiLCJFTVBUWV9TRVEiLCJFTVBUWV9SRVBFQVQiLCJFTVBUWV9SQU5HRSIsIklTX1NFUV9TRU5USU5FTCIsIkFycmF5U2VxIiwiYXJyYXkiLCJfYXJyYXkiLCJfb2JqZWN0IiwiX2tleXMiLCJJdGVyYWJsZVNlcSIsIl9pdGVyYWJsZSIsIkl0ZXJhdG9yU2VxIiwiX2l0ZXJhdG9yIiwiX2l0ZXJhdG9yQ2FjaGUiLCJtYXliZVNlcSIsImlzQXJyYXkiLCJ1c2VLZXlzIiwiY2FjaGUiLCJtYXhJbmRleCIsImVudHJ5IiwiX19pdGVyYXRvclVuY2FjaGVkIiwiZnJvbUpTIiwianNvbiIsImNvbnZlcnRlciIsImZyb21KU1dpdGgiLCJwYXJlbnRKU09OIiwiaXNQbGFpbk9iaiIsIiIsImZyb21KU0RlZmF1bHQiLCJ0b0xpc3QiLCJ0b01hcCIsImlzIiwidmFsdWVBIiwidmFsdWVCIiwiZXF1YWxzIiwiZGVlcEVxdWFsIiwiX19oYXNoIiwibm90QXNzb2NpYXRpdmUiLCJmbGlwcGVkIiwiYWxsRXF1YWwiLCJiU2l6ZSIsIlJlcGVhdCIsInRpbWVzIiwiX3ZhbHVlIiwiSW5maW5pdHkiLCJpbnZhcmlhbnQiLCJSYW5nZSIsImFicyIsIl9zdGFydCIsIl9lbmQiLCJfc3RlcCIsIkNvbGxlY3Rpb24iLCJLZXllZENvbGxlY3Rpb24iLCJJbmRleGVkQ29sbGVjdGlvbiIsIlNldENvbGxlY3Rpb24iLCJub3RTZXRWYWx1ZSIsIml0ZXJhdGlvbnMiLCJzZWFyY2hWYWx1ZSIsInRoaXMkMCIsIm90aGVyIiwicG9zc2libGVJbmRleCIsIm9mZnNldFZhbHVlIiwiaW11bCIsInNtaSIsImkzMiIsImhhc2giLCJoIiwiU1RSSU5HX0hBU0hfQ0FDSEVfTUlOX1NUUkxFTiIsInN0cmluZ0hhc2hDYWNoZSIsImhhc2hTdHJpbmciLCJTVFJJTkdfSEFTSF9DQUNIRV9TSVpFIiwiU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUiLCJjYWNoZWRIYXNoU3RyaW5nIiwiaGFzaENvZGUiLCJvYmoiLCJ1c2luZ1dlYWtNYXAiLCJ3ZWFrTWFwIiwiVUlEX0hBU0hfS0VZIiwiY2FuRGVmaW5lUHJvcGVydHkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5vZGUiLCJub2RlVHlwZSIsInVuaXF1ZUlEIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0SUVOb2RlSGFzaCIsIm9iakhhc2hVSUQiLCJoYXNoSlNPYmoiLCJjaGFyQ29kZUF0IiwiV2Vha01hcCIsImFzc2VydE5vdEluZmluaXRlIiwiZW1wdHlNYXAiLCJpc01hcCIsIndpdGhNdXRhdGlvbnMiLCJtYXliZU1hcCIsIklTX01BUF9TRU5USU5FTCIsImtleVZhbHVlcyIsIl9yb290IiwidXBkYXRlTWFwIiwic2V0SW4iLCJrZXlQYXRoIiwidXBkYXRlSW4iLCJyZW1vdmUiLCJkZWxldGVJbiIsInVwZGF0ZSIsInVwZGF0ZXIiLCJ1cGRhdGVkVmFsdWUiLCJ1cGRhdGVJbkRlZXBNYXAiLCJleGlzdGluZyIsImtleVBhdGhJdGVyIiwiaXNOb3RTZXQiLCJleGlzdGluZ1ZhbHVlIiwibmV3VmFsdWUiLCJuZXh0RXhpc3RpbmciLCJuZXh0VXBkYXRlZCIsImZvcmNlSXRlcmF0b3IiLCJjbGVhciIsIl9fb3duZXJJRCIsIl9fYWx0ZXJlZCIsIm1lcmdlIiwibWVyZ2VJbnRvTWFwV2l0aCIsIm1lcmdlV2l0aCIsIm1lcmdlciIsIml0ZXJzIiwibWVyZ2VJbiIsIm1lcmdlRGVlcCIsImRlZXBNZXJnZXIiLCJtZXJnZURlZXBXaXRoIiwiZGVlcE1lcmdlcldpdGgiLCJtZXJnZURlZXBJbiIsImNvbXBhcmF0b3IiLCJPcmRlcmVkTWFwIiwic29ydEZhY3RvcnkiLCJzb3J0QnkiLCJtYXBwZXIiLCJtdXRhYmxlIiwiYXNNdXRhYmxlIiwid2FzQWx0ZXJlZCIsIl9fZW5zdXJlT3duZXIiLCJhc0ltbXV0YWJsZSIsIk1hcEl0ZXJhdG9yIiwiaXRlcmF0ZSIsIm93bmVySUQiLCJtYWtlTWFwIiwiRU1QVFlfTUFQIiwiTWFwUHJvdG90eXBlIiwiQXJyYXlNYXBOb2RlIiwiQml0bWFwSW5kZXhlZE5vZGUiLCJiaXRtYXAiLCJub2RlcyIsIkhhc2hBcnJheU1hcE5vZGUiLCJjb3VudCIsIkhhc2hDb2xsaXNpb25Ob2RlIiwia2V5SGFzaCIsIlZhbHVlTm9kZSIsIl90eXBlIiwiX3JldmVyc2UiLCJfc3RhY2siLCJtYXBJdGVyYXRvckZyYW1lIiwibWFwSXRlcmF0b3JWYWx1ZSIsInByZXYiLCJfX3ByZXYiLCJyb290IiwibmV3Um9vdCIsIm5ld1NpemUiLCJkaWRDaGFuZ2VTaXplIiwiZGlkQWx0ZXIiLCJ1cGRhdGVOb2RlIiwic2hpZnQiLCJpc0xlYWZOb2RlIiwibWVyZ2VJbnRvTm9kZSIsIm5ld05vZGUiLCJpZHgxIiwiaWR4MiIsIml0ZXJhYmxlcyIsIm1lcmdlSW50b0NvbGxlY3Rpb25XaXRoIiwibmV4dFZhbHVlIiwiY29sbGVjdGlvbiIsIngiLCJtZXJnZUludG9NYXAiLCJwb3BDb3VudCIsImlkeCIsImNhbkVkaXQiLCJuZXdBcnJheSIsInJlbW92ZUluIiwicmVtb3ZlZCIsImV4aXN0cyIsIk1BWF9BUlJBWV9NQVBfU0laRSIsImNyZWF0ZU5vZGVzIiwiaXNFZGl0YWJsZSIsIm5ld0VudHJpZXMiLCJwb3AiLCJiaXQiLCJrZXlIYXNoRnJhZyIsIk1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFIiwiaW5jbHVkaW5nIiwiZXhwYW5kZWROb2RlcyIsImV4cGFuZE5vZGVzIiwibmV3Qml0bWFwIiwibmV3Tm9kZXMiLCJuZXdMZW4iLCJhZnRlciIsInNwbGljZU91dCIsInNwbGljZUluIiwibmV3Q291bnQiLCJNSU5fSEFTSF9BUlJBWV9NQVBfU0laRSIsImV4Y2x1ZGluZyIsInBhY2tlZElJIiwicGFja2VkTm9kZXMiLCJwYWNrTm9kZXMiLCJrZXlNYXRjaCIsInN0YWNrIiwic3ViTm9kZSIsIkxpc3QiLCJlbXB0eSIsImVtcHR5TGlzdCIsImlzTGlzdCIsIm1ha2VMaXN0IiwiVk5vZGUiLCJzZXRTaXplIiwibWF5YmVMaXN0IiwiSVNfTElTVF9TRU5USU5FTCIsImxpc3ROb2RlRm9yIiwiX29yaWdpbiIsInNldExpc3RCb3VuZHMiLCJuZXdUYWlsIiwiX3RhaWwiLCJnZXRUYWlsT2Zmc2V0IiwiX2NhcGFjaXR5IiwidXBkYXRlVk5vZGUiLCJfbGV2ZWwiLCJ1cGRhdGVMaXN0Iiwic3BsaWNlIiwiaW5zZXJ0Iiwib2xkU2l6ZSIsInVuc2hpZnQiLCJtZXJnZUludG9MaXN0V2l0aCIsIml0ZXJhdGVMaXN0IiwiRE9ORSIsIkxpc3RQcm90b3R5cGUiLCJyZW1vdmVCZWZvcmUiLCJsZXZlbCIsIm9yaWdpbkluZGV4IiwibmV3Q2hpbGQiLCJyZW1vdmluZ0ZpcnN0Iiwib2xkQ2hpbGQiLCJlZGl0YWJsZSIsImVkaXRhYmxlVk5vZGUiLCJyZW1vdmVBZnRlciIsInNpemVJbmRleCIsIkVNUFRZX0xJU1QiLCJFTVBUWV9PUkRFUkVEX01BUCIsImxlZnQiLCJyaWdodCIsInRhaWxQb3MiLCJ0YWlsIiwiaXRlcmF0ZU5vZGVPckxlYWYiLCJ0byIsIml0ZXJhdGVMZWFmIiwiaXRlcmF0ZU5vZGUiLCJvcmlnaW4iLCJjYXBhY2l0eSIsIm5vZGVIYXMiLCJsb3dlck5vZGUiLCJuZXdMb3dlck5vZGUiLCJyYXdJbmRleCIsIm93bmVyIiwib2xkT3JpZ2luIiwib2xkQ2FwYWNpdHkiLCJuZXdPcmlnaW4iLCJuZXdDYXBhY2l0eSIsIm5ld0xldmVsIiwib2Zmc2V0U2hpZnQiLCJvbGRUYWlsT2Zmc2V0IiwibmV3VGFpbE9mZnNldCIsIm9sZFRhaWwiLCJiZWdpbkluZGV4IiwibWF4U2l6ZSIsImVtcHR5T3JkZXJlZE1hcCIsImlzT3JkZXJlZE1hcCIsIm1heWJlT3JkZXJlZE1hcCIsIm1ha2VPcmRlcmVkTWFwIiwib21hcCIsIl9tYXAiLCJfbGlzdCIsInVwZGF0ZU9yZGVyZWRNYXAiLCJuZXdNYXAiLCJuZXdMaXN0IiwiZmxpcCIsIlRvS2V5ZWRTZXF1ZW5jZSIsImluZGV4ZWQiLCJfaXRlciIsIl91c2VLZXlzIiwiVG9JbmRleGVkU2VxdWVuY2UiLCJUb1NldFNlcXVlbmNlIiwiRnJvbUVudHJpZXNTZXF1ZW5jZSIsImZsaXBGYWN0b3J5IiwiZmxpcFNlcXVlbmNlIiwibWFrZVNlcXVlbmNlIiwicmV2ZXJzZWRTZXF1ZW5jZSIsImNhY2hlUmVzdWx0VGhyb3VnaCIsIm1hcEZhY3RvcnkiLCJjb250ZXh0IiwibWFwcGVkU2VxdWVuY2UiLCJyZXZlcnNlRmFjdG9yeSIsImZpbHRlckZhY3RvcnkiLCJmaWx0ZXJTZXF1ZW5jZSIsInNsaWNlRmFjdG9yeSIsIm9yaWdpbmFsU2l6ZSIsInJlc29sdmVkQmVnaW4iLCJyZXNvbHZlZEVuZCIsInNsaWNlU2l6ZSIsInJlc29sdmVkU2l6ZSIsInNsaWNlU2VxIiwic2tpcHBlZCIsImlzU2tpcHBpbmciLCJza2lwV2hpbGVGYWN0b3J5Iiwic2tpcFNlcXVlbmNlIiwic2tpcHBpbmciLCJmbGF0dGVuRmFjdG9yeSIsImRlcHRoIiwiZmxhdFNlcXVlbmNlIiwic3RvcHBlZCIsImZsYXREZWVwIiwiY3VycmVudERlcHRoIiwiZGVmYXVsdENvbXBhcmF0b3IiLCJpc0tleWVkSXRlcmFibGUiLCJtYXhGYWN0b3J5IiwibWF4Q29tcGFyZSIsImNvbXAiLCJ6aXBXaXRoRmFjdG9yeSIsImtleUl0ZXIiLCJ6aXBwZXIiLCJ6aXBTZXF1ZW5jZSIsIml0ZXJhdG9ycyIsImlzRG9uZSIsInN0ZXBzIiwicmVpZnkiLCJ2YWxpZGF0ZUVudHJ5IiwicmVzb2x2ZVNpemUiLCJpdGVyYWJsZUNsYXNzIiwiUmVjb3JkIiwiZGVmYXVsdFZhbHVlcyIsImhhc0luaXRpYWxpemVkIiwiUmVjb3JkVHlwZSIsIm5hbWVzIiwic2V0UHJvcHMiLCJSZWNvcmRUeXBlUHJvdG90eXBlIiwiX25hbWUiLCJfZGVmYXVsdFZhbHVlcyIsIlJlY29yZFByb3RvdHlwZSIsInZhbHVlU2VxIiwiaW5kZXhlZEl0ZXJhYmxlIiwicmVjb3JkTmFtZSIsImRlZmF1bHRWYWwiLCJfZW1wdHkiLCJtYWtlUmVjb3JkIiwibGlrZVJlY29yZCIsInJlY29yZCIsImVtcHR5U2V0IiwiaXNTZXQiLCJhZGQiLCJtYXliZVNldCIsIklTX1NFVF9TRU5USU5FTCIsImZyb21LZXlzIiwia2V5U2VxIiwidXBkYXRlU2V0IiwidW5pb24iLCJpbnRlcnNlY3QiLCJvcmlnaW5hbFNldCIsInN1YnRyYWN0IiwiT3JkZXJlZFNldCIsIl9fbWFrZSIsIkVNUFRZX1NFVCIsIlNldFByb3RvdHlwZSIsIl9fZW1wdHkiLCJtYWtlU2V0IiwiZW1wdHlPcmRlcmVkU2V0IiwiaXNPcmRlcmVkU2V0IiwibWF5YmVPcmRlcmVkU2V0IiwiRU1QVFlfT1JERVJFRF9TRVQiLCJPcmRlcmVkU2V0UHJvdG90eXBlIiwibWFrZU9yZGVyZWRTZXQiLCJTdGFjayIsImVtcHR5U3RhY2siLCJpc1N0YWNrIiwidW5zaGlmdEFsbCIsIm1heWJlU3RhY2siLCJJU19TVEFDS19TRU5USU5FTCIsImhlYWQiLCJfaGVhZCIsInBlZWsiLCJtYWtlU3RhY2siLCJwdXNoQWxsIiwiRU1QVFlfU1RBQ0siLCJTdGFja1Byb3RvdHlwZSIsIm1peGluIiwibWV0aG9kcyIsImtleUNvcGllciIsImdldE93blByb3BlcnR5U3ltYm9scyIsInRvSlMiLCJfX3RvSlMiLCJ0b0pTT04iLCJ0b09yZGVyZWRNYXAiLCJ0b09yZGVyZWRTZXQiLCJ0b1NldCIsInRvU3RhY2siLCJfX3RvU3RyaW5nTWFwcGVyIiwic2luZ2xldG9uIiwiY29uY2F0U2VxIiwiZmxhdHRlbiIsInN1bSIsImNvbmNhdEZhY3RvcnkiLCJyZXR1cm5WYWx1ZSIsImZpbmRFbnRyeSIsInNpZGVFZmZlY3QiLCJqb2luZWQiLCJpc0ZpcnN0IiwicmVkdWNlciIsImluaXRpYWxSZWR1Y3Rpb24iLCJyZWR1Y3Rpb24iLCJ1c2VGaXJzdCIsInJldmVyc2VkIiwibm90IiwiYnV0TGFzdCIsImlzRW1wdHkiLCJjb3VudEJ5IiwiZ3JvdXBlciIsImdyb3VwcyIsImNvdW50QnlGYWN0b3J5IiwiZW50cmllc1NlcXVlbmNlIiwiZW50cnlNYXBwZXIiLCJmaWx0ZXJOb3QiLCJmb3VuZCIsImZpbmRLZXkiLCJmaW5kTGFzdCIsImZpbmRMYXN0RW50cnkiLCJmaW5kTGFzdEtleSIsImZpcnN0IiwiZmxhdE1hcCIsImNvZXJjZSIsImZsYXRNYXBGYWN0b3J5Iiwic2VhcmNoS2V5IiwiZ2V0SW4iLCJzZWFyY2hLZXlQYXRoIiwibmVzdGVkIiwiZ3JvdXBCeSIsImlzS2V5ZWRJdGVyIiwiZ3JvdXBCeUZhY3RvcnkiLCJoYXNJbiIsImlzU3Vic2V0IiwiaXNTdXBlcnNldCIsImtleU9mIiwia2V5TWFwcGVyIiwibGFzdCIsImxhc3RLZXlPZiIsIm1heEJ5IiwibmVnIiwiZGVmYXVsdE5lZ0NvbXBhcmF0b3IiLCJtaW5CeSIsInJlc3QiLCJza2lwIiwiYW1vdW50Iiwic2tpcExhc3QiLCJza2lwV2hpbGUiLCJza2lwVW50aWwiLCJ0YWtlIiwidGFrZUxhc3QiLCJ0YWtlV2hpbGUiLCJ0YWtlU2VxdWVuY2UiLCJpdGVyYXRpbmciLCJ0YWtlV2hpbGVGYWN0b3J5IiwidGFrZVVudGlsIiwib3JkZXJlZCIsImtleWVkIiwibXVybXVySGFzaE9mU2l6ZSIsImhhc2hNZXJnZSIsImhhc2hJdGVyYWJsZSIsIkl0ZXJhYmxlUHJvdG90eXBlIiwicXVvdGVTdHJpbmciLCJjaGFpbiIsImNvbnRhaW5zIiwibWFwRW50cmllcyIsIm1hcEtleXMiLCJLZXllZEl0ZXJhYmxlUHJvdG90eXBlIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlZmF1bHRaaXBwZXIiLCJyZW1vdmVOdW0iLCJudW1BcmdzIiwic3BsaWNlZCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnBvc2UiLCJpbnRlcnBvc2VkU2VxdWVuY2UiLCJpbnRlcnBvc2VGYWN0b3J5IiwiaW50ZXJsZWF2ZSIsInppcHBlZCIsImludGVybGVhdmVkIiwiemlwIiwiemlwV2l0aCIsImZhY3RvcnkiLCJkZWZhdWx0IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl90eXBlb2YzIiwiUmVmZXJlbmNlRXJyb3IiLCJfc2V0UHJvdG90eXBlT2YyIiwiX2NyZWF0ZTIiLCJzdWJDbGFzcyIsIl9fcHJvdG9fXyIsInB4IiwicmFuZG9tIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsImRQcyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93IiwiZG9jdW1lbnQiLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsImRlZiIsInN0YXQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiX3QiLCJJU19XUkFQIiwidmlydHVhbCIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJnIiwiZXZhbCIsImNvcHlyaWdodCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJNQVRDSCIsImlzUmVnRXhwIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiU1lNQk9MIiwiZm5zIiwic3RyZm4iLCJyeGZuIiwiRCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImZvck9mIiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiSyIsIl9fZGVmaW5lU2V0dGVyX18iLCJDT0xMRUNUSU9OIiwiQSIsImNiIiwibWFwRm4iLCJuZXh0SXRlbSIsImNyZWF0ZUVsZW1lbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiY2hhckF0IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5Iiwic3RyIiwic2lnbiIsIiRleHBtMSIsImV4cG0xIiwiVE9fU1RSSU5HIiwicG9zIiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJzZWFyY2hTdHJpbmciLCJyZSIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwib3JpZ2luYWwiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJwcm9jZXNzIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsInN0YW5kYWxvbmUiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0b2dnbGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwicG93IiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInByb3BJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwiZ2V0S2V5cyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJmYWN0b3JpZXMiLCJwYXJ0QXJncyIsImJvdW5kIiwiY29uc3RydWN0IiwidW4iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwid3MiLCJoZXgiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIm1zZyIsImlzRmluaXRlIiwibG9nMXAiLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsInJvdW5kVGllc1RvRXZlbiIsInJldCIsIm1lbW8iLCJpc1JpZ2h0IiwiaW5jIiwiZmxhZ3MiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5Iiwic3Ryb25nIiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIl9mIiwiX2wiLCJkZWxldGUiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsInVmc3RvcmUiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIiRoYXMiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJ0aGlzQXJnIiwiZWxlbWVudCIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJfaXRlcmF0b3IyIiwiX3N5bWJvbDIiLCJfdHlwZW9mIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3Vic3RyIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwicGFyc2VQYXRoIiwicGF0aG5hbWUiLCJzZWFyY2giLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsImFjdGlvbiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5Iiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJmcmVlR2xvYmFsIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsIl9leHRlbmRzIiwiX3dhcm5pbmcyIiwiX2ludmFyaWFudDIiLCJfTG9jYXRpb25VdGlscyIsIl9QYXRoVXRpbHMiLCJfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyIiwiX0RPTVV0aWxzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsInN0YXRlIiwiY2FuVXNlRE9NIiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJzdXBwb3J0c0hpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsInN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImdldENvbmZpcm1hdGlvbiIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3JlZiIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVMb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJub3RpZnlMaXN0ZW5lcnMiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwiY29uZmlybVRyYW5zaXRpb25UbyIsIm9rIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsImFsbEtleXMiLCJkZWx0YSIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Jsb2NrZWQiLCJocmVmIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInByb21wdCIsInVuYmxvY2siLCJzZXRQcm9tcHQiLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsImFwcGVuZExpc3RlbmVyIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJkZWZhdWx0TWVtb2l6ZSIsImZ1bmMiLCJlcXVhbGl0eUNoZWNrIiwibGFzdEFyZ3MiLCJsYXN0UmVzdWx0IiwiYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwiLCJjcmVhdGVTZWxlY3RvckNyZWF0b3IiLCJtZW1vaXplIiwiX2xlbiIsIm1lbW9pemVPcHRpb25zIiwiX2tleSIsIl9sZW4yIiwiZnVuY3MiLCJfa2V5MiIsInJlY29tcHV0YXRpb25zIiwicmVzdWx0RnVuYyIsImRlcGVuZGVuY2llcyIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsImdldERlcGVuZGVuY2llcyIsIm1lbW9pemVkUmVzdWx0RnVuYyIsInNlbGVjdG9yIiwicGFyYW1zIiwicmVzZXRSZWNvbXB1dGF0aW9ucyIsImNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciIsInNlbGVjdG9ycyIsInNlbGVjdG9yQ3JlYXRvciIsImNyZWF0ZVNlbGVjdG9yIiwib2JqZWN0S2V5cyIsIl9sZW4zIiwiX2tleTMiLCJjb21wb3NpdGlvbiIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJvcHRpb25zIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJ0b1VwcGVyQ2FzZSIsImVuY29kZUFzdGVyaXNrIiwibWF0Y2hlcyIsIm9wdHMiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwic2Vuc2l0aXZlIiwic3RyaWN0Iiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbWJpbmVSZWR1Y2VycyIsIl9jb21iaW5lUmVkdWNlcnMzIiwiZm9yIiwicSIsInUiLCJ5IiwieiIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwicmVmcyIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkgiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJjdXJyZW50IiwiY3VycmVudERpc3BhdGNoZXIiLCJKIiwiX19zZWxmIiwiX19zb3VyY2UiLCJMIiwiY2hpbGRyZW4iLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJRIiwia2V5UHJlZml4IiwiPSIsIjoiLCJlc2NhcGUiLCJWIiwiYWEiLCJNIiwiWCIsIkNoaWxkcmVuIiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiUHJvdmlkZXIiLCJDb25zdW1lciIsInVuc3RhYmxlX3JlYWQiLCJfY29udGV4dCIsInJlYWRDb250ZXh0IiwiZm9yd2FyZFJlZiIsInJlbmRlciIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwiYmEiLCJjYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJvbkVycm9yIiwia2EiLCJtYSIsIm5hIiwib2EiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicWEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInJhIiwicmVnaXN0cmF0aW9uTmFtZSIsInNhIiwidGEiLCJ1YSIsInZhIiwid2EiLCJ4YSIsImN1cnJlbnRUYXJnZXQiLCJsYSIsInlhIiwiemEiLCJBYSIsIkJhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJwYXJlbnROb2RlIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJyZXR1cm4iLCJQYSIsImRpc3BhdGNoQ29uZmlnIiwiUWEiLCJfdGFyZ2V0SW5zdCIsIlJhIiwiVGEiLCJVYSIsIlZhIiwiV2EiLCJZYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlphIiwiJGEiLCJhYiIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwibmIiLCJldmVudFBvb2wiLCJvYiIsImRlc3RydWN0b3IiLCJtYiIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJwYiIsInFiIiwicmIiLCJzYiIsInRiIiwiZG9jdW1lbnRNb2RlIiwidWIiLCJ2YiIsIndiIiwieGIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwieWIiLCJ6YiIsImtleUNvZGUiLCJBYiIsImRldGFpbCIsIkJiIiwiRWIiLCJsb2NhbGUiLCJ3aGljaCIsIkNiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiRGIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJSYiIsIm5vZGVOYW1lIiwiU2IiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJUYiIsInNldEF0dHJpYnV0ZSIsIlViIiwiV2IiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlZiIiwiWGIiLCJjaGVja2VkIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwiX3JlYWN0U3RhdHVzIiwiX3JlYWN0UmVzdWx0IiwibWMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIm5jIiwicGMiLCJxYyIsInJjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInZjIiwid2MiLCJ4YyIsInRjIiwidWMiLCJzYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieWMiLCJ6YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQmMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInRhYkluZGV4IiwiR2MiLCJjaGFuZ2UiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiZGV0YWNoRXZlbnQiLCJQYyIsIlFjIiwiYXR0YWNoRXZlbnQiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJWYyIsIldjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlhjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiZGQiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJlZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZmQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImFsdGVybmF0ZSIsImdkIiwiaGQiLCJqZCIsImVmZmVjdFRhZyIsImtkIiwibWQiLCJjaGlsZCIsInNpYmxpbmciLCJsZCIsIm5kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm9kIiwiY2xpcGJvYXJkRGF0YSIsInBkIiwicWQiLCJjaGFyQ29kZSIsInJkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInNkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInRkIiwidWQiLCJkYXRhVHJhbnNmZXIiLCJ2ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ3ZCIsInhkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsImlzSW50ZXJhY3RpdmUiLCJDZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkRkIiwiRWQiLCJGZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiR2QiLCJIZCIsIklkIiwiSmQiLCJLZCIsIkxkIiwiTWQiLCJOZCIsIlBkIiwiYm9keSIsIlFkIiwiZmlyc3RDaGlsZCIsIlJkIiwibmV4dFNpYmxpbmciLCJUZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiVWQiLCJjb250ZW50RWRpdGFibGUiLCJWZCIsIldkIiwic2VsZWN0IiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYmUiLCJvblNlbGVjdCIsImRlIiwiY2UiLCJlZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImdlIiwiaGUiLCJpZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJqZSIsIm1hdGhtbCIsInN2ZyIsImtlIiwibGUiLCJtZSIsIm5lIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIm9lIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwicGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInFlIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJzZSIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidGUiLCJ1ZSIsInZlIiwiYmx1ciIsImZvY3VzIiwid2UiLCJ4ZSIsInllIiwiemUiLCJhdXRvRm9jdXMiLCJBZSIsIl9faHRtbCIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiSWUiLCJKZSIsIktlIiwiTGUiLCJnZXRDaGlsZENvbnRleHQiLCJNZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJTZSIsInBlbmRpbmdQcm9wcyIsImZpcnN0Q29udGV4dERlcGVuZGVuY3kiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiWGUiLCJZZSIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiWmUiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsIiRlIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFBpbmdlZFRpbWUiLCJuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsImFmIiwiYmYiLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNmIiwiZGYiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJwZiIsInFmIiwicmYiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIm9ic2VydmVkQml0cyIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJ0YWdOYW1lIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJGZiIsIkpmIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdmIiwiSGYiLCJJZiIsIktmIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGYiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJNZiIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiTmYiLCJPZiIsIl9zdHJpbmdSZWYiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImlnIiwiamciLCJwZW5kaW5nQ29udGV4dCIsIm5nIiwicGciLCJiZyIsIm9nIiwiaHlkcmF0ZSIsImhpZGRlbiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInlnIiwiemciLCJBZyIsImluc2VydEJlZm9yZSIsIm9uY2xpY2siLCJCZyIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZyIsIkRnIiwiRWciLCJjb21wb25lbnREaWRDYXRjaCIsIkZnIiwiY29tcG9uZW50U3RhY2siLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwib25DbGljayIsImNyZWF0ZUVsZW1lbnROUyIsIlJnIiwiU2ciLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJUZyIsImZpbmlzaGVkV29yayIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsIlVnIiwiVmciLCJuZXh0U2NoZWR1bGVkUm9vdCIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsInVuc3RhYmxlX25vdyIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJ1bnN0YWJsZV9jYW5jZWxTY2hlZHVsZWRXb3JrIiwidW5zdGFibGVfc2NoZWR1bGVXb3JrIiwicGgiLCJ0aW1lb3V0IiwicWgiLCJkaWRUaW1lb3V0IiwiX29uQ29tcGxldGUiLCJyaCIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJyYW5nZUNvdW50IiwiWGEiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwieWgiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlNkIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiU2EiLCJvYyIsIkloIiwiSmgiLCJrZyIsImxnIiwiS2giLCJBYyIsIm1nIiwiT2QiLCJMaCIsInRpbWVSZW1haW5pbmciLCJzaCIsInRoIiwidWgiLCJ3aCIsInZoIiwieGgiLCJ6aCIsIkJoIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiQ2giLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiRGgiLCJ0aW1lb3V0SGFuZGxlIiwiX2ludGVybmFsUm9vdCIsIkVoIiwiR2giLCJfcmVhY3RSb290Q29udGFpbmVyIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiRmgiLCJIaCIsIkFoIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJNaCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJSZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJOaCIsIk9oIiwiY2xlYXJUaW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwZXJmb3JtYW5jZSIsInNjaGVkdWxlZENhbGxiYWNrIiwidGltZW91dFRpbWUiLCJfYmFiZWxQb2x5ZmlsbCIsIkRFRklORV9QUk9QRVJUWSIsImRlZmluZSIsInBhZFN0YXJ0IiwicGFkRW5kIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImNvZGUiLCJkaWdpdHMiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieDIiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsImxhcmciLCIkaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCJmb3JjZWQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwicmUxIiwicmUyIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiJG1hdGNoIiwicmVnZXhwIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwicmVwbGFjZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCJOUENHIiwibGltaXQiLCJzZXBhcmF0b3IyIiwibGFzdEluZGV4IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiX2MiLCJfdiIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJjYXBhYmlsaXR5IiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVjZWl2ZXIiLCJnZXRQcm90byIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImFycmF5U3BlY2llc0NyZWF0ZSIsImRlcHRoQXJnIiwiYXQiLCIkcGFkIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIl9yIiwibWF0Y2hBbGwiLCJyeCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsImlzRXJyb3IiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCJpc3ViaCIsImltdWxoIiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwidW11bGgiLCJzaWduYml0IiwiZmluYWxseSIsIm9uRmluYWxseSIsInRyeSIsIm1ldGFkYXRhIiwidG9NZXRhS2V5Iiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiaGFzTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIiRtZXRhZGF0YSIsImFzYXAiLCJPQlNFUlZBQkxFIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJzdWJzY3JpcHRpb25DbG9zZWQiLCJfbyIsImNsb3NlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwib2JzZXJ2ZXIiLCJzdWJzY3JpYmVyIiwiU3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsImNvbXBsZXRlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJpdGVtcyIsIk9ic2VydmFibGUiLCJNU0lFIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCIkdGFzayIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsIm1hcmsiLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJzdG9wIiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCIkcmUiLCJyZWdFeHAiLCJwYXJ0IiwiJE9iamVjdCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwibG9jYXRpb25zQXJlRXF1YWwiLCJfcmVzb2x2ZVBhdGhuYW1lMiIsIl92YWx1ZUVxdWFsMiIsImN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsInZhbHVlRXF1YWwiLCJpdGVtIiwiYVR5cGUiLCJhVmFsdWUiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwibGlzdGVuZXJzIiwibmV4dFByb21wdCIsImlzQWN0aXZlIiwibWVzc2FnZSIsImNvbmZpcm0iLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsIl9pbW11dGFibGUyIiwiX3V0aWxpdGllcyIsInJlZHVjZXJzIiwiZ2V0RGVmYXVsdFN0YXRlIiwicmVkdWNlcktleXMiLCJpbnB1dFN0YXRlIiwidGVtcG9yYXJ5U3RhdGUiLCJyZWR1Y2VyTmFtZSIsIm5leHREb21haW5TdGF0ZSIsInZhbGlkYXRlTmV4dFN0YXRlIiwiZ2V0VW5leHBlY3RlZEludm9jYXRpb25QYXJhbWV0ZXJNZXNzYWdlIiwiZ2V0U3RhdGVOYW1lIiwiX2dldFN0YXRlTmFtZTMiLCJfZ2V0VW5leHBlY3RlZEludm9jYXRpb25QYXJhbWV0ZXJNZXNzYWdlMyIsIl92YWxpZGF0ZU5leHRTdGF0ZTMiLCJfZ2V0U3RhdGVOYW1lMiIsInJlZHVjZXJOYW1lcyIsInN0YXRlTmFtZSIsImlzSW1tdXRhYmxlIiwidW5leHBlY3RlZFN0YXRlUHJvcGVydHlOYW1lcyIsInN1YnNjcmlwdGlvblNoYXBlIiwicHJvcF90eXBlc19kZWZhdWx0IiwidHJ5U3Vic2NyaWJlIiwidHJ5VW5zdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwiaXNTdWJzY3JpYmVkIiwic3RvcmVTaGFwZSIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJjb21wb25lbnRzX1Byb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJzdWJzY3JpcHRpb25LZXkiLCJfQ29tcG9uZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pbmhlcml0cyIsInJlYWN0IiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJwYXJlbnRTdWIiLCJvblN0YXRlQ2hhbmdlIiwiU3Vic2NyaXB0aW9uX2NsYXNzQ2FsbENoZWNrIiwiYWRkTmVzdGVkU3ViIiwiQm9vbGVhbiIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwibm9vcCIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9jb250ZXh0VHlwZXMiLCJfY2hpbGRDb250ZXh0VHlwZXMiLCJfcmVmJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmJHNob3VsZEhhbmRsZVN0YXQiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmJHN0b3JlS2V5IiwiX3JlZiR3aXRoUmVmIiwid2l0aFJlZiIsImNvbm5lY3RPcHRpb25zIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJjb25uZWN0QWR2YW5jZWRfY2xhc3NDYWxsQ2hlY2siLCJjb25uZWN0QWR2YW5jZWRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiaW5pdFNlbGVjdG9yIiwiaW5pdFN1YnNjcmlwdGlvbiIsImNvbm5lY3RBZHZhbmNlZF9pbmhlcml0cyIsIl9yZWYyIiwibmV4dFByb3BzIiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwid3JhcHBlZEluc3RhbmNlIiwic291cmNlU2VsZWN0b3IiLCJtYWtlU2VsZWN0b3JTdGF0ZWZ1bCIsIm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJpc1BsYWluT2JqZWN0IiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiZnJlZVNlbGYiLCJfU3ltYm9sIiwiX2ZyZWVHbG9iYWwiLCJvYmplY3RQcm90byIsImZ1bmNQcm90byIsImlzUGxhaW5PYmplY3Rfb2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwiY29ubmVjdF9tYXBEaXNwYXRjaFRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJoYW5kbGVOZXdTdGF0ZSIsImZpcnN0U3RhdGUiLCJmaXJzdE93blByb3BzIiwiaGFuZGxlRmlyc3RDYWxsIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzZWxlY3RvckZhY3Rvcnlfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb25uZWN0X2V4dGVuZHMiLCJjb25uZWN0X21hdGNoIiwic3RyaWN0RXF1YWwiLCJjb25uZWN0X2Nvbm5lY3QiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkcHVyZSIsIl9yZWYyJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjIkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjIkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjIkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY29ubmVjdF9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIlJvdXRlcl9leHRlbmRzIiwiUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSb3V0ZXJfUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90ZW1wIiwiUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY29tcHV0ZU1hdGNoIiwiUm91dGVyX2luaGVyaXRzIiwicm91dGVyIiwiaXNFeGFjdCIsIl90aGlzMiIsIl9wcm9wcyIsInJlYWN0X2RlZmF1bHQiLCJ3YXJuaW5nX2RlZmF1bHQiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJlc19tYXRjaFBhdGgiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJjb21waWxlZFBhdHRlcm4iLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwiUm91dGVfZXh0ZW5kcyIsIlJvdXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSb3V0ZV9pc0VtcHR5Q2hpbGRyZW4iLCJSb3V0ZV9Sb3V0ZSIsIlJvdXRlIiwiUm91dGVfY2xhc3NDYWxsQ2hlY2siLCJSb3V0ZV9pbmhlcml0cyIsImNvbXB1dGVkTWF0Y2giLCJjb21wb25lbnQiLCJuZXh0Q29udGV4dCIsIl9jb250ZXh0JHJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlIiwiU3dpdGNoX1N3aXRjaCIsIlN3aXRjaCIsIlN3aXRjaF9jbGFzc0NhbGxDaGVjayIsIlN3aXRjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3dpdGNoX2luaGVyaXRzIiwiX2VsZW1lbnQkcHJvcHMiLCJwYXRoUHJvcCIsImVzX1N3aXRjaCIsImNvbnRhaW5lcnNfSG9tZVBhZ2UiLCJyZXNlbGVjdF9saWIiLCJGaXJzdFBhZ2VfRmlyc3RQYWdlIiwiY29udGFpbmVyc19GaXJzdFBhZ2UiLCJjb250YWluZXJzX1NlY29uZFBhZ2UiLCJpbml0aWFsU3RhdGUiLCJpbW11dGFibGUiLCJyZWR1Y2Vyc19pbml0aWFsU3RhdGUiLCJTZWNvbmRQYWdlX3JlZHVjZXJzIiwiSG9tZVBhZ2VfcmVkdWNlcnNfaW5pdGlhbFN0YXRlIiwiSG9tZVBhZ2VfcmVkdWNlcnMiLCJSb290X3JlZHVjZXJzIiwiZGlzdCIsImZpcnN0UGFnZSIsInNlY29uZFBhZ2UiLCJob21lUGFnZSIsIlJvb3RfaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2RlZmF1bHQiLCJSb290X3N0b3JlIiwiY3JlYXRlU3RvcmUiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsImVzIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlU3RhdGUiLCJjb250YWluZXJzX1Jvb3QiLCJyZWFjdF9kb20iLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUF6QixFQUFBNkIsRUFBQSxTQUFBMUIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBcUIsV0FDQSxXQUEyQixPQUFBckIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQWlCLEVBQUFDLEdBQXNELE9BQUFqQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF1QixFQUFBQyxJQUd0RC9CLEVBQUFrQyxFQUFBLEdBSUFsQyxJQUFBbUMsRUFBQSx1QkNsRkEsSUFBQUMsRUFBYXBDLEVBQVEsR0FDckJxQyxFQUFXckMsRUFBUSxJQUNuQnNDLEVBQVd0QyxFQUFRLElBQ25CdUMsRUFBZXZDLEVBQVEsSUFDdkJ3QyxFQUFVeEMsRUFBUSxJQUdsQnlDLEVBQUEsU0FBQUMsRUFBQS9CLEVBQUFnQyxHQUNBLElBUUFoQixFQUFBaUIsRUFBQUMsRUFBQUMsRUFSQUMsRUFBQUwsRUFBQUQsRUFBQU8sRUFDQUMsRUFBQVAsRUFBQUQsRUFBQVMsRUFDQUMsRUFBQVQsRUFBQUQsRUFBQVcsRUFDQUMsRUFBQVgsRUFBQUQsRUFBQWEsRUFDQUMsRUFBQWIsRUFBQUQsRUFBQWUsRUFDQUMsRUFBQVIsRUFBQWIsRUFBQWUsRUFBQWYsRUFBQXpCLEtBQUF5QixFQUFBekIsUUFBa0Z5QixFQUFBekIsUUFBdUIsVUFDekdULEVBQUErQyxFQUFBWixJQUFBMUIsS0FBQTBCLEVBQUExQixPQUNBK0MsRUFBQXhELEVBQUEsWUFBQUEsRUFBQSxjQUdBLElBQUF5QixLQURBc0IsSUFBQU4sRUFBQWhDLEdBQ0FnQyxFQUlBRSxJQUZBRCxHQUFBRyxHQUFBVSxRQUFBRSxJQUFBRixFQUFBOUIsSUFFQThCLEVBQUFkLEdBQUFoQixHQUVBbUIsRUFBQVMsR0FBQVgsRUFBQUosRUFBQUssRUFBQVQsR0FBQWlCLEdBQUEsbUJBQUFSLEVBQUFMLEVBQUFvQixTQUFBckQsS0FBQXNDLEtBRUFZLEdBQUFsQixFQUFBa0IsRUFBQTlCLEVBQUFrQixFQUFBSCxFQUFBRCxFQUFBb0IsR0FFQTNELEVBQUF5QixJQUFBa0IsR0FBQVAsRUFBQXBDLEVBQUF5QixFQUFBbUIsR0FDQU8sR0FBQUssRUFBQS9CLElBQUFrQixJQUFBYSxFQUFBL0IsR0FBQWtCLElBR0FULEVBQUFDLE9BRUFJLEVBQUFPLEVBQUEsRUFDQVAsRUFBQVMsRUFBQSxFQUNBVCxFQUFBVyxFQUFBLEVBQ0FYLEVBQUFhLEVBQUEsRUFDQWIsRUFBQWUsRUFBQSxHQUNBZixFQUFBcUIsRUFBQSxHQUNBckIsRUFBQW9CLEVBQUEsR0FDQXBCLEVBQUFzQixFQUFBLElBQ0E1RCxFQUFBRCxRQUFBdUMsZ0NDdkNBdEMsRUFBQUQsUUFBbUJGLEVBQVEsc0JDdUIzQkcsRUFBQUQsUUFBbUJGLEVBQVEsSUFBUkEsb0JDMUJuQixJQUFBZ0UsRUFBZWhFLEVBQVEsR0FDdkJHLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsSUFBQUQsRUFBQUMsR0FBQSxNQUFBQyxVQUFBRCxFQUFBLHNCQUNBLE9BQUFBLGtCQ0ZBLElBQUE3QixFQUFBakMsRUFBQUQsUUFBQSxvQkFBQWlFLGVBQUFDLFdBQ0FELE9BQUEsb0JBQUFFLFdBQUFELFdBQUFDLEtBRUFULFNBQUEsY0FBQUEsR0FDQSxpQkFBQVUsVUFBQWxDLGtCQ0xBakMsRUFBQUQsUUFBQSxTQUFBcUUsR0FDQSxJQUNBLFFBQUFBLElBQ0csTUFBQUMsR0FDSCwwQkNKQXJFLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsdUJBQUFBLEVBQUEsT0FBQUEsRUFBQSxtQkFBQUEsb0JDREEsSUFBQVEsRUFBWXpFLEVBQVEsR0FBUkEsQ0FBbUIsT0FDL0IwRSxFQUFVMUUsRUFBUSxJQUNsQm1CLEVBQWFuQixFQUFRLEdBQVdtQixPQUNoQ3dELEVBQUEsbUJBQUF4RCxHQUVBaEIsRUFBQUQsUUFBQSxTQUFBUyxHQUNBLE9BQUE4RCxFQUFBOUQsS0FBQThELEVBQUE5RCxHQUNBZ0UsR0FBQXhELEVBQUFSLEtBQUFnRSxFQUFBeEQsRUFBQXVELEdBQUEsVUFBQS9ELE1BR0E4RCx5QkNUQXRFLEVBQUFELFNBQWtCRixFQUFRLEVBQVJBLENBQWtCLFdBQ3BDLE9BQTBFLEdBQTFFYyxPQUFBQyxrQkFBaUMsS0FBUUUsSUFBQSxXQUFtQixZQUFjMkQscUJDRjFFLElBQUFDLEVBQWU3RSxFQUFRLEdBQ3ZCOEUsRUFBcUI5RSxFQUFRLEtBQzdCK0UsRUFBa0IvRSxFQUFRLElBQzFCZ0YsRUFBQWxFLE9BQUFDLGVBRUFiLEVBQUErRSxFQUFZakYsRUFBUSxHQUFnQmMsT0FBQUMsZUFBQSxTQUFBbUUsRUFBQTVCLEVBQUE2QixHQUlwQyxHQUhBTixFQUFBSyxHQUNBNUIsRUFBQXlCLEVBQUF6QixHQUFBLEdBQ0F1QixFQUFBTSxHQUNBTCxFQUFBLElBQ0EsT0FBQUUsRUFBQUUsRUFBQTVCLEVBQUE2QixHQUNHLE1BQUFYLElBQ0gsV0FBQVcsR0FBQSxRQUFBQSxFQUFBLE1BQUFqQixVQUFBLDRCQUVBLE1BREEsVUFBQWlCLElBQUFELEVBQUE1QixHQUFBNkIsRUFBQTlELE9BQ0E2RCxvQkNiQSxJQUFBRSxFQUFnQnBGLEVBQVEsSUFDeEJxRixFQUFBakIsS0FBQWlCLElBQ0FsRixFQUFBRCxRQUFBLFNBQUErRCxHQUNBLE9BQUFBLEVBQUEsRUFBQW9CLEVBQUFELEVBQUFuQixHQUFBLHNDQ0hBLElBQUFxQixFQUFjdEYsRUFBUSxJQUN0QkcsRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxPQUFBbkQsT0FBQXdFLEVBQUFyQixvQkNIQTlELEVBQUFELFFBQUEsU0FBQStELEdBQ0Esc0JBQUFBLEVBQUEsTUFBQUMsVUFBQUQsRUFBQSx1QkFDQSxPQUFBQSxvQkNGQSxJQUFBZSxFQUFTaEYsRUFBUSxHQUNqQnVGLEVBQWlCdkYsRUFBUSxJQUN6QkcsRUFBQUQsUUFBaUJGLEVBQVEsR0FBZ0IsU0FBQThCLEVBQUFILEVBQUFOLEdBQ3pDLE9BQUEyRCxFQUFBQyxFQUFBbkQsRUFBQUgsRUFBQTRELEVBQUEsRUFBQWxFLEtBQ0MsU0FBQVMsRUFBQUgsRUFBQU4sR0FFRCxPQURBUyxFQUFBSCxHQUFBTixFQUNBUyxvQkNOQSxJQUFBTSxFQUFhcEMsRUFBUSxHQUNyQnNDLEVBQVd0QyxFQUFRLElBQ25Cd0YsRUFBVXhGLEVBQVEsSUFDbEJ5RixFQUFVekYsRUFBUSxHQUFSQSxDQUFnQixPQUUxQjBGLEVBQUE5QixTQUFBLFNBQ0ErQixHQUFBLEdBQUFELEdBQUFFLE1BRkEsWUFJQTVGLEVBQVEsSUFBUzZGLGNBQUEsU0FBQTVCLEdBQ2pCLE9BQUF5QixFQUFBbkYsS0FBQTBELEtBR0E5RCxFQUFBRCxRQUFBLFNBQUFnRixFQUFBdkQsRUFBQW1FLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxtQkFBQUYsRUFDQUUsSUFBQVIsRUFBQU0sRUFBQSxTQUFBeEQsRUFBQXdELEVBQUEsT0FBQW5FLElBQ0F1RCxFQUFBdkQsS0FBQW1FLElBQ0FFLElBQUFSLEVBQUFNLEVBQUFMLElBQUFuRCxFQUFBd0QsRUFBQUwsRUFBQVAsRUFBQXZELEdBQUEsR0FBQXVELEVBQUF2RCxHQUFBZ0UsRUFBQU0sS0FBQUMsT0FBQXZFLE1BQ0F1RCxJQUFBOUMsRUFDQThDLEVBQUF2RCxHQUFBbUUsRUFDR0MsRUFHQWIsRUFBQXZELEdBQ0h1RCxFQUFBdkQsR0FBQW1FLEVBRUF4RCxFQUFBNEMsRUFBQXZELEVBQUFtRSxXQUxBWixFQUFBdkQsR0FDQVcsRUFBQTRDLEVBQUF2RCxFQUFBbUUsT0FPQ2xDLFNBQUE1QixVQXhCRCxXQXdCQyxXQUNELHlCQUFBbUUsV0FBQVYsSUFBQUMsRUFBQW5GLEtBQUE0Rix5QkM3QkEsSUFBQTFELEVBQWN6QyxFQUFRLEdBQ3RCb0csRUFBWXBHLEVBQVEsR0FDcEJzRixFQUFjdEYsRUFBUSxJQUN0QnFHLEVBQUEsS0FFQUMsRUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBcEYsR0FDQSxJQUFBK0IsRUFBQThDLE9BQUFaLEVBQUFpQixJQUNBRyxFQUFBLElBQUFGLEVBRUEsTUFEQSxLQUFBQyxJQUFBQyxHQUFBLElBQUFELEVBQUEsS0FBQVAsT0FBQTdFLEdBQUFzRixRQUFBTixFQUFBLFVBQTBGLEtBQzFGSyxFQUFBLElBQUF0RCxFQUFBLEtBQUFvRCxFQUFBLEtBRUFyRyxFQUFBRCxRQUFBLFNBQUEwRyxFQUFBckMsR0FDQSxJQUFBVyxLQUNBQSxFQUFBMEIsR0FBQXJDLEVBQUErQixHQUNBN0QsSUFBQWEsRUFBQWIsRUFBQU8sRUFBQW9ELEVBQUEsV0FDQSxJQUFBUyxFQUFBLEdBQUFELEdBQUEsS0FDQSxPQUFBQyxNQUFBQyxlQUFBRCxFQUFBakIsTUFBQSxLQUFBbUIsT0FBQSxJQUNHLFNBQUE3QixtQkNqQkgsSUFBQWpELEtBQXVCQSxlQUN2QjlCLEVBQUFELFFBQUEsU0FBQStELEVBQUF0QyxHQUNBLE9BQUFNLEVBQUExQixLQUFBMEQsRUFBQXRDLHFCQ0RBLElBQUFxRixFQUFjaEgsRUFBUSxJQUN0QnNGLEVBQWN0RixFQUFRLElBQ3RCRyxFQUFBRCxRQUFBLFNBQUErRCxHQUNBLE9BQUErQyxFQUFBMUIsRUFBQXJCLHNCQ0pBLElBQUFnRCxFQUFVakgsRUFBUSxJQUNsQnVGLEVBQWlCdkYsRUFBUSxJQUN6QmtILEVBQWdCbEgsRUFBUSxJQUN4QitFLEVBQWtCL0UsRUFBUSxJQUMxQndGLEVBQVV4RixFQUFRLElBQ2xCOEUsRUFBcUI5RSxFQUFRLEtBQzdCbUgsRUFBQXJHLE9BQUFzRyx5QkFFQWxILEVBQUErRSxFQUFZakYsRUFBUSxHQUFnQm1ILEVBQUEsU0FBQWpDLEVBQUE1QixHQUdwQyxHQUZBNEIsRUFBQWdDLEVBQUFoQyxHQUNBNUIsRUFBQXlCLEVBQUF6QixHQUFBLEdBQ0F3QixFQUFBLElBQ0EsT0FBQXFDLEVBQUFqQyxFQUFBNUIsR0FDRyxNQUFBa0IsSUFDSCxHQUFBZ0IsRUFBQU4sRUFBQTVCLEdBQUEsT0FBQWlDLEdBQUEwQixFQUFBaEMsRUFBQTFFLEtBQUEyRSxFQUFBNUIsR0FBQTRCLEVBQUE1QixzQkNiQSxJQUFBa0MsRUFBVXhGLEVBQVEsSUFDbEJxSCxFQUFlckgsRUFBUSxJQUN2QnNILEVBQWV0SCxFQUFRLEdBQVJBLENBQXVCLFlBQ3RDdUgsRUFBQXpHLE9BQUFrQixVQUVBN0IsRUFBQUQsUUFBQVksT0FBQTBHLGdCQUFBLFNBQUF0QyxHQUVBLE9BREFBLEVBQUFtQyxFQUFBbkMsR0FDQU0sRUFBQU4sRUFBQW9DLEdBQUFwQyxFQUFBb0MsR0FDQSxtQkFBQXBDLEVBQUF1QyxhQUFBdkMsZUFBQXVDLFlBQ0F2QyxFQUFBdUMsWUFBQXpGLFVBQ0drRCxhQUFBcEUsT0FBQXlHLEVBQUEscUJDWEgsSUFBQWxGLEVBQUFsQyxFQUFBRCxTQUE2QndILFFBQUEsU0FDN0IsaUJBQUFDLFVBQUF0RixvQkNBQSxJQUFBdUYsRUFBZ0I1SCxFQUFRLElBQ3hCRyxFQUFBRCxRQUFBLFNBQUEySCxFQUFBQyxFQUFBZixHQUVBLEdBREFhLEVBQUFDLFFBQ0FsRSxJQUFBbUUsRUFBQSxPQUFBRCxFQUNBLE9BQUFkLEdBQ0EsdUJBQUFuQyxHQUNBLE9BQUFpRCxFQUFBdEgsS0FBQXVILEVBQUFsRCxJQUVBLHVCQUFBQSxFQUFBbUQsR0FDQSxPQUFBRixFQUFBdEgsS0FBQXVILEVBQUFsRCxFQUFBbUQsSUFFQSx1QkFBQW5ELEVBQUFtRCxFQUFBdEgsR0FDQSxPQUFBb0gsRUFBQXRILEtBQUF1SCxFQUFBbEQsRUFBQW1ELEVBQUF0SCxJQUdBLGtCQUNBLE9BQUFvSCxFQUFBRyxNQUFBRixFQUFBRyw0QkNqQkEsSUFBQUMsS0FBaUJBLFNBRWpCL0gsRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxPQUFBaUUsRUFBQTNILEtBQUEwRCxHQUFBa0UsTUFBQSxxQ0NGQSxJQUFBL0IsRUFBWXBHLEVBQVEsR0FFcEJHLEVBQUFELFFBQUEsU0FBQWtJLEVBQUFDLEdBQ0EsUUFBQUQsR0FBQWhDLEVBQUEsV0FFQWlDLEVBQUFELEVBQUE3SCxLQUFBLGtCQUF1RCxHQUFBNkgsRUFBQTdILEtBQUEsdUNDMEN2REosRUFBQUQsUUE1QkEsU0FBQW9JLEVBQUFDLEVBQUEzRCxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUE4RCxFQUFBUyxHQU9BLElBQUFxRCxFQUFBLENBQ0EsSUFBQUUsRUFDQSxRQUFBN0UsSUFBQTRFLEVBQ0FDLEVBQUEsSUFBQUMsTUFDQSxxSUFHSyxDQUNMLElBQUFDLEdBQUE5RCxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUE4RCxFQUFBUyxHQUNBMEQsRUFBQSxHQUNBSCxFQUFBLElBQUFDLE1BQ0FGLEVBQUE1QixRQUFBLGlCQUEwQyxPQUFBK0IsRUFBQUMsU0FFMUNoSSxLQUFBLHNCQUlBLE1BREE2SCxFQUFBSSxZQUFBLEVBQ0FKLGtDQzVCQSxJQUVBSyxFQUFBLGFBMkNBMUksRUFBQUQsUUFBQTJJLG1CQzVEQSxJQUFBN0UsRUFBZWhFLEVBQVEsR0FHdkJHLEVBQUFELFFBQUEsU0FBQStELEVBQUFiLEdBQ0EsSUFBQVksRUFBQUMsR0FBQSxPQUFBQSxFQUNBLElBQUE0RCxFQUFBL0IsRUFDQSxHQUFBMUMsR0FBQSxtQkFBQXlFLEVBQUE1RCxFQUFBaUUsWUFBQWxFLEVBQUE4QixFQUFBK0IsRUFBQXRILEtBQUEwRCxJQUFBLE9BQUE2QixFQUNBLHNCQUFBK0IsRUFBQTVELEVBQUE2RSxXQUFBOUUsRUFBQThCLEVBQUErQixFQUFBdEgsS0FBQTBELElBQUEsT0FBQTZCLEVBQ0EsSUFBQTFDLEdBQUEsbUJBQUF5RSxFQUFBNUQsRUFBQWlFLFlBQUFsRSxFQUFBOEIsRUFBQStCLEVBQUF0SCxLQUFBMEQsSUFBQSxPQUFBNkIsRUFDQSxNQUFBNUIsVUFBQSwyRENUQS9ELEVBQUFELFFBQUEsU0FBQStELEdBQ0EsUUFBQU4sR0FBQU0sRUFBQSxNQUFBQyxVQUFBLHlCQUFBRCxHQUNBLE9BQUFBLGtCQ0ZBLElBQUE4RSxFQUFBM0UsS0FBQTJFLEtBQ0FDLEVBQUE1RSxLQUFBNEUsTUFDQTdJLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsT0FBQWdGLE1BQUFoRixNQUFBLEdBQUFBLEVBQUEsRUFBQStFLEVBQUFELEdBQUE5RSxxQkNIQSxJQUFBeEIsRUFBY3pDLEVBQVEsR0FDdEJxQyxFQUFXckMsRUFBUSxJQUNuQm9HLEVBQVlwRyxFQUFRLEdBQ3BCRyxFQUFBRCxRQUFBLFNBQUFnSixFQUFBM0UsR0FDQSxJQUFBc0QsR0FBQXhGLEVBQUF2QixZQUE2Qm9JLElBQUFwSSxPQUFBb0ksR0FDN0JwRyxLQUNBQSxFQUFBb0csR0FBQTNFLEVBQUFzRCxHQUNBcEYsSUFBQVcsRUFBQVgsRUFBQU8sRUFBQW9ELEVBQUEsV0FBcUR5QixFQUFBLEtBQVMsU0FBQS9FLHFCQ0Q5RCxJQUFBTixFQUFVeEMsRUFBUSxJQUNsQmdILEVBQWNoSCxFQUFRLElBQ3RCcUgsRUFBZXJILEVBQVEsSUFDdkJtSixFQUFlbkosRUFBUSxJQUN2Qm9KLEVBQVVwSixFQUFRLEtBQ2xCRyxFQUFBRCxRQUFBLFNBQUFtSixFQUFBQyxHQUNBLElBQUFDLEVBQUEsR0FBQUYsRUFDQUcsRUFBQSxHQUFBSCxFQUNBSSxFQUFBLEdBQUFKLEVBQ0FLLEVBQUEsR0FBQUwsRUFDQU0sRUFBQSxHQUFBTixFQUNBTyxFQUFBLEdBQUFQLEdBQUFNLEVBQ0FqSSxFQUFBNEgsR0FBQUYsRUFDQSxnQkFBQVMsRUFBQUMsRUFBQWhDLEdBUUEsSUFQQSxJQU1BaEMsRUFBQWlFLEVBTkE3RSxFQUFBbUMsRUFBQXdDLEdBQ0F4RixFQUFBMkMsRUFBQTlCLEdBQ0FELEVBQUF6QyxFQUFBc0gsRUFBQWhDLEVBQUEsR0FDQWYsRUFBQW9DLEVBQUE5RSxFQUFBMEMsUUFDQWlELEVBQUEsRUFDQUMsRUFBQVYsRUFBQTdILEVBQUFtSSxFQUFBOUMsR0FBQXlDLEVBQUE5SCxFQUFBbUksRUFBQSxRQUFBbEcsRUFFVW9ELEVBQUFpRCxFQUFlQSxJQUFBLElBQUFKLEdBQUFJLEtBQUEzRixLQUV6QjBGLEVBQUE5RSxFQURBYSxFQUFBekIsRUFBQTJGLEdBQ0FBLEVBQUE5RSxHQUNBbUUsR0FDQSxHQUFBRSxFQUFBVSxFQUFBRCxHQUFBRCxPQUNBLEdBQUFBLEVBQUEsT0FBQVYsR0FDQSxnQkFDQSxjQUFBdkQsRUFDQSxjQUFBa0UsRUFDQSxPQUFBQyxFQUFBQyxLQUFBcEUsUUFDUyxHQUFBNEQsRUFBQSxTQUdULE9BQUFDLEdBQUEsRUFBQUYsR0FBQUMsSUFBQU8sa0NDeENBLEdBQUlqSyxFQUFRLEdBQWdCLENBQzVCLElBQUFtSyxFQUFnQm5LLEVBQVEsSUFDeEJvQyxFQUFlcEMsRUFBUSxHQUN2Qm9HLEVBQWNwRyxFQUFRLEdBQ3RCeUMsRUFBZ0J6QyxFQUFRLEdBQ3hCb0ssRUFBZXBLLEVBQVEsSUFDdkJxSyxFQUFnQnJLLEVBQVEsS0FDeEJ3QyxFQUFZeEMsRUFBUSxJQUNwQnNLLEVBQW1CdEssRUFBUSxJQUMzQnVLLEVBQXFCdkssRUFBUSxJQUM3QnNDLEVBQWF0QyxFQUFRLElBQ3JCd0ssRUFBb0J4SyxFQUFRLElBQzVCb0YsRUFBa0JwRixFQUFRLElBQzFCbUosRUFBaUJuSixFQUFRLElBQ3pCeUssRUFBZ0J6SyxFQUFRLEtBQ3hCMEssRUFBd0IxSyxFQUFRLElBQ2hDK0UsRUFBb0IvRSxFQUFRLElBQzVCd0YsRUFBWXhGLEVBQVEsSUFDcEIySyxFQUFnQjNLLEVBQVEsSUFDeEJnRSxFQUFpQmhFLEVBQVEsR0FDekJxSCxFQUFpQnJILEVBQVEsSUFDekI0SyxFQUFvQjVLLEVBQVEsS0FDNUIwQixFQUFlMUIsRUFBUSxJQUN2QndILEVBQXVCeEgsRUFBUSxJQUMvQjZLLEVBQWE3SyxFQUFRLElBQWdCaUYsRUFDckM2RixFQUFrQjlLLEVBQVEsS0FDMUIwRSxFQUFZMUUsRUFBUSxJQUNwQitLLEVBQVkvSyxFQUFRLEdBQ3BCZ0wsRUFBMEJoTCxFQUFRLElBQ2xDaUwsRUFBNEJqTCxFQUFRLElBQ3BDa0wsRUFBMkJsTCxFQUFRLElBQ25DbUwsRUFBdUJuTCxFQUFRLEtBQy9Cb0wsRUFBa0JwTCxFQUFRLElBQzFCcUwsRUFBb0JyTCxFQUFRLElBQzVCc0wsRUFBbUJ0TCxFQUFRLElBQzNCdUwsRUFBa0J2TCxFQUFRLEtBQzFCd0wsRUFBd0J4TCxFQUFRLEtBQ2hDeUwsRUFBWXpMLEVBQVEsR0FDcEIwTCxFQUFjMUwsRUFBUSxJQUN0QmdGLEVBQUF5RyxFQUFBeEcsRUFDQWtDLEVBQUF1RSxFQUFBekcsRUFDQTBHLEVBQUF2SixFQUFBdUosV0FDQXpILEVBQUE5QixFQUFBOEIsVUFDQTBILEVBQUF4SixFQUFBd0osV0FLQUMsRUFBQUMsTUFBQSxVQUNBQyxFQUFBMUIsRUFBQTJCLFlBQ0FDLEVBQUE1QixFQUFBNkIsU0FDQUMsRUFBQW5CLEVBQUEsR0FDQW9CLEVBQUFwQixFQUFBLEdBQ0FxQixFQUFBckIsRUFBQSxHQUNBc0IsRUFBQXRCLEVBQUEsR0FDQXVCLEVBQUF2QixFQUFBLEdBQ0F3QixHQUFBeEIsRUFBQSxHQUNBeUIsR0FBQXhCLEdBQUEsR0FDQXlCLEdBQUF6QixHQUFBLEdBQ0EwQixHQUFBeEIsRUFBQXlCLE9BQ0FDLEdBQUExQixFQUFBMkIsS0FDQUMsR0FBQTVCLEVBQUE2QixRQUNBQyxHQUFBcEIsRUFBQXFCLFlBQ0FDLEdBQUF0QixFQUFBdUIsT0FDQUMsR0FBQXhCLEVBQUF5QixZQUNBQyxHQUFBMUIsRUFBQTVGLEtBQ0F1SCxHQUFBM0IsRUFBQTRCLEtBQ0FDLEdBQUE3QixFQUFBMUQsTUFDQXdGLEdBQUE5QixFQUFBM0QsU0FDQTBGLEdBQUEvQixFQUFBZ0MsZUFDQUMsR0FBQS9DLEVBQUEsWUFDQWdELEdBQUFoRCxFQUFBLGVBQ0FpRCxHQUFBdEosRUFBQSxxQkFDQXVKLEdBQUF2SixFQUFBLG1CQUNBd0osR0FBQTlELEVBQUErRCxPQUNBQyxHQUFBaEUsRUFBQWlFLE1BQ0FDLEdBQUFsRSxFQUFBa0UsS0FHQUMsR0FBQXZELEVBQUEsV0FBQTlGLEVBQUE2QixHQUNBLE9BQUF5SCxHQUFBdEQsRUFBQWhHLElBQUErSSxLQUFBbEgsS0FHQTBILEdBQUFySSxFQUFBLFdBRUEsZUFBQXdGLEVBQUEsSUFBQThDLGFBQUEsSUFBQUMsUUFBQSxLQUdBQyxLQUFBaEQsT0FBQSxVQUFBaUQsS0FBQXpJLEVBQUEsV0FDQSxJQUFBd0YsRUFBQSxHQUFBaUQsVUFHQUMsR0FBQSxTQUFBN0ssRUFBQThLLEdBQ0EsSUFBQUMsRUFBQTVKLEVBQUFuQixHQUNBLEdBQUErSyxFQUFBLEdBQUFBLEVBQUFELEVBQUEsTUFBQXBELEVBQUEsaUJBQ0EsT0FBQXFELEdBR0FDLEdBQUEsU0FBQWhMLEdBQ0EsR0FBQUQsRUFBQUMsSUFBQW1LLE1BQUFuSyxFQUFBLE9BQUFBLEVBQ0EsTUFBQUMsRUFBQUQsRUFBQSwyQkFHQXVLLEdBQUEsU0FBQVUsRUFBQW5JLEdBQ0EsS0FBQS9DLEVBQUFrTCxJQUFBbEIsTUFBQWtCLEdBQ0EsTUFBQWhMLEVBQUEsd0NBQ0ssV0FBQWdMLEVBQUFuSSxJQUdMb0ksR0FBQSxTQUFBakssRUFBQWtLLEdBQ0EsT0FBQUMsR0FBQW5FLEVBQUFoRyxJQUFBK0ksS0FBQW1CLElBR0FDLEdBQUEsU0FBQUgsRUFBQUUsR0FJQSxJQUhBLElBQUFwRixFQUFBLEVBQ0FqRCxFQUFBcUksRUFBQXJJLE9BQ0FrRCxFQUFBdUUsR0FBQVUsRUFBQW5JLEdBQ0FBLEVBQUFpRCxHQUFBQyxFQUFBRCxHQUFBb0YsRUFBQXBGLEtBQ0EsT0FBQUMsR0FHQXFGLEdBQUEsU0FBQXJMLEVBQUF0QyxFQUFBNE4sR0FDQXZLLEVBQUFmLEVBQUF0QyxHQUFpQlYsSUFBQSxXQUFtQixPQUFBa0YsS0FBQXFKLEdBQUFELE9BR3BDRSxHQUFBLFNBQUE5TSxHQUNBLElBS0F2QyxFQUFBMkcsRUFBQTZGLEVBQUEzQyxFQUFBeUYsRUFBQUMsRUFMQXpLLEVBQUFtQyxFQUFBMUUsR0FDQWlOLEVBQUEzSCxVQUFBbEIsT0FDQThJLEVBQUFELEVBQUEsRUFBQTNILFVBQUEsUUFBQXRFLEVBQ0FtTSxPQUFBbk0sSUFBQWtNLEVBQ0FFLEVBQUFqRixFQUFBNUYsR0FFQSxRQUFBdkIsR0FBQW9NLElBQUFuRixFQUFBbUYsR0FBQSxDQUNBLElBQUFKLEVBQUFJLEVBQUF4UCxLQUFBMkUsR0FBQTBILEtBQUF4TSxFQUFBLElBQXlEc1AsRUFBQUMsRUFBQUssUUFBQUMsS0FBZ0M3UCxJQUN6RndNLEVBQUExQyxLQUFBd0YsRUFBQXJPLE9BQ082RCxFQUFBMEgsRUFHUCxJQURBa0QsR0FBQUYsRUFBQSxJQUFBQyxFQUFBck4sRUFBQXFOLEVBQUE1SCxVQUFBLE9BQ0E3SCxFQUFBLEVBQUEyRyxFQUFBb0MsRUFBQWpFLEVBQUE2QixRQUFBa0QsRUFBQXVFLEdBQUFySSxLQUFBWSxHQUE2RUEsRUFBQTNHLEVBQVlBLElBQ3pGNkosRUFBQTdKLEdBQUEwUCxFQUFBRCxFQUFBM0ssRUFBQTlFLE1BQUE4RSxFQUFBOUUsR0FFQSxPQUFBNkosR0FHQWlHLEdBQUEsV0FJQSxJQUhBLElBQUFsRyxFQUFBLEVBQ0FqRCxFQUFBa0IsVUFBQWxCLE9BQ0FrRCxFQUFBdUUsR0FBQXJJLEtBQUFZLEdBQ0FBLEVBQUFpRCxHQUFBQyxFQUFBRCxHQUFBL0IsVUFBQStCLEtBQ0EsT0FBQUMsR0FJQWtHLEtBQUF2RSxHQUFBeEYsRUFBQSxXQUF5RHdILEdBQUFyTixLQUFBLElBQUFxTCxFQUFBLE1BRXpEd0UsR0FBQSxXQUNBLE9BQUF4QyxHQUFBNUYsTUFBQW1JLEdBQUF6QyxHQUFBbk4sS0FBQTBPLEdBQUE5SSxPQUFBOEksR0FBQTlJLE1BQUE4QixZQUdBb0ksSUFDQUMsV0FBQSxTQUFBN00sRUFBQThNLEdBQ0EsT0FBQS9FLEVBQUFqTCxLQUFBME8sR0FBQTlJLE1BQUExQyxFQUFBOE0sRUFBQXRJLFVBQUFsQixPQUFBLEVBQUFrQixVQUFBLFFBQUF0RSxJQUVBNk0sTUFBQSxTQUFBMUcsR0FDQSxPQUFBd0MsRUFBQTJDLEdBQUE5SSxNQUFBMkQsRUFBQTdCLFVBQUFsQixPQUFBLEVBQUFrQixVQUFBLFFBQUF0RSxJQUVBOE0sS0FBQSxTQUFBcFAsR0FDQSxPQUFBa0ssRUFBQXZELE1BQUFpSCxHQUFBOUksTUFBQThCLFlBRUF5SSxPQUFBLFNBQUE1RyxHQUNBLE9BQUFxRixHQUFBaEosS0FBQWlHLEVBQUE2QyxHQUFBOUksTUFBQTJELEVBQ0E3QixVQUFBbEIsT0FBQSxFQUFBa0IsVUFBQSxRQUFBdEUsS0FFQWdOLEtBQUEsU0FBQUMsR0FDQSxPQUFBckUsRUFBQTBDLEdBQUE5SSxNQUFBeUssRUFBQTNJLFVBQUFsQixPQUFBLEVBQUFrQixVQUFBLFFBQUF0RSxJQUVBa04sVUFBQSxTQUFBRCxHQUNBLE9BQUFwRSxHQUFBeUMsR0FBQTlJLE1BQUF5SyxFQUFBM0ksVUFBQWxCLE9BQUEsRUFBQWtCLFVBQUEsUUFBQXRFLElBRUFtTixRQUFBLFNBQUFoSCxHQUNBcUMsRUFBQThDLEdBQUE5SSxNQUFBMkQsRUFBQTdCLFVBQUFsQixPQUFBLEVBQUFrQixVQUFBLFFBQUF0RSxJQUVBb04sUUFBQSxTQUFBQyxHQUNBLE9BQUF0RSxHQUFBdUMsR0FBQTlJLE1BQUE2SyxFQUFBL0ksVUFBQWxCLE9BQUEsRUFBQWtCLFVBQUEsUUFBQXRFLElBRUFzTixTQUFBLFNBQUFELEdBQ0EsT0FBQXZFLEdBQUF3QyxHQUFBOUksTUFBQTZLLEVBQUEvSSxVQUFBbEIsT0FBQSxFQUFBa0IsVUFBQSxRQUFBdEUsSUFFQXNDLEtBQUEsU0FBQWlMLEdBQ0EsT0FBQTNELEdBQUF2RixNQUFBaUgsR0FBQTlJLE1BQUE4QixZQUVBaUYsWUFBQSxTQUFBOEQsR0FDQSxPQUFBL0QsR0FBQWpGLE1BQUFpSCxHQUFBOUksTUFBQThCLFlBRUFrSixJQUFBLFNBQUF0QixHQUNBLE9BQUF0QixHQUFBVSxHQUFBOUksTUFBQTBKLEVBQUE1SCxVQUFBbEIsT0FBQSxFQUFBa0IsVUFBQSxRQUFBdEUsSUFFQXlKLE9BQUEsU0FBQXRELEdBQ0EsT0FBQXFELEdBQUFuRixNQUFBaUgsR0FBQTlJLE1BQUE4QixZQUVBcUYsWUFBQSxTQUFBeEQsR0FDQSxPQUFBdUQsR0FBQXJGLE1BQUFpSCxHQUFBOUksTUFBQThCLFlBRUFtSixRQUFBLFdBTUEsSUFMQSxJQUlBL1AsRUFIQTBGLEVBQUFrSSxHQURBOUksTUFDQVksT0FDQXNLLEVBQUFqTixLQUFBNEUsTUFBQWpDLEVBQUEsR0FDQWlELEVBQUEsRUFFQUEsRUFBQXFILEdBQ0FoUSxFQU5BOEUsS0FNQTZELEdBTkE3RCxLQU9BNkQsS0FQQTdELE9BT0FZLEdBUEFaLEtBUUFZLEdBQUExRixFQUNPLE9BVFA4RSxNQVdBbUwsS0FBQSxTQUFBeEgsR0FDQSxPQUFBdUMsRUFBQTRDLEdBQUE5SSxNQUFBMkQsRUFBQTdCLFVBQUFsQixPQUFBLEVBQUFrQixVQUFBLFFBQUF0RSxJQUVBOEosS0FBQSxTQUFBOEQsR0FDQSxPQUFBL0QsR0FBQWpOLEtBQUEwTyxHQUFBOUksTUFBQW9MLElBRUFDLFNBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBeE0sRUFBQStKLEdBQUE5SSxNQUNBWSxFQUFBN0IsRUFBQTZCLE9BQ0E0SyxFQUFBakgsRUFBQStHLEVBQUExSyxHQUNBLFdBQUFtRSxFQUFBaEcsSUFBQStJLEtBQUEsQ0FDQS9JLEVBQUF5SixPQUNBekosRUFBQTBNLFdBQUFELEVBQUF6TSxFQUFBMk0sa0JBQ0ExSSxRQUFBeEYsSUFBQStOLEVBQUEzSyxFQUFBMkQsRUFBQWdILEVBQUEzSyxJQUFBNEssTUFLQUcsR0FBQSxTQUFBdkIsRUFBQW1CLEdBQ0EsT0FBQXZDLEdBQUFoSixLQUFBdUgsR0FBQW5OLEtBQUEwTyxHQUFBOUksTUFBQW9LLEVBQUFtQixLQUdBSyxHQUFBLFNBQUFDLEdBQ0EvQyxHQUFBOUksTUFDQSxJQUFBNkksRUFBQUYsR0FBQTdHLFVBQUEsTUFDQWxCLEVBQUFaLEtBQUFZLE9BQ0FrTCxFQUFBNUssRUFBQTJLLEdBQ0FFLEVBQUEvSSxFQUFBOEksRUFBQWxMLFFBQ0FpRCxFQUFBLEVBQ0EsR0FBQWtJLEVBQUFsRCxFQUFBakksRUFBQSxNQUFBNEUsRUF2S0EsaUJBd0tBLEtBQUEzQixFQUFBa0ksR0FBQS9MLEtBQUE2SSxFQUFBaEYsR0FBQWlJLEVBQUFqSSxNQUdBbUksSUFDQW5GLFFBQUEsV0FDQSxPQUFBRCxHQUFBeE0sS0FBQTBPLEdBQUE5SSxRQUVBMkcsS0FBQSxXQUNBLE9BQUFELEdBQUF0TSxLQUFBME8sR0FBQTlJLFFBRUF5RyxPQUFBLFdBQ0EsT0FBQUQsR0FBQXBNLEtBQUEwTyxHQUFBOUksU0FJQWlNLEdBQUEsU0FBQTNPLEVBQUE5QixHQUNBLE9BQUFxQyxFQUFBUCxJQUNBQSxFQUFBMkssS0FDQSxpQkFBQXpNLEdBQ0FBLEtBQUE4QixHQUNBeUMsUUFBQXZFLElBQUF1RSxPQUFBdkUsSUFFQTBRLEdBQUEsU0FBQTVPLEVBQUE5QixHQUNBLE9BQUF5USxHQUFBM08sRUFBQTlCLEVBQUFvRCxFQUFBcEQsR0FBQSxJQUNBNEksRUFBQSxFQUFBOUcsRUFBQTlCLElBQ0F3RixFQUFBMUQsRUFBQTlCLElBRUEyUSxHQUFBLFNBQUE3TyxFQUFBOUIsRUFBQTRRLEdBQ0EsUUFBQUgsR0FBQTNPLEVBQUE5QixFQUFBb0QsRUFBQXBELEdBQUEsS0FDQXFDLEVBQUF1TyxJQUNBL00sRUFBQStNLEVBQUEsV0FDQS9NLEVBQUErTSxFQUFBLFFBQ0EvTSxFQUFBK00sRUFBQSxRQUVBQSxFQUFBQyxjQUNBaE4sRUFBQStNLEVBQUEsY0FBQUEsRUFBQUUsVUFDQWpOLEVBQUErTSxFQUFBLGdCQUFBQSxFQUFBdlIsV0FJS2dFLEVBQUF2QixFQUFBOUIsRUFBQTRRLElBRkw5TyxFQUFBOUIsR0FBQTRRLEVBQUFsUixNQUNBb0MsSUFJQXlLLEtBQ0F4QyxFQUFBekcsRUFBQW9OLEdBQ0E1RyxFQUFBeEcsRUFBQXFOLElBR0E3UCxJQUFBVyxFQUFBWCxFQUFBTyxHQUFBa0wsR0FBQSxVQUNBOUcseUJBQUFpTCxHQUNBdFIsZUFBQXVSLEtBR0FsTSxFQUFBLFdBQXlCdUgsR0FBQXBOLGFBQ3pCb04sR0FBQUMsR0FBQSxXQUNBLE9BQUFMLEdBQUFoTixLQUFBNEYsUUFJQSxJQUFBdU0sR0FBQWxJLEtBQTRDNkYsSUFDNUM3RixFQUFBa0ksR0FBQVAsSUFDQTdQLEVBQUFvUSxHQUFBNUUsR0FBQXFFLEdBQUF2RixRQUNBcEMsRUFBQWtJLElBQ0F2SyxNQUFBMkosR0FDQWpELElBQUFrRCxHQUNBdEssWUFBQSxhQUNBUyxTQUFBeUYsR0FDQUUsZUFBQXVDLEtBRUFkLEdBQUFvRCxHQUFBLGNBQ0FwRCxHQUFBb0QsR0FBQSxrQkFDQXBELEdBQUFvRCxHQUFBLGtCQUNBcEQsR0FBQW9ELEdBQUEsY0FDQTFOLEVBQUEwTixHQUFBM0UsSUFDQTlNLElBQUEsV0FBc0IsT0FBQWtGLEtBQUFpSSxPQUl0QmpPLEVBQUFELFFBQUEsU0FBQWdKLEVBQUE2RixFQUFBNEQsRUFBQUMsR0FFQSxJQUFBaE0sRUFBQXNDLElBREEwSixPQUNBLHNCQUNBQyxFQUFBLE1BQUEzSixFQUNBNEosRUFBQSxNQUFBNUosRUFDQTZKLEVBQUEzUSxFQUFBd0UsR0FDQW9NLEVBQUFELE1BQ0FFLEVBQUFGLEdBQUF2TCxFQUFBdUwsR0FDQUcsR0FBQUgsSUFBQTNJLEVBQUErSSxJQUNBak8sS0FDQWtPLEVBQUFMLEtBQUEsVUFVQU0sRUFBQSxTQUFBdkwsRUFBQWtDLEdBQ0FoRixFQUFBOEMsRUFBQWtDLEdBQ0EvSSxJQUFBLFdBQ0EsT0FaQSxTQUFBNkcsRUFBQWtDLEdBQ0EsSUFBQXNKLEVBQUF4TCxFQUFBMEgsR0FDQSxPQUFBOEQsRUFBQUMsRUFBQVYsR0FBQTdJLEVBQUErRSxFQUFBdUUsRUFBQXpTLEVBQUE0TixJQVVBN04sQ0FBQXVGLEtBQUE2RCxJQUVBNkUsSUFBQSxTQUFBeE4sR0FDQSxPQVhBLFNBQUF5RyxFQUFBa0MsRUFBQTNJLEdBQ0EsSUFBQWlTLEVBQUF4TCxFQUFBMEgsR0FDQW9ELElBQUF2UixLQUFBK0MsS0FBQW9QLE1BQUFuUyxJQUFBLElBQUFBLEVBQUEsWUFBQUEsR0FDQWlTLEVBQUFDLEVBQUFULEdBQUE5SSxFQUFBK0UsRUFBQXVFLEVBQUF6UyxFQUFBUSxFQUFBb04sSUFRQWdGLENBQUF0TixLQUFBNkQsRUFBQTNJLElBRUFMLFlBQUEsS0FHQWtTLEdBQ0FILEVBQUFKLEVBQUEsU0FBQTdLLEVBQUF3TCxFQUFBSSxFQUFBQyxHQUNBckosRUFBQXhDLEVBQUFpTCxFQUFBbk0sRUFBQSxNQUNBLElBRUErSCxFQUFBaUYsRUFBQTdNLEVBQUE4TSxFQUZBN0osRUFBQSxFQUNBZ0YsRUFBQSxFQUVBLEdBQUFoTCxFQUFBc1AsR0FJUyxNQUFBQSxhQUFBdkgsR0FoVVQsZ0JBZ1VTOEgsRUFBQWxKLEVBQUEySSxLQS9UVCxxQkErVFNPLEdBYUEsT0FBQXpGLE1BQUFrRixFQUNUakUsR0FBQTBELEVBQUFPLEdBRUE3RCxHQUFBbFAsS0FBQXdTLEVBQUFPLEdBZkEzRSxFQUFBMkUsRUFDQXRFLEVBQUFGLEdBQUE0RSxFQUFBM0UsR0FDQSxJQUFBK0UsRUFBQVIsRUFBQU0sV0FDQSxRQUFBalEsSUFBQWdRLEVBQUEsQ0FDQSxHQUFBRyxFQUFBL0UsRUFBQSxNQUFBcEQsRUFwU0EsaUJBc1NBLElBREFpSSxFQUFBRSxFQUFBOUUsR0FDQSxRQUFBckQsRUF0U0Esc0JBeVNBLElBREFpSSxFQUFBekssRUFBQXdLLEdBQUE1RSxHQUNBQyxFQUFBOEUsRUFBQSxNQUFBbkksRUF6U0EsaUJBMlNBNUUsRUFBQTZNLEVBQUE3RSxPQWZBaEksRUFBQTBELEVBQUE2SSxHQUVBM0UsRUFBQSxJQUFBNUMsRUFEQTZILEVBQUE3TSxFQUFBZ0ksR0EyQkEsSUFQQXpNLEVBQUF3RixFQUFBLE1BQ0FDLEVBQUE0RyxFQUNBOU4sRUFBQW1PLEVBQ0EzTyxFQUFBdVQsRUFDQXBQLEVBQUF1QyxFQUNBd00sRUFBQSxJQUFBdEgsRUFBQTBDLEtBRUEzRSxFQUFBakQsR0FBQXNNLEVBQUF2TCxFQUFBa0MsT0FFQW9KLEVBQUFMLEVBQUEsVUFBQXJSLEVBQUFnUixJQUNBcFEsRUFBQThRLEVBQUEsY0FBQUwsSUFDSzNNLEVBQUEsV0FDTDJNLEVBQUEsTUFDSzNNLEVBQUEsV0FDTCxJQUFBMk0sR0FBQSxNQUNLMUgsRUFBQSxTQUFBMEksR0FDTCxJQUFBaEIsRUFDQSxJQUFBQSxFQUFBLE1BQ0EsSUFBQUEsRUFBQSxLQUNBLElBQUFBLEVBQUFnQixLQUNLLEtBQ0xoQixFQUFBSixFQUFBLFNBQUE3SyxFQUFBd0wsRUFBQUksRUFBQUMsR0FFQSxJQUFBRSxFQUdBLE9BSkF2SixFQUFBeEMsRUFBQWlMLEVBQUFuTSxHQUlBNUMsRUFBQXNQLEdBQ0FBLGFBQUF2SCxHQTdXQSxnQkE2V0E4SCxFQUFBbEosRUFBQTJJLEtBNVdBLHFCQTRXQU8sT0FDQWxRLElBQUFnUSxFQUNBLElBQUFYLEVBQUFNLEVBQUF4RSxHQUFBNEUsRUFBQTNFLEdBQUE0RSxRQUNBaFEsSUFBQStQLEVBQ0EsSUFBQVYsRUFBQU0sRUFBQXhFLEdBQUE0RSxFQUFBM0UsSUFDQSxJQUFBaUUsRUFBQU0sR0FFQWxGLE1BQUFrRixFQUFBakUsR0FBQTBELEVBQUFPLEdBQ0E3RCxHQUFBbFAsS0FBQXdTLEVBQUFPLEdBVEEsSUFBQU4sRUFBQXZJLEVBQUE2SSxNQVdBbkgsRUFBQThHLElBQUFyUCxTQUFBNUIsVUFBQTZJLEVBQUFtSSxHQUFBZ0IsT0FBQW5KLEVBQUFvSSxJQUFBcEksRUFBQW1JLEdBQUEsU0FBQXJSLEdBQ0FBLEtBQUFvUixHQUFBelEsRUFBQXlRLEVBQUFwUixFQUFBcVIsRUFBQXJSLE1BRUFvUixFQUFBLFVBQUFLLEVBQ0FqSixJQUFBaUosRUFBQTNMLFlBQUFzTCxJQUVBLElBQUFrQixFQUFBYixFQUFBdEYsSUFDQW9HLElBQUFELElBQ0EsVUFBQUEsRUFBQXRULFdBQUFnRCxHQUFBc1EsRUFBQXRULE1BQ0F3VCxFQUFBaEMsR0FBQXZGLE9BQ0F0SyxFQUFBeVEsRUFBQS9FLElBQUEsR0FDQTFMLEVBQUE4USxFQUFBaEYsR0FBQXhILEdBQ0F0RSxFQUFBOFEsRUFBQTlFLElBQUEsR0FDQWhNLEVBQUE4USxFQUFBbkYsR0FBQThFLElBRUFILEVBQUEsSUFBQUcsRUFBQSxHQUFBaEYsS0FBQW5ILEVBQUFtSCxNQUFBcUYsSUFDQXBPLEVBQUFvTyxFQUFBckYsSUFDQTlNLElBQUEsV0FBMEIsT0FBQTJGLEtBSTFCMUIsRUFBQTBCLEdBQUFtTSxFQUVBdFEsSUFBQVMsRUFBQVQsRUFBQXFCLEVBQUFyQixFQUFBTyxHQUFBK1AsR0FBQUMsR0FBQTlOLEdBRUF6QyxJQUFBVyxFQUFBd0QsR0FDQWlMLGtCQUFBOUMsSUFHQXRNLElBQUFXLEVBQUFYLEVBQUFPLEVBQUFvRCxFQUFBLFdBQXVENE0sRUFBQW9CLEdBQUE3VCxLQUFBd1MsRUFBQSxLQUErQm5NLEdBQ3RGeU4sS0FBQTVFLEdBQ0EyRSxHQUFBbEUsS0FwWkEsc0JBdVpBa0QsR0FBQTlRLEVBQUE4USxFQXZaQSxvQkF1WkFyRSxHQUVBdE0sSUFBQWEsRUFBQXNELEVBQUF5SixJQUVBL0UsRUFBQTFFLEdBRUFuRSxJQUFBYSxFQUFBYixFQUFBTyxFQUFBNEwsR0FBQWhJLEdBQXVEaUksSUFBQWtELEtBRXZEdFAsSUFBQWEsRUFBQWIsRUFBQU8sR0FBQWtSLEVBQUF0TixFQUFBdUwsSUFFQWhJLEdBQUFpSixFQUFBbEwsVUFBQXlGLEtBQUF5RixFQUFBbEwsU0FBQXlGLElBRUFsTCxJQUFBYSxFQUFBYixFQUFBTyxFQUFBb0QsRUFBQSxXQUNBLElBQUEyTSxFQUFBLEdBQUE1SyxVQUNLdkIsR0FBVXVCLE1BQUEySixLQUVmclAsSUFBQWEsRUFBQWIsRUFBQU8sR0FBQW9ELEVBQUEsV0FDQSxZQUFBeUgsa0JBQUEsSUFBQWtGLEdBQUEsTUFBQWxGLHFCQUNLekgsRUFBQSxXQUNMZ04sRUFBQXZGLGVBQUF0TixNQUFBLFNBQ0txRyxHQUFXaUgsZUFBQXVDLEtBRWhCaEYsRUFBQXhFLEdBQUFzTixFQUFBRCxFQUFBRSxFQUNBaEssR0FBQStKLEdBQUE1UixFQUFBOFEsRUFBQXRGLEdBQUFxRyxTQUVDaFUsRUFBQUQsUUFBQSw4QkMvZEQsSUFBQW9VLEVBQVV0VSxFQUFRLEtBQ2xCeUMsRUFBY3pDLEVBQVEsR0FDdEJ1VSxFQUFhdlUsRUFBUSxHQUFSQSxDQUFtQixZQUNoQ3lFLEVBQUE4UCxFQUFBOVAsUUFBQThQLEVBQUE5UCxNQUFBLElBQWlEekUsRUFBUSxPQUV6RHdVLEVBQUEsU0FBQS9RLEVBQUFnUixFQUFBL1MsR0FDQSxJQUFBZ1QsRUFBQWpRLEVBQUF4RCxJQUFBd0MsR0FDQSxJQUFBaVIsRUFBQSxDQUNBLElBQUFoVCxFQUFBLE9BQ0ErQyxFQUFBb0ssSUFBQXBMLEVBQUFpUixFQUFBLElBQUFKLEdBRUEsSUFBQUssRUFBQUQsRUFBQXpULElBQUF3VCxHQUNBLElBQUFFLEVBQUEsQ0FDQSxJQUFBalQsRUFBQSxPQUNBZ1QsRUFBQTdGLElBQUE0RixFQUFBRSxFQUFBLElBQUFMLEdBQ0csT0FBQUssR0EwQkh4VSxFQUFBRCxTQUNBdUUsUUFDQTBNLElBQUFxRCxFQUNBaFAsSUEzQkEsU0FBQW9QLEVBQUExUCxFQUFBNUIsR0FDQSxJQUFBdVIsRUFBQUwsRUFBQXRQLEVBQUE1QixHQUFBLEdBQ0EsWUFBQUssSUFBQWtSLEtBQUFyUCxJQUFBb1AsSUEwQkEzVCxJQXhCQSxTQUFBMlQsRUFBQTFQLEVBQUE1QixHQUNBLElBQUF1UixFQUFBTCxFQUFBdFAsRUFBQTVCLEdBQUEsR0FDQSxZQUFBSyxJQUFBa1IsT0FBQWxSLEVBQUFrUixFQUFBNVQsSUFBQTJULElBdUJBL0YsSUFyQkEsU0FBQStGLEVBQUFFLEVBQUE1UCxFQUFBNUIsR0FDQWtSLEVBQUF0UCxFQUFBNUIsR0FBQSxHQUFBdUwsSUFBQStGLEVBQUFFLElBcUJBaEksS0FuQkEsU0FBQXJKLEVBQUFnUixHQUNBLElBQUFJLEVBQUFMLEVBQUEvUSxFQUFBZ1IsR0FBQSxHQUNBM0gsS0FFQSxPQURBK0gsS0FBQS9ELFFBQUEsU0FBQWlFLEVBQUFwVCxHQUEwRG1MLEVBQUE1QyxLQUFBdkksS0FDMURtTCxHQWdCQW5MLElBZEEsU0FBQXNDLEdBQ0EsWUFBQU4sSUFBQU0sR0FBQSxpQkFBQUEsSUFBQWlDLE9BQUFqQyxJQWNBbkIsSUFaQSxTQUFBb0MsR0FDQXpDLElBQUFXLEVBQUEsVUFBQThCLG9CQ3RDQSxJQUFBN0MsRUFBQWxDLEVBQUFELFNBQTZCd0gsUUFBQSxTQUM3QixpQkFBQUMsVUFBQXRGLG9CQ0RBLElBQUEyUyxFQUFXaFYsRUFBUSxHQUFSQSxDQUFnQixRQUMzQmdFLEVBQWVoRSxFQUFRLEdBQ3ZCd0YsRUFBVXhGLEVBQVEsSUFDbEJpVixFQUFjalYsRUFBUSxHQUFjaUYsRUFDcENpUSxFQUFBLEVBQ0FDLEVBQUFyVSxPQUFBcVUsY0FBQSxXQUNBLFVBRUFDLEdBQWNwVixFQUFRLEVBQVJBLENBQWtCLFdBQ2hDLE9BQUFtVixFQUFBclUsT0FBQXVVLHlCQUVBQyxFQUFBLFNBQUFyUixHQUNBZ1IsRUFBQWhSLEVBQUErUSxHQUFxQjNULE9BQ3JCakIsRUFBQSxPQUFBOFUsRUFDQUssU0FnQ0FDLEVBQUFyVixFQUFBRCxTQUNBZ0osSUFBQThMLEVBQ0FTLE1BQUEsRUFDQUMsUUFoQ0EsU0FBQXpSLEVBQUF2QyxHQUVBLElBQUFzQyxFQUFBQyxHQUFBLHVCQUFBQSxLQUFBLGlCQUFBQSxFQUFBLFNBQUFBLEVBQ0EsSUFBQXVCLEVBQUF2QixFQUFBK1EsR0FBQSxDQUVBLElBQUFHLEVBQUFsUixHQUFBLFVBRUEsSUFBQXZDLEVBQUEsVUFFQTRULEVBQUFyUixHQUVHLE9BQUFBLEVBQUErUSxHQUFBNVUsR0FzQkh1VixRQXBCQSxTQUFBMVIsRUFBQXZDLEdBQ0EsSUFBQThELEVBQUF2QixFQUFBK1EsR0FBQSxDQUVBLElBQUFHLEVBQUFsUixHQUFBLFNBRUEsSUFBQXZDLEVBQUEsU0FFQTRULEVBQUFyUixHQUVHLE9BQUFBLEVBQUErUSxHQUFBTyxHQVlISyxTQVRBLFNBQUEzUixHQUVBLE9BREFtUixHQUFBSSxFQUFBQyxNQUFBTixFQUFBbFIsS0FBQXVCLEVBQUF2QixFQUFBK1EsSUFBQU0sRUFBQXJSLEdBQ0FBLG1CQzVDQTlELEVBQUFELFNBQUEsbUJDQ0EsSUFBQTJWLEVBQWtCN1YsRUFBUSxFQUFSQSxDQUFnQixlQUNsQzZMLEVBQUFDLE1BQUE5SixlQUNBMkIsR0FBQWtJLEVBQUFnSyxJQUEwQzdWLEVBQVEsR0FBUkEsQ0FBaUI2TCxFQUFBZ0ssTUFDM0QxVixFQUFBRCxRQUFBLFNBQUF5QixHQUNBa0ssRUFBQWdLLEdBQUFsVSxJQUFBLGtCQ0pBLElBQUFTLEVBQUFqQyxFQUFBRCxRQUFBLG9CQUFBaUUsZUFBQUMsV0FDQUQsT0FBQSxvQkFBQUUsV0FBQUQsV0FBQUMsS0FFQVQsU0FBQSxjQUFBQSxHQUNBLGlCQUFBVSxVQUFBbEMsb0JDRzhEakMsRUFBQUQsUUFHN0QsV0FBb0IsYUFBYyxJQUFBNFYsRUFBQWhLLE1BQUE5SixVQUFBbUcsTUFFbkMsU0FBQTROLEVBQUFDLEVBQUFDLEdBQ0FBLElBQ0FELEVBQUFoVSxVQUFBbEIsT0FBQVksT0FBQXVVLEVBQUFqVSxZQUVBZ1UsRUFBQWhVLFVBQUF5RixZQUFBdU8sRUFHQSxTQUFBRSxFQUFBN1UsR0FDQSxPQUFBOFUsRUFBQTlVLEtBQUErVSxFQUFBL1UsR0FLQSxTQUFBZ1YsRUFBQWhWLEdBQ0EsT0FBQWlWLEVBQUFqVixLQUFBa1YsRUFBQWxWLEdBS0EsU0FBQW1WLEVBQUFuVixHQUNBLE9BQUFvVixFQUFBcFYsS0FBQXFWLEVBQUFyVixHQUtBLFNBQUFzVixFQUFBdFYsR0FDQSxPQUFBOFUsRUFBQTlVLEtBQUF1VixFQUFBdlYsS0FBQXdWLEVBQUF4VixHQUtBLFNBQUE4VSxFQUFBVyxHQUNBLFNBQUFBLE1BQUFDLElBR0EsU0FBQVQsRUFBQVUsR0FDQSxTQUFBQSxNQUFBQyxJQUdBLFNBQUFSLEVBQUFTLEdBQ0EsU0FBQUEsTUFBQUMsSUFHQSxTQUFBUCxFQUFBUSxHQUNBLE9BQUFkLEVBQUFjLElBQUFYLEVBQUFXLEdBR0EsU0FBQUMsRUFBQUMsR0FDQSxTQUFBQSxNQUFBQyxJQXBDQXhCLEVBQUFNLEVBQUFILEdBTUFILEVBQUFTLEVBQUFOLEdBTUFILEVBQUFZLEVBQUFULEdBMkJBQSxFQUFBQyxhQUNBRCxFQUFBSSxVQUNBSixFQUFBTyxZQUNBUCxFQUFBVSxnQkFDQVYsRUFBQW1CLFlBRUFuQixFQUFBc0IsTUFBQW5CLEVBQ0FILEVBQUF1QixRQUFBakIsRUFDQU4sRUFBQXdCLElBQUFmLEVBR0EsSUFBQUksRUFBQSw2QkFDQUUsRUFBQSwwQkFDQUUsRUFBQSw0QkFDQUksRUFBQSw0QkFNQUksRUFBQSxFQUNBQyxFQUFBLEdBQUFELEVBQ0FFLEVBQUFELEVBQUEsRUFJQUUsS0FHQUMsR0FBdUIxVyxPQUFBLEdBQ3ZCMlcsR0FBbUIzVyxPQUFBLEdBRW5CLFNBQUE0VyxFQUFBQyxHQUVBLE9BREFBLEVBQUE3VyxPQUFBLEVBQ0E2VyxFQUdBLFNBQUFDLEVBQUFELEdBQ0FBLE1BQUE3VyxPQUFBLEdBTUEsU0FBQStXLEtBR0EsU0FBQUMsRUFBQUMsRUFBQXRKLEdBQ0FBLEtBQUEsRUFHQSxJQUZBLElBQUFrRCxFQUFBOU4sS0FBQW1VLElBQUEsRUFBQUQsRUFBQXZSLE9BQUFpSSxHQUNBd0osRUFBQSxJQUFBMU0sTUFBQW9HLEdBQ0F1RyxFQUFBLEVBQW9CQSxFQUFBdkcsRUFBVXVHLElBQzlCRCxFQUFBQyxHQUFBSCxFQUFBRyxFQUFBekosR0FFQSxPQUFBd0osRUFHQSxTQUFBRSxFQUFBM0UsR0FJQSxZQUhBcFEsSUFBQW9RLEVBQUE0RSxPQUNBNUUsRUFBQTRFLEtBQUE1RSxFQUFBNkUsVUFBQUMsSUFFQTlFLEVBQUE0RSxLQUdBLFNBQUFHLEVBQUEvRSxFQUFBL0osR0FRQSxvQkFBQUEsRUFBQSxDQUNBLElBQUErTyxFQUFBL08sSUFBQSxFQUNBLE1BQUErTyxJQUFBL08sR0FBQSxhQUFBK08sRUFDQSxPQUFBQyxJQUVBaFAsRUFBQStPLEVBRUEsT0FBQS9PLEVBQUEsRUFBQTBPLEVBQUEzRSxHQUFBL0osSUFHQSxTQUFBNk8sSUFDQSxTQUdBLFNBQUFJLEVBQUF4SCxFQUFBQyxFQUFBaUgsR0FDQSxXQUFBbEgsUUFBQTlOLElBQUFnVixHQUFBbEgsSUFBQWtILFVBQ0FoVixJQUFBK04sUUFBQS9OLElBQUFnVixHQUFBakgsR0FBQWlILEdBR0EsU0FBQU8sRUFBQXpILEVBQUFrSCxHQUNBLE9BQUFRLEVBQUExSCxFQUFBa0gsRUFBQSxHQUdBLFNBQUFTLEVBQUExSCxFQUFBaUgsR0FDQSxPQUFBUSxFQUFBekgsRUFBQWlILEtBR0EsU0FBQVEsRUFBQW5QLEVBQUEyTyxFQUFBVSxHQUNBLFlBQUExVixJQUFBcUcsRUFDQXFQLEVBQ0FyUCxFQUFBLEVBQ0E1RixLQUFBbVUsSUFBQSxFQUFBSSxFQUFBM08sUUFDQXJHLElBQUFnVixFQUNBM08sRUFDQTVGLEtBQUFpQixJQUFBc1QsRUFBQTNPLEdBS0EsSUFBQXNQLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBRUFDLEVBQUEsbUJBQUF0WSxlQUFBd08sU0FDQStKLEVBQUEsYUFFQUMsRUFBQUYsR0FBQUMsRUFHQSxTQUFBRSxFQUFBNUosR0FDQTdKLEtBQUE2SixPQW1CQSxTQUFBNkosRUFBQW5YLEVBQUFvWCxFQUFBdkcsRUFBQXdHLEdBQ0EsSUFBQTFZLEVBQUEsSUFBQXFCLEVBQUFvWCxFQUFBLElBQUFwWCxFQUFBNlEsR0FBQXVHLEVBQUF2RyxHQUlBLE9BSEF3RyxJQUFBMVksUUFBQTBZLEdBQ0ExWSxRQUFBNE8sTUFBQSxHQUVBOEosRUFHQSxTQUFBQyxJQUNBLE9BQVkzWSxXQUFBc0MsRUFBQXNNLE1BQUEsR0FHWixTQUFBZ0ssRUFBQW5ELEdBQ0EsUUFBQW9ELEVBQUFwRCxHQUdBLFNBQUFxRCxFQUFBQyxHQUNBLE9BQUFBLEdBQUEsbUJBQUFBLEVBQUFwSyxLQUdBLFNBQUFxSyxFQUFBQyxHQUNBLElBQUFDLEVBQUFMLEVBQUFJLEdBQ0EsT0FBQUMsS0FBQWhhLEtBQUErWixHQUdBLFNBQUFKLEVBQUFJLEdBQ0EsSUFBQUMsRUFBQUQsSUFDQWIsR0FBQWEsRUFBQWIsSUFDQWEsRUFBQVosSUFFQSxzQkFBQWEsRUFDQSxPQUFBQSxFQUlBLFNBQUFDLEVBQUFuWixHQUNBLE9BQUFBLEdBQUEsaUJBQUFBLEVBQUEwRixPQUlBLFNBQUFxUCxFQUFBL1UsR0FDQSxjQUFBQSxRQUFBc0MsSUFBQXRDLEVBQUFvWixLQUNBdEUsRUFBQTlVLEtBQUFxWixRQW9VQSxTQUFBclosR0FDQSxJQUFBc1osRUFBQUMsR0FBQXZaLElBQ0EsaUJBQUFBLEdBQUEsSUFBQXdaLEdBQUF4WixHQUNBLElBQUFzWixFQUNBLFVBQUF6VyxVQUNBLGlFQUFBN0MsR0FHQSxPQUFBc1osRUE1VUFHLENBQUF6WixHQXNDQSxTQUFBa1YsRUFBQWxWLEdBQ0EsY0FBQUEsUUFBQXNDLElBQUF0QyxFQUNBb1osS0FBQU0sYUFDQTVFLEVBQUE5VSxHQUNBaVYsRUFBQWpWLEtBQUFxWixRQUFBclosRUFBQTJaLGVBQ0FDLEdBQUE1WixHQVVBLFNBQUFxVixFQUFBclYsR0FDQSxjQUFBQSxRQUFBc0MsSUFBQXRDLEVBQUFvWixLQUNBdEUsRUFBQTlVLEdBQ0FpVixFQUFBalYsS0FBQTZaLFdBQUE3WixFQUFBOFosZUFEQUMsR0FBQS9aLEdBMkJBLFNBQUF3VixFQUFBeFYsR0FDQSxPQUNBLE9BQUFBLFFBQUFzQyxJQUFBdEMsRUFBQW9aLEtBQ0F0RSxFQUFBOVUsR0FDQWlWLEVBQUFqVixLQUFBNlosV0FBQTdaLEVBREErWixHQUFBL1osSUFFQWdhLFdBakpBekIsRUFBQTVYLFVBQUFrRyxTQUFBLFdBQ0Esb0JBSUEwUixFQUFBMEIsS0FBQWhDLEVBQ0FNLEVBQUEyQixPQUFBaEMsRUFDQUssRUFBQTRCLFFBQUFoQyxFQUVBSSxFQUFBNVgsVUFBQXlaLFFBQ0E3QixFQUFBNVgsVUFBQTBaLFNBQUEsV0FBNkMsT0FBQXZWLEtBQUErQixZQUM3QzBSLEVBQUE1WCxVQUFBMlgsR0FBQSxXQUNBLE9BQUF4VCxNQTJDQTRQLEVBQUFLLEVBQUFGLEdBTUFFLEVBQUFoQyxHQUFBLFdBQ0EsT0FBQWdDLEVBQUFuTyxZQUdBbU8sRUFBQXBVLFVBQUEwWSxNQUFBLFdBQ0EsT0FBQXZVLE1BR0FpUSxFQUFBcFUsVUFBQWtHLFNBQUEsV0FDQSxPQUFBL0IsS0FBQXdWLFdBQUEsUUFBbUMsTUFHbkN2RixFQUFBcFUsVUFBQTRaLFlBQUEsV0FLQSxPQUpBelYsS0FBQTBWLFFBQUExVixLQUFBMlYsb0JBQ0EzVixLQUFBMFYsT0FBQTFWLEtBQUErVSxXQUFBYSxVQUNBNVYsS0FBQXdTLEtBQUF4UyxLQUFBMFYsT0FBQTlVLFFBRUFaLE1BS0FpUSxFQUFBcFUsVUFBQTRXLFVBQUEsU0FBQS9RLEVBQUF1SixHQUNBLE9BQUE0SyxHQUFBN1YsS0FBQTBCLEVBQUF1SixHQUFBLElBS0FnRixFQUFBcFUsVUFBQWlhLFdBQUEsU0FBQXZaLEVBQUEwTyxHQUNBLE9BQUE4SyxHQUFBL1YsS0FBQXpELEVBQUEwTyxHQUFBLElBS0EyRSxFQUFBUSxFQUFBSCxHQVNBRyxFQUFBdlUsVUFBQStZLFdBQUEsV0FDQSxPQUFBNVUsTUFLQTRQLEVBQUFXLEVBQUFOLEdBT0FNLEVBQUF0QyxHQUFBLFdBQ0EsT0FBQXNDLEVBQUF6TyxZQUdBeU8sRUFBQTFVLFVBQUFtWixhQUFBLFdBQ0EsT0FBQWhWLE1BR0F1USxFQUFBMVUsVUFBQWtHLFNBQUEsV0FDQSxPQUFBL0IsS0FBQXdWLFdBQUEsY0FHQWpGLEVBQUExVSxVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBQ0EsT0FBQTRLLEdBQUE3VixLQUFBMEIsRUFBQXVKLEdBQUEsSUFHQXNGLEVBQUExVSxVQUFBaWEsV0FBQSxTQUFBdlosRUFBQTBPLEdBQ0EsT0FBQThLLEdBQUEvVixLQUFBekQsRUFBQTBPLEdBQUEsSUFLQTJFLEVBQUFjLEVBQUFULEdBU0FTLEVBQUF6QyxHQUFBLFdBQ0EsT0FBQXlDLEVBQUE1TyxZQUdBNE8sRUFBQTdVLFVBQUFxWixTQUFBLFdBQ0EsT0FBQWxWLE1BS0FpUSxFQUFBK0YsU0FDQS9GLEVBQUFvQixNQUFBakIsRUFDQUgsRUFBQXNCLElBQUFiLEVBQ0FULEVBQUFxQixRQUFBZixFQUVBLElBMkxBMEYsRUF1VUFDLEVBcUhBQyxFQXZuQkFDLEVBQUEsd0JBT0EsU0FBQUMsR0FBQUMsR0FDQXRXLEtBQUF1VyxPQUFBRCxFQUNBdFcsS0FBQXdTLEtBQUE4RCxFQUFBMVYsT0FnQ0EsU0FBQThULEdBQUEvWSxHQUNBLElBQUFnTCxFQUFBaE0sT0FBQWdNLEtBQUFoTCxHQUNBcUUsS0FBQXdXLFFBQUE3YSxFQUNBcUUsS0FBQXlXLE1BQUE5UCxFQUNBM0csS0FBQXdTLEtBQUE3TCxFQUFBL0YsT0E0Q0EsU0FBQThWLEdBQUF2QyxHQUNBblUsS0FBQTJXLFVBQUF4QyxFQUNBblUsS0FBQXdTLEtBQUEyQixFQUFBdlQsUUFBQXVULEVBQUEzQixLQXdDQSxTQUFBb0UsR0FBQXBOLEdBQ0F4SixLQUFBNlcsVUFBQXJOLEVBQ0F4SixLQUFBOFcsa0JBa0RBLFNBQUFkLEdBQUFlLEdBQ0EsU0FBQUEsTUFBQVgsSUFLQSxTQUFBOUIsS0FDQSxPQUFBMkIsTUFBQSxJQUFBSSxRQUdBLFNBQUF2QixHQUFBNVosR0FDQSxJQUFBc1osRUFDQTdPLE1BQUFxUixRQUFBOWIsR0FBQSxJQUFBbWIsR0FBQW5iLEdBQUEyWixlQUNBYixFQUFBOVksR0FBQSxJQUFBMGIsR0FBQTFiLEdBQUEyWixlQUNBZixFQUFBNVksR0FBQSxJQUFBd2IsR0FBQXhiLEdBQUEyWixlQUNBLGlCQUFBM1osRUFBQSxJQUFBd1osR0FBQXhaLFFBQ0FzQyxFQUNBLElBQUFnWCxFQUNBLFVBQUF6VyxVQUNBLHlFQUNBN0MsR0FHQSxPQUFBc1osRUFHQSxTQUFBUyxHQUFBL1osR0FDQSxJQUFBc1osRUFBQUMsR0FBQXZaLEdBQ0EsSUFBQXNaLEVBQ0EsVUFBQXpXLFVBQ0EsZ0RBQUE3QyxHQUdBLE9BQUFzWixFQWNBLFNBQUFDLEdBQUF2WixHQUNBLE9BQ0FtWixFQUFBblosR0FBQSxJQUFBbWIsR0FBQW5iLEdBQ0E4WSxFQUFBOVksR0FBQSxJQUFBMGIsR0FBQTFiLEdBQ0E0WSxFQUFBNVksR0FBQSxJQUFBd2IsR0FBQXhiLFFBQ0FzQyxFQUlBLFNBQUFxWSxHQUFBckIsRUFBQTlTLEVBQUF1SixFQUFBZ00sR0FDQSxJQUFBQyxFQUFBMUMsRUFBQWtCLE9BQ0EsR0FBQXdCLEVBQUEsQ0FFQSxJQURBLElBQUFDLEVBQUFELEVBQUF0VyxPQUFBLEVBQ0EwUixFQUFBLEVBQXNCQSxHQUFBNkUsRUFBZ0I3RSxJQUFBLENBQ3RDLElBQUE4RSxFQUFBRixFQUFBak0sRUFBQWtNLEVBQUE3RSxLQUNBLFFBQUE1USxFQUFBMFYsRUFBQSxHQUFBSCxFQUFBRyxFQUFBLEdBQUE5RSxFQUFBa0MsR0FDQSxPQUFBbEMsRUFBQSxFQUdBLE9BQUFBLEVBRUEsT0FBQWtDLEVBQUFtQixrQkFBQWpVLEVBQUF1SixHQUdBLFNBQUE4SyxHQUFBdkIsRUFBQWpZLEVBQUEwTyxFQUFBZ00sR0FDQSxJQUFBQyxFQUFBMUMsRUFBQWtCLE9BQ0EsR0FBQXdCLEVBQUEsQ0FDQSxJQUFBQyxFQUFBRCxFQUFBdFcsT0FBQSxFQUNBMFIsRUFBQSxFQUNBLFdBQUFtQixFQUFBLFdBQ0EsSUFBQTJELEVBQUFGLEVBQUFqTSxFQUFBa00sRUFBQTdFLEtBQ0EsT0FBQUEsSUFBQTZFLEdBL1lZamMsV0FBQXNDLEVBQUFzTSxNQUFBLEdBaVpaNEosRUFBQW5YLEVBQUEwYSxFQUFBRyxFQUFBLEdBQUE5RSxFQUFBLEVBQUE4RSxFQUFBLE1BR0EsT0FBQTVDLEVBQUE2QyxtQkFBQTlhLEVBQUEwTyxHQUdBLFNBQUFxTSxHQUFBQyxFQUFBQyxHQUNBLE9BQUFBLEVBS0EsU0FBQUMsRUFBQUQsRUFBQUQsRUFBQS9iLEVBQUFrYyxHQUNBLE9BQUEvUixNQUFBcVIsUUFBQU8sR0FDQUMsRUFBQXBkLEtBQUFzZCxFQUFBbGMsRUFBQStVLEVBQUFnSCxHQUFBdk0sSUFBQSxTQUFBb0MsRUFBQXVHLEdBQW1GLE9BQUE4RCxFQUFBRCxFQUFBcEssRUFBQXVHLEVBQUE0RCxNQUVuRkksR0FBQUosR0FDQUMsRUFBQXBkLEtBQUFzZCxFQUFBbGMsRUFBQTRVLEVBQUFtSCxHQUFBdk0sSUFBQSxTQUFBb0MsRUFBQXVHLEdBQWlGLE9BQUE4RCxFQUFBRCxFQUFBcEssRUFBQXVHLEVBQUE0RCxNQUVqRkEsRUFYQUUsQ0FBQUQsRUFBQUQsRUFBQSxJQUF1Q0ssR0FBQUwsSUFDdkNNLEdBQUFOLEdBYUEsU0FBQU0sR0FBQU4sR0FDQSxPQUFBNVIsTUFBQXFSLFFBQUFPLEdBQ0FoSCxFQUFBZ0gsR0FBQXZNLElBQUE2TSxJQUFBQyxTQUVBSCxHQUFBSixHQUNBbkgsRUFBQW1ILEdBQUF2TSxJQUFBNk0sSUFBQUUsUUFFQVIsRUFHQSxTQUFBSSxHQUFBemMsR0FDQSxPQUFBQSxNQUFBb0csY0FBQTNHLGFBQUE2QyxJQUFBdEMsRUFBQW9HLGFBeURBLFNBQUEwVyxHQUFBQyxFQUFBQyxHQUNBLEdBQUFELElBQUFDLEdBQUFELE1BQUFDLEtBQ0EsU0FFQSxJQUFBRCxJQUFBQyxFQUNBLFNBRUEsc0JBQUFELEVBQUF0VixTQUNBLG1CQUFBdVYsRUFBQXZWLFFBQUEsQ0FHQSxHQUZBc1YsSUFBQXRWLFVBQ0F1VixJQUFBdlYsVUFDQXNWLElBQUFDLEdBQUFELE1BQUFDLEtBQ0EsU0FFQSxJQUFBRCxJQUFBQyxFQUNBLFNBR0EsMkJBQUFELEVBQUFFLFFBQ0EsbUJBQUFELEVBQUFDLFNBQ0FGLEVBQUFFLE9BQUFELElBTUEsU0FBQUUsR0FBQTNaLEVBQUFtRCxHQUNBLEdBQUFuRCxJQUFBbUQsRUFDQSxTQUdBLElBQ0FvTyxFQUFBcE8sU0FDQXBFLElBQUFpQixFQUFBK1QsV0FBQWhWLElBQUFvRSxFQUFBNFEsTUFBQS9ULEVBQUErVCxPQUFBNVEsRUFBQTRRLFdBQ0FoVixJQUFBaUIsRUFBQTRaLGFBQUE3YSxJQUFBb0UsRUFBQXlXLFFBQUE1WixFQUFBNFosU0FBQXpXLEVBQUF5VyxRQUNBbEksRUFBQTFSLEtBQUEwUixFQUFBdk8sSUFDQTBPLEVBQUE3UixLQUFBNlIsRUFBQTFPLElBQ0FzUCxFQUFBelMsS0FBQXlTLEVBQUF0UCxHQUVBLFNBR0EsT0FBQW5ELEVBQUErVCxNQUFBLElBQUE1USxFQUFBNFEsS0FDQSxTQUdBLElBQUE4RixHQUFBN0gsRUFBQWhTLEdBRUEsR0FBQXlTLEVBQUF6UyxHQUFBLENBQ0EsSUFBQW9JLEVBQUFwSSxFQUFBb0ksVUFDQSxPQUFBakYsRUFBQXlJLE1BQUEsU0FBQStDLEVBQUF1RyxHQUNBLElBQUF5RCxFQUFBdlEsRUFBQWdELE9BQUEzTyxNQUNBLE9BQUFrYyxHQUFBWSxHQUFBWixFQUFBLEdBQUFoSyxLQUFBa0wsR0FBQU4sR0FBQVosRUFBQSxHQUFBekQsT0FDTzlNLEVBQUFnRCxPQUFBQyxLQUdQLElBQUF5TyxHQUFBLEVBRUEsUUFBQS9hLElBQUFpQixFQUFBK1QsS0FDQSxRQUFBaFYsSUFBQW9FLEVBQUE0USxLQUNBLG1CQUFBL1QsRUFBQWdYLGFBQ0FoWCxFQUFBZ1gsa0JBRU8sQ0FDUDhDLEdBQUEsRUFDQSxJQUFBM0osRUFBQW5RLEVBQ0FBLEVBQUFtRCxFQUNBQSxFQUFBZ04sRUFJQSxJQUFBNEosR0FBQSxFQUNBQyxFQUFBN1csRUFBQTZRLFVBQUEsU0FBQXJGLEVBQUF1RyxHQUNBLEdBQUEyRSxHQUFBN1osRUFBQVksSUFBQStOLEdBQ0FtTCxHQUFBUCxHQUFBNUssRUFBQTNPLEVBQUEzRCxJQUFBNlksRUFBQWhDLEtBQUFxRyxHQUFBdlosRUFBQTNELElBQUE2WSxFQUFBaEMsR0FBQXZFLEdBRUEsT0FEQW9MLEdBQUEsR0FDQSxJQUlBLE9BQUFBLEdBQUEvWixFQUFBK1QsT0FBQWlHLEVBS0EsU0FBQUMsR0FBQXhkLEVBQUF5ZCxHQUNBLEtBQUEzWSxnQkFBQTBZLElBQ0EsV0FBQUEsR0FBQXhkLEVBQUF5ZCxHQUlBLEdBRkEzWSxLQUFBNFksT0FBQTFkLEVBQ0E4RSxLQUFBd1MsVUFBQWhWLElBQUFtYixFQUFBRSxJQUFBNWEsS0FBQW1VLElBQUEsRUFBQXVHLEdBQ0EsSUFBQTNZLEtBQUF3UyxLQUFBLENBQ0EsR0FBQTBELEVBQ0EsT0FBQUEsRUFFQUEsRUFBQWxXLE1Bb0VBLFNBQUE4WSxHQUFBM1csRUFBQUUsR0FDQSxJQUFBRixFQUFBLFVBQUFHLE1BQUFELEdBS0EsU0FBQTBXLEdBQUEzTyxFQUFBbUIsRUFBQWhDLEdBQ0EsS0FBQXZKLGdCQUFBK1ksSUFDQSxXQUFBQSxHQUFBM08sRUFBQW1CLEVBQUFoQyxHQWVBLEdBYkF1UCxHQUFBLElBQUF2UCxFQUFBLDRCQUNBYSxLQUFBLE9BQ0E1TSxJQUFBK04sSUFDQUEsRUFBQXNOLEtBRUF0UCxPQUFBL0wsSUFBQStMLEVBQUEsRUFBQXRMLEtBQUErYSxJQUFBelAsR0FDQWdDLEVBQUFuQixJQUNBYixNQUVBdkosS0FBQWlaLE9BQUE3TyxFQUNBcEssS0FBQWtaLEtBQUEzTixFQUNBdkwsS0FBQW1aLE1BQUE1UCxFQUNBdkosS0FBQXdTLEtBQUF2VSxLQUFBbVUsSUFBQSxFQUFBblUsS0FBQTJFLE1BQUEySSxFQUFBbkIsR0FBQWIsRUFBQSxNQUNBLElBQUF2SixLQUFBd1MsS0FBQSxDQUNBLEdBQUEyRCxFQUNBLE9BQUFBLEVBRUFBLEVBQUFuVyxNQTJGQSxTQUFBb1osS0FDQSxNQUFBcmIsVUFBQSxZQUkyQyxTQUFBc2IsTUFFRSxTQUFBQyxNQUVKLFNBQUFDLE1Bam9CekN0SixFQUFBcFUsVUFBQXVhLElBQUEsRUFJQXhHLEVBQUF5RyxHQUFBOUYsR0FNQThGLEdBQUF4YSxVQUFBZixJQUFBLFNBQUErSSxFQUFBMlYsR0FDQSxPQUFBeFosS0FBQVgsSUFBQXdFLEdBQUE3RCxLQUFBdVcsT0FBQTVELEVBQUEzUyxLQUFBNkQsSUFBQTJWLEdBR0FuRCxHQUFBeGEsVUFBQTRXLFVBQUEsU0FBQS9RLEVBQUF1SixHQUdBLElBRkEsSUFBQXFMLEVBQUF0VyxLQUFBdVcsT0FDQVksRUFBQWIsRUFBQTFWLE9BQUEsRUFDQTBSLEVBQUEsRUFBc0JBLEdBQUE2RSxFQUFnQjdFLElBQ3RDLFFBQUE1USxFQUFBNFUsRUFBQXJMLEVBQUFrTSxFQUFBN0UsT0FBQXRTLE1BQ0EsT0FBQXNTLEVBQUEsRUFHQSxPQUFBQSxHQUdBK0QsR0FBQXhhLFVBQUFpYSxXQUFBLFNBQUF2WixFQUFBME8sR0FDQSxJQUFBcUwsRUFBQXRXLEtBQUF1VyxPQUNBWSxFQUFBYixFQUFBMVYsT0FBQSxFQUNBMFIsRUFBQSxFQUNBLFdBQUFtQixFQUFBLFdBQ1MsT0FBQW5CLEVBQUE2RSxHQTFLR2pjLFdBQUFzQyxFQUFBc00sTUFBQSxHQTRLWjRKLEVBQUFuWCxFQUFBK1YsRUFBQWdFLEVBQUFyTCxFQUFBa00sRUFBQTdFLGFBTUExQyxFQUFBOEUsR0FBQXRFLEdBUUFzRSxHQUFBN1ksVUFBQWYsSUFBQSxTQUFBVSxFQUFBZ2UsR0FDQSxZQUFBaGMsSUFBQWdjLEdBQUF4WixLQUFBWCxJQUFBN0QsR0FHQXdFLEtBQUF3VyxRQUFBaGIsR0FGQWdlLEdBS0E5RSxHQUFBN1ksVUFBQXdELElBQUEsU0FBQTdELEdBQ0EsT0FBQXdFLEtBQUF3VyxRQUFBMWEsZUFBQU4sSUFHQWtaLEdBQUE3WSxVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBSUEsSUFIQSxJQUFBdFAsRUFBQXFFLEtBQUF3VyxRQUNBN1AsRUFBQTNHLEtBQUF5VyxNQUNBVSxFQUFBeFEsRUFBQS9GLE9BQUEsRUFDQTBSLEVBQUEsRUFBc0JBLEdBQUE2RSxFQUFnQjdFLElBQUEsQ0FDdEMsSUFBQTlXLEVBQUFtTCxFQUFBc0UsRUFBQWtNLEVBQUE3RSxLQUNBLFFBQUE1USxFQUFBL0YsRUFBQUgsS0FBQXdFLE1BQ0EsT0FBQXNTLEVBQUEsRUFHQSxPQUFBQSxHQUdBb0MsR0FBQTdZLFVBQUFpYSxXQUFBLFNBQUF2WixFQUFBME8sR0FDQSxJQUFBdFAsRUFBQXFFLEtBQUF3VyxRQUNBN1AsRUFBQTNHLEtBQUF5VyxNQUNBVSxFQUFBeFEsRUFBQS9GLE9BQUEsRUFDQTBSLEVBQUEsRUFDQSxXQUFBbUIsRUFBQSxXQUNBLElBQUFqWSxFQUFBbUwsRUFBQXNFLEVBQUFrTSxFQUFBN0UsS0FDQSxPQUFBQSxJQUFBNkUsR0F6TllqYyxXQUFBc0MsRUFBQXNNLE1BQUEsR0EyTlo0SixFQUFBblgsRUFBQWYsRUFBQUcsRUFBQUgsT0FJQWtaLEdBQUE3WSxVQUFBdVYsSUFBQSxFQUdBeEIsRUFBQThHLEdBQUFuRyxHQU1BbUcsR0FBQTdhLFVBQUE4WixrQkFBQSxTQUFBalUsRUFBQXVKLEdBQ0EsR0FBQUEsRUFDQSxPQUFBakwsS0FBQXlWLGNBQUFoRCxVQUFBL1EsRUFBQXVKLEdBRUEsSUFBQWtKLEVBQUFuVSxLQUFBMlcsVUFDQW5OLEVBQUEwSyxFQUFBQyxHQUNBc0YsRUFBQSxFQUNBLEdBQUF6RixFQUFBeEssR0FFQSxJQURBLElBQUFELElBQ0FBLEVBQUFDLEVBQUFLLFFBQUFDLE9BQ0EsSUFBQXBJLEVBQUE2SCxFQUFBck8sTUFBQXVlLElBQUF6WixRQUtBLE9BQUF5WixHQUdBL0MsR0FBQTdhLFVBQUF3YixtQkFBQSxTQUFBOWEsRUFBQTBPLEdBQ0EsR0FBQUEsRUFDQSxPQUFBakwsS0FBQXlWLGNBQUFLLFdBQUF2WixFQUFBME8sR0FFQSxJQUFBa0osRUFBQW5VLEtBQUEyVyxVQUNBbk4sRUFBQTBLLEVBQUFDLEdBQ0EsSUFBQUgsRUFBQXhLLEdBQ0EsV0FBQWlLLEVBQUFJLEdBRUEsSUFBQTRGLEVBQUEsRUFDQSxXQUFBaEcsRUFBQSxXQUNBLElBQUFsSyxFQUFBQyxFQUFBSyxPQUNBLE9BQUFOLEVBQUFPLEtBQUFQLEVBQUFtSyxFQUFBblgsRUFBQWtkLElBQUFsUSxFQUFBck8sVUFNQTBVLEVBQUFnSCxHQUFBckcsR0FNQXFHLEdBQUEvYSxVQUFBOFosa0JBQUEsU0FBQWpVLEVBQUF1SixHQUNBLEdBQUFBLEVBQ0EsT0FBQWpMLEtBQUF5VixjQUFBaEQsVUFBQS9RLEVBQUF1SixHQUtBLElBSEEsSUFRQTFCLEVBUkFDLEVBQUF4SixLQUFBNlcsVUFDQUssRUFBQWxYLEtBQUE4VyxlQUNBMkMsRUFBQSxFQUNBQSxFQUFBdkMsRUFBQXRXLFFBQ0EsUUFBQWMsRUFBQXdWLEVBQUF1QyxPQUFBelosTUFDQSxPQUFBeVosRUFJQSxPQUFBbFEsRUFBQUMsRUFBQUssUUFBQUMsTUFBQSxDQUNBLElBQUFuSyxFQUFBNEosRUFBQXJPLE1BRUEsR0FEQWdjLEVBQUF1QyxHQUFBOVosR0FDQSxJQUFBK0IsRUFBQS9CLEVBQUE4WixJQUFBelosTUFDQSxNQUdBLE9BQUF5WixHQUdBN0MsR0FBQS9hLFVBQUF3YixtQkFBQSxTQUFBOWEsRUFBQTBPLEdBQ0EsR0FBQUEsRUFDQSxPQUFBakwsS0FBQXlWLGNBQUFLLFdBQUF2WixFQUFBME8sR0FFQSxJQUFBekIsRUFBQXhKLEtBQUE2VyxVQUNBSyxFQUFBbFgsS0FBQThXLGVBQ0EyQyxFQUFBLEVBQ0EsV0FBQWhHLEVBQUEsV0FDQSxHQUFBZ0csR0FBQXZDLEVBQUF0VyxPQUFBLENBQ0EsSUFBQTJJLEVBQUFDLEVBQUFLLE9BQ0EsR0FBQU4sRUFBQU8sS0FDQSxPQUFBUCxFQUVBMk4sRUFBQXVDLEdBQUFsUSxFQUFBck8sTUFFQSxPQUFBd1ksRUFBQW5YLEVBQUFrZCxFQUFBdkMsRUFBQXVDLFNBc1FBN0osRUFBQThJLEdBQUFuSSxHQWdCQW1JLEdBQUE3YyxVQUFBa0csU0FBQSxXQUNBLFdBQUEvQixLQUFBd1MsS0FDQSxZQUVBLFlBQUF4UyxLQUFBNFksT0FBQSxJQUFBNVksS0FBQXdTLEtBQUEsWUFHQWtHLEdBQUE3YyxVQUFBZixJQUFBLFNBQUErSSxFQUFBMlYsR0FDQSxPQUFBeFosS0FBQVgsSUFBQXdFLEdBQUE3RCxLQUFBNFksT0FBQVksR0FHQWQsR0FBQTdjLFVBQUFpUCxTQUFBLFNBQUE0TyxHQUNBLE9BQUExQixHQUFBaFksS0FBQTRZLE9BQUFjLElBR0FoQixHQUFBN2MsVUFBQW1HLE1BQUEsU0FBQXNKLEVBQUFDLEdBQ0EsSUFBQWlILEVBQUF4UyxLQUFBd1MsS0FDQSxPQUFBTSxFQUFBeEgsRUFBQUMsRUFBQWlILEdBQUF4UyxLQUNBLElBQUEwWSxHQUFBMVksS0FBQTRZLE9BQUEzRixFQUFBMUgsRUFBQWlILEdBQUFPLEVBQUF6SCxFQUFBa0gsS0FHQWtHLEdBQUE3YyxVQUFBb1AsUUFBQSxXQUNBLE9BQUFqTCxNQUdBMFksR0FBQTdjLFVBQUErTyxRQUFBLFNBQUE4TyxHQUNBLE9BQUExQixHQUFBaFksS0FBQTRZLE9BQUFjLEdBQ0EsR0FFQSxHQUdBaEIsR0FBQTdjLFVBQUFrTCxZQUFBLFNBQUEyUyxHQUNBLE9BQUExQixHQUFBaFksS0FBQTRZLE9BQUFjLEdBQ0ExWixLQUFBd1MsTUFFQSxHQUdBa0csR0FBQTdjLFVBQUE0VyxVQUFBLFNBQUEvUSxFQUFBdUosR0FDQSxRQUFBcUgsRUFBQSxFQUFzQkEsRUFBQXRTLEtBQUF3UyxLQUFnQkYsSUFDdEMsUUFBQTVRLEVBQUExQixLQUFBNFksT0FBQXRHLEVBQUF0UyxNQUNBLE9BQUFzUyxFQUFBLEVBR0EsT0FBQUEsR0FHQW9HLEdBQUE3YyxVQUFBaWEsV0FBQSxTQUFBdlosRUFBQTBPLEdBQTJELElBQUEwTyxFQUFBM1osS0FDM0RzUyxFQUFBLEVBQ0EsV0FBQW1CLEVBQUEsV0FDUyxPQUFBbkIsRUFBQXFILEVBQUFuSCxLQUFBa0IsRUFBQW5YLEVBQUErVixJQUFBcUgsRUFBQWYsU0Fqb0JHMWQsV0FBQXNDLEVBQUFzTSxNQUFBLE1BcW9CWjRPLEdBQUE3YyxVQUFBc2MsT0FBQSxTQUFBeUIsR0FDQSxPQUFBQSxhQUFBbEIsR0FDQVYsR0FBQWhZLEtBQUE0WSxPQUFBZ0IsRUFBQWhCLFFBQ0FSLEdBQUF3QixJQVVBaEssRUFBQW1KLEdBQUF4SSxHQTJCQXdJLEdBQUFsZCxVQUFBa0csU0FBQSxXQUNBLFdBQUEvQixLQUFBd1MsS0FDQSxXQUVBLFdBQ0F4UyxLQUFBaVosT0FBQSxNQUFBalosS0FBQWtaLE1BQ0EsSUFBQWxaLEtBQUFtWixNQUFBLE9BQUFuWixLQUFBbVosTUFBQSxJQUNBLE1BR0FKLEdBQUFsZCxVQUFBZixJQUFBLFNBQUErSSxFQUFBMlYsR0FDQSxPQUFBeFosS0FBQVgsSUFBQXdFLEdBQ0E3RCxLQUFBaVosT0FBQXRHLEVBQUEzUyxLQUFBNkQsR0FBQTdELEtBQUFtWixNQUNBSyxHQUdBVCxHQUFBbGQsVUFBQWlQLFNBQUEsU0FBQTRPLEdBQ0EsSUFBQUcsR0FBQUgsRUFBQTFaLEtBQUFpWixRQUFBalosS0FBQW1aLE1BQ0EsT0FBQVUsR0FBQSxHQUNBQSxFQUFBN1osS0FBQXdTLE1BQ0FxSCxJQUFBNWIsS0FBQTRFLE1BQUFnWCxJQUdBZCxHQUFBbGQsVUFBQW1HLE1BQUEsU0FBQXNKLEVBQUFDLEdBQ0EsT0FBQXVILEVBQUF4SCxFQUFBQyxFQUFBdkwsS0FBQXdTLE1BQ0F4UyxNQUVBc0wsRUFBQXlILEVBQUF6SCxFQUFBdEwsS0FBQXdTLE9BQ0FqSCxFQUFBMEgsRUFBQTFILEVBQUF2TCxLQUFBd1MsUUFDQWxILEVBQ0EsSUFBQXlOLEdBQUEsS0FFQSxJQUFBQSxHQUFBL1ksS0FBQWxGLElBQUF3USxFQUFBdEwsS0FBQWtaLE1BQUFsWixLQUFBbEYsSUFBQXlRLEVBQUF2TCxLQUFBa1osTUFBQWxaLEtBQUFtWixTQUdBSixHQUFBbGQsVUFBQStPLFFBQUEsU0FBQThPLEdBQ0EsSUFBQUksRUFBQUosRUFBQTFaLEtBQUFpWixPQUNBLEdBQUFhLEVBQUE5WixLQUFBbVosT0FBQSxHQUNBLElBQUF0VixFQUFBaVcsRUFBQTlaLEtBQUFtWixNQUNBLEdBQUF0VixHQUFBLEdBQUFBLEVBQUE3RCxLQUFBd1MsS0FDQSxPQUFBM08sRUFHQSxVQUdBa1YsR0FBQWxkLFVBQUFrTCxZQUFBLFNBQUEyUyxHQUNBLE9BQUExWixLQUFBNEssUUFBQThPLElBR0FYLEdBQUFsZCxVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBSUEsSUFIQSxJQUFBa00sRUFBQW5YLEtBQUF3UyxLQUFBLEVBQ0FqSixFQUFBdkosS0FBQW1aLE1BQ0FqZSxFQUFBK1AsRUFBQWpMLEtBQUFpWixPQUFBOUIsRUFBQTVOLEVBQUF2SixLQUFBaVosT0FDQTNHLEVBQUEsRUFBc0JBLEdBQUE2RSxFQUFnQjdFLElBQUEsQ0FDdEMsUUFBQTVRLEVBQUF4RyxFQUFBb1gsRUFBQXRTLE1BQ0EsT0FBQXNTLEVBQUEsRUFFQXBYLEdBQUErUCxHQUFBMUIsSUFFQSxPQUFBK0ksR0FHQXlHLEdBQUFsZCxVQUFBaWEsV0FBQSxTQUFBdlosRUFBQTBPLEdBQ0EsSUFBQWtNLEVBQUFuWCxLQUFBd1MsS0FBQSxFQUNBakosRUFBQXZKLEtBQUFtWixNQUNBamUsRUFBQStQLEVBQUFqTCxLQUFBaVosT0FBQTlCLEVBQUE1TixFQUFBdkosS0FBQWlaLE9BQ0EzRyxFQUFBLEVBQ0EsV0FBQW1CLEVBQUEsV0FDQSxJQUFBckcsRUFBQWxTLEVBRUEsT0FEQUEsR0FBQStQLEdBQUExQixJQUNBK0ksRUFBQTZFLEdBcHZCWWpjLFdBQUFzQyxFQUFBc00sTUFBQSxHQW92Qlo0SixFQUFBblgsRUFBQStWLElBQUFsRixNQUlBMkwsR0FBQWxkLFVBQUFzYyxPQUFBLFNBQUF5QixHQUNBLE9BQUFBLGFBQUFiLEdBQ0EvWSxLQUFBaVosU0FBQVcsRUFBQVgsUUFDQWpaLEtBQUFrWixPQUFBVSxFQUFBVixNQUNBbFosS0FBQW1aLFFBQUFTLEVBQUFULE1BQ0FmLEdBQUFwWSxLQUFBNFosSUFNQWhLLEVBQUF3SixHQUFBckosR0FNQUgsRUFBQXlKLEdBQUFELElBRUF4SixFQUFBMEosR0FBQUYsSUFFQXhKLEVBQUEySixHQUFBSCxJQUdBQSxHQUFBL0gsTUFBQWdJLEdBQ0FELEdBQUE5SCxRQUFBZ0ksR0FDQUYsR0FBQTdILElBQUFnSSxHQUVBLElBQUFRLEdBQ0EsbUJBQUE5YixLQUFBOGIsT0FBQSxJQUFBOWIsS0FBQThiLEtBQUEsY0FDQTliLEtBQUE4YixLQUNBLFNBQUF0YixFQUFBbUQsR0FHQSxJQUFBdEgsRUFBQSxPQUZBbUUsR0FBQSxHQUdBbEUsRUFBQSxPQUZBcUgsR0FBQSxHQUlBLE9BQUF0SCxFQUFBQyxJQUFBa0UsSUFBQSxJQUFBbEUsRUFBQUQsR0FBQXNILElBQUEsZ0JBT0EsU0FBQW9ZLEdBQUFDLEdBQ0EsT0FBQUEsSUFBQSx3QkFBQUEsRUFHQSxTQUFBQyxHQUFBeGYsR0FDQSxRQUFBQSxHQUFBLE9BQUFBLFFBQUE4QyxJQUFBOUMsRUFDQSxTQUVBLHNCQUFBQSxFQUFBaUksV0FFQSxLQURBakksSUFBQWlJLFlBQ0EsT0FBQWpJLFFBQUE4QyxJQUFBOUMsR0FDQSxTQUdBLFFBQUFBLEVBQ0EsU0FFQSxJQUFBNkIsU0FBQTdCLEVBQ0EsY0FBQTZCLEVBQUEsQ0FDQSxHQUFBN0IsVUFBQW1lLElBQ0EsU0FFQSxJQUFBc0IsRUFBQSxFQUFBemYsRUFJQSxJQUhBeWYsSUFBQXpmLElBQ0F5ZixHQUFBLFdBQUF6ZixHQUVBQSxFQUFBLFlBRUF5ZixHQURBemYsR0FBQSxXQUdBLE9BQUFzZixHQUFBRyxHQUVBLGNBQUE1ZCxFQUNBLE9BQUE3QixFQUFBa0csT0FBQXdaLEdBY0EsU0FBQWhhLEdBQ0EsSUFBQThaLEVBQUFHLEdBQUFqYSxHQVVBLFlBVEE1QyxJQUFBMGMsSUFDQUEsRUFBQUksR0FBQWxhLEdBQ0FtYSxLQUFBQyxLQUNBRCxHQUFBLEVBQ0FGLE9BRUFFLEtBQ0FGLEdBQUFqYSxHQUFBOFosR0FFQUEsRUF6QkFPLENBQUEvZixHQUFBNGYsR0FBQTVmLEdBRUEsc0JBQUFBLEVBQUFnZ0IsU0FDQSxPQUFBaGdCLEVBQUFnZ0IsV0FFQSxjQUFBbmUsRUFDQSxPQXFDQSxTQUFBb2UsR0FDQSxJQUFBVCxFQUNBLEdBQUFVLFNBRUFwZCxLQURBMGMsRUFBQVcsR0FBQS9mLElBQUE2ZixJQUVBLE9BQUFULEVBS0EsUUFBQTFjLEtBREEwYyxFQUFBUyxFQUFBRyxLQUVBLE9BQUFaLEVBR0EsSUFBQWEsR0FBQSxDQUVBLFFBQUF2ZCxLQURBMGMsRUFBQVMsRUFBQUssc0JBQUFMLEVBQUFLLHFCQUFBRixLQUVBLE9BQUFaLEVBSUEsUUFBQTFjLEtBREEwYyxFQTREQSxTQUFBZSxHQUNBLEdBQUFBLEtBQUFDLFNBQUEsRUFDQSxPQUFBRCxFQUFBQyxVQUNBLE9BQ0EsT0FBQUQsRUFBQUUsU0FDQSxPQUNBLE9BQUFGLEVBQUFHLGlCQUFBSCxFQUFBRyxnQkFBQUQsVUFsRUFFLENBQUFWLElBRUEsT0FBQVQsRUFTQSxHQUxBQSxJQUFBb0IsR0FDQSxXQUFBQSxLQUNBQSxHQUFBLEdBR0FWLEdBQ0FDLEdBQUFuUyxJQUFBaVMsRUFBQVQsT0FDSyxTQUFBMWMsSUFBQXdSLEtBQUEsSUFBQUEsR0FBQTJMLEdBQ0wsVUFBQXJZLE1BQUEsbURBQ0ssR0FBQXlZLEdBQ0xwZ0IsT0FBQUMsZUFBQStmLEVBQUFHLElBQ0FqZ0IsWUFBQSxFQUNBd1IsY0FBQSxFQUNBQyxVQUFBLEVBQ0FwUixNQUFBZ2YsU0FFSyxRQUFBMWMsSUFBQW1kLEVBQUFLLHNCQUNMTCxFQUFBSyx1QkFBQUwsRUFBQXJaLFlBQUF6RixVQUFBbWYscUJBS0FMLEVBQUFLLHFCQUFBLFdBQ0EsT0FBQWhiLEtBQUFzQixZQUFBekYsVUFBQW1mLHFCQUFBblosTUFBQTdCLEtBQUE4QixZQUVBNlksRUFBQUsscUJBQUFGLElBQUFaLE1BQ0ssU0FBQTFjLElBQUFtZCxFQUFBTyxTQU9MLFVBQUE1WSxNQUFBLHNEQUZBcVksRUFBQUcsSUFBQVosR0FLQSxPQUFBQSxFQW5HQXFCLENBQUE3Z0IsR0FFQSxzQkFBQUEsRUFBQXFILFNBQ0EsT0FBQXVZLEdBQUE1ZixFQUFBcUgsWUFFQSxVQUFBTyxNQUFBLGNBQUEvRixFQUFBLHNCQWtCQSxTQUFBK2QsR0FBQWxhLEdBUUEsSUFEQSxJQUFBOFosRUFBQSxFQUNBNUgsRUFBQSxFQUFvQkEsRUFBQWxTLEVBQUFRLE9BQW9CMFIsSUFDeEM0SCxFQUFBLEdBQUFBLEVBQUE5WixFQUFBb2IsV0FBQWxKLEdBQUEsRUFFQSxPQUFBMEgsR0FBQUUsR0FxRUEsSUEyQkFXLEdBM0JBN0wsR0FBQXJVLE9BQUFxVSxhQUdBK0wsR0FBQSxXQUNBLElBRUEsT0FEQXBnQixPQUFBQyxrQkFBOEIsU0FDOUIsRUFDSyxNQUFBeUQsR0FDTCxVQUxBLEdBdUJBdWMsR0FBQSxtQkFBQWEsUUFFQWIsS0FDQUMsR0FBQSxJQUFBWSxTQUdBLElBQUFILEdBQUEsRUFFQVIsR0FBQSxvQkFDQSxtQkFBQTlmLFNBQ0E4ZixHQUFBOWYsT0FBQThmLEtBR0EsSUFBQVYsR0FBQSxHQUNBSSxHQUFBLElBQ0FELEdBQUEsRUFDQUYsTUFFQSxTQUFBcUIsR0FBQWxKLEdBQ0FzRyxHQUNBdEcsSUFBQXFHLElBQ0EscURBUUEsU0FBQTFLLEdBQUFqVCxHQUNBLGNBQUFBLFFBQUFzQyxJQUFBdEMsRUFBQXlnQixLQUNBQyxHQUFBMWdCLEtBQUFnVyxFQUFBaFcsS0FDQXlnQixLQUFBRSxjQUFBLFNBQUE3USxHQUNBLElBQUE0QyxFQUFBc0MsRUFBQWhWLEdBQ0F3Z0IsR0FBQTlOLEVBQUE0RSxNQUNBNUUsRUFBQWpELFFBQUEsU0FBQXlDLEVBQUF1RyxHQUF3QyxPQUFBM0ksRUFBQXRDLElBQUFpTCxFQUFBdkcsT0E2S3hDLFNBQUF3TyxHQUFBRSxHQUNBLFNBQUFBLE1BQUFDLEtBeExBbk0sRUFBQXpCLEdBQUFrTCxJQWNBbEwsR0FBQUYsR0FBQSxXQUF5QixJQUFBK04sRUFBQXJNLEVBQUF2VixLQUFBMEgsVUFBQSxHQUN6QixPQUFBNlosS0FBQUUsY0FBQSxTQUFBN1EsR0FDQSxRQUFBL1EsRUFBQSxFQUF1QkEsRUFBQStoQixFQUFBcGIsT0FBc0IzRyxHQUFBLEdBQzdDLEdBQUFBLEVBQUEsR0FBQStoQixFQUFBcGIsT0FDQSxVQUFBMEIsTUFBQSwwQkFBQTBaLEVBQUEvaEIsSUFFQStRLEVBQUF0QyxJQUFBc1QsRUFBQS9oQixHQUFBK2hCLEVBQUEvaEIsRUFBQSxRQUtBa1UsR0FBQXRTLFVBQUFrRyxTQUFBLFdBQ0EsT0FBQS9CLEtBQUF3VixXQUFBLFFBQW1DLE1BS25DckgsR0FBQXRTLFVBQUFmLElBQUEsU0FBQTZZLEVBQUE2RixHQUNBLE9BQUF4WixLQUFBaWMsTUFDQWpjLEtBQUFpYyxNQUFBbmhCLElBQUEsT0FBQTBDLEVBQUFtVyxFQUFBNkYsR0FDQUEsR0FLQXJMLEdBQUF0UyxVQUFBNk0sSUFBQSxTQUFBaUwsRUFBQXZHLEdBQ0EsT0FBQThPLEdBQUFsYyxLQUFBMlQsRUFBQXZHLElBR0FlLEdBQUF0UyxVQUFBc2dCLE1BQUEsU0FBQUMsRUFBQWhQLEdBQ0EsT0FBQXBOLEtBQUFxYyxTQUFBRCxFQUFBekssRUFBQSxXQUEwRCxPQUFBdkUsS0FHMURlLEdBQUF0UyxVQUFBeWdCLE9BQUEsU0FBQTNJLEdBQ0EsT0FBQXVJLEdBQUFsYyxLQUFBMlQsRUFBQWhDLElBR0F4RCxHQUFBdFMsVUFBQTBnQixTQUFBLFNBQUFILEdBQ0EsT0FBQXBjLEtBQUFxYyxTQUFBRCxFQUFBLFdBQWlELE9BQUF6SyxLQUdqRHhELEdBQUF0UyxVQUFBMmdCLE9BQUEsU0FBQTdJLEVBQUE2RixFQUFBaUQsR0FDQSxXQUFBM2EsVUFBQWxCLE9BQ0ErUyxFQUFBM1QsTUFDQUEsS0FBQXFjLFVBQUExSSxHQUFBNkYsRUFBQWlELElBR0F0TyxHQUFBdFMsVUFBQXdnQixTQUFBLFNBQUFELEVBQUE1QyxFQUFBaUQsR0FDQUEsSUFDQUEsRUFBQWpELEVBQ0FBLE9BQUFoYyxHQUVBLElBQUFrZixFQWdyQkEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQXJELEVBQUFpRCxHQUNBLElBQUFLLEVBQUFGLElBQUFqTCxFQUNBcEksRUFBQXNULEVBQUFoVCxPQUNBLEdBQUFOLEVBQUFPLEtBQUEsQ0FDQSxJQUFBaVQsRUFBQUQsRUFBQXRELEVBQUFvRCxFQUNBSSxFQUFBUCxFQUFBTSxHQUNBLE9BQUFDLElBQUFELEVBQUFILEVBQUFJLEVBRUFsRSxHQUNBZ0UsR0FBQUYsS0FBQWxVLElBQ0EsbUJBRUEsSUFBQWxOLEVBQUErTixFQUFBck8sTUFDQStoQixFQUFBSCxFQUFBbkwsRUFBQWlMLEVBQUE5aEIsSUFBQVUsRUFBQW1XLEdBQ0F1TCxFQUFBUCxFQUNBTSxFQUNBSixFQUNBckQsRUFDQWlELEdBRUEsT0FBQVMsSUFBQUQsRUFBQUwsRUFDQU0sSUFBQXZMLEVBQUFpTCxFQUFBTixPQUFBOWdCLElBQ0FzaEIsRUFBQW5CLEtBQUFpQixHQUFBbFUsSUFBQWxOLEVBQUEwaEIsR0F0c0JBUCxDQUNBM2MsS0FDQW1kLEdBQUFmLEdBQ0E1QyxFQUNBaUQsR0FFQSxPQUFBQyxJQUFBL0ssT0FBQW5VLEVBQUFrZixHQUdBdk8sR0FBQXRTLFVBQUF1aEIsTUFBQSxXQUNBLFdBQUFwZCxLQUFBd1MsS0FDQXhTLEtBRUFBLEtBQUFxZCxXQUNBcmQsS0FBQXdTLEtBQUEsRUFDQXhTLEtBQUFpYyxNQUFBLEtBQ0FqYyxLQUFBcVksWUFBQTdhLEVBQ0F3QyxLQUFBc2QsV0FBQSxFQUNBdGQsTUFFQTJiLE1BS0F4TixHQUFBdFMsVUFBQTBoQixNQUFBLFdBQ0EsT0FBQUMsR0FBQXhkLFVBQUF4QyxFQUFBc0UsWUFHQXFNLEdBQUF0UyxVQUFBNGhCLFVBQUEsU0FBQUMsR0FBZ0QsSUFBQUMsRUFBQWhPLEVBQUF2VixLQUFBMEgsVUFBQSxHQUNoRCxPQUFBMGIsR0FBQXhkLEtBQUEwZCxFQUFBQyxJQUdBeFAsR0FBQXRTLFVBQUEraEIsUUFBQSxTQUFBeEIsR0FBK0MsSUFBQXVCLEVBQUFoTyxFQUFBdlYsS0FBQTBILFVBQUEsR0FDL0MsT0FBQTlCLEtBQUFxYyxTQUNBRCxFQUNBVCxLQUNBLFNBQUF0aEIsR0FBc0IseUJBQUFBLEVBQUFrakIsTUFDdEJsakIsRUFBQWtqQixNQUFBMWIsTUFBQXhILEVBQUFzakIsR0FDQUEsSUFBQS9jLE9BQUEsTUFJQXVOLEdBQUF0UyxVQUFBZ2lCLFVBQUEsV0FDQSxPQUFBTCxHQUFBeGQsS0FBQThkLEdBQUFoYyxZQUdBcU0sR0FBQXRTLFVBQUFraUIsY0FBQSxTQUFBTCxHQUFvRCxJQUFBQyxFQUFBaE8sRUFBQXZWLEtBQUEwSCxVQUFBLEdBQ3BELE9BQUEwYixHQUFBeGQsS0FBQWdlLEdBQUFOLEdBQUFDLElBR0F4UCxHQUFBdFMsVUFBQW9pQixZQUFBLFNBQUE3QixHQUFtRCxJQUFBdUIsRUFBQWhPLEVBQUF2VixLQUFBMEgsVUFBQSxHQUNuRCxPQUFBOUIsS0FBQXFjLFNBQ0FELEVBQ0FULEtBQ0EsU0FBQXRoQixHQUFzQix5QkFBQUEsRUFBQXdqQixVQUN0QnhqQixFQUFBd2pCLFVBQUFoYyxNQUFBeEgsRUFBQXNqQixHQUNBQSxJQUFBL2MsT0FBQSxNQUlBdU4sR0FBQXRTLFVBQUF5TCxLQUFBLFNBQUE0VyxHQUVBLE9BQUFDLEdBQUFDLEdBQUFwZSxLQUFBa2UsS0FHQS9QLEdBQUF0UyxVQUFBd2lCLE9BQUEsU0FBQUMsRUFBQUosR0FFQSxPQUFBQyxHQUFBQyxHQUFBcGUsS0FBQWtlLEVBQUFJLEtBS0FuUSxHQUFBdFMsVUFBQWdnQixjQUFBLFNBQUFuYSxHQUNBLElBQUE2YyxFQUFBdmUsS0FBQXdlLFlBRUEsT0FEQTljLEVBQUE2YyxHQUNBQSxFQUFBRSxhQUFBRixFQUFBRyxjQUFBMWUsS0FBQXFkLFdBQUFyZCxNQUdBbU8sR0FBQXRTLFVBQUEyaUIsVUFBQSxXQUNBLE9BQUF4ZSxLQUFBcWQsVUFBQXJkLFVBQUEwZSxjQUFBLElBQUF6TSxJQUdBOUQsR0FBQXRTLFVBQUE4aUIsWUFBQSxXQUNBLE9BQUEzZSxLQUFBMGUsaUJBR0F2USxHQUFBdFMsVUFBQTRpQixXQUFBLFdBQ0EsT0FBQXplLEtBQUFzZCxXQUdBblAsR0FBQXRTLFVBQUFpYSxXQUFBLFNBQUF2WixFQUFBME8sR0FDQSxXQUFBMlQsR0FBQTVlLEtBQUF6RCxFQUFBME8sSUFHQWtELEdBQUF0UyxVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBQXFELElBQUEwTyxFQUFBM1osS0FDckR5WixFQUFBLEVBS0EsT0FKQXpaLEtBQUFpYyxPQUFBamMsS0FBQWljLE1BQUE0QyxRQUFBLFNBQUF6SCxHQUVBLE9BREFxQyxJQUNBL1gsRUFBQTBWLEVBQUEsR0FBQUEsRUFBQSxHQUFBdUMsSUFDTzFPLEdBQ1B3TyxHQUdBdEwsR0FBQXRTLFVBQUE2aUIsY0FBQSxTQUFBSSxHQUNBLE9BQUFBLElBQUE5ZSxLQUFBcWQsVUFDQXJkLEtBRUE4ZSxFQUtBQyxHQUFBL2UsS0FBQXdTLEtBQUF4UyxLQUFBaWMsTUFBQTZDLEVBQUE5ZSxLQUFBcVksU0FKQXJZLEtBQUFxZCxVQUFBeUIsRUFDQTllLEtBQUFzZCxXQUFBLEVBQ0F0ZCxPQVVBbU8sR0FBQXlOLFNBRUEsSUEyWkFvRCxHQTNaQWpELEdBQUEsd0JBRUFrRCxHQUFBOVEsR0FBQXRTLFVBVUEsU0FBQXFqQixHQUFBSixFQUFBalksR0FDQTdHLEtBQUE4ZSxVQUNBOWUsS0FBQTZHLFVBZ0VBLFNBQUFzWSxHQUFBTCxFQUFBTSxFQUFBQyxHQUNBcmYsS0FBQThlLFVBQ0E5ZSxLQUFBb2YsU0FDQXBmLEtBQUFxZixRQWtFQSxTQUFBQyxHQUFBUixFQUFBUyxFQUFBRixHQUNBcmYsS0FBQThlLFVBQ0E5ZSxLQUFBdWYsUUFDQXZmLEtBQUFxZixRQXVEQSxTQUFBRyxHQUFBVixFQUFBVyxFQUFBNVksR0FDQTdHLEtBQUE4ZSxVQUNBOWUsS0FBQXlmLFVBQ0F6ZixLQUFBNkcsVUF5RUEsU0FBQTZZLEdBQUFaLEVBQUFXLEVBQUFySSxHQUNBcFgsS0FBQThlLFVBQ0E5ZSxLQUFBeWYsVUFDQXpmLEtBQUFvWCxRQWdFQSxTQUFBd0gsR0FBQTVULEVBQUF6TyxFQUFBME8sR0FDQWpMLEtBQUEyZixNQUFBcGpCLEVBQ0F5RCxLQUFBNGYsU0FBQTNVLEVBQ0FqTCxLQUFBNmYsT0FBQTdVLEVBQUFpUixPQUFBNkQsR0FBQTlVLEVBQUFpUixPQXNDQSxTQUFBOEQsR0FBQXhqQixFQUFBNmEsR0FDQSxPQUFBMUQsRUFBQW5YLEVBQUE2YSxFQUFBLEdBQUFBLEVBQUEsSUFHQSxTQUFBMEksR0FBQTdFLEVBQUErRSxHQUNBLE9BQ0EvRSxPQUNBcFgsTUFBQSxFQUNBb2MsT0FBQUQsR0FJQSxTQUFBakIsR0FBQXZNLEVBQUEwTixFQUFBcEIsRUFBQTVFLEdBQ0EsSUFBQWxQLEVBQUFyUSxPQUFBWSxPQUFBMGpCLElBTUEsT0FMQWpVLEVBQUF3SCxPQUNBeEgsRUFBQWlSLE1BQUFpRSxFQUNBbFYsRUFBQXFTLFVBQUF5QixFQUNBOVQsRUFBQXFOLE9BQUE2QixFQUNBbFAsRUFBQXNTLFdBQUEsRUFDQXRTLEVBSUEsU0FBQTJRLEtBQ0EsT0FBQXFELFFBQUFELEdBQUEsSUFHQSxTQUFBN0MsR0FBQWxSLEVBQUEySSxFQUFBdkcsR0FDQSxJQUFBK1MsRUFDQUMsRUFDQSxHQUFBcFYsRUFBQWlSLE1BTUssQ0FDTCxJQUFBb0UsRUFBQXZPLEVBQUFGLEdBQ0EwTyxFQUFBeE8sRUFBQUQsR0FFQSxHQURBc08sRUFBQUksR0FBQXZWLEVBQUFpUixNQUFBalIsRUFBQXFTLFVBQUEsT0FBQTdmLEVBQUFtVyxFQUFBdkcsRUFBQWlULEVBQUFDLElBQ0FBLEVBQUFwbEIsTUFDQSxPQUFBOFAsRUFFQW9WLEVBQUFwVixFQUFBd0gsTUFBQTZOLEVBQUFubEIsTUFBQWtTLElBQUF1RSxHQUFBLFdBYkEsQ0FDQSxHQUFBdkUsSUFBQXVFLEVBQ0EsT0FBQTNHLEVBRUFvVixFQUFBLEVBQ0FELEVBQUEsSUFBQWpCLEdBQUFsVSxFQUFBcVMsWUFBQTFKLEVBQUF2RyxLQVVBLE9BQUFwQyxFQUFBcVMsV0FDQXJTLEVBQUF3SCxLQUFBNE4sRUFDQXBWLEVBQUFpUixNQUFBa0UsRUFDQW5WLEVBQUFxTixZQUFBN2EsRUFDQXdOLEVBQUFzUyxXQUFBLEVBQ0F0UyxHQUVBbVYsRUFBQXBCLEdBQUFxQixFQUFBRCxHQUFBeEUsS0FHQSxTQUFBNEUsR0FBQXRGLEVBQUE2RCxFQUFBMEIsRUFBQWYsRUFBQWprQixFQUFBTixFQUFBbWxCLEVBQUFDLEdBQ0EsT0FBQXJGLEVBUUFBLEVBQUF1QixPQUFBc0MsRUFBQTBCLEVBQUFmLEVBQUFqa0IsRUFBQU4sRUFBQW1sQixFQUFBQyxHQVBBcGxCLElBQUF5VyxFQUNBc0osR0FFQWpKLEVBQUFzTyxHQUNBdE8sRUFBQXFPLEdBQ0EsSUFBQVgsR0FBQVosRUFBQVcsR0FBQWprQixFQUFBTixLQUtBLFNBQUF1bEIsR0FBQXhGLEdBQ0EsT0FBQUEsRUFBQTNaLGNBQUFvZSxJQUFBekUsRUFBQTNaLGNBQUFrZSxHQUdBLFNBQUFrQixHQUFBekYsRUFBQTZELEVBQUEwQixFQUFBZixFQUFBckksR0FDQSxHQUFBNkQsRUFBQXdFLFlBQ0EsV0FBQUQsR0FBQVYsRUFBQVcsR0FBQXhFLEVBQUE3RCxVQUdBLElBR0F1SixFQUhBQyxHQUFBLElBQUFKLEVBQUF2RixFQUFBd0UsUUFBQXhFLEVBQUF3RSxVQUFBZSxHQUFBOU8sRUFDQW1QLEdBQUEsSUFBQUwsRUFBQWYsTUFBQWUsR0FBQTlPLEVBR0EyTixFQUFBdUIsSUFBQUMsR0FDQUgsR0FBQXpGLEVBQUE2RCxFQUFBMEIsRUFBQWhQLEVBQUFpTyxFQUFBckksS0FDQXVKLEVBQUEsSUFBQWpCLEdBQUFaLEVBQUFXLEVBQUFySSxHQUFBd0osRUFBQUMsR0FBQTVGLEVBQUEwRixNQUFBMUYsSUFFQSxXQUFBa0UsR0FBQUwsRUFBQSxHQUFBOEIsRUFBQSxHQUFBQyxFQUFBeEIsR0F1Q0EsU0FBQTdCLEdBQUF4UyxFQUFBMFMsRUFBQW9ELEdBRUEsSUFEQSxJQUFBbkQsS0FDQXJMLEVBQUEsRUFBb0JBLEVBQUF3TyxFQUFBbGdCLE9BQXVCMFIsSUFBQSxDQUMzQyxJQUFBcFgsRUFBQTRsQixFQUFBeE8sR0FDQTFFLEVBQUFzQyxFQUFBaFYsR0FDQThVLEVBQUE5VSxLQUNBMFMsSUFBQTVDLElBQUEsU0FBQW9DLEdBQXNDLE9BQUFrSyxHQUFBbEssTUFFdEN1USxFQUFBNVosS0FBQTZKLEdBRUEsT0FBQW1ULEdBQUEvVixFQUFBMFMsRUFBQUMsR0FHQSxTQUFBRyxHQUFBbEIsRUFBQTFoQixFQUFBTSxHQUNBLE9BQUFvaEIsS0FBQWlCLFdBQUE3TixFQUFBOVUsR0FDQTBoQixFQUFBaUIsVUFBQTNpQixHQUNBOGMsR0FBQTRFLEVBQUExaEIsR0FBQTBoQixFQUFBMWhCLEVBR0EsU0FBQThpQixHQUFBTixHQUNBLGdCQUFBZCxFQUFBMWhCLEVBQUFNLEdBQ0EsR0FBQW9oQixLQUFBbUIsZUFBQS9OLEVBQUE5VSxHQUNBLE9BQUEwaEIsRUFBQW1CLGNBQUFMLEVBQUF4aUIsR0FFQSxJQUFBOGxCLEVBQUF0RCxFQUFBZCxFQUFBMWhCLEVBQUFNLEdBQ0EsT0FBQXdjLEdBQUE0RSxFQUFBb0UsR0FBQXBFLEVBQUFvRSxHQUlBLFNBQUFELEdBQUFFLEVBQUF2RCxFQUFBQyxHQUVBLFlBREFBLElBQUFwVCxPQUFBLFNBQUEyVyxHQUF1QyxXQUFBQSxFQUFBMU8sUUFDdkM1UixPQUNBcWdCLEVBRUEsSUFBQUEsRUFBQXpPLE1BQUF5TyxFQUFBNUQsV0FBQSxJQUFBTSxFQUFBL2MsT0FHQXFnQixFQUFBcEYsY0FBQSxTQUFBb0YsR0FVQSxJQVRBLElBQUFFLEVBQUF6RCxFQUNBLFNBQUF4aUIsRUFBQU0sR0FDQXlsQixFQUFBekUsT0FBQWhoQixFQUFBbVcsRUFBQSxTQUFBaUwsR0FDYSxPQUFBQSxJQUFBakwsRUFBQXpXLEVBQUF3aUIsRUFBQWQsRUFBQTFoQixFQUFBTSxNQUdiLFNBQUFOLEVBQUFNLEdBQ0F5bEIsRUFBQXZZLElBQUFsTixFQUFBTixJQUVBb1gsRUFBQSxFQUFzQkEsRUFBQXFMLEVBQUEvYyxPQUFtQjBSLElBQ3pDcUwsRUFBQXJMLEdBQUEzSCxRQUFBd1csS0FiQUYsRUFBQTNmLFlBQUFxYyxFQUFBLElBMkNBLFNBQUF5RCxHQUFBRixHQU1BLE9BSEFBLEdBREFBLEdBQUEsV0FEQUEsTUFBQSxnQkFDQUEsR0FBQSxlQUNBQSxHQUFBLGFBQ0FBLE1BQUEsRUFFQSxLQURBQSxNQUFBLElBSUEsU0FBQS9FLEdBQUE3RixFQUFBK0ssRUFBQTFoQixFQUFBMmhCLEdBQ0EsSUFBQUMsRUFBQUQsRUFBQWhMLEVBQUFwRSxFQUFBb0UsR0FFQSxPQURBaUwsRUFBQUYsR0FBQTFoQixFQUNBNGhCLEVBdmxCQXRDLEdBQUFsRCxLQUFBLEVBQ0FrRCxHQUFBLE9BQUFBLEdBQUEzQyxPQUNBMkMsR0FBQXVDLFNBQUF2QyxHQUFBMUMsU0FZQTJDLEdBQUFyakIsVUFBQWYsSUFBQSxTQUFBMGxCLEVBQUFmLEVBQUFqa0IsRUFBQWdlLEdBRUEsSUFEQSxJQUFBM1MsRUFBQTdHLEtBQUE2RyxRQUNBeUwsRUFBQSxFQUFBdkcsRUFBQWxGLEVBQUFqRyxPQUE0QzBSLEVBQUF2RyxFQUFVdUcsSUFDdEQsR0FBQTBGLEdBQUF4YyxFQUFBcUwsRUFBQXlMLEdBQUEsSUFDQSxPQUFBekwsRUFBQXlMLEdBQUEsR0FHQSxPQUFBa0gsR0FHQTBGLEdBQUFyakIsVUFBQTJnQixPQUFBLFNBQUFzQyxFQUFBMEIsRUFBQWYsRUFBQWprQixFQUFBTixFQUFBbWxCLEVBQUFDLEdBS0EsSUFKQSxJQUFBbUIsRUFBQXZtQixJQUFBeVcsRUFFQTlLLEVBQUE3RyxLQUFBNkcsUUFDQXdhLEVBQUEsRUFDQXRWLEVBQUFsRixFQUFBakcsT0FBb0N5Z0IsRUFBQXRWLElBQ3BDaU0sR0FBQXhjLEVBQUFxTCxFQUFBd2EsR0FBQSxJQUQrQ0EsS0FLL0MsSUFBQUssRUFBQUwsRUFBQXRWLEVBRUEsR0FBQTJWLEVBQUE3YSxFQUFBd2EsR0FBQSxLQUFBbm1CLEVBQUF1bUIsRUFDQSxPQUFBemhCLEtBTUEsR0FIQWdTLEVBQUFzTyxJQUNBbUIsSUFBQUMsSUFBQTFQLEVBQUFxTyxJQUVBb0IsR0FBQSxJQUFBNWEsRUFBQWpHLE9BQUEsQ0FJQSxJQUFBOGdCLElBQUFELEdBQUE1YSxFQUFBakcsUUFBQStnQixHQUNBLE9BeWFBLFNBQUE3QyxFQUFBalksRUFBQXJMLEVBQUFOLEdBQ0E0akIsSUFDQUEsRUFBQSxJQUFBN00sR0FHQSxJQURBLElBQUFnSixFQUFBLElBQUF5RSxHQUFBWixFQUFBNUUsR0FBQTFlLE1BQUFOLElBQ0FvWCxFQUFBLEVBQW9CQSxFQUFBekwsRUFBQWpHLE9BQXFCMFIsSUFBQSxDQUN6QyxJQUFBOEUsRUFBQXZRLEVBQUF5TCxHQUNBMkksSUFBQXVCLE9BQUFzQyxFQUFBLE9BQUF0aEIsRUFBQTRaLEVBQUEsR0FBQUEsRUFBQSxJQUVBLE9BQUE2RCxFQWxiQTJHLENBQUE5QyxFQUFBalksRUFBQXJMLEVBQUFOLEdBR0EsSUFBQTJtQixFQUFBL0MsT0FBQTllLEtBQUE4ZSxRQUNBZ0QsRUFBQUQsRUFBQWhiLEVBQUFxTCxFQUFBckwsR0FZQSxPQVZBNmEsRUFDQUQsRUFDQUosSUFBQXRWLEVBQUEsRUFBQStWLEVBQUFDLE1BQUFELEVBQUFULEdBQUFTLEVBQUFDLE1BRUFELEVBQUFULElBQUE3bEIsRUFBQU4sR0FHQTRtQixFQUFBL2QsTUFBQXZJLEVBQUFOLElBR0EybUIsR0FDQTdoQixLQUFBNkcsUUFBQWliLEVBQ0E5aEIsTUFHQSxJQUFBa2YsR0FBQUosRUFBQWdELEtBWUEzQyxHQUFBdGpCLFVBQUFmLElBQUEsU0FBQTBsQixFQUFBZixFQUFBamtCLEVBQUFnZSxRQUNBaGMsSUFBQWlpQixJQUNBQSxFQUFBdkYsR0FBQTFlLElBRUEsSUFBQXdtQixFQUFBLFNBQUF4QixFQUFBZixNQUFBZSxHQUFBOU8sR0FDQTBOLEVBQUFwZixLQUFBb2YsT0FDQSxXQUFBQSxFQUFBNEMsR0FBQXhJLEVBQ0F4WixLQUFBcWYsTUFBQStCLEdBQUFoQyxFQUFBNEMsRUFBQSxJQUFBbG5CLElBQUEwbEIsRUFBQWhQLEVBQUFpTyxFQUFBamtCLEVBQUFnZSxJQUdBMkYsR0FBQXRqQixVQUFBMmdCLE9BQUEsU0FBQXNDLEVBQUEwQixFQUFBZixFQUFBamtCLEVBQUFOLEVBQUFtbEIsRUFBQUMsUUFDQTlpQixJQUFBaWlCLElBQ0FBLEVBQUF2RixHQUFBMWUsSUFFQSxJQUFBeW1CLEdBQUEsSUFBQXpCLEVBQUFmLE1BQUFlLEdBQUE5TyxFQUNBc1EsRUFBQSxHQUFBQyxFQUNBN0MsRUFBQXBmLEtBQUFvZixPQUNBc0MsRUFBQSxJQUFBdEMsRUFBQTRDLEdBRUEsSUFBQU4sR0FBQXhtQixJQUFBeVcsRUFDQSxPQUFBM1IsS0FHQSxJQUFBcWhCLEVBQUFELEdBQUFoQyxFQUFBNEMsRUFBQSxHQUNBM0MsRUFBQXJmLEtBQUFxZixNQUNBcEUsRUFBQXlHLEVBQUFyQyxFQUFBZ0MsUUFBQTdqQixFQUNBbWpCLEVBQUFKLEdBQUF0RixFQUFBNkQsRUFBQTBCLEVBQUFoUCxFQUFBaU8sRUFBQWprQixFQUFBTixFQUFBbWxCLEVBQUFDLEdBRUEsR0FBQUssSUFBQTFGLEVBQ0EsT0FBQWpiLEtBR0EsSUFBQTBoQixHQUFBZixHQUFBdEIsRUFBQXplLFFBQUFzaEIsR0FDQSxPQWlZQSxTQUFBcEQsRUFBQU8sRUFBQUQsRUFBQStDLEVBQUFsSCxHQUdBLElBRkEsSUFBQXNFLEVBQUEsRUFDQTZDLEVBQUEsSUFBQXpjLE1BQUE4TCxHQUNBYSxFQUFBLEVBQW9CLElBQUE4TSxFQUFjOU0sSUFBQThNLEtBQUEsRUFDbENnRCxFQUFBOVAsR0FBQSxFQUFBOE0sRUFBQUMsRUFBQUUsVUFBQS9oQixFQUdBLE9BREE0a0IsRUFBQUQsR0FBQWxILEVBQ0EsSUFBQXFFLEdBQUFSLEVBQUFTLEVBQUEsRUFBQTZDLEdBeFlBQyxDQUFBdkQsRUFBQU8sRUFBQUQsRUFBQTZDLEVBQUF0QixHQUdBLEdBQUFlLElBQUFmLEdBQUEsSUFBQXRCLEVBQUF6ZSxRQUFBNmYsR0FBQXBCLEVBQUEsRUFBQWdDLElBQ0EsT0FBQWhDLEVBQUEsRUFBQWdDLEdBR0EsR0FBQUssR0FBQWYsR0FBQSxJQUFBdEIsRUFBQXplLFFBQUE2ZixHQUFBRSxHQUNBLE9BQUFBLEVBR0EsSUFBQWtCLEVBQUEvQyxPQUFBOWUsS0FBQThlLFFBQ0F3RCxFQUFBWixFQUFBZixFQUFBdkIsSUFBQTRDLEVBQUE1QyxFQUFBNEMsRUFDQU8sRUFBQWIsRUFBQWYsRUFDQXhFLEdBQUFrRCxFQUFBZ0MsRUFBQVYsRUFBQWtCLEdBNmVBLFNBQUF2TCxFQUFBK0ssRUFBQUMsR0FDQSxJQUFBa0IsRUFBQWxNLEVBQUExVixPQUFBLEVBQ0EsR0FBQTBnQixHQUFBRCxJQUFBbUIsRUFFQSxPQURBbE0sRUFBQXlMLE1BQ0F6TCxFQUlBLElBRkEsSUFBQWlMLEVBQUEsSUFBQTViLE1BQUE2YyxHQUNBQyxFQUFBLEVBQ0FuUSxFQUFBLEVBQW9CQSxFQUFBa1EsRUFBYWxRLElBQ2pDQSxJQUFBK08sSUFDQW9CLEVBQUEsR0FFQWxCLEVBQUFqUCxHQUFBZ0UsRUFBQWhFLEVBQUFtUSxHQUVBLE9BQUFsQixFQTFmQW1CLENBQUFyRCxFQUFBZ0MsRUFBQVEsR0F5ZEEsU0FBQXZMLEVBQUErSyxFQUFBMWhCLEVBQUEyaEIsR0FDQSxJQUFBa0IsRUFBQWxNLEVBQUExVixPQUFBLEVBQ0EsR0FBQTBnQixHQUFBRCxFQUFBLElBQUFtQixFQUVBLE9BREFsTSxFQUFBK0ssR0FBQTFoQixFQUNBMlcsRUFJQSxJQUZBLElBQUFpTCxFQUFBLElBQUE1YixNQUFBNmMsR0FDQUMsRUFBQSxFQUNBblEsRUFBQSxFQUFvQkEsRUFBQWtRLEVBQWFsUSxJQUNqQ0EsSUFBQStPLEdBQ0FFLEVBQUFqUCxHQUFBM1MsRUFDQThpQixHQUFBLEdBRUFsQixFQUFBalAsR0FBQWdFLEVBQUFoRSxFQUFBbVEsR0FHQSxPQUFBbEIsRUF4ZUFvQixDQUFBdEQsRUFBQWdDLEVBQUFWLEVBQUFrQixHQUVBLE9BQUFBLEdBQ0E3aEIsS0FBQW9mLE9BQUFrRCxFQUNBdGlCLEtBQUFxZixNQUFBa0QsRUFDQXZpQixNQUdBLElBQUFtZixHQUFBTCxFQUFBd0QsRUFBQUMsSUFZQWpELEdBQUF6akIsVUFBQWYsSUFBQSxTQUFBMGxCLEVBQUFmLEVBQUFqa0IsRUFBQWdlLFFBQ0FoYyxJQUFBaWlCLElBQ0FBLEVBQUF2RixHQUFBMWUsSUFFQSxJQUFBNmxCLEdBQUEsSUFBQWIsRUFBQWYsTUFBQWUsR0FBQTlPLEVBQ0F1SixFQUFBamIsS0FBQXFmLE1BQUFnQyxHQUNBLE9BQUFwRyxJQUFBbmdCLElBQUEwbEIsRUFBQWhQLEVBQUFpTyxFQUFBamtCLEVBQUFnZSxNQUdBOEYsR0FBQXpqQixVQUFBMmdCLE9BQUEsU0FBQXNDLEVBQUEwQixFQUFBZixFQUFBamtCLEVBQUFOLEVBQUFtbEIsRUFBQUMsUUFDQTlpQixJQUFBaWlCLElBQ0FBLEVBQUF2RixHQUFBMWUsSUFFQSxJQUFBNmxCLEdBQUEsSUFBQWIsRUFBQWYsTUFBQWUsR0FBQTlPLEVBQ0ErUCxFQUFBdm1CLElBQUF5VyxFQUNBME4sRUFBQXJmLEtBQUFxZixNQUNBcEUsRUFBQW9FLEVBQUFnQyxHQUVBLEdBQUFJLElBQUF4RyxFQUNBLE9BQUFqYixLQUdBLElBQUEyZ0IsRUFBQUosR0FBQXRGLEVBQUE2RCxFQUFBMEIsRUFBQWhQLEVBQUFpTyxFQUFBamtCLEVBQUFOLEVBQUFtbEIsRUFBQUMsR0FDQSxHQUFBSyxJQUFBMUYsRUFDQSxPQUFBamIsS0FHQSxJQUFBNGlCLEVBQUE1aUIsS0FBQXVmLE1BQ0EsR0FBQXRFLEdBRU8sSUFBQTBGLEtBQ1BpQyxFQUNBQyxHQUNBLE9BOFNBLFNBQUEvRCxFQUFBTyxFQUFBRSxFQUFBdUQsR0FJQSxJQUhBLElBQUExRCxFQUFBLEVBQ0EyRCxFQUFBLEVBQ0FDLEVBQUEsSUFBQXJkLE1BQUE0WixHQUNBak4sRUFBQSxFQUFBMFAsRUFBQSxFQUFBalcsRUFBQXNULEVBQUF6ZSxPQUFpRDBSLEVBQUF2RyxFQUFVdUcsSUFBQTBQLElBQUEsR0FDM0QsSUFBQS9HLEVBQUFvRSxFQUFBL00sUUFDQTlVLElBQUF5ZCxHQUFBM0ksSUFBQXdRLElBQ0ExRCxHQUFBNEMsRUFDQWdCLEVBQUFELEtBQUE5SCxHQUdBLFdBQUFrRSxHQUFBTCxFQUFBTSxFQUFBNEQsR0F6VEFDLENBQUFuRSxFQUFBTyxFQUFBdUQsRUFBQXZCLFFBSkF1QixJQVFBLElBQUFmLEVBQUEvQyxPQUFBOWUsS0FBQThlLFFBQ0F5RCxFQUFBcEcsR0FBQWtELEVBQUFnQyxFQUFBVixFQUFBa0IsR0FFQSxPQUFBQSxHQUNBN2hCLEtBQUF1ZixNQUFBcUQsRUFDQTVpQixLQUFBcWYsTUFBQWtELEVBQ0F2aUIsTUFHQSxJQUFBc2YsR0FBQVIsRUFBQThELEVBQUFMLElBWUEvQyxHQUFBM2pCLFVBQUFmLElBQUEsU0FBQTBsQixFQUFBZixFQUFBamtCLEVBQUFnZSxHQUVBLElBREEsSUFBQTNTLEVBQUE3RyxLQUFBNkcsUUFDQXlMLEVBQUEsRUFBQXZHLEVBQUFsRixFQUFBakcsT0FBNEMwUixFQUFBdkcsRUFBVXVHLElBQ3RELEdBQUEwRixHQUFBeGMsRUFBQXFMLEVBQUF5TCxHQUFBLElBQ0EsT0FBQXpMLEVBQUF5TCxHQUFBLEdBR0EsT0FBQWtILEdBR0FnRyxHQUFBM2pCLFVBQUEyZ0IsT0FBQSxTQUFBc0MsRUFBQTBCLEVBQUFmLEVBQUFqa0IsRUFBQU4sRUFBQW1sQixFQUFBQyxRQUNBOWlCLElBQUFpaUIsSUFDQUEsRUFBQXZGLEdBQUExZSxJQUdBLElBQUFpbUIsRUFBQXZtQixJQUFBeVcsRUFFQSxHQUFBOE4sSUFBQXpmLEtBQUF5ZixRQUNBLE9BQUFnQyxFQUNBemhCLE1BRUFnUyxFQUFBc08sR0FDQXRPLEVBQUFxTyxHQUNBSyxHQUFBMWdCLEtBQUE4ZSxFQUFBMEIsRUFBQWYsR0FBQWprQixFQUFBTixLQUtBLElBRkEsSUFBQTJMLEVBQUE3RyxLQUFBNkcsUUFDQXdhLEVBQUEsRUFDQXRWLEVBQUFsRixFQUFBakcsT0FBb0N5Z0IsRUFBQXRWLElBQ3BDaU0sR0FBQXhjLEVBQUFxTCxFQUFBd2EsR0FBQSxJQUQrQ0EsS0FLL0MsSUFBQUssRUFBQUwsRUFBQXRWLEVBRUEsR0FBQTJWLEVBQUE3YSxFQUFBd2EsR0FBQSxLQUFBbm1CLEVBQUF1bUIsRUFDQSxPQUFBemhCLEtBTUEsR0FIQWdTLEVBQUFzTyxJQUNBbUIsSUFBQUMsSUFBQTFQLEVBQUFxTyxHQUVBb0IsR0FBQSxJQUFBMVYsRUFDQSxXQUFBMlQsR0FBQVosRUFBQTllLEtBQUF5ZixRQUFBNVksRUFBQSxFQUFBd2EsSUFHQSxJQUFBUSxFQUFBL0MsT0FBQTllLEtBQUE4ZSxRQUNBZ0QsRUFBQUQsRUFBQWhiLEVBQUFxTCxFQUFBckwsR0FZQSxPQVZBNmEsRUFDQUQsRUFDQUosSUFBQXRWLEVBQUEsRUFBQStWLEVBQUFDLE1BQUFELEVBQUFULEdBQUFTLEVBQUFDLE1BRUFELEVBQUFULElBQUE3bEIsRUFBQU4sR0FHQTRtQixFQUFBL2QsTUFBQXZJLEVBQUFOLElBR0EybUIsR0FDQTdoQixLQUFBNkcsUUFBQWliLEVBQ0E5aEIsTUFHQSxJQUFBd2YsR0FBQVYsRUFBQTllLEtBQUF5ZixRQUFBcUMsSUFZQXBDLEdBQUE3akIsVUFBQWYsSUFBQSxTQUFBMGxCLEVBQUFmLEVBQUFqa0IsRUFBQWdlLEdBQ0EsT0FBQXhCLEdBQUF4YyxFQUFBd0UsS0FBQW9YLE1BQUEsSUFBQXBYLEtBQUFvWCxNQUFBLEdBQUFvQyxHQUdBa0csR0FBQTdqQixVQUFBMmdCLE9BQUEsU0FBQXNDLEVBQUEwQixFQUFBZixFQUFBamtCLEVBQUFOLEVBQUFtbEIsRUFBQUMsR0FDQSxJQUFBbUIsRUFBQXZtQixJQUFBeVcsRUFDQXVSLEVBQUFsTCxHQUFBeGMsRUFBQXdFLEtBQUFvWCxNQUFBLElBQ0EsT0FBQThMLEVBQUFob0IsSUFBQThFLEtBQUFvWCxNQUFBLEdBQUFxSyxHQUNBemhCLE1BR0FnUyxFQUFBc08sR0FFQW1CLE9BQ0F6UCxFQUFBcU8sR0FJQTZDLEVBQ0FwRSxPQUFBOWUsS0FBQThlLFNBQ0E5ZSxLQUFBb1gsTUFBQSxHQUFBbGMsRUFDQThFLE1BRUEsSUFBQTBmLEdBQUFaLEVBQUE5ZSxLQUFBeWYsU0FBQWprQixFQUFBTixLQUdBOFcsRUFBQXFPLEdBQ0FLLEdBQUExZ0IsS0FBQThlLEVBQUEwQixFQUFBdEcsR0FBQTFlLE1BQUFOLE9BT0Fna0IsR0FBQXJqQixVQUFBZ2pCLFFBQ0FXLEdBQUEzakIsVUFBQWdqQixRQUFBLFNBQUFuZCxFQUFBdUosR0FFQSxJQURBLElBQUFwRSxFQUFBN0csS0FBQTZHLFFBQ0F5TCxFQUFBLEVBQUE2RSxFQUFBdFEsRUFBQWpHLE9BQUEsRUFBbUQwUixHQUFBNkUsRUFBZ0I3RSxJQUNuRSxRQUFBNVEsRUFBQW1GLEVBQUFvRSxFQUFBa00sRUFBQTdFLE1BQ0EsVUFLQTZNLEdBQUF0akIsVUFBQWdqQixRQUNBUyxHQUFBempCLFVBQUFnakIsUUFBQSxTQUFBbmQsRUFBQXVKLEdBRUEsSUFEQSxJQUFBb1UsRUFBQXJmLEtBQUFxZixNQUNBL00sRUFBQSxFQUFBNkUsRUFBQWtJLEVBQUF6ZSxPQUFBLEVBQWlEMFIsR0FBQTZFLEVBQWdCN0UsSUFBQSxDQUNqRSxJQUFBMkksRUFBQW9FLEVBQUFwVSxFQUFBa00sRUFBQTdFLEtBQ0EsR0FBQTJJLElBQUEsSUFBQUEsRUFBQTRELFFBQUFuZCxFQUFBdUosR0FDQSxXQUtBeVUsR0FBQTdqQixVQUFBZ2pCLFFBQUEsU0FBQW5kLEVBQUF1SixHQUNBLE9BQUF2SixFQUFBMUIsS0FBQW9YLFFBR0F4SCxFQUFBZ1AsR0FBQW5MLEdBUUFtTCxHQUFBL2lCLFVBQUFnTyxLQUFBLFdBR0EsSUFGQSxJQUFBdE4sRUFBQXlELEtBQUEyZixNQUNBd0QsRUFBQW5qQixLQUFBNmYsT0FDQXNELEdBQUEsQ0FDQSxJQUVBaE0sRUFGQThELEVBQUFrSSxFQUFBbEksS0FDQXBYLEVBQUFzZixFQUFBdGYsUUFFQSxHQUFBb1gsRUFBQTdELE9BQ0EsT0FBQXZULEVBQ0EsT0FBQWtjLEdBQUF4akIsRUFBQTBlLEVBQUE3RCxZQUVTLEdBQUE2RCxFQUFBcFUsU0FFVCxHQURBc1EsRUFBQThELEVBQUFwVSxRQUFBakcsT0FBQSxFQUNBaUQsR0FBQXNULEVBQ0EsT0FBQTRJLEdBQUF4akIsRUFBQTBlLEVBQUFwVSxRQUFBN0csS0FBQTRmLFNBQUF6SSxFQUFBdFQsV0FJQSxHQURBc1QsRUFBQThELEVBQUFvRSxNQUFBemUsT0FBQSxFQUNBaUQsR0FBQXNULEVBQUEsQ0FDQSxJQUFBaU0sRUFBQW5JLEVBQUFvRSxNQUFBcmYsS0FBQTRmLFNBQUF6SSxFQUFBdFQsS0FDQSxHQUFBdWYsRUFBQSxDQUNBLEdBQUFBLEVBQUFoTSxNQUNBLE9BQUEySSxHQUFBeGpCLEVBQUE2bUIsRUFBQWhNLE9BRUErTCxFQUFBbmpCLEtBQUE2ZixPQUFBQyxHQUFBc0QsRUFBQUQsR0FFQSxTQUdBQSxFQUFBbmpCLEtBQUE2ZixPQUFBN2YsS0FBQTZmLE9BQUFJLE9BRUEsT0FuaURZL2tCLFdBQUFzQyxFQUFBc00sTUFBQSxJQW15RFosSUFBQTZYLEdBQUFsUSxFQUFBLEVBQ0F5USxHQUFBelEsRUFBQSxFQUNBb1IsR0FBQXBSLEVBQUEsRUFNQSxTQUFBNFIsR0FBQW5vQixHQUNBLElBQUFvb0IsRUFBQUMsS0FDQSxVQUFBcm9CLFFBQUFzQyxJQUFBdEMsRUFDQSxPQUFBb29CLEVBRUEsR0FBQUUsR0FBQXRvQixHQUNBLE9BQUFBLEVBRUEsSUFBQTBTLEVBQUF5QyxFQUFBblYsR0FDQXNYLEVBQUE1RSxFQUFBNEUsS0FDQSxXQUFBQSxFQUNBOFEsR0FFQTVILEdBQUFsSixHQUNBQSxFQUFBLEdBQUFBLEVBQUFmLEVBQ0FnUyxHQUFBLEVBQUFqUixFQUFBaEIsRUFBQSxTQUFBa1MsR0FBQTlWLEVBQUFnSSxZQUVBME4sRUFBQXpILGNBQUEsU0FBQTVTLEdBQ0FBLEVBQUEwYSxRQUFBblIsR0FDQTVFLEVBQUFqRCxRQUFBLFNBQUF5QyxFQUFBblQsR0FBc0MsT0FBQWdQLEVBQUFQLElBQUF6TyxFQUFBbVQsUUE0SnRDLFNBQUFvVyxHQUFBSSxHQUNBLFNBQUFBLE1BQUFDLEtBcExBalUsRUFBQXlULEdBQUEvSixJQTJCQStKLEdBQUFwVixHQUFBLFdBQ0EsT0FBQWpPLEtBQUE4QixZQUdBdWhCLEdBQUF4bkIsVUFBQWtHLFNBQUEsV0FDQSxPQUFBL0IsS0FBQXdWLFdBQUEsZUFLQTZOLEdBQUF4bkIsVUFBQWYsSUFBQSxTQUFBK0ksRUFBQTJWLEdBRUEsSUFEQTNWLEVBQUE4TyxFQUFBM1MsS0FBQTZELEtBQ0EsR0FBQUEsRUFBQTdELEtBQUF3UyxLQUFBLENBRUEsSUFBQXlJLEVBQUE2SSxHQUFBOWpCLEtBREE2RCxHQUFBN0QsS0FBQStqQixTQUVBLE9BQUE5SSxLQUFBM0UsTUFBQXpTLEVBQUE2TixHQUVBLE9BQUE4SCxHQUtBNkosR0FBQXhuQixVQUFBNk0sSUFBQSxTQUFBN0UsRUFBQTNJLEdBQ0EsT0E2U0EsU0FBQStOLEVBQUFwRixFQUFBM0ksR0FHQSxJQUZBMkksRUFBQThPLEVBQUExSixFQUFBcEYsS0FFQUEsRUFDQSxPQUFBb0YsRUFHQSxHQUFBcEYsR0FBQW9GLEVBQUF1SixNQUFBM08sRUFBQSxFQUNBLE9BQUFvRixFQUFBNFMsY0FBQSxTQUFBNVMsR0FDQXBGLEVBQUEsRUFDQW1nQixHQUFBL2EsRUFBQXBGLEdBQUE2RSxJQUFBLEVBQUF4TixHQUNBOG9CLEdBQUEvYSxFQUFBLEVBQUFwRixFQUFBLEdBQUE2RSxJQUFBN0UsRUFBQTNJLEtBSUEySSxHQUFBb0YsRUFBQThhLFFBRUEsSUFBQUUsRUFBQWhiLEVBQUFpYixNQUNBL0QsRUFBQWxYLEVBQUFnVCxNQUNBcUUsRUFBQXhPLEVBQUFELEdBT0EsT0FOQWhPLEdBQUFzZ0IsR0FBQWxiLEVBQUFtYixXQUNBSCxFQUFBSSxHQUFBSixFQUFBaGIsRUFBQW9VLFVBQUEsRUFBQXhaLEVBQUEzSSxFQUFBb2xCLEdBRUFILEVBQUFrRSxHQUFBbEUsRUFBQWxYLEVBQUFvVSxVQUFBcFUsRUFBQXFiLE9BQUF6Z0IsRUFBQTNJLEVBQUFvbEIsR0FHQUEsRUFBQXBsQixNQUlBK04sRUFBQW9VLFdBQ0FwVSxFQUFBZ1QsTUFBQWtFLEVBQ0FsWCxFQUFBaWIsTUFBQUQsRUFDQWhiLEVBQUFvUCxZQUFBN2EsRUFDQXlMLEVBQUFxVSxXQUFBLEVBQ0FyVSxHQUVBd2EsR0FBQXhhLEVBQUE4YSxRQUFBOWEsRUFBQW1iLFVBQUFuYixFQUFBcWIsT0FBQW5FLEVBQUE4RCxHQVZBaGIsRUF4VUFzYixDQUFBdmtCLEtBQUE2RCxFQUFBM0ksSUFHQW1vQixHQUFBeG5CLFVBQUF5Z0IsT0FBQSxTQUFBelksR0FDQSxPQUFBN0QsS0FBQVgsSUFBQXdFLEdBQ0EsSUFBQUEsRUFBQTdELEtBQUF3Z0IsUUFDQTNjLElBQUE3RCxLQUFBd1MsS0FBQSxFQUFBeFMsS0FBQStoQixNQUNBL2hCLEtBQUF3a0IsT0FBQTNnQixFQUFBLEdBSEE3RCxNQU1BcWpCLEdBQUF4bkIsVUFBQTRvQixPQUFBLFNBQUE1Z0IsRUFBQTNJLEdBQ0EsT0FBQThFLEtBQUF3a0IsT0FBQTNnQixFQUFBLEVBQUEzSSxJQUdBbW9CLEdBQUF4bkIsVUFBQXVoQixNQUFBLFdBQ0EsV0FBQXBkLEtBQUF3UyxLQUNBeFMsS0FFQUEsS0FBQXFkLFdBQ0FyZCxLQUFBd1MsS0FBQXhTLEtBQUErakIsUUFBQS9qQixLQUFBb2tCLFVBQUEsRUFDQXBrQixLQUFBc2tCLE9BQUE5UyxFQUNBeFIsS0FBQWljLE1BQUFqYyxLQUFBa2tCLE1BQUEsS0FDQWxrQixLQUFBcVksWUFBQTdhLEVBQ0F3QyxLQUFBc2QsV0FBQSxFQUNBdGQsTUFFQXVqQixNQUdBRixHQUFBeG5CLFVBQUFrSSxLQUFBLFdBQ0EsSUFBQTBDLEVBQUEzRSxVQUNBNGlCLEVBQUExa0IsS0FBQXdTLEtBQ0EsT0FBQXhTLEtBQUE2YixjQUFBLFNBQUE1UyxHQUNBK2EsR0FBQS9hLEVBQUEsRUFBQXliLEVBQUFqZSxFQUFBN0YsUUFDQSxRQUFBMFIsRUFBQSxFQUF3QkEsRUFBQTdMLEVBQUE3RixPQUFvQjBSLElBQzVDckosRUFBQVAsSUFBQWdjLEVBQUFwUyxFQUFBN0wsRUFBQTZMLE9BS0ErUSxHQUFBeG5CLFVBQUFrbUIsSUFBQSxXQUNBLE9BQUFpQyxHQUFBaGtCLEtBQUEsT0FHQXFqQixHQUFBeG5CLFVBQUE4b0IsUUFBQSxXQUNBLElBQUFsZSxFQUFBM0UsVUFDQSxPQUFBOUIsS0FBQTZiLGNBQUEsU0FBQTVTLEdBQ0ErYSxHQUFBL2EsR0FBQXhDLEVBQUE3RixRQUNBLFFBQUEwUixFQUFBLEVBQXdCQSxFQUFBN0wsRUFBQTdGLE9BQW9CMFIsSUFDNUNySixFQUFBUCxJQUFBNEosRUFBQTdMLEVBQUE2TCxPQUtBK1EsR0FBQXhuQixVQUFBMmtCLE1BQUEsV0FDQSxPQUFBd0QsR0FBQWhrQixLQUFBLElBS0FxakIsR0FBQXhuQixVQUFBMGhCLE1BQUEsV0FDQSxPQUFBcUgsR0FBQTVrQixVQUFBeEMsRUFBQXNFLFlBR0F1aEIsR0FBQXhuQixVQUFBNGhCLFVBQUEsU0FBQUMsR0FBaUQsSUFBQUMsRUFBQWhPLEVBQUF2VixLQUFBMEgsVUFBQSxHQUNqRCxPQUFBOGlCLEdBQUE1a0IsS0FBQTBkLEVBQUFDLElBR0EwRixHQUFBeG5CLFVBQUFnaUIsVUFBQSxXQUNBLE9BQUErRyxHQUFBNWtCLEtBQUE4ZCxHQUFBaGMsWUFHQXVoQixHQUFBeG5CLFVBQUFraUIsY0FBQSxTQUFBTCxHQUFxRCxJQUFBQyxFQUFBaE8sRUFBQXZWLEtBQUEwSCxVQUFBLEdBQ3JELE9BQUE4aUIsR0FBQTVrQixLQUFBZ2UsR0FBQU4sR0FBQUMsSUFHQTBGLEdBQUF4bkIsVUFBQThuQixRQUFBLFNBQUFuUixHQUNBLE9BQUF3UixHQUFBaGtCLEtBQUEsRUFBQXdTLElBS0E2USxHQUFBeG5CLFVBQUFtRyxNQUFBLFNBQUFzSixFQUFBQyxHQUNBLElBQUFpSCxFQUFBeFMsS0FBQXdTLEtBQ0EsT0FBQU0sRUFBQXhILEVBQUFDLEVBQUFpSCxHQUNBeFMsS0FFQWdrQixHQUNBaGtCLEtBQ0ErUyxFQUFBekgsRUFBQWtILEdBQ0FTLEVBQUExSCxFQUFBaUgsS0FJQTZRLEdBQUF4bkIsVUFBQWlhLFdBQUEsU0FBQXZaLEVBQUEwTyxHQUNBLElBQUFwSCxFQUFBLEVBQ0E0QyxFQUFBb2UsR0FBQTdrQixLQUFBaUwsR0FDQSxXQUFBd0ksRUFBQSxXQUNBLElBQUF2WSxFQUFBdUwsSUFDQSxPQUFBdkwsSUFBQTRwQixJQTU3RFk1cEIsV0FBQXNDLEVBQUFzTSxNQUFBLEdBODdEWjRKLEVBQUFuWCxFQUFBc0gsSUFBQTNJLE1BSUFtb0IsR0FBQXhuQixVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBSUEsSUFIQSxJQUVBL1AsRUFGQTJJLEVBQUEsRUFDQTRDLEVBQUFvZSxHQUFBN2tCLEtBQUFpTCxJQUVBL1AsRUFBQXVMLE9BQUFxZSxLQUNBLElBQUFwakIsRUFBQXhHLEVBQUEySSxJQUFBN0QsUUFJQSxPQUFBNkQsR0FHQXdmLEdBQUF4bkIsVUFBQTZpQixjQUFBLFNBQUFJLEdBQ0EsT0FBQUEsSUFBQTllLEtBQUFxZCxVQUNBcmQsS0FFQThlLEVBSUEyRSxHQUFBempCLEtBQUErakIsUUFBQS9qQixLQUFBb2tCLFVBQUFwa0IsS0FBQXNrQixPQUFBdGtCLEtBQUFpYyxNQUFBamMsS0FBQWtrQixNQUFBcEYsRUFBQTllLEtBQUFxWSxTQUhBclksS0FBQXFkLFVBQUF5QixFQUNBOWUsT0FVQXFqQixHQUFBRyxVQUVBLElBQUFLLEdBQUEseUJBRUFrQixHQUFBMUIsR0FBQXhuQixVQWlCQSxTQUFBNm5CLEdBQUFwTixFQUFBd0ksR0FDQTllLEtBQUFzVyxRQUNBdFcsS0FBQThlLFVBbEJBaUcsR0FBQWxCLEtBQUEsRUFDQWtCLEdBQUEsT0FBQUEsR0FBQXpJLE9BQ0F5SSxHQUFBNUksTUFBQThDLEdBQUE5QyxNQUNBNEksR0FBQXhJLFNBQ0F3SSxHQUFBdkQsU0FBQXZDLEdBQUF1QyxTQUNBdUQsR0FBQXZJLE9BQUF5QyxHQUFBekMsT0FDQXVJLEdBQUExSSxTQUFBNEMsR0FBQTVDLFNBQ0EwSSxHQUFBbkgsUUFBQXFCLEdBQUFyQixRQUNBbUgsR0FBQTlHLFlBQUFnQixHQUFBaEIsWUFDQThHLEdBQUFsSixjQUFBb0QsR0FBQXBELGNBQ0FrSixHQUFBdkcsVUFBQVMsR0FBQVQsVUFDQXVHLEdBQUFwRyxZQUFBTSxHQUFBTixZQUNBb0csR0FBQXRHLFdBQUFRLEdBQUFSLFdBV0FpRixHQUFBN25CLFVBQUFtcEIsYUFBQSxTQUFBbEcsRUFBQW1HLEVBQUFwaEIsR0FDQSxHQUFBQSxJQUFBb2hCLEVBQUEsR0FBQUEsRUFBQSxJQUFBamxCLEtBQUFzVyxNQUFBMVYsT0FDQSxPQUFBWixLQUVBLElBQUFrbEIsRUFBQXJoQixJQUFBb2hCLEVBQUF2VCxFQUNBLEdBQUF3VCxHQUFBbGxCLEtBQUFzVyxNQUFBMVYsT0FDQSxXQUFBOGlCLE1BQUE1RSxHQUVBLElBQ0FxRyxFQURBQyxFQUFBLElBQUFGLEVBRUEsR0FBQUQsRUFBQSxHQUNBLElBQUFJLEVBQUFybEIsS0FBQXNXLE1BQUE0TyxHQUVBLElBREFDLEVBQUFFLEtBQUFMLGFBQUFsRyxFQUFBbUcsRUFBQXpULEVBQUEzTixNQUNBd2hCLEdBQUFELEVBQ0EsT0FBQXBsQixLQUdBLEdBQUFvbEIsSUFBQUQsRUFDQSxPQUFBbmxCLEtBRUEsSUFBQXNsQixFQUFBQyxHQUFBdmxCLEtBQUE4ZSxHQUNBLElBQUFzRyxFQUNBLFFBQUE5UyxFQUFBLEVBQXdCQSxFQUFBNFMsRUFBa0I1UyxJQUMxQ2dULEVBQUFoUCxNQUFBaEUsUUFBQTlVLEVBTUEsT0FIQTJuQixJQUNBRyxFQUFBaFAsTUFBQTRPLEdBQUFDLEdBRUFHLEdBR0E1QixHQUFBN25CLFVBQUEycEIsWUFBQSxTQUFBMUcsRUFBQW1HLEVBQUFwaEIsR0FDQSxHQUFBQSxLQUFBb2hCLEVBQUEsR0FBQUEsRUFBQSxRQUFBamxCLEtBQUFzVyxNQUFBMVYsT0FDQSxPQUFBWixLQUVBLElBS0FtbEIsRUFMQU0sRUFBQTVoQixFQUFBLElBQUFvaEIsRUFBQXZULEVBQ0EsR0FBQStULEdBQUF6bEIsS0FBQXNXLE1BQUExVixPQUNBLE9BQUFaLEtBSUEsR0FBQWlsQixFQUFBLEdBQ0EsSUFBQUksRUFBQXJsQixLQUFBc1csTUFBQW1QLEdBRUEsSUFEQU4sRUFBQUUsS0FBQUcsWUFBQTFHLEVBQUFtRyxFQUFBelQsRUFBQTNOLE1BQ0F3aEIsR0FBQUksSUFBQXpsQixLQUFBc1csTUFBQTFWLE9BQUEsRUFDQSxPQUFBWixLQUlBLElBQUFzbEIsRUFBQUMsR0FBQXZsQixLQUFBOGUsR0FLQSxPQUpBd0csRUFBQWhQLE1BQUFrTyxPQUFBaUIsRUFBQSxHQUNBTixJQUNBRyxFQUFBaFAsTUFBQW1QLEdBQUFOLEdBRUFHLEdBS0EsSUEyRUFJLEdBaVdBQyxHQTVhQWIsTUFFQSxTQUFBRCxHQUFBNWIsRUFBQWdDLEdBQ0EsSUFBQTJhLEVBQUEzYyxFQUFBOGEsUUFDQThCLEVBQUE1YyxFQUFBbWIsVUFDQTBCLEVBQUEzQixHQUFBMEIsR0FDQUUsRUFBQTljLEVBQUFpYixNQUVBLE9BQUE4QixFQUFBL2MsRUFBQWdULE1BQUFoVCxFQUFBcWIsT0FBQSxHQUVBLFNBQUEwQixFQUFBL0ssRUFBQWdLLEVBQUFwYyxHQUNBLFdBQUFvYyxFQUtBLFNBQUFoSyxFQUFBcFMsR0FDQSxJQUFBeU4sRUFBQXpOLElBQUFpZCxFQUFBQyxLQUFBelAsTUFBQTJFLEtBQUEzRSxNQUNBcEksRUFBQXJGLEVBQUErYyxFQUFBLEVBQUFBLEVBQUEvYyxFQUNBb2QsRUFBQUosRUFBQWhkLEVBSUEsT0FIQW9kLEVBQUF4VSxJQUNBd1UsRUFBQXhVLEdBRUEsV0FDQSxHQUFBdkQsSUFBQStYLEVBQ0EsT0FBQW5CLEdBRUEsSUFBQXpELEVBQUFwVyxJQUFBZ2IsRUFBQS9YLElBQ0EsT0FBQW9JLEtBQUErSyxJQWhCQTZFLENBQUFqTCxFQUFBcFMsR0FvQkEsU0FBQW9TLEVBQUFnSyxFQUFBcGMsR0FDQSxJQUFBcEMsRUFDQTZQLEVBQUEyRSxLQUFBM0UsTUFDQXBJLEVBQUFyRixFQUFBK2MsRUFBQSxFQUFBQSxFQUFBL2MsR0FBQW9jLEVBQ0FnQixFQUFBLEdBQUFKLEVBQUFoZCxHQUFBb2MsR0FJQSxPQUhBZ0IsRUFBQXhVLElBQ0F3VSxFQUFBeFUsR0FFQSxXQUNBLFFBQ0EsR0FBQWhMLEVBQUEsQ0FDQSxJQUFBdkwsRUFBQXVMLElBQ0EsR0FBQXZMLElBQUE0cEIsR0FDQSxPQUFBNXBCLEVBRUF1TCxFQUFBLEtBRUEsR0FBQXlILElBQUErWCxFQUNBLE9BQUFuQixHQUVBLElBQUF6RCxFQUFBcFcsSUFBQWdiLEVBQUEvWCxJQUNBekgsRUFBQXVmLEVBQ0ExUCxLQUFBK0ssR0FBQTRELEVBQUF6VCxFQUFBM0ksR0FBQXdZLEdBQUE0RCxNQXpDQWtCLENBQUFsTCxFQUFBZ0ssRUFBQXBjLElBZ0RBLFNBQUE0YSxHQUFBMkMsRUFBQUMsRUFBQXBCLEVBQUEvRSxFQUFBNkYsRUFBQWpILEVBQUE1RSxHQUNBLElBQUFqUixFQUFBdE8sT0FBQVksT0FBQXdwQixJQVVBLE9BVEE5YixFQUFBdUosS0FBQTZULEVBQUFELEVBQ0FuZCxFQUFBOGEsUUFBQXFDLEVBQ0FuZCxFQUFBbWIsVUFBQWlDLEVBQ0FwZCxFQUFBcWIsT0FBQVcsRUFDQWhjLEVBQUFnVCxNQUFBaUUsRUFDQWpYLEVBQUFpYixNQUFBNkIsRUFDQTljLEVBQUFvVSxVQUFBeUIsRUFDQTdWLEVBQUFvUCxPQUFBNkIsRUFDQWpSLEVBQUFxVSxXQUFBLEVBQ0FyVSxFQUlBLFNBQUFzYSxLQUNBLE9BQUFtQyxRQUFBakMsR0FBQSxJQUFBalMsSUEyQ0EsU0FBQTZTLEdBQUFwSixFQUFBNkQsRUFBQW1HLEVBQUFwaEIsRUFBQTNJLEVBQUFvbEIsR0FDQSxJQU1BSyxFQU5BVSxFQUFBeGQsSUFBQW9oQixFQUFBdlQsRUFDQTRVLEVBQUFyTCxHQUFBb0csRUFBQXBHLEVBQUEzRSxNQUFBMVYsT0FDQSxJQUFBMGxCLFFBQUE5b0IsSUFBQXRDLEVBQ0EsT0FBQStmLEVBS0EsR0FBQWdLLEVBQUEsR0FDQSxJQUFBc0IsRUFBQXRMLEtBQUEzRSxNQUFBK0ssR0FDQW1GLEVBQUFuQyxHQUFBa0MsRUFBQXpILEVBQUFtRyxFQUFBelQsRUFBQTNOLEVBQUEzSSxFQUFBb2xCLEdBQ0EsT0FBQWtHLElBQUFELEVBQ0F0TCxJQUVBMEYsRUFBQTRFLEdBQUF0SyxFQUFBNkQsSUFDQXhJLE1BQUErSyxHQUFBbUYsRUFDQTdGLEdBR0EsT0FBQTJGLEdBQUFyTCxFQUFBM0UsTUFBQStLLEtBQUFubUIsRUFDQStmLEdBR0FqSixFQUFBc08sR0FFQUssRUFBQTRFLEdBQUF0SyxFQUFBNkQsUUFDQXRoQixJQUFBdEMsR0FBQW1tQixJQUFBVixFQUFBckssTUFBQTFWLE9BQUEsRUFDQStmLEVBQUFySyxNQUFBeUwsTUFFQXBCLEVBQUFySyxNQUFBK0ssR0FBQW5tQixFQUVBeWxCLEdBR0EsU0FBQTRFLEdBQUF0SyxFQUFBNkQsR0FDQSxPQUFBQSxHQUFBN0QsR0FBQTZELElBQUE3RCxFQUFBNkQsUUFDQTdELEVBRUEsSUFBQXlJLEdBQUF6SSxJQUFBM0UsTUFBQXRVLFdBQUE4YyxHQUdBLFNBQUFnRixHQUFBN2EsRUFBQXdkLEdBQ0EsR0FBQUEsR0FBQXRDLEdBQUFsYixFQUFBbWIsV0FDQSxPQUFBbmIsRUFBQWliLE1BRUEsR0FBQXVDLEVBQUEsR0FBQXhkLEVBQUFxYixPQUFBOVMsRUFBQSxDQUdBLElBRkEsSUFBQXlKLEVBQUFoUyxFQUFBZ1QsTUFDQWdKLEVBQUFoYyxFQUFBcWIsT0FDQXJKLEdBQUFnSyxFQUFBLEdBQ0FoSyxJQUFBM0UsTUFBQW1RLElBQUF4QixFQUFBdlQsR0FDQXVULEdBQUF6VCxFQUVBLE9BQUF5SixHQUlBLFNBQUErSSxHQUFBL2EsRUFBQXFDLEVBQUFDLFFBR0EvTixJQUFBOE4sSUFDQUEsR0FBQSxRQUVBOU4sSUFBQStOLElBQ0FBLEdBQUEsR0FFQSxJQUFBbWIsRUFBQXpkLEVBQUFvVSxXQUFBLElBQUFwTCxFQUNBMFUsRUFBQTFkLEVBQUE4YSxRQUNBNkMsRUFBQTNkLEVBQUFtYixVQUNBeUMsRUFBQUYsRUFBQXJiLEVBQ0F3YixPQUFBdHBCLElBQUErTixFQUFBcWIsRUFBQXJiLEVBQUEsRUFBQXFiLEVBQUFyYixFQUFBb2IsRUFBQXBiLEVBQ0EsR0FBQXNiLElBQUFGLEdBQUFHLElBQUFGLEVBQ0EsT0FBQTNkLEVBSUEsR0FBQTRkLEdBQUFDLEVBQ0EsT0FBQTdkLEVBQUFtVSxRQVFBLElBTEEsSUFBQTJKLEVBQUE5ZCxFQUFBcWIsT0FDQW5FLEVBQUFsWCxFQUFBZ1QsTUFHQStLLEVBQUEsRUFDQUgsRUFBQUcsRUFBQSxHQUNBN0csRUFBQSxJQUFBdUQsR0FBQXZELEtBQUE3SixNQUFBMVYsYUFBQXBELEVBQUEyaUIsTUFBQXVHLEdBRUFNLEdBQUEsSUFEQUQsR0FBQXZWLEdBR0F3VixJQUNBSCxHQUFBRyxFQUNBTCxHQUFBSyxFQUNBRixHQUFBRSxFQUNBSixHQUFBSSxHQU9BLElBSkEsSUFBQUMsRUFBQTlDLEdBQUF5QyxHQUNBTSxFQUFBL0MsR0FBQTJDLEdBR0FJLEdBQUEsR0FBQUgsRUFBQXZWLEdBQ0EyTyxFQUFBLElBQUF1RCxHQUFBdkQsS0FBQTdKLE1BQUExVixRQUFBdWYsTUFBQXVHLEdBQ0FLLEdBQUF2VixFQUlBLElBQUEyVixFQUFBbGUsRUFBQWliLE1BQ0FELEVBQUFpRCxFQUFBRCxFQUNBbkQsR0FBQTdhLEVBQUE2ZCxFQUFBLEdBQ0FJLEVBQUFELEVBQUEsSUFBQXZELE1BQUFnRCxHQUFBUyxFQUdBLEdBQUFBLEdBQUFELEVBQUFELEdBQUFKLEVBQUFELEdBQUFPLEVBQUE3USxNQUFBMVYsT0FBQSxDQUdBLElBREEsSUFBQXFhLEVBREFrRixFQUFBb0YsR0FBQXBGLEVBQUF1RyxHQUVBekIsRUFBQThCLEVBQWdDOUIsRUFBQXpULEVBQWV5VCxHQUFBelQsRUFBQSxDQUMvQyxJQUFBNlAsRUFBQTRGLElBQUFoQyxFQUFBdlQsRUFDQXVKLElBQUEzRSxNQUFBK0ssR0FBQWtFLEdBQUF0SyxFQUFBM0UsTUFBQStLLEdBQUFxRixHQUVBekwsRUFBQTNFLE1BQUEyUSxJQUFBelYsRUFBQUUsR0FBQXlWLEVBU0EsR0FMQUwsRUFBQUYsSUFDQTNDLE9BQUF1QixZQUFBa0IsRUFBQSxFQUFBSSxJQUlBRCxHQUFBSyxFQUNBTCxHQUFBSyxFQUNBSixHQUFBSSxFQUNBSCxFQUFBdlYsRUFDQTJPLEVBQUEsS0FDQThELE9BQUFlLGFBQUEwQixFQUFBLEVBQUFHLFFBR0ssR0FBQUEsRUFBQUYsR0FBQU8sRUFBQUQsRUFBQSxDQUlMLElBSEFELEVBQUEsRUFHQTdHLEdBQUEsQ0FDQSxJQUFBaUgsRUFBQVAsSUFBQUUsRUFBQXJWLEVBQ0EsR0FBQTBWLElBQUFGLElBQUFILEVBQUFyVixFQUNBLE1BRUEwVixJQUNBSixJQUFBLEdBQUFELEdBQUFLLEdBRUFMLEdBQUF2VixFQUNBMk8sSUFBQTdKLE1BQUE4USxHQUlBakgsR0FBQTBHLEVBQUFGLElBQ0F4RyxJQUFBNkUsYUFBQTBCLEVBQUFLLEVBQUFGLEVBQUFHLElBRUE3RyxHQUFBK0csRUFBQUQsSUFDQTlHLElBQUFxRixZQUFBa0IsRUFBQUssRUFBQUcsRUFBQUYsSUFFQUEsSUFDQUgsR0FBQUcsRUFDQUYsR0FBQUUsR0FJQSxPQUFBL2QsRUFBQW9VLFdBQ0FwVSxFQUFBdUosS0FBQXNVLEVBQUFELEVBQ0E1ZCxFQUFBOGEsUUFBQThDLEVBQ0E1ZCxFQUFBbWIsVUFBQTBDLEVBQ0E3ZCxFQUFBcWIsT0FBQXlDLEVBQ0E5ZCxFQUFBZ1QsTUFBQWtFLEVBQ0FsWCxFQUFBaWIsTUFBQUQsRUFDQWhiLEVBQUFvUCxZQUFBN2EsRUFDQXlMLEVBQUFxVSxXQUFBLEVBQ0FyVSxHQUVBd2EsR0FBQW9ELEVBQUFDLEVBQUFDLEVBQUE1RyxFQUFBOEQsR0FHQSxTQUFBVyxHQUFBM2IsRUFBQXlVLEVBQUFvRCxHQUdBLElBRkEsSUFBQW5ELEtBQ0EwSixFQUFBLEVBQ0EvVSxFQUFBLEVBQW9CQSxFQUFBd08sRUFBQWxnQixPQUF1QjBSLElBQUEsQ0FDM0MsSUFBQXBYLEVBQUE0bEIsRUFBQXhPLEdBQ0ExRSxFQUFBeUMsRUFBQW5WLEdBQ0EwUyxFQUFBNEUsS0FBQTZVLElBQ0FBLEVBQUF6WixFQUFBNEUsTUFFQXhDLEVBQUE5VSxLQUNBMFMsSUFBQTVDLElBQUEsU0FBQW9DLEdBQXNDLE9BQUFrSyxHQUFBbEssTUFFdEN1USxFQUFBNVosS0FBQTZKLEdBS0EsT0FIQXlaLEVBQUFwZSxFQUFBdUosT0FDQXZKLElBQUEwYSxRQUFBMEQsSUFFQXRHLEdBQUE5WCxFQUFBeVUsRUFBQUMsR0FHQSxTQUFBd0csR0FBQTNSLEdBQ0EsT0FBQUEsRUFBQWYsRUFBQSxFQUFBZSxFQUFBLElBQUFoQixLQU9BLFNBQUEyTSxHQUFBampCLEdBQ0EsY0FBQUEsUUFBQXNDLElBQUF0QyxFQUFBb3NCLEtBQ0FDLEdBQUFyc0IsS0FDQW9zQixLQUFBekwsY0FBQSxTQUFBN1EsR0FDQSxJQUFBNEMsRUFBQXNDLEVBQUFoVixHQUNBd2dCLEdBQUE5TixFQUFBNEUsTUFDQTVFLEVBQUFqRCxRQUFBLFNBQUF5QyxFQUFBdUcsR0FBd0MsT0FBQTNJLEVBQUF0QyxJQUFBaUwsRUFBQXZHLE9BeUV4QyxTQUFBbWEsR0FBQUMsR0FDQSxPQUFBNUwsR0FBQTRMLElBQUF0VyxFQUFBc1csR0FVQSxTQUFBQyxHQUFBemMsRUFBQS9CLEVBQUE2VixFQUFBNUUsR0FDQSxJQUFBd04sRUFBQS9zQixPQUFBWSxPQUFBNGlCLEdBQUF0aUIsV0FNQSxPQUxBNnJCLEVBQUFsVixLQUFBeEgsSUFBQXdILEtBQUEsRUFDQWtWLEVBQUFDLEtBQUEzYyxFQUNBMGMsRUFBQUUsTUFBQTNlLEVBQ0F5ZSxFQUFBckssVUFBQXlCLEVBQ0E0SSxFQUFBclAsT0FBQTZCLEVBQ0F3TixFQUlBLFNBQUFKLEtBQ0EsT0FBQTNCLFFBQUE4QixHQUFBOUwsS0FBQTRILE9BR0EsU0FBQXNFLEdBQUFILEVBQUEvVCxFQUFBdkcsR0FDQSxJQUlBMGEsRUFDQUMsRUFMQS9jLEVBQUEwYyxFQUFBQyxLQUNBMWUsRUFBQXllLEVBQUFFLE1BQ0EzdEIsRUFBQStRLEVBQUFsUSxJQUFBNlksR0FDQXRVLE9BQUE3QixJQUFBdkQsRUFHQSxHQUFBbVQsSUFBQXVFLEVBQUEsQ0FDQSxJQUFBdFMsRUFDQSxPQUFBcW9CLEVBRUF6ZSxFQUFBdUosTUFBQWYsR0FBQXhJLEVBQUF1SixNQUFBLEVBQUF4SCxFQUFBd0gsTUFDQXVWLEVBQUE5ZSxFQUFBc0IsT0FBQSxTQUFBNk0sRUFBQWlLLEdBQXFELFlBQUE3akIsSUFBQTRaLEdBQUFuZCxJQUFBb25CLElBQ3JEeUcsRUFBQUMsRUFBQW5ULGFBQUE1SixJQUFBLFNBQUFvTSxHQUE0RCxPQUFBQSxFQUFBLEtBQWdCNFEsT0FBQWpRLFFBQzVFMlAsRUFBQXJLLFlBQ0F5SyxFQUFBekssVUFBQTBLLEVBQUExSyxVQUFBcUssRUFBQXJLLGFBR0F5SyxFQUFBOWMsRUFBQXNSLE9BQUEzSSxHQUNBb1UsRUFBQTl0QixJQUFBZ1AsRUFBQXVKLEtBQUEsRUFBQXZKLEVBQUE4WSxNQUFBOVksRUFBQVAsSUFBQXpPLE9BQUF1RCxTQUdBLEdBQUE2QixFQUFBLENBQ0EsR0FBQStOLElBQUFuRSxFQUFBbk8sSUFBQWIsR0FBQSxHQUNBLE9BQUF5dEIsRUFFQUksRUFBQTljLEVBQ0ErYyxFQUFBOWUsRUFBQVAsSUFBQXpPLEdBQUEwWixFQUFBdkcsU0FFQTBhLEVBQUE5YyxFQUFBdEMsSUFBQWlMLEVBQUExSyxFQUFBdUosTUFDQXVWLEVBQUE5ZSxFQUFBUCxJQUFBTyxFQUFBdUosTUFBQW1CLEVBQUF2RyxJQUdBLE9BQUFzYSxFQUFBckssV0FDQXFLLEVBQUFsVixLQUFBc1YsRUFBQXRWLEtBQ0FrVixFQUFBQyxLQUFBRyxFQUNBSixFQUFBRSxNQUFBRyxFQUNBTCxFQUFBclAsWUFBQTdhLEVBQ0FrcUIsR0FFQUQsR0FBQUssRUFBQUMsR0FJQSxTQUFBRSxHQUFBQyxFQUFBalIsR0FDQWpYLEtBQUFtb0IsTUFBQUQsRUFDQWxvQixLQUFBb29CLFNBQUFuUixFQUNBalgsS0FBQXdTLEtBQUEwVixFQUFBMVYsS0EyREEsU0FBQTZWLEdBQUF6YSxHQUNBNU4sS0FBQW1vQixNQUFBdmEsRUFDQTVOLEtBQUF3UyxLQUFBNUUsRUFBQTRFLEtBeUJBLFNBQUE4VixHQUFBMWEsR0FDQTVOLEtBQUFtb0IsTUFBQXZhLEVBQ0E1TixLQUFBd1MsS0FBQTVFLEVBQUE0RSxLQXVCQSxTQUFBK1YsR0FBQTFoQixHQUNBN0csS0FBQW1vQixNQUFBdGhCLEVBQ0E3RyxLQUFBd1MsS0FBQTNMLEVBQUEyTCxLQXdEQSxTQUFBZ1csR0FBQXJVLEdBQ0EsSUFBQXNVLEVBQUFDLEdBQUF2VSxHQWlDQSxPQWhDQXNVLEVBQUFOLE1BQUFoVSxFQUNBc1UsRUFBQWpXLEtBQUEyQixFQUFBM0IsS0FDQWlXLEVBQUFULEtBQUEsV0FBcUMsT0FBQTdULEdBQ3JDc1UsRUFBQXhkLFFBQUEsV0FDQSxJQUFBMGQsRUFBQXhVLEVBQUFsSixRQUFBcEosTUFBQTdCLE1BRUEsT0FEQTJvQixFQUFBWCxLQUFBLFdBQTJDLE9BQUE3VCxFQUFBbEosV0FDM0MwZCxHQUVBRixFQUFBcHBCLElBQUEsU0FBQTdELEdBQXVDLE9BQUEyWSxFQUFBckosU0FBQXRQLElBQ3ZDaXRCLEVBQUEzZCxTQUFBLFNBQUF0UCxHQUE0QyxPQUFBMlksRUFBQTlVLElBQUE3RCxJQUM1Q2l0QixFQUFBaFQsWUFBQW1ULEdBQ0FILEVBQUE5UyxrQkFBQSxTQUFBalUsRUFBQXVKLEdBQTZELElBQUEwTyxFQUFBM1osS0FDN0QsT0FBQW1VLEVBQUExQixVQUFBLFNBQUFyRixFQUFBdUcsR0FBaUQsV0FBQWpTLEVBQUFpUyxFQUFBdkcsRUFBQXVNLElBQWtDMU8sSUFFbkZ3ZCxFQUFBcFIsbUJBQUEsU0FBQTlhLEVBQUEwTyxHQUNBLEdBQUExTyxJQUFBOFcsRUFBQSxDQUNBLElBQUE3SixFQUFBMkssRUFBQTJCLFdBQUF2WixFQUFBME8sR0FDQSxXQUFBd0ksRUFBQSxXQUNBLElBQUFsSyxFQUFBQyxFQUFBSyxPQUNBLElBQUFOLEVBQUFPLEtBQUEsQ0FDQSxJQUFBNkosRUFBQXBLLEVBQUFyTyxNQUFBLEdBQ0FxTyxFQUFBck8sTUFBQSxHQUFBcU8sRUFBQXJPLE1BQUEsR0FDQXFPLEVBQUFyTyxNQUFBLEdBQUF5WSxFQUVBLE9BQUFwSyxJQUdBLE9BQUE0SyxFQUFBMkIsV0FDQXZaLElBQUE2VyxFQUFBRCxFQUFBQyxFQUNBbkksSUFHQXdkLEVBSUEsU0FBQUksR0FBQTFVLEVBQUFtSyxFQUFBd0ssR0FDQSxJQUFBQyxFQUFBTCxHQUFBdlUsR0FnQ0EsT0EvQkE0VSxFQUFBdlcsS0FBQTJCLEVBQUEzQixLQUNBdVcsRUFBQTFwQixJQUFBLFNBQUE3RCxHQUF5QyxPQUFBMlksRUFBQTlVLElBQUE3RCxJQUN6Q3V0QixFQUFBanVCLElBQUEsU0FBQVUsRUFBQWdlLEdBQ0EsSUFBQXBNLEVBQUErRyxFQUFBclosSUFBQVUsRUFBQW1XLEdBQ0EsT0FBQXZFLElBQUF1RSxFQUNBNkgsRUFDQThFLEVBQUFsa0IsS0FBQTB1QixFQUFBMWIsRUFBQTVSLEVBQUEyWSxJQUVBNFUsRUFBQXBULGtCQUFBLFNBQUFqVSxFQUFBdUosR0FBK0QsSUFBQTBPLEVBQUEzWixLQUMvRCxPQUFBbVUsRUFBQTFCLFVBQ0EsU0FBQXJGLEVBQUF1RyxFQUFBclosR0FBNEIsV0FBQW9ILEVBQUE0YyxFQUFBbGtCLEtBQUEwdUIsRUFBQTFiLEVBQUF1RyxFQUFBclosR0FBQXFaLEVBQUFnRyxJQUM1QjFPLElBR0E4ZCxFQUFBMVIsbUJBQUEsU0FBQTlhLEVBQUEwTyxHQUNBLElBQUF6QixFQUFBMkssRUFBQTJCLFdBQUF6QyxFQUFBcEksR0FDQSxXQUFBd0ksRUFBQSxXQUNBLElBQUFsSyxFQUFBQyxFQUFBSyxPQUNBLEdBQUFOLEVBQUFPLEtBQ0EsT0FBQVAsRUFFQSxJQUFBNk4sRUFBQTdOLEVBQUFyTyxNQUNBTSxFQUFBNGIsRUFBQSxHQUNBLE9BQUExRCxFQUNBblgsRUFDQWYsRUFDQThpQixFQUFBbGtCLEtBQUEwdUIsRUFBQTFSLEVBQUEsR0FBQTViLEVBQUEyWSxHQUNBNUssTUFJQXdmLEVBSUEsU0FBQUMsR0FBQTdVLEVBQUE4QyxHQUNBLElBQUEwUixFQUFBRCxHQUFBdlUsR0FzQkEsT0FyQkF3VSxFQUFBUixNQUFBaFUsRUFDQXdVLEVBQUFuVyxLQUFBMkIsRUFBQTNCLEtBQ0FtVyxFQUFBMWQsUUFBQSxXQUE0QyxPQUFBa0osR0FDNUNBLEVBQUE2VCxPQUNBVyxFQUFBWCxLQUFBLFdBQ0EsSUFBQVMsRUFBQUQsR0FBQXJVLEdBRUEsT0FEQXNVLEVBQUF4ZCxRQUFBLFdBQTRDLE9BQUFrSixFQUFBNlQsUUFDNUNTLElBR0FFLEVBQUE3dEIsSUFBQSxTQUFBVSxFQUFBZ2UsR0FDTyxPQUFBckYsRUFBQXJaLElBQUFtYyxFQUFBemIsR0FBQSxFQUFBQSxFQUFBZ2UsSUFDUG1QLEVBQUF0cEIsSUFBQSxTQUFBN0QsR0FDTyxPQUFBMlksRUFBQTlVLElBQUE0WCxFQUFBemIsR0FBQSxFQUFBQSxJQUNQbXRCLEVBQUE3ZCxTQUFBLFNBQUE1UCxHQUFrRCxPQUFBaVosRUFBQXJKLFNBQUE1UCxJQUNsRHl0QixFQUFBbFQsWUFBQW1ULEdBQ0FELEVBQUFsVyxVQUFBLFNBQUEvUSxFQUFBdUosR0FBeUQsSUFBQTBPLEVBQUEzWixLQUN6RCxPQUFBbVUsRUFBQTFCLFVBQUEsU0FBQXJGLEVBQUF1RyxHQUFpRCxPQUFBalMsRUFBQTBMLEVBQUF1RyxFQUFBZ0csS0FBd0IxTyxJQUV6RTBkLEVBQUE3UyxXQUNBLFNBQUF2WixFQUFBME8sR0FBZ0MsT0FBQWtKLEVBQUEyQixXQUFBdlosR0FBQTBPLElBQ2hDMGQsRUFJQSxTQUFBTSxHQUFBOVUsRUFBQTFKLEVBQUFxZSxFQUFBN1IsR0FDQSxJQUFBaVMsRUFBQVIsR0FBQXZVLEdBd0NBLE9BdkNBOEMsSUFDQWlTLEVBQUE3cEIsSUFBQSxTQUFBN0QsR0FDQSxJQUFBNFIsRUFBQStHLEVBQUFyWixJQUFBVSxFQUFBbVcsR0FDQSxPQUFBdkUsSUFBQXVFLEtBQUFsSCxFQUFBclEsS0FBQTB1QixFQUFBMWIsRUFBQTVSLEVBQUEyWSxJQUVBK1UsRUFBQXB1QixJQUFBLFNBQUFVLEVBQUFnZSxHQUNBLElBQUFwTSxFQUFBK0csRUFBQXJaLElBQUFVLEVBQUFtVyxHQUNBLE9BQUF2RSxJQUFBdUUsR0FBQWxILEVBQUFyUSxLQUFBMHVCLEVBQUExYixFQUFBNVIsRUFBQTJZLEdBQ0EvRyxFQUFBb00sSUFHQTBQLEVBQUF2VCxrQkFBQSxTQUFBalUsRUFBQXVKLEdBQStELElBQUEwTyxFQUFBM1osS0FDL0R5WixFQUFBLEVBT0EsT0FOQXRGLEVBQUExQixVQUFBLFNBQUFyRixFQUFBdUcsRUFBQXJaLEdBQ0EsR0FBQW1RLEVBQUFyUSxLQUFBMHVCLEVBQUExYixFQUFBdUcsRUFBQXJaLEdBRUEsT0FEQW1mLElBQ0EvWCxFQUFBMEwsRUFBQTZKLEVBQUF0RCxFQUFBOEYsRUFBQSxFQUFBRSxJQUVPMU8sR0FDUHdPLEdBRUF5UCxFQUFBN1IsbUJBQUEsU0FBQTlhLEVBQUEwTyxHQUNBLElBQUF6QixFQUFBMkssRUFBQTJCLFdBQUF6QyxFQUFBcEksR0FDQXdPLEVBQUEsRUFDQSxXQUFBaEcsRUFBQSxXQUNBLFFBQ0EsSUFBQWxLLEVBQUFDLEVBQUFLLE9BQ0EsR0FBQU4sRUFBQU8sS0FDQSxPQUFBUCxFQUVBLElBQUE2TixFQUFBN04sRUFBQXJPLE1BQ0FNLEVBQUE0YixFQUFBLEdBQ0FsYyxFQUFBa2MsRUFBQSxHQUNBLEdBQUEzTSxFQUFBclEsS0FBQTB1QixFQUFBNXRCLEVBQUFNLEVBQUEyWSxHQUNBLE9BQUFULEVBQUFuWCxFQUFBMGEsRUFBQXpiLEVBQUFpZSxJQUFBdmUsRUFBQXFPLE9BS0EyZixFQStCQSxTQUFBQyxHQUFBaFYsRUFBQTdJLEVBQUFDLEVBQUEwTCxHQUNBLElBQUFtUyxFQUFBalYsRUFBQTNCLEtBZUEsUUFYQWhWLElBQUE4TixJQUNBQSxHQUFBLFFBRUE5TixJQUFBK04sSUFDQUEsSUFBQXNOLElBQ0F0TixFQUFBNmQsRUFFQTdkLEdBQUEsR0FJQXVILEVBQUF4SCxFQUFBQyxFQUFBNmQsR0FDQSxPQUFBalYsRUFHQSxJQUFBa1YsRUFBQXRXLEVBQUF6SCxFQUFBOGQsR0FDQUUsRUFBQXJXLEVBQUExSCxFQUFBNmQsR0FLQSxHQUFBQyxNQUFBQyxLQUNBLE9BQUFILEdBQUFoVixFQUFBSSxRQUFBa0IsY0FBQW5LLEVBQUFDLEVBQUEwTCxHQU9BLElBQ0FzUyxFQURBQyxFQUFBRixFQUFBRCxFQUVBRyxPQUNBRCxFQUFBQyxFQUFBLElBQUFBLEdBR0EsSUFBQUMsRUFBQWYsR0FBQXZVLEdBNkRBLE9BekRBc1YsRUFBQWpYLEtBQUEsSUFBQStXLElBQUFwVixFQUFBM0IsTUFBQStXLFFBQUEvckIsR0FFQXlaLEdBQUFqQixHQUFBN0IsSUFBQW9WLEdBQUEsSUFDQUUsRUFBQTN1QixJQUFBLFNBQUErSSxFQUFBMlYsR0FFQSxPQURBM1YsRUFBQThPLEVBQUEzUyxLQUFBNkQsS0FDQSxHQUFBQSxFQUFBMGxCLEVBQ0FwVixFQUFBclosSUFBQStJLEVBQUF3bEIsRUFBQTdQLEdBQ0FBLElBSUFpUSxFQUFBOVQsa0JBQUEsU0FBQWpVLEVBQUF1SixHQUF3RCxJQUFBME8sRUFBQTNaLEtBQ3hELE9BQUF1cEIsRUFDQSxTQUVBLEdBQUF0ZSxFQUNBLE9BQUFqTCxLQUFBeVYsY0FBQWhELFVBQUEvUSxFQUFBdUosR0FFQSxJQUFBeWUsRUFBQSxFQUNBQyxHQUFBLEVBQ0FsUSxFQUFBLEVBUUEsT0FQQXRGLEVBQUExQixVQUFBLFNBQUFyRixFQUFBdUcsR0FDQSxJQUFBZ1csT0FBQUQsSUFBQUwsR0FFQSxPQURBNVAsS0FDQSxJQUFBL1gsRUFBQTBMLEVBQUE2SixFQUFBdEQsRUFBQThGLEVBQUEsRUFBQUUsSUFDQUYsSUFBQThQLElBR0E5UCxHQUdBZ1EsRUFBQXBTLG1CQUFBLFNBQUE5YSxFQUFBME8sR0FDQSxPQUFBc2UsR0FBQXRlLEVBQ0EsT0FBQWpMLEtBQUF5VixjQUFBSyxXQUFBdlosRUFBQTBPLEdBR0EsSUFBQXpCLEVBQUEsSUFBQStmLEdBQUFwVixFQUFBMkIsV0FBQXZaLEVBQUEwTyxHQUNBeWUsRUFBQSxFQUNBalEsRUFBQSxFQUNBLFdBQUFoRyxFQUFBLFdBQ0EsS0FBQWlXLElBQUFMLEdBQ0E3ZixFQUFBSyxPQUVBLEtBQUE0UCxFQUFBOFAsRUFDQSxPQXI4RllydUIsV0FBQXNDLEVBQUFzTSxNQUFBLEdBdThGWixJQUFBUCxFQUFBQyxFQUFBSyxPQUNBLE9BQUFvTixHQUFBMWEsSUFBQTZXLEVBQ0E3SixFQUVBbUssRUFBQW5YLEVBQUFrZCxFQUFBLEVBRFNsZCxJQUFBNFcsT0FDVDNWLEVBRUErTCxFQUFBck8sTUFBQSxHQUZBcU8sTUFPQWtnQixFQTZDQSxTQUFBRyxHQUFBelYsRUFBQTFKLEVBQUFxZSxFQUFBN1IsR0FDQSxJQUFBNFMsRUFBQW5CLEdBQUF2VSxHQTRDQSxPQTNDQTBWLEVBQUFsVSxrQkFBQSxTQUFBalUsRUFBQXVKLEdBQTZELElBQUEwTyxFQUFBM1osS0FDN0QsR0FBQWlMLEVBQ0EsT0FBQWpMLEtBQUF5VixjQUFBaEQsVUFBQS9RLEVBQUF1SixHQUVBLElBQUEwZSxHQUFBLEVBQ0FsUSxFQUFBLEVBT0EsT0FOQXRGLEVBQUExQixVQUFBLFNBQUFyRixFQUFBdUcsRUFBQXJaLEdBQ0EsSUFBQXF2QixPQUFBbGYsRUFBQXJRLEtBQUEwdUIsRUFBQTFiLEVBQUF1RyxFQUFBclosSUFFQSxPQURBbWYsSUFDQS9YLEVBQUEwTCxFQUFBNkosRUFBQXRELEVBQUE4RixFQUFBLEVBQUFFLEtBR0FGLEdBRUFvUSxFQUFBeFMsbUJBQUEsU0FBQTlhLEVBQUEwTyxHQUErRCxJQUFBME8sRUFBQTNaLEtBQy9ELEdBQUFpTCxFQUNBLE9BQUFqTCxLQUFBeVYsY0FBQUssV0FBQXZaLEVBQUEwTyxHQUVBLElBQUF6QixFQUFBMkssRUFBQTJCLFdBQUF6QyxFQUFBcEksR0FDQTZlLEdBQUEsRUFDQXJRLEVBQUEsRUFDQSxXQUFBaEcsRUFBQSxXQUNBLElBQUFsSyxFQUFBb0ssRUFBQXZHLEVBQ0EsR0FFQSxJQURBN0QsRUFBQUMsRUFBQUssUUFDQUMsS0FDQSxPQUFBbU4sR0FBQTFhLElBQUE2VyxFQUNBN0osRUFFQW1LLEVBQUFuWCxFQUFBa2QsSUFEYWxkLElBQUE0VyxPQUNiM1YsRUFFQStMLEVBQUFyTyxNQUFBLEdBRkFxTyxHQUtBLElBQUE2TixFQUFBN04sRUFBQXJPLE1BQ0F5WSxFQUFBeUQsRUFBQSxHQUNBaEssRUFBQWdLLEVBQUEsR0FDQTBTLE1BQUFyZixFQUFBclEsS0FBQTB1QixFQUFBMWIsRUFBQXVHLEVBQUFnRyxVQUNTbVEsR0FDVCxPQUFBdnRCLElBQUE4VyxFQUFBOUosRUFDQW1LLEVBQUFuWCxFQUFBb1gsRUFBQXZHLEVBQUE3RCxNQUdBc2dCLEVBb0RBLFNBQUFFLEdBQUE1VixFQUFBNlYsRUFBQS9TLEdBQ0EsSUFBQWdULEVBQUF2QixHQUFBdlUsR0EwQ0EsT0F6Q0E4VixFQUFBdFUsa0JBQUEsU0FBQWpVLEVBQUF1SixHQUNBLElBQUF3TyxFQUFBLEVBQ0F5USxHQUFBLEVBWUEsT0FYQSxTQUFBQyxFQUFBdmMsRUFBQXdjLEdBQTZDLElBQUF6USxFQUFBM1osS0FDN0M0TixFQUFBNkUsVUFBQSxTQUFBckYsRUFBQXVHLEdBTUEsUUFMQXFXLEdBQUFJLEVBQUFKLElBQUFoYSxFQUFBNUMsR0FDQStjLEVBQUEvYyxFQUFBZ2QsRUFBQSxJQUNXLElBQUExb0IsRUFBQTBMLEVBQUE2SixFQUFBdEQsRUFBQThGLElBQUFFLEtBQ1h1USxHQUFBLElBRUFBLEdBQ1NqZixHQUVUa2YsQ0FBQWhXLEVBQUEsR0FDQXNGLEdBRUF3USxFQUFBNVMsbUJBQUEsU0FBQTlhLEVBQUEwTyxHQUNBLElBQUF6QixFQUFBMkssRUFBQTJCLFdBQUF2WixFQUFBME8sR0FDQWtZLEtBQ0ExSixFQUFBLEVBQ0EsV0FBQWhHLEVBQUEsV0FDQSxLQUFBakssR0FBQSxDQUNBLElBQUFELEVBQUFDLEVBQUFLLE9BQ0EsUUFBQU4sRUFBQU8sS0FBQSxDQUlBLElBQUFzRCxFQUFBN0QsRUFBQXJPLE1BSUEsR0FIQXFCLElBQUE4VyxJQUNBakcsSUFBQSxJQUVBNGMsS0FBQTdHLEVBQUF2aUIsT0FBQW9wQixLQUFBaGEsRUFBQTVDLEdBSUEsT0FBQTZKLEVBQUExTixFQUFBbUssRUFBQW5YLEVBQUFrZCxJQUFBck0sRUFBQTdELEdBSEE0WixFQUFBcGYsS0FBQXlGLEdBQ0FBLEVBQUE0RCxFQUFBMEksV0FBQXZaLEVBQUEwTyxRQVRBekIsRUFBQTJaLEVBQUFwQixNQWNBLE9BeG9HWTdtQixXQUFBc0MsRUFBQXNNLE1BQUEsTUEyb0dabWdCLEVBNENBLFNBQUE3TCxHQUFBakssRUFBQStKLEVBQUFJLEdBQ0FKLElBQ0FBLEVBQUFtTSxJQUVBLElBQUFDLEVBQUFuYSxFQUFBZ0UsR0FDQXRRLEVBQUEsRUFDQWdELEVBQUFzTixFQUFBSSxRQUFBdkosSUFDQSxTQUFBb0MsRUFBQXVHLEdBQXVCLE9BQUFBLEVBQUF2RyxFQUFBdkosSUFBQXlhLElBQUFsUixFQUFBdUcsRUFBQVEsR0FBQS9HLEtBQ3ZCd0ksVUFNQSxPQUxBL08sRUFBQVMsS0FBQSxTQUFBN0ksRUFBQW1ELEdBQWtDLE9BQUFzYyxFQUFBemYsRUFBQSxHQUFBbUQsRUFBQSxLQUFBbkQsRUFBQSxHQUFBbUQsRUFBQSxLQUE2QytJLFFBQy9FMmYsRUFDQSxTQUFBbGQsRUFBQW5ULEdBQXVCNE0sRUFBQTVNLEdBQUEyRyxPQUFBLEdBQ3ZCLFNBQUF3TSxFQUFBblQsR0FBdUI0TSxFQUFBNU0sR0FBQW1ULEVBQUEsS0FFdkJrZCxFQUFBbGEsRUFBQXZKLEdBQ0F5SixFQUFBNkQsR0FBQTVELEVBQUExSixHQUNBNkosRUFBQTdKLEdBSUEsU0FBQTBqQixHQUFBcFcsRUFBQStKLEVBQUFJLEdBSUEsR0FIQUosSUFDQUEsRUFBQW1NLElBRUEvTCxFQUFBLENBQ0EsSUFBQWxILEVBQUFqRCxFQUFBSSxRQUNBdkosSUFBQSxTQUFBb0MsRUFBQXVHLEdBQThCLE9BQUF2RyxFQUFBa1IsRUFBQWxSLEVBQUF1RyxFQUFBUSxNQUM5QmxOLE9BQUEsU0FBQXhJLEVBQUFtRCxHQUFpQyxPQUFBNG9CLEdBQUF0TSxFQUFBemYsRUFBQSxHQUFBbUQsRUFBQSxJQUFBQSxFQUFBbkQsSUFDakMsT0FBQTJZLEtBQUEsR0FFQSxPQUFBakQsRUFBQWxOLE9BQUEsU0FBQXhJLEVBQUFtRCxHQUE4QyxPQUFBNG9CLEdBQUF0TSxFQUFBemYsRUFBQW1ELEtBQUFuRCxJQUk5QyxTQUFBK3JCLEdBQUF0TSxFQUFBemYsRUFBQW1ELEdBQ0EsSUFBQTZvQixFQUFBdk0sRUFBQXRjLEVBQUFuRCxHQUdBLFdBQUFnc0IsR0FBQTdvQixJQUFBbkQsU0FBQWpCLElBQUFvRSxHQUFBLE9BQUFBLFVBQUE2b0IsRUFBQSxFQUlBLFNBQUFDLEdBQUFDLEVBQUFDLEVBQUFqTixHQUNBLElBQUFrTixFQUFBbkMsR0FBQWlDLEdBa0RBLE9BakRBRSxFQUFBclksS0FBQSxJQUFBNkQsR0FBQXNILEdBQUEzUyxJQUFBLFNBQUEvUSxHQUE2RCxPQUFBQSxFQUFBdVksT0FBY3RULE1BRzNFMnJCLEVBQUFwWSxVQUFBLFNBQUEvUSxFQUFBdUosR0FpQkEsSUFIQSxJQUNBMUIsRUFEQUMsRUFBQXhKLEtBQUE4VixXQUFBMUMsRUFBQW5JLEdBRUF3TyxFQUFBLElBQ0FsUSxFQUFBQyxFQUFBSyxRQUFBQyxPQUNBLElBQUFwSSxFQUFBNkgsRUFBQXJPLE1BQUF1ZSxJQUFBelosUUFJQSxPQUFBeVosR0FFQW9SLEVBQUF4VCxtQkFBQSxTQUFBOWEsRUFBQTBPLEdBQ0EsSUFBQTZmLEVBQUFuTixFQUFBM1MsSUFBQSxTQUFBL1EsR0FDUyxPQUFBQSxFQUFBOFYsRUFBQTlWLEdBQUFpYSxFQUFBakosRUFBQWhSLEVBQUFnUixVQUFBaFIsS0FFVHdmLEVBQUEsRUFDQXNSLEdBQUEsRUFDQSxXQUFBdFgsRUFBQSxXQUNBLElBQUF1WCxFQUtBLE9BSkFELElBQ0FDLEVBQUFGLEVBQUE5ZixJQUFBLFNBQUEvUSxHQUE4QyxPQUFBQSxFQUFBNFAsU0FDOUNraEIsRUFBQUMsRUFBQTdmLEtBQUEsU0FBQW5QLEdBQTRDLE9BQUFBLEVBQUE4TixRQUU1Q2loQixHQTF3R1k3dkIsV0FBQXNDLEVBQUFzTSxNQUFBLEdBNndHWjRKLEVBQ0FuWCxFQUNBa2QsSUFDQW1SLEVBQUEvb0IsTUFBQSxLQUFBbXBCLEVBQUFoZ0IsSUFBQSxTQUFBaFAsR0FBcUQsT0FBQUEsRUFBQWQsYUFJckQydkIsRUFNQSxTQUFBSSxHQUFBcmQsRUFBQTRHLEdBQ0EsT0FBQXdCLEdBQUFwSSxHQUFBNEcsRUFBQTVHLEVBQUF0TSxZQUFBa1QsR0FHQSxTQUFBMFcsR0FBQTlULEdBQ0EsR0FBQUEsSUFBQXpjLE9BQUF5YyxHQUNBLFVBQUFyWixVQUFBLDBCQUFBcVosR0FJQSxTQUFBK1QsR0FBQXZkLEdBRUEsT0FEQThOLEdBQUE5TixFQUFBNEUsTUFDQUQsRUFBQTNFLEdBR0EsU0FBQXdkLEdBQUFqWCxHQUNBLE9BQUFoRSxFQUFBZ0UsR0FBQWpFLEVBQ0FJLEVBQUE2RCxHQUFBOUQsRUFDQUcsRUFHQSxTQUFBa1ksR0FBQXZVLEdBQ0EsT0FBQXhaLE9BQUFZLFFBRUE0VSxFQUFBZ0UsR0FBQS9ELEVBQ0FFLEVBQUE2RCxHQUFBNUQsRUFDQUcsR0FDQTdVLFdBSUEsU0FBQStzQixLQUNBLE9BQUE1b0IsS0FBQW1vQixNQUFBMVMsYUFDQXpWLEtBQUFtb0IsTUFBQTFTLGNBQ0F6VixLQUFBd1MsS0FBQXhTLEtBQUFtb0IsTUFBQTNWLEtBQ0F4UyxNQUVBaVEsRUFBQXBVLFVBQUE0WixZQUFBcmIsS0FBQTRGLE1BSUEsU0FBQXFxQixHQUFBNXJCLEVBQUFtRCxHQUNBLE9BQUFuRCxFQUFBbUQsRUFBQSxFQUFBbkQsRUFBQW1ELEdBQUEsSUFHQSxTQUFBdWIsR0FBQWYsR0FDQSxJQUFBeE8sRUFBQXNHLEVBQUFrSSxHQUNBLElBQUF4TyxFQUFBLENBR0EsSUFBQXlHLEVBQUErSCxHQUNBLFVBQUFyZSxVQUFBLG9DQUFBcWUsR0FFQXhPLEVBQUFzRyxFQUFBbkUsRUFBQXFNLElBRUEsT0FBQXhPLEVBS0EsU0FBQXlkLEdBQUFDLEVBQUE5d0IsR0FDQSxJQUFBK3dCLEVBRUFDLEVBQUEsU0FBQS9rQixHQUNBLEdBQUFBLGFBQUEra0IsRUFDQSxPQUFBL2tCLEVBRUEsS0FBQXpHLGdCQUFBd3JCLEdBQ0EsV0FBQUEsRUFBQS9rQixHQUVBLElBQUE4a0IsRUFBQSxDQUNBQSxHQUFBLEVBQ0EsSUFBQTVrQixFQUFBaE0sT0FBQWdNLEtBQUEya0IsSUFnSUEsU0FBQXp2QixFQUFBNHZCLEdBQ0EsSUFDQUEsRUFBQTlnQixRQU1BLFNBQUE5TyxFQUFBckIsR0FDQUcsT0FBQUMsZUFBQWlCLEVBQUFyQixHQUNBTSxJQUFBLFdBQ0EsT0FBQWtGLEtBQUFsRixJQUFBTixJQUVBa08sSUFBQSxTQUFBeE4sR0FDQTRkLEdBQUE5WSxLQUFBcWQsVUFBQSxzQ0FDQXJkLEtBQUEwSSxJQUFBbE8sRUFBQVUsT0FiQU8sVUFBQStCLEVBQUEzQixJQUNLLE1BQUF3RyxLQWxJTHFwQixDQUFBQyxFQUFBaGxCLEdBQ0FnbEIsRUFBQW5aLEtBQUE3TCxFQUFBL0YsT0FDQStxQixFQUFBQyxNQUFBcHhCLEVBQ0FteEIsRUFBQWxWLE1BQUE5UCxFQUNBZ2xCLEVBQUFFLGVBQUFQLEVBRUF0ckIsS0FBQTJuQixLQUFBeFosR0FBQTFILElBR0FrbEIsRUFBQUgsRUFBQTN2QixVQUFBbEIsT0FBQVksT0FBQXV3QixJQUdBLE9BRkFILEVBQUFycUIsWUFBQWtxQixFQUVBQSxFQXIvQkE1YixFQUFBdU8sR0FBQWhRLElBY0FnUSxHQUFBbFEsR0FBQSxXQUNBLE9BQUFqTyxLQUFBOEIsWUFHQXFjLEdBQUF0aUIsVUFBQWtHLFNBQUEsV0FDQSxPQUFBL0IsS0FBQXdWLFdBQUEsZUFBMEMsTUFLMUMySSxHQUFBdGlCLFVBQUFmLElBQUEsU0FBQTZZLEVBQUE2RixHQUNBLElBQUEzVixFQUFBN0QsS0FBQTJuQixLQUFBN3NCLElBQUE2WSxHQUNBLFlBQUFuVyxJQUFBcUcsRUFBQTdELEtBQUE0bkIsTUFBQTlzQixJQUFBK0ksR0FBQSxHQUFBMlYsR0FLQTJFLEdBQUF0aUIsVUFBQXVoQixNQUFBLFdBQ0EsV0FBQXBkLEtBQUF3UyxLQUNBeFMsS0FFQUEsS0FBQXFkLFdBQ0FyZCxLQUFBd1MsS0FBQSxFQUNBeFMsS0FBQTJuQixLQUFBdkssUUFDQXBkLEtBQUE0bkIsTUFBQXhLLFFBQ0FwZCxNQUVBc25CLE1BR0FuSixHQUFBdGlCLFVBQUE2TSxJQUFBLFNBQUFpTCxFQUFBdkcsR0FDQSxPQUFBeWEsR0FBQTduQixLQUFBMlQsRUFBQXZHLElBR0ErUSxHQUFBdGlCLFVBQUF5Z0IsT0FBQSxTQUFBM0ksR0FDQSxPQUFBa1UsR0FBQTduQixLQUFBMlQsRUFBQWhDLElBR0F3TSxHQUFBdGlCLFVBQUE0aUIsV0FBQSxXQUNBLE9BQUF6ZSxLQUFBMm5CLEtBQUFsSixjQUFBemUsS0FBQTRuQixNQUFBbkosY0FHQU4sR0FBQXRpQixVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBQTRELElBQUEwTyxFQUFBM1osS0FDNUQsT0FBQUEsS0FBQTRuQixNQUFBblYsVUFDQSxTQUFBMkUsR0FBMEIsT0FBQUEsR0FBQTFWLEVBQUEwVixFQUFBLEdBQUFBLEVBQUEsR0FBQXVDLElBQzFCMU8sSUFJQWtULEdBQUF0aUIsVUFBQWlhLFdBQUEsU0FBQXZaLEVBQUEwTyxHQUNBLE9BQUFqTCxLQUFBNG5CLE1BQUEvUyxlQUFBaUIsV0FBQXZaLEVBQUEwTyxJQUdBa1QsR0FBQXRpQixVQUFBNmlCLGNBQUEsU0FBQUksR0FDQSxHQUFBQSxJQUFBOWUsS0FBQXFkLFVBQ0EsT0FBQXJkLEtBRUEsSUFBQThuQixFQUFBOW5CLEtBQUEybkIsS0FBQWpKLGNBQUFJLEdBQ0FpSixFQUFBL25CLEtBQUE0bkIsTUFBQWxKLGNBQUFJLEdBQ0EsT0FBQUEsRUFNQTJJLEdBQUFLLEVBQUFDLEVBQUFqSixFQUFBOWUsS0FBQXFZLFNBTEFyWSxLQUFBcWQsVUFBQXlCLEVBQ0E5ZSxLQUFBMm5CLEtBQUFHLEVBQ0E5bkIsS0FBQTRuQixNQUFBRyxFQUNBL25CLE9BVUFtZSxHQUFBb0osZ0JBRUFwSixHQUFBdGlCLFVBQUF1VixJQUFBLEVBQ0ErTSxHQUFBdGlCLFVBQUEsT0FBQXNpQixHQUFBdGlCLFVBQUF5Z0IsT0E4REExTSxFQUFBcVksR0FBQTdYLEdBT0E2WCxHQUFBcHNCLFVBQUFmLElBQUEsU0FBQVUsRUFBQWdlLEdBQ0EsT0FBQXhaLEtBQUFtb0IsTUFBQXJ0QixJQUFBVSxFQUFBZ2UsSUFHQXlPLEdBQUFwc0IsVUFBQXdELElBQUEsU0FBQTdELEdBQ0EsT0FBQXdFLEtBQUFtb0IsTUFBQTlvQixJQUFBN0QsSUFHQXlzQixHQUFBcHNCLFVBQUFrd0IsU0FBQSxXQUNBLE9BQUEvckIsS0FBQW1vQixNQUFBNEQsWUFHQTlELEdBQUFwc0IsVUFBQW9QLFFBQUEsV0FBb0QsSUFBQTBPLEVBQUEzWixLQUNwRDJvQixFQUFBSyxHQUFBaHBCLE1BQUEsR0FJQSxPQUhBQSxLQUFBb29CLFdBQ0FPLEVBQUFvRCxTQUFBLFdBQWlELE9BQUFwUyxFQUFBd08sTUFBQTVULFFBQUF0SixZQUVqRDBkLEdBR0FWLEdBQUFwc0IsVUFBQW1QLElBQUEsU0FBQXNULEVBQUF3SyxHQUErRCxJQUFBblAsRUFBQTNaLEtBQy9EK29CLEVBQUFGLEdBQUE3b0IsS0FBQXNlLEVBQUF3SyxHQUlBLE9BSEE5b0IsS0FBQW9vQixXQUNBVyxFQUFBZ0QsU0FBQSxXQUErQyxPQUFBcFMsRUFBQXdPLE1BQUE1VCxRQUFBdkosSUFBQXNULEVBQUF3SyxLQUUvQ0MsR0FHQWQsR0FBQXBzQixVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBQWlFLElBQ2pFcUgsRUFEaUVxSCxFQUFBM1osS0FFakUsT0FBQUEsS0FBQW1vQixNQUFBMVYsVUFDQXpTLEtBQUFvb0IsU0FDQSxTQUFBaGIsRUFBQXVHLEdBQTJCLE9BQUFqUyxFQUFBMEwsRUFBQXVHLEVBQUFnRyxLQUMzQnJILEVBQUFySCxFQUFBa2dCLEdBQUFuckIsTUFBQSxFQUNBLFNBQUFvTixHQUEwQixPQUFBMUwsRUFBQTBMLEVBQUFuQyxJQUFBcUgsTUFBQXFILEtBQzFCMU8sSUFJQWdkLEdBQUFwc0IsVUFBQWlhLFdBQUEsU0FBQXZaLEVBQUEwTyxHQUNBLEdBQUFqTCxLQUFBb29CLFNBQ0EsT0FBQXBvQixLQUFBbW9CLE1BQUFyUyxXQUFBdlosRUFBQTBPLEdBRUEsSUFBQXpCLEVBQUF4SixLQUFBbW9CLE1BQUFyUyxXQUFBMUMsRUFBQW5JLEdBQ0FxSCxFQUFBckgsRUFBQWtnQixHQUFBbnJCLE1BQUEsRUFDQSxXQUFBeVQsRUFBQSxXQUNBLElBQUFsSyxFQUFBQyxFQUFBSyxPQUNBLE9BQUFOLEVBQUFPLEtBQUFQLEVBQ0FtSyxFQUFBblgsRUFBQTBPLElBQUFxSCxNQUFBL0ksRUFBQXJPLE1BQUFxTyxNQUlBMGUsR0FBQXBzQixVQUFBdVYsSUFBQSxFQUdBeEIsRUFBQXlZLEdBQUE5WCxHQU1BOFgsR0FBQXhzQixVQUFBaVAsU0FBQSxTQUFBNVAsR0FDQSxPQUFBOEUsS0FBQW1vQixNQUFBcmQsU0FBQTVQLElBR0FtdEIsR0FBQXhzQixVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBQW1FLElBQUEwTyxFQUFBM1osS0FDbkV5WixFQUFBLEVBQ0EsT0FBQXpaLEtBQUFtb0IsTUFBQTFWLFVBQUEsU0FBQXJGLEdBQWdELE9BQUExTCxFQUFBMEwsRUFBQXFNLElBQUFFLElBQW1DMU8sSUFHbkZvZCxHQUFBeHNCLFVBQUFpYSxXQUFBLFNBQUF2WixFQUFBME8sR0FDQSxJQUFBekIsRUFBQXhKLEtBQUFtb0IsTUFBQXJTLFdBQUExQyxFQUFBbkksR0FDQXdPLEVBQUEsRUFDQSxXQUFBaEcsRUFBQSxXQUNBLElBQUFsSyxFQUFBQyxFQUFBSyxPQUNBLE9BQUFOLEVBQUFPLEtBQUFQLEVBQ0FtSyxFQUFBblgsRUFBQWtkLElBQUFsUSxFQUFBck8sTUFBQXFPLE1BTUFxRyxFQUFBMFksR0FBQTVYLEdBTUE0WCxHQUFBenNCLFVBQUF3RCxJQUFBLFNBQUE3RCxHQUNBLE9BQUF3RSxLQUFBbW9CLE1BQUFyZCxTQUFBdFAsSUFHQThzQixHQUFBenNCLFVBQUE0VyxVQUFBLFNBQUEvUSxFQUFBdUosR0FBK0QsSUFBQTBPLEVBQUEzWixLQUMvRCxPQUFBQSxLQUFBbW9CLE1BQUExVixVQUFBLFNBQUFyRixHQUFnRCxPQUFBMUwsRUFBQTBMLElBQUF1TSxJQUF3QjFPLElBR3hFcWQsR0FBQXpzQixVQUFBaWEsV0FBQSxTQUFBdlosRUFBQTBPLEdBQ0EsSUFBQXpCLEVBQUF4SixLQUFBbW9CLE1BQUFyUyxXQUFBMUMsRUFBQW5JLEdBQ0EsV0FBQXdJLEVBQUEsV0FDQSxJQUFBbEssRUFBQUMsRUFBQUssT0FDQSxPQUFBTixFQUFBTyxLQUFBUCxFQUNBbUssRUFBQW5YLEVBQUFnTixFQUFBck8sTUFBQXFPLEVBQUFyTyxNQUFBcU8sTUFNQXFHLEVBQUEyWSxHQUFBblksR0FNQW1ZLEdBQUExc0IsVUFBQWtaLFNBQUEsV0FDQSxPQUFBL1UsS0FBQW1vQixNQUFBNVQsU0FHQWdVLEdBQUExc0IsVUFBQTRXLFVBQUEsU0FBQS9RLEVBQUF1SixHQUFxRSxJQUFBME8sRUFBQTNaLEtBQ3JFLE9BQUFBLEtBQUFtb0IsTUFBQTFWLFVBQUEsU0FBQTJFLEdBR0EsR0FBQUEsRUFBQSxDQUNBOFQsR0FBQTlULEdBQ0EsSUFBQTRVLEVBQUFoYyxFQUFBb0gsR0FDQSxPQUFBMVYsRUFDQXNxQixFQUFBNVUsRUFBQXRjLElBQUEsR0FBQXNjLEVBQUEsR0FDQTRVLEVBQUE1VSxFQUFBdGMsSUFBQSxHQUFBc2MsRUFBQSxHQUNBdUMsS0FHTzFPLElBR1BzZCxHQUFBMXNCLFVBQUFpYSxXQUFBLFNBQUF2WixFQUFBME8sR0FDQSxJQUFBekIsRUFBQXhKLEtBQUFtb0IsTUFBQXJTLFdBQUExQyxFQUFBbkksR0FDQSxXQUFBd0ksRUFBQSxXQUNBLFFBQ0EsSUFBQWxLLEVBQUFDLEVBQUFLLE9BQ0EsR0FBQU4sRUFBQU8sS0FDQSxPQUFBUCxFQUVBLElBQUE2TixFQUFBN04sRUFBQXJPLE1BR0EsR0FBQWtjLEVBQUEsQ0FDQThULEdBQUE5VCxHQUNBLElBQUE0VSxFQUFBaGMsRUFBQW9ILEdBQ0EsT0FBQTFELEVBQ0FuWCxFQUNBeXZCLEVBQUE1VSxFQUFBdGMsSUFBQSxHQUFBc2MsRUFBQSxHQUNBNFUsRUFBQTVVLEVBQUF0YyxJQUFBLEdBQUFzYyxFQUFBLEdBQ0E3TixRQVFBOGUsR0FBQXhzQixVQUFBNFosWUFDQXdTLEdBQUFwc0IsVUFBQTRaLFlBQ0E2UyxHQUFBenNCLFVBQUE0WixZQUNBOFMsR0FBQTFzQixVQUFBNFosWUFDQW1ULEdBd3BCQWhaLEVBQUF5YixHQUFBaFMsSUE4QkFnUyxHQUFBeHZCLFVBQUFrRyxTQUFBLFdBQ0EsT0FBQS9CLEtBQUF3VixXQUFBeVcsR0FBQWpzQixNQUFBLEtBQW1ELE1BS25EcXJCLEdBQUF4dkIsVUFBQXdELElBQUEsU0FBQXNVLEdBQ0EsT0FBQTNULEtBQUE2ckIsZUFBQS92QixlQUFBNlgsSUFHQTBYLEdBQUF4dkIsVUFBQWYsSUFBQSxTQUFBNlksRUFBQTZGLEdBQ0EsSUFBQXhaLEtBQUFYLElBQUFzVSxHQUNBLE9BQUE2RixFQUVBLElBQUEwUyxFQUFBbHNCLEtBQUE2ckIsZUFBQWxZLEdBQ0EsT0FBQTNULEtBQUEybkIsS0FBQTNuQixLQUFBMm5CLEtBQUE3c0IsSUFBQTZZLEVBQUF1WSxNQUtBYixHQUFBeHZCLFVBQUF1aEIsTUFBQSxXQUNBLEdBQUFwZCxLQUFBcWQsVUFFQSxPQURBcmQsS0FBQTJuQixNQUFBM25CLEtBQUEybkIsS0FBQXZLLFFBQ0FwZCxLQUVBLElBQUF3ckIsRUFBQXhyQixLQUFBc0IsWUFDQSxPQUFBa3FCLEVBQUFXLFNBQUFYLEVBQUFXLE9BQUFDLEdBQUFwc0IsS0FBQTJiLFFBR0EwUCxHQUFBeHZCLFVBQUE2TSxJQUFBLFNBQUFpTCxFQUFBdkcsR0FDQSxJQUFBcE4sS0FBQVgsSUFBQXNVLEdBQ0EsVUFBQXJSLE1BQUEsMkJBQUFxUixFQUFBLFFBQUFzWSxHQUFBanNCLE9BRUEsR0FBQUEsS0FBQTJuQixPQUFBM25CLEtBQUEybkIsS0FBQXRvQixJQUFBc1UsR0FBQSxDQUNBLElBQUF1WSxFQUFBbHNCLEtBQUE2ckIsZUFBQWxZLEdBQ0EsR0FBQXZHLElBQUE4ZSxFQUNBLE9BQUFsc0IsS0FHQSxJQUFBOG5CLEVBQUE5bkIsS0FBQTJuQixNQUFBM25CLEtBQUEybkIsS0FBQWpmLElBQUFpTCxFQUFBdkcsR0FDQSxPQUFBcE4sS0FBQXFkLFdBQUF5SyxJQUFBOW5CLEtBQUEybkIsS0FDQTNuQixLQUVBb3NCLEdBQUFwc0IsS0FBQThuQixJQUdBdUQsR0FBQXh2QixVQUFBeWdCLE9BQUEsU0FBQTNJLEdBQ0EsSUFBQTNULEtBQUFYLElBQUFzVSxHQUNBLE9BQUEzVCxLQUVBLElBQUE4bkIsRUFBQTluQixLQUFBMm5CLE1BQUEzbkIsS0FBQTJuQixLQUFBckwsT0FBQTNJLEdBQ0EsT0FBQTNULEtBQUFxZCxXQUFBeUssSUFBQTluQixLQUFBMm5CLEtBQ0EzbkIsS0FFQW9zQixHQUFBcHNCLEtBQUE4bkIsSUFHQXVELEdBQUF4dkIsVUFBQTRpQixXQUFBLFdBQ0EsT0FBQXplLEtBQUEybkIsS0FBQWxKLGNBR0E0TSxHQUFBeHZCLFVBQUFpYSxXQUFBLFNBQUF2WixFQUFBME8sR0FBMkQsSUFBQTBPLEVBQUEzWixLQUMzRCxPQUFBa1EsRUFBQWxRLEtBQUE2ckIsZ0JBQUE3Z0IsSUFBQSxTQUFBNEQsRUFBQStFLEdBQXFFLE9BQUFnRyxFQUFBN2UsSUFBQTZZLEtBQXFCbUMsV0FBQXZaLEVBQUEwTyxJQUcxRm9nQixHQUFBeHZCLFVBQUE0VyxVQUFBLFNBQUEvUSxFQUFBdUosR0FBd0QsSUFBQTBPLEVBQUEzWixLQUN4RCxPQUFBa1EsRUFBQWxRLEtBQUE2ckIsZ0JBQUE3Z0IsSUFBQSxTQUFBNEQsRUFBQStFLEdBQXFFLE9BQUFnRyxFQUFBN2UsSUFBQTZZLEtBQXFCbEIsVUFBQS9RLEVBQUF1SixJQUcxRm9nQixHQUFBeHZCLFVBQUE2aUIsY0FBQSxTQUFBSSxHQUNBLEdBQUFBLElBQUE5ZSxLQUFBcWQsVUFDQSxPQUFBcmQsS0FFQSxJQUFBOG5CLEVBQUE5bkIsS0FBQTJuQixNQUFBM25CLEtBQUEybkIsS0FBQWpKLGNBQUFJLEdBQ0EsT0FBQUEsRUFLQXNOLEdBQUFwc0IsS0FBQThuQixFQUFBaEosSUFKQTllLEtBQUFxZCxVQUFBeUIsRUFDQTllLEtBQUEybkIsS0FBQUcsRUFDQTluQixPQU1BLElBQUE4ckIsR0FBQVQsR0FBQXh2QixVQWtCQSxTQUFBdXdCLEdBQUFDLEVBQUFyaEIsRUFBQThULEdBQ0EsSUFBQXdOLEVBQUEzeEIsT0FBQVksT0FBQVosT0FBQTBHLGVBQUFnckIsSUFHQSxPQUZBQyxFQUFBM0UsS0FBQTNjLEVBQ0FzaEIsRUFBQWpQLFVBQUF5QixFQUNBd04sRUFHQSxTQUFBTCxHQUFBSyxHQUNBLE9BQUFBLEVBQUFWLE9BQUFVLEVBQUFockIsWUFBQTlHLE1BQUEsU0EyQkEsU0FBQStXLEdBQUFyVyxHQUNBLGNBQUFBLFFBQUFzQyxJQUFBdEMsRUFBQXF4QixLQUNBQyxHQUFBdHhCLEtBQUFnVyxFQUFBaFcsS0FDQXF4QixLQUFBMVEsY0FBQSxTQUFBblQsR0FDQSxJQUFBa0YsRUFBQTRDLEVBQUF0VixHQUNBd2dCLEdBQUE5TixFQUFBNEUsTUFDQTVFLEVBQUFqRCxRQUFBLFNBQUF5QyxHQUFxQyxPQUFBMUUsRUFBQStqQixJQUFBcmYsT0ErSHJDLFNBQUFvZixHQUFBRSxHQUNBLFNBQUFBLE1BQUFDLEtBMUxBYixHQUFBLE9BQUFBLEdBQUF4UCxPQUNBd1AsR0FBQXZQLFNBQ0F1UCxHQUFBdEssU0FBQXZDLEdBQUF1QyxTQUNBc0ssR0FBQXZPLE1BQUEwQixHQUFBMUIsTUFDQXVPLEdBQUFyTyxVQUFBd0IsR0FBQXhCLFVBQ0FxTyxHQUFBbE8sUUFBQXFCLEdBQUFyQixRQUNBa08sR0FBQWpPLFVBQUFvQixHQUFBcEIsVUFDQWlPLEdBQUEvTixjQUFBa0IsR0FBQWxCLGNBQ0ErTixHQUFBN04sWUFBQWdCLEdBQUFoQixZQUNBNk4sR0FBQTNQLE1BQUE4QyxHQUFBOUMsTUFDQTJQLEdBQUF0UCxPQUFBeUMsR0FBQXpDLE9BQ0FzUCxHQUFBelAsU0FBQTRDLEdBQUE1QyxTQUNBeVAsR0FBQWpRLGNBQUFvRCxHQUFBcEQsY0FDQWlRLEdBQUF0TixVQUFBUyxHQUFBVCxVQUNBc04sR0FBQW5OLFlBQUFNLEdBQUFOLFlBa0NBL08sRUFBQTJCLEdBQUFnSSxJQWNBaEksR0FBQXRELEdBQUEsV0FDQSxPQUFBak8sS0FBQThCLFlBR0F5UCxHQUFBcWIsU0FBQSxTQUFBMXhCLEdBQ0EsT0FBQThFLEtBQUFrUSxFQUFBaFYsR0FBQTJ4QixXQUdBdGIsR0FBQTFWLFVBQUFrRyxTQUFBLFdBQ0EsT0FBQS9CLEtBQUF3VixXQUFBLFFBQW1DLE1BS25DakUsR0FBQTFWLFVBQUF3RCxJQUFBLFNBQUFuRSxHQUNBLE9BQUE4RSxLQUFBMm5CLEtBQUF0b0IsSUFBQW5FLElBS0FxVyxHQUFBMVYsVUFBQTR3QixJQUFBLFNBQUF2eEIsR0FDQSxPQUFBNHhCLEdBQUE5c0IsVUFBQTJuQixLQUFBamYsSUFBQXhOLEdBQUEsS0FHQXFXLEdBQUExVixVQUFBeWdCLE9BQUEsU0FBQXBoQixHQUNBLE9BQUE0eEIsR0FBQTlzQixVQUFBMm5CLEtBQUFyTCxPQUFBcGhCLEtBR0FxVyxHQUFBMVYsVUFBQXVoQixNQUFBLFdBQ0EsT0FBQTBQLEdBQUE5c0IsVUFBQTJuQixLQUFBdkssVUFLQTdMLEdBQUExVixVQUFBa3hCLE1BQUEsV0FBc0MsSUFBQXBQLEVBQUFoTyxFQUFBdlYsS0FBQTBILFVBQUEsR0FFdEMsWUFEQTZiLElBQUFwVCxPQUFBLFNBQUEyVyxHQUF5QyxXQUFBQSxFQUFBMU8sUUFDekM1UixPQUNBWixLQUVBLElBQUFBLEtBQUF3UyxNQUFBeFMsS0FBQXFkLFdBQUEsSUFBQU0sRUFBQS9jLE9BR0FaLEtBQUE2YixjQUFBLFNBQUFuVCxHQUNBLFFBQUE0SixFQUFBLEVBQXdCQSxFQUFBcUwsRUFBQS9jLE9BQW1CMFIsSUFDM0M5QixFQUFBbU4sRUFBQXJMLElBQUEzSCxRQUFBLFNBQUF6UCxHQUEyRCxPQUFBd04sRUFBQStqQixJQUFBdnhCLE9BSjNEOEUsS0FBQXNCLFlBQUFxYyxFQUFBLEtBU0FwTSxHQUFBMVYsVUFBQW14QixVQUFBLFdBQTBDLElBQUFyUCxFQUFBaE8sRUFBQXZWLEtBQUEwSCxVQUFBLEdBQzFDLE9BQUE2YixFQUFBL2MsT0FDQSxPQUFBWixLQUVBMmQsSUFBQTNTLElBQUEsU0FBQTRDLEdBQXlDLE9BQUE0QyxFQUFBNUMsS0FDekMsSUFBQXFmLEVBQUFqdEIsS0FDQSxPQUFBQSxLQUFBNmIsY0FBQSxTQUFBblQsR0FDQXVrQixFQUFBdGlCLFFBQUEsU0FBQXpQLEdBQ0F5aUIsRUFBQXRULE1BQUEsU0FBQXVELEdBQTRDLE9BQUFBLEVBQUE5QyxTQUFBNVAsTUFDNUN3TixFQUFBNFQsT0FBQXBoQixRQU1BcVcsR0FBQTFWLFVBQUFxeEIsU0FBQSxXQUF5QyxJQUFBdlAsRUFBQWhPLEVBQUF2VixLQUFBMEgsVUFBQSxHQUN6QyxPQUFBNmIsRUFBQS9jLE9BQ0EsT0FBQVosS0FFQTJkLElBQUEzUyxJQUFBLFNBQUE0QyxHQUF5QyxPQUFBNEMsRUFBQTVDLEtBQ3pDLElBQUFxZixFQUFBanRCLEtBQ0EsT0FBQUEsS0FBQTZiLGNBQUEsU0FBQW5ULEdBQ0F1a0IsRUFBQXRpQixRQUFBLFNBQUF6UCxHQUNBeWlCLEVBQUF4UyxLQUFBLFNBQUF5QyxHQUEwQyxPQUFBQSxFQUFBOUMsU0FBQTVQLE1BQzFDd04sRUFBQTRULE9BQUFwaEIsUUFNQXFXLEdBQUExVixVQUFBMGhCLE1BQUEsV0FDQSxPQUFBdmQsS0FBQStzQixNQUFBbHJCLE1BQUE3QixLQUFBOEIsWUFHQXlQLEdBQUExVixVQUFBNGhCLFVBQUEsU0FBQUMsR0FBZ0QsSUFBQUMsRUFBQWhPLEVBQUF2VixLQUFBMEgsVUFBQSxHQUNoRCxPQUFBOUIsS0FBQStzQixNQUFBbHJCLE1BQUE3QixLQUFBMmQsSUFHQXBNLEdBQUExVixVQUFBeUwsS0FBQSxTQUFBNFcsR0FFQSxPQUFBaVAsR0FBQS9PLEdBQUFwZSxLQUFBa2UsS0FHQTNNLEdBQUExVixVQUFBd2lCLE9BQUEsU0FBQUMsRUFBQUosR0FFQSxPQUFBaVAsR0FBQS9PLEdBQUFwZSxLQUFBa2UsRUFBQUksS0FHQS9NLEdBQUExVixVQUFBNGlCLFdBQUEsV0FDQSxPQUFBemUsS0FBQTJuQixLQUFBbEosY0FHQWxOLEdBQUExVixVQUFBNFcsVUFBQSxTQUFBL1EsRUFBQXVKLEdBQXFELElBQUEwTyxFQUFBM1osS0FDckQsT0FBQUEsS0FBQTJuQixLQUFBbFYsVUFBQSxTQUFBN0QsRUFBQStFLEdBQWtELE9BQUFqUyxFQUFBaVMsSUFBQWdHLElBQXdCMU8sSUFHMUVzRyxHQUFBMVYsVUFBQWlhLFdBQUEsU0FBQXZaLEVBQUEwTyxHQUNBLE9BQUFqTCxLQUFBMm5CLEtBQUEzYyxJQUFBLFNBQUE0RCxFQUFBK0UsR0FBNEMsT0FBQUEsSUFBU21DLFdBQUF2WixFQUFBME8sSUFHckRzRyxHQUFBMVYsVUFBQTZpQixjQUFBLFNBQUFJLEdBQ0EsR0FBQUEsSUFBQTllLEtBQUFxZCxVQUNBLE9BQUFyZCxLQUVBLElBQUE4bkIsRUFBQTluQixLQUFBMm5CLEtBQUFqSixjQUFBSSxHQUNBLE9BQUFBLEVBS0E5ZSxLQUFBb3RCLE9BQUF0RixFQUFBaEosSUFKQTllLEtBQUFxZCxVQUFBeUIsRUFDQTllLEtBQUEybkIsS0FBQUcsRUFDQTluQixPQVVBdVIsR0FBQWliLFNBRUEsSUFpQ0FhLEdBakNBVixHQUFBLHdCQUVBVyxHQUFBL2IsR0FBQTFWLFVBWUEsU0FBQWl4QixHQUFBcGtCLEVBQUFvZixHQUNBLE9BQUFwZixFQUFBMlUsV0FDQTNVLEVBQUE4SixLQUFBc1YsRUFBQXRWLEtBQ0E5SixFQUFBaWYsS0FBQUcsRUFDQXBmLEdBRUFvZixJQUFBcGYsRUFBQWlmLEtBQUFqZixFQUNBLElBQUFvZixFQUFBdFYsS0FBQTlKLEVBQUE2a0IsVUFDQTdrQixFQUFBMGtCLE9BQUF0RixHQUdBLFNBQUEwRixHQUFBeGlCLEVBQUE4VCxHQUNBLElBQUFwVyxFQUFBL04sT0FBQVksT0FBQSt4QixJQUlBLE9BSEE1a0IsRUFBQThKLEtBQUF4SCxJQUFBd0gsS0FBQSxFQUNBOUosRUFBQWlmLEtBQUEzYyxFQUNBdEMsRUFBQTJVLFVBQUF5QixFQUNBcFcsRUFJQSxTQUFBNmpCLEtBQ0EsT0FBQWMsUUFBQUcsR0FBQTdSLE9BT0EsU0FBQXdSLEdBQUFqeUIsR0FDQSxjQUFBQSxRQUFBc0MsSUFBQXRDLEVBQUF1eUIsS0FDQUMsR0FBQXh5QixLQUNBdXlCLEtBQUE1UixjQUFBLFNBQUFuVCxHQUNBLElBQUFrRixFQUFBNEMsRUFBQXRWLEdBQ0F3Z0IsR0FBQTlOLEVBQUE0RSxNQUNBNUUsRUFBQWpELFFBQUEsU0FBQXlDLEdBQXFDLE9BQUExRSxFQUFBK2pCLElBQUFyZixPQWlCckMsU0FBQXNnQixHQUFBQyxHQUNBLE9BQUFuQixHQUFBbUIsSUFBQXpjLEVBQUF5YyxHQS9EQUwsR0FBQVgsS0FBQSxFQUNBVyxHQUFBLE9BQUFBLEdBQUFoUixPQUNBZ1IsR0FBQXpQLFVBQUF5UCxHQUFBL1AsTUFDQStQLEdBQUF2UCxjQUFBdVAsR0FBQTdQLFVBQ0E2UCxHQUFBelIsY0FBQW9ELEdBQUFwRCxjQUNBeVIsR0FBQTlPLFVBQUFTLEdBQUFULFVBQ0E4TyxHQUFBM08sWUFBQU0sR0FBQU4sWUFFQTJPLEdBQUFDLFFBQUFoQixHQUNBZSxHQUFBRixPQUFBSSxHQTBCQTVkLEVBQUF1ZCxHQUFBNWIsSUFjQTRiLEdBQUFsZixHQUFBLFdBQ0EsT0FBQWpPLEtBQUE4QixZQUdBcXJCLEdBQUFQLFNBQUEsU0FBQTF4QixHQUNBLE9BQUE4RSxLQUFBa1EsRUFBQWhWLEdBQUEyeEIsV0FHQU0sR0FBQXR4QixVQUFBa0csU0FBQSxXQUNBLE9BQUEvQixLQUFBd1YsV0FBQSxlQUEwQyxNQVExQzJYLEdBQUFPLGdCQUVBLElBY0FFLEdBZEFDLEdBQUFWLEdBQUF0eEIsVUFNQSxTQUFBaXlCLEdBQUE5aUIsRUFBQThULEdBQ0EsSUFBQXBXLEVBQUEvTixPQUFBWSxPQUFBc3lCLElBSUEsT0FIQW5sQixFQUFBOEosS0FBQXhILElBQUF3SCxLQUFBLEVBQ0E5SixFQUFBaWYsS0FBQTNjLEVBQ0F0QyxFQUFBMlUsVUFBQXlCLEVBQ0FwVyxFQUlBLFNBQUEra0IsS0FDQSxPQUFBRyxRQUFBRSxHQUFBeEcsT0FPQSxTQUFBeUcsR0FBQTd5QixHQUNBLGNBQUFBLFFBQUFzQyxJQUFBdEMsRUFBQTh5QixLQUNBQyxHQUFBL3lCLEtBQ0E4eUIsS0FBQUUsV0FBQWh6QixHQWtMQSxTQUFBK3lCLEdBQUFFLEdBQ0EsU0FBQUEsTUFBQUMsS0E1TUFQLEdBQUF6YyxJQUFBLEVBRUF5YyxHQUFBTixRQUFBRSxHQUNBSSxHQUFBVCxPQUFBVSxHQWVBbGUsRUFBQW1lLEdBQUF6VSxJQVVBeVUsR0FBQTlmLEdBQUEsV0FDQSxPQUFBak8sS0FBQThCLFlBR0Fpc0IsR0FBQWx5QixVQUFBa0csU0FBQSxXQUNBLE9BQUEvQixLQUFBd1YsV0FBQSxnQkFLQXVZLEdBQUFseUIsVUFBQWYsSUFBQSxTQUFBK0ksRUFBQTJWLEdBQ0EsSUFBQTZVLEVBQUFydUIsS0FBQXN1QixNQUVBLElBREF6cUIsRUFBQThPLEVBQUEzUyxLQUFBNkQsR0FDQXdxQixHQUFBeHFCLEtBQ0F3cUIsSUFBQXhrQixLQUVBLE9BQUF3a0IsSUFBQW56QixNQUFBc2UsR0FHQXVVLEdBQUFseUIsVUFBQTB5QixLQUFBLFdBQ0EsT0FBQXZ1QixLQUFBc3VCLE9BQUF0dUIsS0FBQXN1QixNQUFBcHpCLE9BS0E2eUIsR0FBQWx5QixVQUFBa0ksS0FBQSxXQUNBLE9BQUFqQyxVQUFBbEIsT0FDQSxPQUFBWixLQUlBLElBRkEsSUFBQW9nQixFQUFBcGdCLEtBQUF3UyxLQUFBMVEsVUFBQWxCLE9BQ0F5dEIsRUFBQXJ1QixLQUFBc3VCLE1BQ0FoYyxFQUFBeFEsVUFBQWxCLE9BQUEsRUFBeUMwUixHQUFBLEVBQVNBLElBQ2xEK2IsR0FDQW56QixNQUFBNEcsVUFBQXdRLEdBQ0F6SSxLQUFBd2tCLEdBR0EsT0FBQXJ1QixLQUFBcWQsV0FDQXJkLEtBQUF3UyxLQUFBNE4sRUFDQXBnQixLQUFBc3VCLE1BQUFELEVBQ0FydUIsS0FBQXFZLFlBQUE3YSxFQUNBd0MsS0FBQXNkLFdBQUEsRUFDQXRkLE1BRUF3dUIsR0FBQXBPLEVBQUFpTyxJQUdBTixHQUFBbHlCLFVBQUE0eUIsUUFBQSxTQUFBN2dCLEdBRUEsUUFEQUEsRUFBQXlDLEVBQUF6QyxJQUNBNEUsS0FDQSxPQUFBeFMsS0FFQTBiLEdBQUE5TixFQUFBNEUsTUFDQSxJQUFBNE4sRUFBQXBnQixLQUFBd1MsS0FDQTZiLEVBQUFydUIsS0FBQXN1QixNQVFBLE9BUEExZ0IsRUFBQTNDLFVBQUFOLFFBQUEsU0FBQXpQLEdBQ0FrbEIsSUFDQWlPLEdBQ0FuekIsUUFDQTJPLEtBQUF3a0IsS0FHQXJ1QixLQUFBcWQsV0FDQXJkLEtBQUF3UyxLQUFBNE4sRUFDQXBnQixLQUFBc3VCLE1BQUFELEVBQ0FydUIsS0FBQXFZLFlBQUE3YSxFQUNBd0MsS0FBQXNkLFdBQUEsRUFDQXRkLE1BRUF3dUIsR0FBQXBPLEVBQUFpTyxJQUdBTixHQUFBbHlCLFVBQUFrbUIsSUFBQSxXQUNBLE9BQUEvaEIsS0FBQWdDLE1BQUEsSUFHQStyQixHQUFBbHlCLFVBQUE4b0IsUUFBQSxXQUNBLE9BQUEza0IsS0FBQStELEtBQUFsQyxNQUFBN0IsS0FBQThCLFlBR0Fpc0IsR0FBQWx5QixVQUFBcXlCLFdBQUEsU0FBQXRnQixHQUNBLE9BQUE1TixLQUFBeXVCLFFBQUE3Z0IsSUFHQW1nQixHQUFBbHlCLFVBQUEya0IsTUFBQSxXQUNBLE9BQUF4Z0IsS0FBQStoQixJQUFBbGdCLE1BQUE3QixLQUFBOEIsWUFHQWlzQixHQUFBbHlCLFVBQUF1aEIsTUFBQSxXQUNBLFdBQUFwZCxLQUFBd1MsS0FDQXhTLEtBRUFBLEtBQUFxZCxXQUNBcmQsS0FBQXdTLEtBQUEsRUFDQXhTLEtBQUFzdUIsV0FBQTl3QixFQUNBd0MsS0FBQXFZLFlBQUE3YSxFQUNBd0MsS0FBQXNkLFdBQUEsRUFDQXRkLE1BRUFndUIsTUFHQUQsR0FBQWx5QixVQUFBbUcsTUFBQSxTQUFBc0osRUFBQUMsR0FDQSxHQUFBdUgsRUFBQXhILEVBQUFDLEVBQUF2TCxLQUFBd1MsTUFDQSxPQUFBeFMsS0FFQSxJQUFBcXBCLEVBQUF0VyxFQUFBekgsRUFBQXRMLEtBQUF3UyxNQUNBOFcsRUFBQXJXLEVBQUExSCxFQUFBdkwsS0FBQXdTLE1BQ0EsR0FBQThXLElBQUF0cEIsS0FBQXdTLEtBRUEsT0FBQThHLEdBQUF6ZCxVQUFBbUcsTUFBQTVILEtBQUE0RixLQUFBc0wsRUFBQUMsR0FJQSxJQUZBLElBQUE2VSxFQUFBcGdCLEtBQUF3UyxLQUFBNlcsRUFDQWdGLEVBQUFydUIsS0FBQXN1QixNQUNBakYsS0FDQWdGLElBQUF4a0IsS0FFQSxPQUFBN0osS0FBQXFkLFdBQ0FyZCxLQUFBd1MsS0FBQTROLEVBQ0FwZ0IsS0FBQXN1QixNQUFBRCxFQUNBcnVCLEtBQUFxWSxZQUFBN2EsRUFDQXdDLEtBQUFzZCxXQUFBLEVBQ0F0ZCxNQUVBd3VCLEdBQUFwTyxFQUFBaU8sSUFLQU4sR0FBQWx5QixVQUFBNmlCLGNBQUEsU0FBQUksR0FDQSxPQUFBQSxJQUFBOWUsS0FBQXFkLFVBQ0FyZCxLQUVBOGUsRUFLQTBQLEdBQUF4dUIsS0FBQXdTLEtBQUF4UyxLQUFBc3VCLE1BQUF4UCxFQUFBOWUsS0FBQXFZLFNBSkFyWSxLQUFBcWQsVUFBQXlCLEVBQ0E5ZSxLQUFBc2QsV0FBQSxFQUNBdGQsT0FPQSt0QixHQUFBbHlCLFVBQUE0VyxVQUFBLFNBQUEvUSxFQUFBdUosR0FDQSxHQUFBQSxFQUNBLE9BQUFqTCxLQUFBaUwsVUFBQXdILFVBQUEvUSxHQUlBLElBRkEsSUFBQStYLEVBQUEsRUFDQXdCLEVBQUFqYixLQUFBc3VCLE1BQ0FyVCxJQUNBLElBQUF2WixFQUFBdVosRUFBQS9mLE1BQUF1ZSxJQUFBelosT0FHQWliLElBQUFwUixLQUVBLE9BQUE0UCxHQUdBc1UsR0FBQWx5QixVQUFBaWEsV0FBQSxTQUFBdlosRUFBQTBPLEdBQ0EsR0FBQUEsRUFDQSxPQUFBakwsS0FBQWlMLFVBQUE2SyxXQUFBdlosR0FFQSxJQUFBa2QsRUFBQSxFQUNBd0IsRUFBQWpiLEtBQUFzdUIsTUFDQSxXQUFBN2EsRUFBQSxXQUNBLEdBQUF3SCxFQUFBLENBQ0EsSUFBQS9mLEVBQUErZixFQUFBL2YsTUFFQSxPQURBK2YsSUFBQXBSLEtBQ0E2SixFQUFBblgsRUFBQWtkLElBQUF2ZSxHQUVBLE9BbjVIWUEsV0FBQXNDLEVBQUFzTSxNQUFBLE1BNDVIWmlrQixHQUFBRSxXQUVBLElBb0JBUyxHQXBCQU4sR0FBQSwwQkFFQU8sR0FBQVosR0FBQWx5QixVQVFBLFNBQUEyeUIsR0FBQWhjLEVBQUE2YixFQUFBdlAsRUFBQTVFLEdBQ0EsSUFBQWxQLEVBQUFyUSxPQUFBWSxPQUFBb3pCLElBTUEsT0FMQTNqQixFQUFBd0gsT0FDQXhILEVBQUFzakIsTUFBQUQsRUFDQXJqQixFQUFBcVMsVUFBQXlCLEVBQ0E5VCxFQUFBcU4sT0FBQTZCLEVBQ0FsUCxFQUFBc1MsV0FBQSxFQUNBdFMsRUFJQSxTQUFBZ2pCLEtBQ0EsT0FBQVUsUUFBQUYsR0FBQSxJQU1BLFNBQUFJLEdBQUEvZSxFQUFBZ2YsR0FDQSxJQUFBQyxFQUFBLFNBQUF0ekIsR0FBb0NxVSxFQUFBaFUsVUFBQUwsR0FBQXF6QixFQUFBcnpCLElBSXBDLE9BSEFiLE9BQUFnTSxLQUFBa29CLEdBQUFsa0IsUUFBQW1rQixHQUNBbjBCLE9BQUFvMEIsdUJBQ0FwMEIsT0FBQW8wQixzQkFBQUYsR0FBQWxrQixRQUFBbWtCLEdBQ0FqZixFQTlCQThlLEdBQUFQLEtBQUEsRUFDQU8sR0FBQTlTLGNBQUFvRCxHQUFBcEQsY0FDQThTLEdBQUFuUSxVQUFBUyxHQUFBVCxVQUNBbVEsR0FBQWhRLFlBQUFNLEdBQUFOLFlBQ0FnUSxHQUFBbFEsV0FBQVEsR0FBQVIsV0E2QkExTyxFQUFBMEQsV0FFQW1iLEdBQUE3ZSxHQUlBNkYsUUFBQSxXQUNBOEYsR0FBQTFiLEtBQUF3UyxNQUNBLElBQUE4RCxFQUFBLElBQUEzUSxNQUFBM0YsS0FBQXdTLE1BQUEsR0FFQSxPQURBeFMsS0FBQStyQixXQUFBdFosVUFBQSxTQUFBckYsRUFBQW5ULEdBQWlEcWMsRUFBQXJjLEdBQUFtVCxJQUNqRGtKLEdBR0F0QixhQUFBLFdBQ0EsV0FBQXFULEdBQUFyb0IsT0FHQWd2QixLQUFBLFdBQ0EsT0FBQWh2QixLQUFBdVUsUUFBQXZKLElBQ0EsU0FBQTlQLEdBQTBCLE9BQUFBLEdBQUEsbUJBQUFBLEVBQUE4ekIsS0FBQTl6QixFQUFBOHpCLE9BQUE5ekIsSUFDMUIrekIsVUFHQUMsT0FBQSxXQUNBLE9BQUFsdkIsS0FBQXVVLFFBQUF2SixJQUNBLFNBQUE5UCxHQUEwQixPQUFBQSxHQUFBLG1CQUFBQSxFQUFBZzBCLE9BQUFoMEIsRUFBQWcwQixTQUFBaDBCLElBQzFCK3pCLFVBR0FyYSxXQUFBLFdBQ0EsV0FBQXFULEdBQUFqb0IsTUFBQSxJQUdBK1gsTUFBQSxXQUVBLE9BQUE1SixHQUFBbk8sS0FBQTRVLGVBR0ExVCxTQUFBLFdBQ0F3YSxHQUFBMWIsS0FBQXdTLE1BQ0EsSUFBQTdXLEtBRUEsT0FEQXFFLEtBQUF5UyxVQUFBLFNBQUFyRixFQUFBdUcsR0FBc0NoWSxFQUFBZ1ksR0FBQXZHLElBQ3RDelIsR0FHQXd6QixhQUFBLFdBRUEsT0FBQWhSLEdBQUFuZSxLQUFBNFUsZUFHQXdhLGFBQUEsV0FFQSxPQUFBakMsR0FBQWhkLEVBQUFuUSxXQUFBK3JCLFdBQUEvckIsT0FHQXF2QixNQUFBLFdBRUEsT0FBQTlkLEdBQUFwQixFQUFBblEsV0FBQStyQixXQUFBL3JCLE9BR0FrVixTQUFBLFdBQ0EsV0FBQW9ULEdBQUF0b0IsT0FHQXVVLE1BQUEsV0FDQSxPQUFBakUsRUFBQXRRLFdBQUFnVixlQUNBN0UsRUFBQW5RLFdBQUE0VSxhQUNBNVUsS0FBQWtWLFlBR0FvYSxRQUFBLFdBRUEsT0FBQXZCLEdBQUE1ZCxFQUFBblEsV0FBQStyQixXQUFBL3JCLE9BR0E4WCxPQUFBLFdBRUEsT0FBQXVMLEdBQUFsVCxFQUFBblEsV0FBQStyQixXQUFBL3JCLE9BTUErQixTQUFBLFdBQ0Esb0JBR0F5VCxXQUFBLFNBQUE2WSxFQUFBdEksR0FDQSxXQUFBL2xCLEtBQUF3UyxLQUNBNmIsRUFBQXRJLEVBRUFzSSxFQUFBLElBQUFydUIsS0FBQXVVLFFBQUF2SixJQUFBaEwsS0FBQXV2QixrQkFBQXp2QixLQUFBLFVBQUFpbUIsR0FNQWxZLE9BQUEsV0FBd0IsSUFBQXBILEVBQUFrSixFQUFBdlYsS0FBQTBILFVBQUEsR0FDeEIsT0FBQW1wQixHQUFBanJCLEtBcC9CQSxTQUFBbVUsRUFBQTFOLEdBQ0EsSUFBQTZqQixFQUFBbmEsRUFBQWdFLEdBQ0F3SixHQUFBeEosR0FBQXRHLE9BQUFwSCxHQUFBdUUsSUFBQSxTQUFBb0MsR0FRQSxPQVBBNEMsRUFBQTVDLEdBSU9rZCxJQUNQbGQsRUFBQThDLEVBQUE5QyxJQUpBQSxFQUFBa2QsRUFDQXhWLEdBQUExSCxHQUNBNkgsR0FBQXRQLE1BQUFxUixRQUFBNUosVUFJQUEsSUFDSzdDLE9BQUEsU0FBQTZDLEdBQXVCLFdBQUFBLEVBQUFvRixPQUU1QixPQUFBbUwsRUFBQS9jLE9BQ0EsT0FBQXVULEVBR0EsT0FBQXdKLEVBQUEvYyxPQUFBLENBQ0EsSUFBQTR1QixFQUFBN1IsRUFBQSxHQUNBLEdBQUE2UixJQUFBcmIsR0FDQW1XLEdBQUFuYSxFQUFBcWYsSUFDQWxmLEVBQUE2RCxJQUFBN0QsRUFBQWtmLEdBQ0EsT0FBQUEsRUFJQSxJQUFBQyxFQUFBLElBQUFwWixHQUFBc0gsR0FrQkEsT0FqQkEyTSxFQUNBbUYsSUFBQTdhLGFBQ0t0RSxFQUFBNkQsS0FDTHNiLElBQUF2YSxhQUVBdWEsSUFBQUMsU0FBQSxJQUNBbGQsS0FBQW1MLEVBQUExVyxPQUNBLFNBQUEwb0IsRUFBQW5iLEdBQ0EsUUFBQWhYLElBQUFteUIsRUFBQSxDQUNBLElBQUFuZCxFQUFBZ0MsRUFBQWhDLEtBQ0EsUUFBQWhWLElBQUFnVixFQUNBLE9BQUFtZCxFQUFBbmQsSUFJQSxHQUVBaWQsRUF3OEJBRyxDQUFBNXZCLEtBQUF5RyxLQUdBcUUsU0FBQSxTQUFBNE8sR0FDQSxPQUFBMVosS0FBQW1MLEtBQUEsU0FBQWpRLEdBQXlDLE9BQUE4YyxHQUFBOWMsRUFBQXdlLE1BR3pDN1MsUUFBQSxXQUNBLE9BQUE3RyxLQUFBOFYsV0FBQXpDLElBR0FoSixNQUFBLFNBQUFJLEVBQUFxZSxHQUNBcE4sR0FBQTFiLEtBQUF3UyxNQUNBLElBQUFxZCxHQUFBLEVBT0EsT0FOQTd2QixLQUFBeVMsVUFBQSxTQUFBckYsRUFBQXVHLEVBQUFyWixHQUNBLElBQUFtUSxFQUFBclEsS0FBQTB1QixFQUFBMWIsRUFBQXVHLEVBQUFyWixHQUVBLE9BREF1MUIsR0FBQSxHQUNBLElBR0FBLEdBR0F0bEIsT0FBQSxTQUFBRSxFQUFBcWUsR0FDQSxPQUFBbUMsR0FBQWpyQixLQUFBaXBCLEdBQUFqcEIsS0FBQXlLLEVBQUFxZSxHQUFBLEtBR0F0ZSxLQUFBLFNBQUFDLEVBQUFxZSxFQUFBdFAsR0FDQSxJQUFBcEMsRUFBQXBYLEtBQUE4dkIsVUFBQXJsQixFQUFBcWUsR0FDQSxPQUFBMVIsSUFBQSxHQUFBb0MsR0FHQTdPLFFBQUEsU0FBQW9sQixFQUFBakgsR0FFQSxPQURBcE4sR0FBQTFiLEtBQUF3UyxNQUNBeFMsS0FBQXlTLFVBQUFxVyxFQUFBaUgsRUFBQXQwQixLQUFBcXRCLEdBQUFpSCxJQUdBandCLEtBQUEsU0FBQWlMLEdBQ0EyUSxHQUFBMWIsS0FBQXdTLE1BQ0F6SCxPQUFBdk4sSUFBQXVOLEVBQUEsR0FBQUEsRUFBQSxJQUNBLElBQUFpbEIsRUFBQSxHQUNBQyxHQUFBLEVBS0EsT0FKQWp3QixLQUFBeVMsVUFBQSxTQUFBckYsR0FDQTZpQixLQUFBLEVBQUFELEdBQUFqbEIsRUFDQWlsQixHQUFBLE9BQUE1aUIsUUFBQTVQLElBQUE0UCxJQUFBckwsV0FBQSxLQUVBaXVCLEdBR0FycEIsS0FBQSxXQUNBLE9BQUEzRyxLQUFBOFYsV0FBQTNDLElBR0FuSSxJQUFBLFNBQUFzVCxFQUFBd0ssR0FDQSxPQUFBbUMsR0FBQWpyQixLQUFBNm9CLEdBQUE3b0IsS0FBQXNlLEVBQUF3SyxLQUdBN2hCLE9BQUEsU0FBQWlwQixFQUFBQyxFQUFBckgsR0FFQSxJQUFBc0gsRUFDQUMsRUFjQSxPQWhCQTNVLEdBQUExYixLQUFBd1MsTUFHQTFRLFVBQUFsQixPQUFBLEVBQ0F5dkIsR0FBQSxFQUVBRCxFQUFBRCxFQUVBbndCLEtBQUF5UyxVQUFBLFNBQUFyRixFQUFBdUcsRUFBQXJaLEdBQ0ErMUIsR0FDQUEsR0FBQSxFQUNBRCxFQUFBaGpCLEdBRUFnakIsRUFBQUYsRUFBQTkxQixLQUFBMHVCLEVBQUFzSCxFQUFBaGpCLEVBQUF1RyxFQUFBclosS0FHQTgxQixHQUdBanBCLFlBQUEsU0FBQStvQixFQUFBQyxFQUFBckgsR0FDQSxJQUFBd0gsRUFBQXR3QixLQUFBNFUsYUFBQTNKLFVBQ0EsT0FBQXFsQixFQUFBcnBCLE9BQUFwRixNQUFBeXVCLEVBQUF4dUIsWUFHQW1KLFFBQUEsV0FDQSxPQUFBZ2dCLEdBQUFqckIsS0FBQWdwQixHQUFBaHBCLE1BQUEsS0FHQWdDLE1BQUEsU0FBQXNKLEVBQUFDLEdBQ0EsT0FBQTBmLEdBQUFqckIsS0FBQW1wQixHQUFBbnBCLEtBQUFzTCxFQUFBQyxHQUFBLEtBR0FKLEtBQUEsU0FBQVYsRUFBQXFlLEdBQ0EsT0FBQTlvQixLQUFBcUssTUFBQWttQixHQUFBOWxCLEdBQUFxZSxJQUdBeGhCLEtBQUEsU0FBQTRXLEdBQ0EsT0FBQStNLEdBQUFqckIsS0FBQW9lLEdBQUFwZSxLQUFBa2UsS0FHQXpYLE9BQUEsV0FDQSxPQUFBekcsS0FBQThWLFdBQUExQyxJQU1Bb2QsUUFBQSxXQUNBLE9BQUF4d0IsS0FBQWdDLE1BQUEsT0FHQXl1QixRQUFBLFdBQ0EsWUFBQWp6QixJQUFBd0MsS0FBQXdTLEtBQUEsSUFBQXhTLEtBQUF3UyxNQUFBeFMsS0FBQW1MLEtBQUEsV0FBaUYsWUFHakZvVSxNQUFBLFNBQUE5VSxFQUFBcWUsR0FDQSxPQUFBdlcsRUFDQTlILEVBQUF6SyxLQUFBdVUsUUFBQWhLLE9BQUFFLEVBQUFxZSxHQUFBOW9CLE9BSUEwd0IsUUFBQSxTQUFBQyxFQUFBN0gsR0FDQSxPQTEwQ0EsU0FBQTNVLEVBQUF3YyxFQUFBN0gsR0FDQSxJQUFBOEgsRUFBQXppQixLQUFBcVEsWUFRQSxPQVBBckssRUFBQTFCLFVBQUEsU0FBQXJGLEVBQUF1RyxHQUNBaWQsRUFBQXBVLE9BQ0FtVSxFQUFBdjJCLEtBQUEwdUIsRUFBQTFiLEVBQUF1RyxFQUFBUSxHQUNBLEVBQ0EsU0FBQTFWLEdBQXNCLE9BQUFBLEVBQUEsTUFHdEJteUIsRUFBQWpTLGNBaTBDQWtTLENBQUE3d0IsS0FBQTJ3QixFQUFBN0gsSUFHQTNRLE9BQUEsU0FBQXlCLEdBQ0EsT0FBQXhCLEdBQUFwWSxLQUFBNFosSUFHQTdFLFNBQUEsV0FDQSxJQUFBWixFQUFBblUsS0FDQSxHQUFBbVUsRUFBQXVCLE9BRUEsV0FBQVcsR0FBQWxDLEVBQUF1QixRQUVBLElBQUFvYixFQUFBM2MsRUFBQUksUUFBQXZKLElBQUErbEIsSUFBQS9iLGVBRUEsT0FEQThiLEVBQUFqYyxhQUFBLFdBQWtELE9BQUFWLEVBQUFJLFNBQ2xEdWMsR0FHQUUsVUFBQSxTQUFBdm1CLEVBQUFxZSxHQUNBLE9BQUE5b0IsS0FBQXVLLE9BQUFnbUIsR0FBQTlsQixHQUFBcWUsSUFHQWdILFVBQUEsU0FBQXJsQixFQUFBcWUsRUFBQXRQLEdBQ0EsSUFBQXlYLEVBQUF6WCxFQU9BLE9BTkF4WixLQUFBeVMsVUFBQSxTQUFBckYsRUFBQXVHLEVBQUFyWixHQUNBLEdBQUFtUSxFQUFBclEsS0FBQTB1QixFQUFBMWIsRUFBQXVHLEVBQUFyWixHQUVBLE9BREEyMkIsR0FBQXRkLEVBQUF2RyxJQUNBLElBR0E2akIsR0FHQUMsUUFBQSxTQUFBem1CLEVBQUFxZSxHQUNBLElBQUExUixFQUFBcFgsS0FBQTh2QixVQUFBcmxCLEVBQUFxZSxHQUNBLE9BQUExUixLQUFBLElBR0ErWixTQUFBLFNBQUExbUIsRUFBQXFlLEVBQUF0UCxHQUNBLE9BQUF4WixLQUFBNFUsYUFBQTNKLFVBQUFULEtBQUFDLEVBQUFxZSxFQUFBdFAsSUFHQTRYLGNBQUEsU0FBQTNtQixFQUFBcWUsRUFBQXRQLEdBQ0EsT0FBQXhaLEtBQUE0VSxhQUFBM0osVUFBQTZrQixVQUFBcmxCLEVBQUFxZSxFQUFBdFAsSUFHQTZYLFlBQUEsU0FBQTVtQixFQUFBcWUsR0FDQSxPQUFBOW9CLEtBQUE0VSxhQUFBM0osVUFBQWltQixRQUFBem1CLEVBQUFxZSxJQUdBd0ksTUFBQSxXQUNBLE9BQUF0eEIsS0FBQXdLLEtBQUFrSSxJQUdBNmUsUUFBQSxTQUFBalQsRUFBQXdLLEdBQ0EsT0FBQW1DLEdBQUFqckIsS0Fwa0NBLFNBQUFtVSxFQUFBbUssRUFBQXdLLEdBQ0EsSUFBQTBJLEVBQUFwRyxHQUFBalgsR0FDQSxPQUFBQSxFQUFBSSxRQUFBdkosSUFDQSxTQUFBb0MsRUFBQXVHLEdBQXVCLE9BQUE2ZCxFQUFBbFQsRUFBQWxrQixLQUFBMHVCLEVBQUExYixFQUFBdUcsRUFBQVEsTUFDdkJ1YixTQUFBLEdBZ2tDQStCLENBQUF6eEIsS0FBQXNlLEVBQUF3SyxLQUdBNEcsUUFBQSxTQUFBMUYsR0FDQSxPQUFBaUIsR0FBQWpyQixLQUFBK3BCLEdBQUEvcEIsS0FBQWdxQixHQUFBLEtBR0FuVixhQUFBLFdBQ0EsV0FBQTBULEdBQUF2b0IsT0FHQWxGLElBQUEsU0FBQTQyQixFQUFBbFksR0FDQSxPQUFBeFosS0FBQXdLLEtBQUEsU0FBQW9FLEVBQUFwVCxHQUEwQyxPQUFBd2MsR0FBQXhjLEVBQUFrMkIsU0FBMEJsMEIsRUFBQWdjLElBR3BFbVksTUFBQSxTQUFBQyxFQUFBcFksR0FNQSxJQUxBLElBSUFqUSxFQUpBc29CLEVBQUE3eEIsS0FHQTROLEVBQUF1UCxHQUFBeVUsS0FFQXJvQixFQUFBcUUsRUFBQS9ELFFBQUFDLE1BQUEsQ0FDQSxJQUFBdE8sRUFBQStOLEVBQUFyTyxNQUVBLElBREEyMkIsT0FBQS8yQixJQUFBKzJCLEVBQUEvMkIsSUFBQVUsRUFBQW1XLFFBQ0FBLEVBQ0EsT0FBQTZILEVBR0EsT0FBQXFZLEdBR0FDLFFBQUEsU0FBQW5CLEVBQUE3SCxHQUNBLE9BcDVDQSxTQUFBM1UsRUFBQXdjLEVBQUE3SCxHQUNBLElBQUFpSixFQUFBNWhCLEVBQUFnRSxHQUNBeWMsR0FBQTFmLEVBQUFpRCxHQUFBZ0ssS0FBQWhRLE1BQUFxUSxZQUNBckssRUFBQTFCLFVBQUEsU0FBQXJGLEVBQUF1RyxHQUNBaWQsRUFBQXBVLE9BQ0FtVSxFQUFBdjJCLEtBQUEwdUIsRUFBQTFiLEVBQUF1RyxFQUFBUSxHQUNBLFNBQUExVixHQUFzQixPQUFBQSxTQUFBc0YsS0FBQWd1QixHQUFBcGUsRUFBQXZHLE1BQUEzTyxNQUd0QixJQUFBK3lCLEVBQUFwRyxHQUFBalgsR0FDQSxPQUFBeWMsRUFBQTVsQixJQUFBLFNBQUFtSCxHQUFzQyxPQUFBOFksR0FBQTlXLEVBQUFxZCxFQUFBcmYsTUEwNEN0QzZmLENBQUFoeUIsS0FBQTJ3QixFQUFBN0gsSUFHQXpwQixJQUFBLFNBQUFxeUIsR0FDQSxPQUFBMXhCLEtBQUFsRixJQUFBNDJCLEVBQUEvZixRQUdBc2dCLE1BQUEsU0FBQUwsR0FDQSxPQUFBNXhCLEtBQUEyeEIsTUFBQUMsRUFBQWpnQixRQUdBdWdCLFNBQUEsU0FBQXRrQixHQUVBLE9BREFBLEVBQUEsbUJBQUFBLEVBQUE5QyxTQUFBOEMsRUFBQW1DLEVBQUFuQyxHQUNBNU4sS0FBQXFLLE1BQUEsU0FBQW5QLEdBQTBDLE9BQUEwUyxFQUFBOUMsU0FBQTVQLE1BRzFDaTNCLFdBQUEsU0FBQXZrQixHQUVBLE9BREFBLEVBQUEsbUJBQUFBLEVBQUFza0IsU0FBQXRrQixFQUFBbUMsRUFBQW5DLElBQ0Fza0IsU0FBQWx5QixPQUdBb3lCLE1BQUEsU0FBQTFZLEdBQ0EsT0FBQTFaLEtBQUFreEIsUUFBQSxTQUFBaDJCLEdBQTRDLE9BQUE4YyxHQUFBOWMsRUFBQXdlLE1BRzVDbVQsT0FBQSxXQUNBLE9BQUE3c0IsS0FBQXVVLFFBQUF2SixJQUFBcW5CLElBQUFyZCxnQkFHQXNkLEtBQUEsV0FDQSxPQUFBdHlCLEtBQUF1VSxRQUFBdEosVUFBQXFtQixTQUdBaUIsVUFBQSxTQUFBN1ksR0FDQSxPQUFBMVosS0FBQTRVLGFBQUEzSixVQUFBbW5CLE1BQUExWSxJQUdBdEgsSUFBQSxTQUFBOEwsR0FDQSxPQUFBcU0sR0FBQXZxQixLQUFBa2UsSUFHQXNVLE1BQUEsU0FBQWxVLEVBQUFKLEdBQ0EsT0FBQXFNLEdBQUF2cUIsS0FBQWtlLEVBQUFJLElBR0FwZixJQUFBLFNBQUFnZixHQUNBLE9BQUFxTSxHQUFBdnFCLEtBQUFrZSxFQUFBdVUsR0FBQXZVLEdBQUF3VSxLQUdBQyxNQUFBLFNBQUFyVSxFQUFBSixHQUNBLE9BQUFxTSxHQUFBdnFCLEtBQUFrZSxFQUFBdVUsR0FBQXZVLEdBQUF3VSxHQUFBcFUsSUFHQXNVLEtBQUEsV0FDQSxPQUFBNXlCLEtBQUFnQyxNQUFBLElBR0E2d0IsS0FBQSxTQUFBQyxHQUNBLE9BQUE5eUIsS0FBQWdDLE1BQUEvRCxLQUFBbVUsSUFBQSxFQUFBMGdCLEtBR0FDLFNBQUEsU0FBQUQsR0FDQSxPQUFBN0gsR0FBQWpyQixVQUFBdVUsUUFBQXRKLFVBQUE0bkIsS0FBQUMsR0FBQTduQixZQUdBK25CLFVBQUEsU0FBQXZvQixFQUFBcWUsR0FDQSxPQUFBbUMsR0FBQWpyQixLQUFBNHBCLEdBQUE1cEIsS0FBQXlLLEVBQUFxZSxHQUFBLEtBR0FtSyxVQUFBLFNBQUF4b0IsRUFBQXFlLEdBQ0EsT0FBQTlvQixLQUFBZ3pCLFVBQUF6QyxHQUFBOWxCLEdBQUFxZSxJQUdBekssT0FBQSxTQUFBQyxFQUFBSixHQUNBLE9BQUErTSxHQUFBanJCLEtBQUFvZSxHQUFBcGUsS0FBQWtlLEVBQUFJLEtBR0E0VSxLQUFBLFNBQUFKLEdBQ0EsT0FBQTl5QixLQUFBZ0MsTUFBQSxFQUFBL0QsS0FBQW1VLElBQUEsRUFBQTBnQixLQUdBSyxTQUFBLFNBQUFMLEdBQ0EsT0FBQTdILEdBQUFqckIsVUFBQXVVLFFBQUF0SixVQUFBaW9CLEtBQUFKLEdBQUE3bkIsWUFHQW1vQixVQUFBLFNBQUEzb0IsRUFBQXFlLEdBQ0EsT0FBQW1DLEdBQUFqckIsS0FuM0NBLFNBQUFtVSxFQUFBMUosRUFBQXFlLEdBQ0EsSUFBQXVLLEVBQUEzSyxHQUFBdlUsR0FvQ0EsT0FuQ0FrZixFQUFBMWQsa0JBQUEsU0FBQWpVLEVBQUF1SixHQUE0RCxJQUFBME8sRUFBQTNaLEtBQzVELEdBQUFpTCxFQUNBLE9BQUFqTCxLQUFBeVYsY0FBQWhELFVBQUEvUSxFQUFBdUosR0FFQSxJQUFBd08sRUFBQSxFQUlBLE9BSEF0RixFQUFBMUIsVUFBQSxTQUFBckYsRUFBQXVHLEVBQUFyWixHQUNTLE9BQUFtUSxFQUFBclEsS0FBQTB1QixFQUFBMWIsRUFBQXVHLEVBQUFyWixNQUFBbWYsR0FBQS9YLEVBQUEwTCxFQUFBdUcsRUFBQWdHLEtBRVRGLEdBRUE0WixFQUFBaGMsbUJBQUEsU0FBQTlhLEVBQUEwTyxHQUErRCxJQUFBME8sRUFBQTNaLEtBQy9ELEdBQUFpTCxFQUNBLE9BQUFqTCxLQUFBeVYsY0FBQUssV0FBQXZaLEVBQUEwTyxHQUVBLElBQUF6QixFQUFBMkssRUFBQTJCLFdBQUF6QyxFQUFBcEksR0FDQXFvQixHQUFBLEVBQ0EsV0FBQTdmLEVBQUEsV0FDQSxJQUFBNmYsRUFDQSxPQTErRllwNEIsV0FBQXNDLEVBQUFzTSxNQUFBLEdBNCtGWixJQUFBUCxFQUFBQyxFQUFBSyxPQUNBLEdBQUFOLEVBQUFPLEtBQ0EsT0FBQVAsRUFFQSxJQUFBNk4sRUFBQTdOLEVBQUFyTyxNQUNBeVksRUFBQXlELEVBQUEsR0FDQWhLLEVBQUFnSyxFQUFBLEdBQ0EsT0FBQTNNLEVBQUFyUSxLQUFBMHVCLEVBQUExYixFQUFBdUcsRUFBQWdHLEdBSUFwZCxJQUFBOFcsRUFBQTlKLEVBQ0FtSyxFQUFBblgsRUFBQW9YLEVBQUF2RyxFQUFBN0QsSUFKQStwQixHQUFBLEdBcC9GWXA0QixXQUFBc0MsRUFBQXNNLE1BQUEsT0EyL0ZadXBCLEVBODBDQUUsQ0FBQXZ6QixLQUFBeUssRUFBQXFlLEtBR0EwSyxVQUFBLFNBQUEvb0IsRUFBQXFlLEdBQ0EsT0FBQTlvQixLQUFBb3pCLFVBQUE3QyxHQUFBOWxCLEdBQUFxZSxJQUdBaUQsU0FBQSxXQUNBLE9BQUEvckIsS0FBQWdWLGdCQU1BMEYsU0FBQSxXQUNBLE9BQUExYSxLQUFBcVksU0FBQXJZLEtBQUFxWSxPQXdRQSxTQUFBbEUsR0FDQSxHQUFBQSxFQUFBM0IsT0FBQXFHLElBQ0EsU0FFQSxJQUFBNGEsRUFBQXZpQixFQUFBaUQsR0FDQXVmLEVBQUF2akIsRUFBQWdFLEdBQ0FnRyxFQUFBc1osRUFBQSxJQVVBLE9BR0EsU0FBQWpoQixFQUFBMkgsR0FRQSxPQVBBQSxFQUFBSixHQUFBSSxFQUFBLFlBQ0FBLEVBQUFKLEdBQUFJLEdBQUEsR0FBQUEsS0FBQSxjQUNBQSxFQUFBSixHQUFBSSxHQUFBLEdBQUFBLEtBQUEsTUFFQUEsRUFBQUosSUFEQUksS0FBQSxjQUFBM0gsR0FDQTJILElBQUEsZUFFQUEsRUFBQUgsSUFEQUcsRUFBQUosR0FBQUksTUFBQSxnQkFDQUEsSUFBQSxJQVZBd1osQ0FUQXhmLEVBQUExQixVQUNBaWhCLEVBQ0FELEVBQ0EsU0FBQXJtQixFQUFBdUcsR0FBMkJ3RyxFQUFBLEdBQUFBLEVBQUF5WixHQUFBMVosR0FBQTlNLEdBQUE4TSxHQUFBdkcsSUFBQSxHQUMzQixTQUFBdkcsRUFBQXVHLEdBQTJCd0csSUFBQXlaLEdBQUExWixHQUFBOU0sR0FBQThNLEdBQUF2RyxJQUFBLEdBQzNCOGYsRUFDQSxTQUFBcm1CLEdBQXdCK00sRUFBQSxHQUFBQSxFQUFBRCxHQUFBOU0sR0FBQSxHQUN4QixTQUFBQSxHQUF3QitNLElBQUFELEdBQUE5TSxHQUFBLElBRXhCK00sR0F4UkEwWixDQUFBN3pCLFVBZ0JBLElBQUE4ekIsR0FBQS9qQixFQUFBbFUsVUFDQWk0QixHQUFBbGpCLElBQUEsRUFDQWtqQixHQUFBdGdCLEdBQUFzZ0IsR0FBQXJ0QixPQUNBcXRCLEdBQUE3RSxPQUFBNkUsR0FBQWxlLFFBQ0FrZSxHQUFBdkUsaUJBQUF3RSxHQUNBRCxHQUFBeGUsUUFDQXdlLEdBQUF2ZSxTQUFBLFdBQTJDLE9BQUF2VixLQUFBK0IsWUFDM0MreEIsR0FBQUUsTUFBQUYsR0FBQXZDLFFBQ0F1QyxHQUFBRyxTQUFBSCxHQUFBaHBCLFNBRUE4akIsR0FBQTFlLEdBSUE4WCxLQUFBLFdBQ0EsT0FBQWlELEdBQUFqckIsS0FBQXdvQixHQUFBeG9CLFFBR0FrMEIsV0FBQSxTQUFBNVYsRUFBQXdLLEdBQTJDLElBQUFuUCxFQUFBM1osS0FDM0N5WixFQUFBLEVBQ0EsT0FBQXdSLEdBQUFqckIsS0FDQUEsS0FBQXVVLFFBQUF2SixJQUNBLFNBQUFvQyxFQUFBdUcsR0FBMkIsT0FBQTJLLEVBQUFsa0IsS0FBQTB1QixHQUFBblYsRUFBQXZHLEdBQUFxTSxJQUFBRSxLQUMzQjlFLGlCQUlBc2YsUUFBQSxTQUFBN1YsRUFBQXdLLEdBQXdDLElBQUFuUCxFQUFBM1osS0FDeEMsT0FBQWlyQixHQUFBanJCLEtBQ0FBLEtBQUF1VSxRQUFBeVQsT0FBQWhkLElBQ0EsU0FBQTJJLEVBQUF2RyxHQUEyQixPQUFBa1IsRUFBQWxrQixLQUFBMHVCLEVBQUFuVixFQUFBdkcsRUFBQXVNLEtBQzNCcU8sV0FNQSxJQUFBb00sR0FBQWxrQixFQUFBclUsVUFtTEEsU0FBQXcyQixHQUFBamxCLEVBQUF1RyxHQUNBLE9BQUFBLEVBR0EsU0FBQW9kLEdBQUEzakIsRUFBQXVHLEdBQ0EsT0FBQUEsRUFBQXZHLEdBR0EsU0FBQW1qQixHQUFBOWxCLEdBQ0Esa0JBQ0EsT0FBQUEsRUFBQTVJLE1BQUE3QixLQUFBOEIsWUFJQSxTQUFBMndCLEdBQUFob0IsR0FDQSxrQkFDQSxPQUFBQSxFQUFBNUksTUFBQTdCLEtBQUE4QixZQUlBLFNBQUFpeUIsR0FBQTc0QixHQUNBLHVCQUFBQSxFQUFBbTVCLEtBQUFDLFVBQUFwNUIsR0FBQTZFLE9BQUE3RSxHQUdBLFNBQUFxNUIsS0FDQSxPQUFBcmlCLEVBQUFwUSxXQUdBLFNBQUE0d0IsR0FBQWowQixFQUFBbUQsR0FDQSxPQUFBbkQsRUFBQW1ELEVBQUEsRUFBQW5ELEVBQUFtRCxHQUFBLElBaUNBLFNBQUFneUIsR0FBQW4xQixFQUFBbUQsR0FDQSxPQUFBbkQsRUFBQW1ELEVBQUEsWUFBQW5ELEdBQUEsSUFBQUEsR0FBQSxLQXlCQSxPQTFRQTIxQixHQUFBdGpCLElBQUEsRUFDQXNqQixHQUFBNWdCLEdBQUFzZ0IsR0FBQWp0QixRQUNBdXRCLEdBQUFuRixPQUFBNkUsR0FBQTV5QixTQUNBa3pCLEdBQUE3RSxpQkFBQSxTQUFBbmlCLEVBQUF1RyxHQUE2RCxPQUFBMGdCLEtBQUFDLFVBQUEzZ0IsR0FBQSxLQUFBb2dCLEdBQUEzbUIsSUFJN0R3aEIsR0FBQXZlLEdBSUF1RSxXQUFBLFdBQ0EsV0FBQXFULEdBQUFqb0IsTUFBQSxJQU1BdUssT0FBQSxTQUFBRSxFQUFBcWUsR0FDQSxPQUFBbUMsR0FBQWpyQixLQUFBaXBCLEdBQUFqcEIsS0FBQXlLLEVBQUFxZSxHQUFBLEtBR0FwZSxVQUFBLFNBQUFELEVBQUFxZSxHQUNBLElBQUExUixFQUFBcFgsS0FBQTh2QixVQUFBcmxCLEVBQUFxZSxHQUNBLE9BQUExUixJQUFBLE9BR0F4TSxRQUFBLFNBQUE4TyxHQUNBLElBQUFsZSxFQUFBd0UsS0FBQW95QixNQUFBMVksR0FDQSxZQUFBbGMsSUFBQWhDLEdBQUEsRUFBQUEsR0FHQXVMLFlBQUEsU0FBQTJTLEdBQ0EsSUFBQWxlLEVBQUF3RSxLQUFBdXlCLFVBQUE3WSxHQUNBLFlBQUFsYyxJQUFBaEMsR0FBQSxFQUFBQSxHQUdBeVAsUUFBQSxXQUNBLE9BQUFnZ0IsR0FBQWpyQixLQUFBZ3BCLEdBQUFocEIsTUFBQSxLQUdBZ0MsTUFBQSxTQUFBc0osRUFBQUMsR0FDQSxPQUFBMGYsR0FBQWpyQixLQUFBbXBCLEdBQUFucEIsS0FBQXNMLEVBQUFDLEdBQUEsS0FHQWlaLE9BQUEsU0FBQTNnQixFQUFBMndCLEdBQ0EsSUFBQUMsRUFBQTN5QixVQUFBbEIsT0FFQSxHQURBNHpCLEVBQUF2MkIsS0FBQW1VLElBQUEsRUFBQW9pQixFQUFBLEdBQ0EsSUFBQUMsR0FBQSxJQUFBQSxJQUFBRCxFQUNBLE9BQUF4MEIsS0FLQTZELEVBQUFrUCxFQUFBbFAsSUFBQSxFQUFBN0QsS0FBQXVmLFFBQUF2ZixLQUFBd1MsTUFDQSxJQUFBa2lCLEVBQUExMEIsS0FBQWdDLE1BQUEsRUFBQTZCLEdBQ0EsT0FBQW9uQixHQUNBanJCLEtBQ0EsSUFBQXkwQixFQUNBQyxFQUNBQSxFQUFBN21CLE9BQUFxRSxFQUFBcFEsVUFBQSxHQUFBOUIsS0FBQWdDLE1BQUE2QixFQUFBMndCLE1BT0FHLGNBQUEsU0FBQWxxQixFQUFBcWUsR0FDQSxJQUFBMVIsRUFBQXBYLEtBQUFveEIsY0FBQTNtQixFQUFBcWUsR0FDQSxPQUFBMVIsSUFBQSxPQUdBa2EsTUFBQSxXQUNBLE9BQUF0eEIsS0FBQWxGLElBQUEsSUFHQTQwQixRQUFBLFNBQUExRixHQUNBLE9BQUFpQixHQUFBanJCLEtBQUErcEIsR0FBQS9wQixLQUFBZ3FCLEdBQUEsS0FHQWx2QixJQUFBLFNBQUErSSxFQUFBMlYsR0FFQSxPQURBM1YsRUFBQThPLEVBQUEzUyxLQUFBNkQsSUFDQSxHQUFBN0QsS0FBQXdTLE9BQUFxRyxVQUNBcmIsSUFBQXdDLEtBQUF3UyxNQUFBM08sRUFBQTdELEtBQUF3UyxLQUNBZ0gsRUFDQXhaLEtBQUF3SyxLQUFBLFNBQUFvRSxFQUFBcFQsR0FBcUMsT0FBQUEsSUFBQXFJLFFBQXFCckcsRUFBQWdjLElBRzFEbmEsSUFBQSxTQUFBd0UsR0FFQSxPQURBQSxFQUFBOE8sRUFBQTNTLEtBQUE2RCxLQUNBLFNBQUFyRyxJQUFBd0MsS0FBQXdTLEtBQ0F4UyxLQUFBd1MsT0FBQXFHLEtBQUFoVixFQUFBN0QsS0FBQXdTLE1BQ0EsSUFBQXhTLEtBQUE0SyxRQUFBL0csS0FJQSt3QixVQUFBLFNBQUE3cEIsR0FDQSxPQUFBa2dCLEdBQUFqckIsS0F4MUNBLFNBQUFtVSxFQUFBcEosR0FDQSxJQUFBOHBCLEVBQUFuTSxHQUFBdlUsR0EyQkEsT0ExQkEwZ0IsRUFBQXJpQixLQUFBMkIsRUFBQTNCLE1BQUEsRUFBQTJCLEVBQUEzQixLQUFBLEVBQ0FxaUIsRUFBQWxmLGtCQUFBLFNBQUFqVSxFQUFBdUosR0FBa0UsSUFBQTBPLEVBQUEzWixLQUNsRXlaLEVBQUEsRUFNQSxPQUxBdEYsRUFBQTFCLFVBQUEsU0FBQXJGLEVBQUF1RyxHQUNTLFFBQUE4RixJQUFBLElBQUEvWCxFQUFBcUosRUFBQTBPLElBQUFFLE1BQ1QsSUFBQWpZLEVBQUEwTCxFQUFBcU0sSUFBQUUsSUFDQTFPLEdBRUF3TyxHQUVBb2IsRUFBQXhkLG1CQUFBLFNBQUE5YSxFQUFBME8sR0FDQSxJQUVBMUIsRUFGQUMsRUFBQTJLLEVBQUEyQixXQUFBMUMsRUFBQW5JLEdBQ0F3TyxFQUFBLEVBRUEsV0FBQWhHLEVBQUEsV0FDQSxRQUFBbEssR0FBQWtRLEVBQUEsS0FDQWxRLEVBQUFDLEVBQUFLLFFBQ0FDLEtBQ0FQLEVBR0FrUSxFQUFBLEVBQ0EvRixFQUFBblgsRUFBQWtkLElBQUExTyxHQUNBMkksRUFBQW5YLEVBQUFrZCxJQUFBbFEsRUFBQXJPLE1BQUFxTyxNQUdBc3JCLEVBNHpDQUMsQ0FBQTkwQixLQUFBK0ssS0FHQWdxQixXQUFBLFdBQ0EsSUFBQWpVLEdBQUE5Z0IsTUFBQTZOLE9BQUFxRSxFQUFBcFEsWUFDQWt6QixFQUFBdEssR0FBQTFxQixLQUFBdVUsUUFBQWhFLEVBQUF0QyxHQUFBNlMsR0FDQW1VLEVBQUFELEVBQUF0RixTQUFBLEdBSUEsT0FIQXNGLEVBQUF4aUIsT0FDQXlpQixFQUFBemlCLEtBQUF3aUIsRUFBQXhpQixLQUFBc08sRUFBQWxnQixRQUVBcXFCLEdBQUFqckIsS0FBQWkxQixJQUdBcEksT0FBQSxXQUNBLE9BQUE5VCxHQUFBLEVBQUEvWSxLQUFBd1MsT0FHQThmLEtBQUEsV0FDQSxPQUFBdHlCLEtBQUFsRixLQUFBLElBR0FrNEIsVUFBQSxTQUFBdm9CLEVBQUFxZSxHQUNBLE9BQUFtQyxHQUFBanJCLEtBQUE0cEIsR0FBQTVwQixLQUFBeUssRUFBQXFlLEdBQUEsS0FHQW9NLElBQUEsV0FFQSxPQUFBakssR0FBQWpyQixLQUFBMHFCLEdBQUExcUIsS0FBQXUwQixJQURBdjBCLE1BQUE2TixPQUFBcUUsRUFBQXBRLGVBSUFxekIsUUFBQSxTQUFBdkssR0FDQSxJQUFBOUosRUFBQTVPLEVBQUFwUSxXQUVBLE9BREFnZixFQUFBLEdBQUE5Z0IsS0FDQWlyQixHQUFBanJCLEtBQUEwcUIsR0FBQTFxQixLQUFBNHFCLEVBQUE5SixPQUtBelEsRUFBQXhVLFVBQUFtVixJQUFBLEVBQ0FYLEVBQUF4VSxVQUFBdVYsSUFBQSxFQUlBd2QsR0FBQXBlLEdBSUExVixJQUFBLFNBQUFJLEVBQUFzZSxHQUNBLE9BQUF4WixLQUFBWCxJQUFBbkUsS0FBQXNlLEdBR0ExTyxTQUFBLFNBQUE1UCxHQUNBLE9BQUE4RSxLQUFBWCxJQUFBbkUsSUFNQTJ4QixPQUFBLFdBQ0EsT0FBQTdzQixLQUFBK3JCLGNBS0F2YixFQUFBM1UsVUFBQXdELElBQUF5MEIsR0FBQWhwQixTQUNBMEYsRUFBQTNVLFVBQUFvNEIsU0FBQXpqQixFQUFBM1UsVUFBQWlQLFNBS0E4akIsR0FBQXhlLEVBQUFGLEVBQUFyVSxXQUNBK3lCLEdBQUFyZSxFQUFBRixFQUFBeFUsV0FDQSt5QixHQUFBbGUsRUFBQUYsRUFBQTNVLFdBRUEreUIsR0FBQXZWLEdBQUFuSixFQUFBclUsV0FDQSt5QixHQUFBdFYsR0FBQWpKLEVBQUF4VSxXQUNBK3lCLEdBQUFyVixHQUFBL0ksRUFBQTNVLFlBeUVBa1UsV0FFQUUsTUFDQW1KLGNBQ0FqTCxPQUNBZ1EsY0FDQWtGLFFBQ0EwSyxTQUNBeGMsT0FDQTRiLGNBRUE5QixVQUNBdFMsU0FDQUwsVUFFQVYsTUFDQVYsV0FsMko4RDhkLG9CQ1I5RHA3QixFQUFBRCxTQUFrQnM3QixRQUFZeDdCLEVBQVEsS0FBNEN3QixZQUFBLGlDQ0VsRnRCLEVBQUFzQixZQUFBLEVBRUF0QixFQUFBczdCLFFBQUEsU0FBQUMsRUFBQUMsR0FDQSxLQUFBRCxhQUFBQyxHQUNBLFVBQUF4M0IsVUFBQSxvRUNKQWhFLEVBQUFzQixZQUFBLEVBRUEsSUFFQW02QixFQUVBLFNBQUE3YSxHQUFzQyxPQUFBQSxLQUFBdGYsV0FBQXNmLEdBQXVDMGEsUUFBQTFhLEdBRjdFOGEsQ0FGc0I1N0IsRUFBUSxNQU05QkUsRUFBQXM3QixRQUFBLFdBQ0EsU0FBQUssRUFBQXA0QixFQUFBcTRCLEdBQ0EsUUFBQTE3QixFQUFBLEVBQW1CQSxFQUFBMDdCLEVBQUEvMEIsT0FBa0IzRyxJQUFBLENBQ3JDLElBQUEyN0IsRUFBQUQsRUFBQTE3QixHQUNBMjdCLEVBQUEvNkIsV0FBQSs2QixFQUFBLzZCLGFBQUEsRUFDQSs2QixFQUFBdnBCLGNBQUEsRUFDQSxVQUFBdXBCLE1BQUF0cEIsVUFBQSxJQUNBLEVBQUFrcEIsRUFBQUgsU0FBQS8zQixFQUFBczRCLEVBQUFwNkIsSUFBQW82QixJQUlBLGdCQUFBTCxFQUFBTSxFQUFBQyxHQUdBLE9BRkFELEdBQUFILEVBQUFILEVBQUExNUIsVUFBQWc2QixHQUNBQyxHQUFBSixFQUFBSCxFQUFBTyxHQUNBUCxHQWRBLGlDQ1JBeDdCLEVBQUFzQixZQUFBLEVBRUEsSUFFQTA2QixFQUVBLFNBQUFwYixHQUFzQyxPQUFBQSxLQUFBdGYsV0FBQXNmLEdBQXVDMGEsUUFBQTFhLEdBRjdFOGEsQ0FGZTU3QixFQUFRLE1BTXZCRSxFQUFBczdCLFFBQUEsU0FBQW4zQixFQUFBOUQsR0FDQSxJQUFBOEQsRUFDQSxVQUFBODNCLGVBQUEsNkRBR0EsT0FBQTU3QixHQUFBLHFCQUFBQSxFQUFBLGVBQUEyN0IsRUFBQVYsU0FBQWo3QixLQUFBLG1CQUFBQSxFQUFBOEQsRUFBQTlELGlDQ2JBTCxFQUFBc0IsWUFBQSxFQUVBLElBRUE0NkIsRUFBQVIsRUFGc0I1N0IsRUFBUSxNQU05QnE4QixFQUFBVCxFQUZjNTdCLEVBQVEsTUFNdEJrOEIsRUFBQU4sRUFGZTU3QixFQUFRLE1BSXZCLFNBQUE0N0IsRUFBQTlhLEdBQXNDLE9BQUFBLEtBQUF0ZixXQUFBc2YsR0FBdUMwYSxRQUFBMWEsR0FFN0U1Z0IsRUFBQXM3QixRQUFBLFNBQUFjLEVBQUFybUIsR0FDQSxzQkFBQUEsR0FBQSxPQUFBQSxFQUNBLFVBQUEvUixVQUFBLHFFQUFBK1IsRUFBQSxlQUFBaW1CLEVBQUFWLFNBQUF2bEIsS0FHQXFtQixFQUFBdDZCLFdBQUEsRUFBQXE2QixFQUFBYixTQUFBdmxCLEtBQUFqVSxXQUNBeUYsYUFDQXBHLE1BQUFpN0IsRUFDQXQ3QixZQUFBLEVBQ0F5UixVQUFBLEVBQ0FELGNBQUEsS0FHQXlELElBQUFtbUIsRUFBQVosU0FBQSxFQUFBWSxFQUFBWixTQUFBYyxFQUFBcm1CLEdBQUFxbUIsRUFBQUMsVUFBQXRtQixtQkMvQkE5VixFQUFBRCxRQUFBLFNBQUFxbEIsRUFBQWxrQixHQUNBLE9BQ0FMLGFBQUEsRUFBQXVrQixHQUNBL1MsZUFBQSxFQUFBK1MsR0FDQTlTLFdBQUEsRUFBQThTLEdBQ0Fsa0IseUJDTEEsSUFBQTZULEVBQUEsRUFDQXNuQixFQUFBcDRCLEtBQUFxNEIsU0FDQXQ4QixFQUFBRCxRQUFBLFNBQUF5QixHQUNBLGdCQUFBcVMsWUFBQXJRLElBQUFoQyxFQUFBLEdBQUFBLEVBQUEsUUFBQXVULEVBQUFzbkIsR0FBQXQwQixTQUFBLHVCQ0ZBLElBQUF3MEIsRUFBWTE4QixFQUFRLEtBQ3BCMjhCLEVBQWtCMzhCLEVBQVEsSUFFMUJHLEVBQUFELFFBQUFZLE9BQUFnTSxNQUFBLFNBQUE1SCxHQUNBLE9BQUF3M0IsRUFBQXgzQixFQUFBeTNCLHFCQ0xBLElBQUF2M0IsRUFBZ0JwRixFQUFRLElBQ3hCdVksRUFBQW5VLEtBQUFtVSxJQUNBbFQsRUFBQWpCLEtBQUFpQixJQUNBbEYsRUFBQUQsUUFBQSxTQUFBOEosRUFBQWpELEdBRUEsT0FEQWlELEVBQUE1RSxFQUFBNEUsSUFDQSxFQUFBdU8sRUFBQXZPLEVBQUFqRCxFQUFBLEdBQUExQixFQUFBMkUsRUFBQWpELHFCQ0pBLElBQUFsQyxFQUFlN0UsRUFBUSxHQUN2QjQ4QixFQUFVNThCLEVBQVEsS0FDbEIyOEIsRUFBa0IzOEIsRUFBUSxJQUMxQnNILEVBQWV0SCxFQUFRLEdBQVJBLENBQXVCLFlBQ3RDNjhCLEVBQUEsYUFJQUMsRUFBQSxXQUVBLElBSUFDLEVBSkFDLEVBQWVoOUIsRUFBUSxHQUFSQSxDQUF1QixVQUN0Q0ksRUFBQXU4QixFQUFBNTFCLE9BY0EsSUFWQWkyQixFQUFBQyxNQUFBQyxRQUFBLE9BQ0VsOUIsRUFBUSxJQUFTbTlCLFlBQUFILEdBQ25CQSxFQUFBL3FCLElBQUEsZUFHQThxQixFQUFBQyxFQUFBSSxjQUFBQyxVQUNBQyxPQUNBUCxFQUFBUSxNQUFBQyx1Q0FDQVQsRUFBQVUsUUFDQVgsRUFBQUMsRUFBQS81QixFQUNBNUMsWUFBQTA4QixFQUFBLFVBQUFILEVBQUF2OEIsSUFDQSxPQUFBMDhCLEtBR0EzOEIsRUFBQUQsUUFBQVksT0FBQVksUUFBQSxTQUFBd0QsRUFBQXc0QixHQUNBLElBQUF6ekIsRUFRQSxPQVBBLE9BQUEvRSxHQUNBMjNCLEVBQUEsVUFBQWg0QixFQUFBSyxHQUNBK0UsRUFBQSxJQUFBNHlCLEVBQ0FBLEVBQUEsZUFFQTV5QixFQUFBM0MsR0FBQXBDLEdBQ0crRSxFQUFBNnlCLFNBQ0huNUIsSUFBQSs1QixFQUFBenpCLEVBQUEyeUIsRUFBQTN5QixFQUFBeXpCLHFCQ3RDQSxJQUFBaEIsRUFBWTE4QixFQUFRLEtBQ3BCMjlCLEVBQWlCMzlCLEVBQVEsSUFBa0JnVSxPQUFBLHNCQUUzQzlULEVBQUErRSxFQUFBbkUsT0FBQTg4QixxQkFBQSxTQUFBMTRCLEdBQ0EsT0FBQXczQixFQUFBeDNCLEVBQUF5NEIsa0NDSkEsSUFBQXY3QixFQUFhcEMsRUFBUSxHQUNyQmdGLEVBQVNoRixFQUFRLEdBQ2pCNjlCLEVBQWtCNzlCLEVBQVEsR0FDMUI4OUIsRUFBYzk5QixFQUFRLEVBQVJBLENBQWdCLFdBRTlCRyxFQUFBRCxRQUFBLFNBQUFnSixHQUNBLElBQUFnRyxFQUFBOU0sRUFBQThHLEdBQ0EyMEIsR0FBQTN1QixNQUFBNHVCLElBQUE5NEIsRUFBQUMsRUFBQWlLLEVBQUE0dUIsR0FDQXRyQixjQUFBLEVBQ0F2UixJQUFBLFdBQXNCLE9BQUFrRix3QkNWdEJoRyxFQUFBRCxRQUFBLFNBQUErRCxFQUFBeTNCLEVBQUEvNkIsRUFBQW85QixHQUNBLEtBQUE5NUIsYUFBQXkzQixTQUFBLzNCLElBQUFvNkIsUUFBQTk1QixFQUNBLE1BQUFDLFVBQUF2RCxFQUFBLDJCQUNHLE9BQUFzRCxvQkNISCxJQUFBekIsRUFBVXhDLEVBQVEsSUFDbEJPLEVBQVdQLEVBQVEsS0FDbkI0SyxFQUFrQjVLLEVBQVEsS0FDMUI2RSxFQUFlN0UsRUFBUSxHQUN2Qm1KLEVBQWVuSixFQUFRLElBQ3ZCOEssRUFBZ0I5SyxFQUFRLEtBQ3hCZytCLEtBQ0FDLE1BQ0EvOUIsRUFBQUMsRUFBQUQsUUFBQSxTQUFBb2EsRUFBQXROLEVBQUFuRixFQUFBQyxFQUFBZ0csR0FDQSxJQUdBL0csRUFBQTJJLEVBQUFDLEVBQUExRixFQUhBOEYsRUFBQWpDLEVBQUEsV0FBdUMsT0FBQXdNLEdBQW1CeFAsRUFBQXdQLEdBQzFEclYsRUFBQXpDLEVBQUFxRixFQUFBQyxFQUFBa0YsRUFBQSxLQUNBaEQsRUFBQSxFQUVBLHNCQUFBK0YsRUFBQSxNQUFBN0wsVUFBQW9XLEVBQUEscUJBRUEsR0FBQTFQLEVBQUFtRixJQUFBLElBQUFoSixFQUFBb0MsRUFBQW1SLEVBQUF2VCxRQUFtRUEsRUFBQWlELEVBQWdCQSxJQUVuRixJQURBQyxFQUFBK0MsRUFBQS9ILEVBQUFKLEVBQUE2SyxFQUFBNEssRUFBQXRRLElBQUEsR0FBQTBGLEVBQUEsSUFBQXpLLEVBQUFxVixFQUFBdFEsT0FDQWcwQixHQUFBL3pCLElBQUFnMEIsRUFBQSxPQUFBaDBCLE9BQ0csSUFBQTBGLEVBQUFJLEVBQUF4UCxLQUFBK1osS0FBNEM1SyxFQUFBQyxFQUFBSyxRQUFBQyxNQUUvQyxJQURBaEcsRUFBQTFKLEVBQUFvUCxFQUFBMUssRUFBQXlLLEVBQUFyTyxNQUFBMkwsTUFDQWd4QixHQUFBL3pCLElBQUFnMEIsRUFBQSxPQUFBaDBCLElBR0ErekIsUUFDQTk5QixFQUFBKzlCLDBCQ3hCQSxJQUFBMTdCLEVBQWV2QyxFQUFRLElBQ3ZCRyxFQUFBRCxRQUFBLFNBQUF1RCxFQUFBd08sRUFBQWxNLEdBQ0EsUUFBQXBFLEtBQUFzUSxFQUFBMVAsRUFBQWtCLEVBQUE5QixFQUFBc1EsRUFBQXRRLEdBQUFvRSxHQUNBLE9BQUF0QyxrQkNIQSxJQUFBeEIsS0FBdUJBLGVBQ3ZCOUIsRUFBQUQsUUFBQSxTQUFBK0QsRUFBQXRDLEdBQ0EsT0FBQU0sRUFBQTFCLEtBQUEwRCxFQUFBdEMscUJDRkEsSUFBQWtELEVBQWU3RSxFQUFRLElBQ3ZCOEUsRUFBcUI5RSxFQUFRLEtBQzdCK0UsRUFBa0IvRSxFQUFRLEtBQzFCZ0YsRUFBQWxFLE9BQUFDLGVBRUFiLEVBQUErRSxFQUFZakYsRUFBUSxJQUFnQmMsT0FBQUMsZUFBQSxTQUFBbUUsRUFBQTVCLEVBQUE2QixHQUlwQyxHQUhBTixFQUFBSyxHQUNBNUIsRUFBQXlCLEVBQUF6QixHQUFBLEdBQ0F1QixFQUFBTSxHQUNBTCxFQUFBLElBQ0EsT0FBQUUsRUFBQUUsRUFBQTVCLEVBQUE2QixHQUNHLE1BQUFYLElBQ0gsV0FBQVcsR0FBQSxRQUFBQSxFQUFBLE1BQUFqQixVQUFBLDRCQUVBLE1BREEsVUFBQWlCLElBQUFELEVBQUE1QixHQUFBNkIsRUFBQTlELE9BQ0E2RCxvQkNiQS9FLEVBQUFELFNBQWtCRixFQUFRLEdBQVJBLENBQWtCLFdBQ3BDLE9BQTBFLEdBQTFFYyxPQUFBQyxrQkFBaUMsS0FBUUUsSUFBQSxXQUFtQixZQUFjMkQscUJDRjFFLElBQUFzNUIsRUFBVWwrQixFQUFRLEdBQWNpRixFQUNoQ08sRUFBVXhGLEVBQVEsSUFDbEIrTixFQUFVL04sRUFBUSxFQUFSQSxDQUFnQixlQUUxQkcsRUFBQUQsUUFBQSxTQUFBK0QsRUFBQXVDLEVBQUEyM0IsR0FDQWw2QixJQUFBdUIsRUFBQXZCLEVBQUFrNkIsRUFBQWw2QixJQUFBakMsVUFBQStMLElBQUFtd0IsRUFBQWo2QixFQUFBOEosR0FBb0V5RSxjQUFBLEVBQUFuUixNQUFBbUYsc0JDTHBFLElBQUEvRCxFQUFjekMsRUFBUSxHQUN0QnNGLEVBQWN0RixFQUFRLElBQ3RCb0csRUFBWXBHLEVBQVEsR0FDcEJvK0IsRUFBYXArQixFQUFRLElBQ3JCcStCLEVBQUEsSUFBQUQsRUFBQSxJQUVBRSxFQUFBQyxPQUFBLElBQUFGLElBQUEsS0FDQUcsRUFBQUQsT0FBQUYsSUFBQSxNQUVBSSxFQUFBLFNBQUF2MUIsRUFBQTNFLEVBQUFtNkIsR0FDQSxJQUFBNTdCLEtBQ0E2N0IsRUFBQXY0QixFQUFBLFdBQ0EsUUFBQWc0QixFQUFBbDFCLE1BUEEsV0FPQUEsT0FFQXJCLEVBQUEvRSxFQUFBb0csR0FBQXkxQixFQUFBcDZCLEVBQUFxNkIsR0FBQVIsRUFBQWwxQixHQUNBdzFCLElBQUE1N0IsRUFBQTQ3QixHQUFBNzJCLEdBQ0FwRixJQUFBYSxFQUFBYixFQUFBTyxFQUFBMjdCLEVBQUEsU0FBQTc3QixJQU1BODdCLEVBQUFILEVBQUFHLEtBQUEsU0FBQXI0QixFQUFBOEMsR0FJQSxPQUhBOUMsRUFBQUwsT0FBQVosRUFBQWlCLElBQ0EsRUFBQThDLElBQUE5QyxJQUFBSSxRQUFBMjNCLEVBQUEsS0FDQSxFQUFBajFCLElBQUE5QyxJQUFBSSxRQUFBNjNCLEVBQUEsS0FDQWo0QixHQUdBcEcsRUFBQUQsUUFBQXUrQixpQkM3QkF0K0IsRUFBQUQsNEJDQUEsSUFBQThELEVBQWVoRSxFQUFRLEdBQ3ZCRyxFQUFBRCxRQUFBLFNBQUErRCxFQUFBb0YsR0FDQSxJQUFBckYsRUFBQUMsTUFBQTQ2QixLQUFBeDFCLEVBQUEsTUFBQW5GLFVBQUEsMEJBQUFtRixFQUFBLGNBQ0EsT0FBQXBGLG9CQ0hBLElBQUE3QixFQUFhcEMsRUFBUSxJQUNyQnFDLEVBQVdyQyxFQUFRLElBQ25Cd0MsRUFBVXhDLEVBQVEsS0FDbEJzQyxFQUFXdEMsRUFBUSxJQUNuQndGLEVBQVV4RixFQUFRLElBR2xCeUMsRUFBQSxTQUFBQyxFQUFBL0IsRUFBQWdDLEdBQ0EsSUFTQWhCLEVBQUFpQixFQUFBQyxFQVRBRSxFQUFBTCxFQUFBRCxFQUFBTyxFQUNBQyxFQUFBUCxFQUFBRCxFQUFBUyxFQUNBQyxFQUFBVCxFQUFBRCxFQUFBVyxFQUNBQyxFQUFBWCxFQUFBRCxFQUFBYSxFQUNBQyxFQUFBYixFQUFBRCxFQUFBZSxFQUNBczdCLEVBQUFwOEIsRUFBQUQsRUFBQXFCLEVBQ0E1RCxFQUFBK0MsRUFBQVosSUFBQTFCLEtBQUEwQixFQUFBMUIsT0FDQStDLEVBQUF4RCxFQUFBLFVBQ0F1RCxFQUFBUixFQUFBYixFQUFBZSxFQUFBZixFQUFBekIsSUFBQXlCLEVBQUF6QixRQUFrRixVQUdsRixJQUFBZ0IsS0FEQXNCLElBQUFOLEVBQUFoQyxHQUNBZ0MsR0FFQUMsR0FBQUcsR0FBQVUsUUFBQUUsSUFBQUYsRUFBQTlCLEtBQ0E2RCxFQUFBdEYsRUFBQXlCLEtBRUFrQixFQUFBRCxFQUFBYSxFQUFBOUIsR0FBQWdCLEVBQUFoQixHQUVBekIsRUFBQXlCLEdBQUFzQixHQUFBLG1CQUFBUSxFQUFBOUIsR0FBQWdCLEVBQUFoQixHQUVBNEIsR0FBQVgsRUFBQUosRUFBQUssRUFBQVQsR0FFQTA4QixHQUFBcjdCLEVBQUE5QixJQUFBa0IsRUFBQSxTQUFBcU0sR0FDQSxJQUFBbE0sRUFBQSxTQUFBNEIsRUFBQW1ELEVBQUF0SCxHQUNBLEdBQUEwRixnQkFBQStJLEVBQUEsQ0FDQSxPQUFBakgsVUFBQWxCLFFBQ0Esa0JBQUFtSSxFQUNBLGtCQUFBQSxFQUFBdEssR0FDQSxrQkFBQXNLLEVBQUF0SyxFQUFBbUQsR0FDVyxXQUFBbUgsRUFBQXRLLEVBQUFtRCxFQUFBdEgsR0FDRixPQUFBeU8sRUFBQWxILE1BQUE3QixLQUFBOEIsWUFHVCxPQURBakYsRUFBQSxVQUFBa00sRUFBQSxVQUNBbE0sRUFYQSxDQWFLSCxHQUFBUSxHQUFBLG1CQUFBUixFQUFBTCxFQUFBb0IsU0FBQXJELEtBQUFzQyxLQUVMUSxLQUNBbkQsRUFBQTYrQixVQUFBNytCLEVBQUE2K0IsYUFBK0NwOUIsR0FBQWtCLEVBRS9DSCxFQUFBRCxFQUFBc0IsR0FBQUwsTUFBQS9CLElBQUFXLEVBQUFvQixFQUFBL0IsRUFBQWtCLE1BS0FKLEVBQUFPLEVBQUEsRUFDQVAsRUFBQVMsRUFBQSxFQUNBVCxFQUFBVyxFQUFBLEVBQ0FYLEVBQUFhLEVBQUEsRUFDQWIsRUFBQWUsRUFBQSxHQUNBZixFQUFBcUIsRUFBQSxHQUNBckIsRUFBQW9CLEVBQUEsR0FDQXBCLEVBQUFzQixFQUFBLElBQ0E1RCxFQUFBRCxRQUFBdUMsbUJDN0RBLElBQUF1QyxFQUFTaEYsRUFBUSxJQUNqQnVGLEVBQWlCdkYsRUFBUSxJQUN6QkcsRUFBQUQsUUFBaUJGLEVBQVEsSUFBZ0IsU0FBQThCLEVBQUFILEVBQUFOLEdBQ3pDLE9BQUEyRCxFQUFBQyxFQUFBbkQsRUFBQUgsRUFBQTRELEVBQUEsRUFBQWxFLEtBQ0MsU0FBQVMsRUFBQUgsRUFBQU4sR0FFRCxPQURBUyxFQUFBSCxHQUFBTixFQUNBUyxrQkNOQTNCLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsdUJBQUFBLEVBQUEsT0FBQUEsRUFBQSxtQkFBQUEsb0JDQUEsSUFBQStDLEVBQWNoSCxFQUFRLEtBQ3RCc0YsRUFBY3RGLEVBQVEsS0FDdEJHLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsT0FBQStDLEVBQUExQixFQUFBckIsc0JDSkEsSUFBQVEsRUFBWXpFLEVBQVEsSUFBUkEsQ0FBbUIsT0FDL0IwRSxFQUFVMUUsRUFBUSxJQUNsQm1CLEVBQWFuQixFQUFRLElBQVdtQixPQUNoQ3dELEVBQUEsbUJBQUF4RCxHQUVBaEIsRUFBQUQsUUFBQSxTQUFBUyxHQUNBLE9BQUE4RCxFQUFBOUQsS0FBQThELEVBQUE5RCxHQUNBZ0UsR0FBQXhELEVBQUFSLEtBQUFnRSxFQUFBeEQsRUFBQXVELEdBQUEsVUFBQS9ELE1BR0E4RCx5QkNUQSxJQUFBdTZCLEVBQVVoL0IsRUFBUSxJQUVsQkcsRUFBQUQsUUFBQVksT0FBQSxLQUFBcWdCLHFCQUFBLEdBQUFyZ0IsT0FBQSxTQUFBbUQsR0FDQSxnQkFBQSs2QixFQUFBLzZCLEtBQUEyQixNQUFBLElBQUE5RSxPQUFBbUQsbUJDSkEvRCxFQUFBK0UsS0FBY2tjLHNDQ0NkLElBQUE2ZCxFQUFVaC9CLEVBQVEsSUFDbEIrTixFQUFVL04sRUFBUSxFQUFSQSxDQUFnQixlQUUxQmkvQixFQUErQyxhQUEvQ0QsRUFBQSxXQUEyQixPQUFBLzJCLFVBQTNCLElBU0E5SCxFQUFBRCxRQUFBLFNBQUErRCxHQUNBLElBQUFpQixFQUFBZzZCLEVBQUExN0IsRUFDQSxZQUFBRyxJQUFBTSxFQUFBLG1CQUFBQSxFQUFBLE9BRUEsaUJBQUFpN0IsRUFWQSxTQUFBajdCLEVBQUF0QyxHQUNBLElBQ0EsT0FBQXNDLEVBQUF0QyxHQUNHLE1BQUE2QyxLQU9IMjZCLENBQUFqNkIsRUFBQXBFLE9BQUFtRCxHQUFBOEosSUFBQW14QixFQUVBRCxFQUFBRCxFQUFBOTVCLEdBRUEsV0FBQTFCLEVBQUF3N0IsRUFBQTk1QixLQUFBLG1CQUFBQSxFQUFBazZCLE9BQUEsWUFBQTU3QixvQkNyQkEsSUFBQVEsRUFBZWhFLEVBQVEsSUFDdkJHLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsSUFBQUQsRUFBQUMsR0FBQSxNQUFBQyxVQUFBRCxFQUFBLHNCQUNBLE9BQUFBLGtCQ0hBOUQsRUFBQUQsUUFBQSxTQUFBcUUsR0FDQSxJQUNBLFFBQUFBLElBQ0csTUFBQUMsR0FDSCwwQkNKQSxJQUFBNjZCLEVBR0FBLEVBQUEsV0FDQSxPQUFBbDVCLEtBREEsR0FJQSxJQUVBazVCLEtBQUF6N0IsU0FBQSxjQUFBQSxLQUFBLEVBQUEwN0IsTUFBQSxRQUNDLE1BQUE5NkIsR0FFRCxpQkFBQUwsU0FBQWs3QixFQUFBbDdCLFFBT0FoRSxFQUFBRCxRQUFBbS9CLG1CQ25CQSxJQUFBaDlCLEVBQVdyQyxFQUFRLElBQ25Cb0MsRUFBYXBDLEVBQVEsR0FFckJ5RSxFQUFBckMsRUFEQSx3QkFDQUEsRUFEQSwyQkFHQWpDLEVBQUFELFFBQUEsU0FBQXlCLEVBQUFOLEdBQ0EsT0FBQW9ELEVBQUE5QyxLQUFBOEMsRUFBQTlDLFFBQUFnQyxJQUFBdEMsVUFDQyxlQUFBNkksTUFDRHhDLFFBQUFyRixFQUFBcUYsUUFDQW5HLEtBQVF2QixFQUFRLElBQVksZ0JBQzVCdS9CLFVBQUEsMERDUkEsSUFBQXI0QixFQUFnQmxILEVBQVEsSUFDeEJtSixFQUFlbkosRUFBUSxJQUN2QjBLLEVBQXNCMUssRUFBUSxJQUM5QkcsRUFBQUQsUUFBQSxTQUFBcy9CLEdBQ0EsZ0JBQUEzMUIsRUFBQTQxQixFQUFBQyxHQUNBLElBR0FyK0IsRUFIQTZELEVBQUFnQyxFQUFBMkMsR0FDQTlDLEVBQUFvQyxFQUFBakUsRUFBQTZCLFFBQ0FpRCxFQUFBVSxFQUFBZzFCLEVBQUEzNEIsR0FJQSxHQUFBeTRCLEdBQUFDLE1BQUEsS0FBQTE0QixFQUFBaUQsR0FHQSxJQUZBM0ksRUFBQTZELEVBQUE4RSxPQUVBM0ksRUFBQSxjQUVLLEtBQVkwRixFQUFBaUQsRUFBZUEsSUFBQSxJQUFBdzFCLEdBQUF4MUIsS0FBQTlFLElBQ2hDQSxFQUFBOEUsS0FBQXkxQixFQUFBLE9BQUFELEdBQUF4MUIsR0FBQSxFQUNLLE9BQUF3MUIsSUFBQSxtQkNwQkx0L0IsRUFBQStFLEVBQUFuRSxPQUFBbzBCLHVDQ0NBLElBQUE4SixFQUFVaC9CLEVBQVEsSUFDbEJHLEVBQUFELFFBQUE0TCxNQUFBcVIsU0FBQSxTQUFBOVUsR0FDQSxlQUFBMjJCLEVBQUEzMkIscUJDRkEsSUFBQXJFLEVBQWVoRSxFQUFRLEdBQ3ZCZy9CLEVBQVVoL0IsRUFBUSxJQUNsQjIvQixFQUFZMy9CLEVBQVEsRUFBUkEsQ0FBZ0IsU0FDNUJHLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsSUFBQTI3QixFQUNBLE9BQUE1N0IsRUFBQUMsVUFBQU4sS0FBQWk4QixFQUFBMzdCLEVBQUEwN0IsTUFBQUMsRUFBQSxVQUFBWixFQUFBLzZCLHNCQ05BLElBQUE2SixFQUFlOU4sRUFBUSxFQUFSQSxDQUFnQixZQUMvQjYvQixHQUFBLEVBRUEsSUFDQSxJQUFBQyxHQUFBLEdBQUFoeUIsS0FDQWd5QixFQUFBLGtCQUFpQ0QsR0FBQSxHQUVqQy96QixNQUFBdUksS0FBQXlyQixFQUFBLFdBQWlDLFVBQ2hDLE1BQUF0N0IsSUFFRHJFLEVBQUFELFFBQUEsU0FBQXFFLEVBQUF3N0IsR0FDQSxJQUFBQSxJQUFBRixFQUFBLFNBQ0EsSUFBQTk1QixHQUFBLEVBQ0EsSUFDQSxJQUFBdVMsR0FBQSxHQUNBdkUsRUFBQXVFLEVBQUF4SyxLQUNBaUcsRUFBQS9ELEtBQUEsV0FBNkIsT0FBU0MsS0FBQWxLLEdBQUEsSUFDdEN1UyxFQUFBeEssR0FBQSxXQUFpQyxPQUFBaUcsR0FDakN4UCxFQUFBK1QsR0FDRyxNQUFBOVQsSUFDSCxPQUFBdUIsaUNDbEJBLElBQUFsQixFQUFlN0UsRUFBUSxHQUN2QkcsRUFBQUQsUUFBQSxXQUNBLElBQUE0SCxFQUFBakQsRUFBQXNCLE1BQ0E4RCxFQUFBLEdBTUEsT0FMQW5DLEVBQUExRixTQUFBNkgsR0FBQSxLQUNBbkMsRUFBQWs0QixhQUFBLzFCLEdBQUEsS0FDQW5DLEVBQUFtNEIsWUFBQWgyQixHQUFBLEtBQ0FuQyxFQUFBbzRCLFVBQUFqMkIsR0FBQSxLQUNBbkMsRUFBQXE0QixTQUFBbDJCLEdBQUEsS0FDQUEsaUNDVkEsSUFBQTNILEVBQVd0QyxFQUFRLElBQ25CdUMsRUFBZXZDLEVBQVEsSUFDdkJvRyxFQUFZcEcsRUFBUSxHQUNwQnNGLEVBQWN0RixFQUFRLElBQ3RCK0ssRUFBVS9LLEVBQVEsR0FFbEJHLEVBQUFELFFBQUEsU0FBQWdKLEVBQUFuQyxFQUFBeEMsR0FDQSxJQUFBNjdCLEVBQUFyMUIsRUFBQTdCLEdBQ0FtM0IsRUFBQTk3QixFQUFBZSxFQUFBODZCLEVBQUEsR0FBQWwzQixJQUNBbzNCLEVBQUFELEVBQUEsR0FDQUUsRUFBQUYsRUFBQSxHQUNBajZCLEVBQUEsV0FDQSxJQUFBbEIsS0FFQSxPQURBQSxFQUFBazdCLEdBQUEsV0FBNkIsVUFDN0IsTUFBQWwzQixHQUFBaEUsT0FFQTNDLEVBQUEyRCxPQUFBbEUsVUFBQWtILEVBQUFvM0IsR0FDQWgrQixFQUFBaThCLE9BQUF2OEIsVUFBQW8rQixFQUFBLEdBQUFyNUIsRUFHQSxTQUFBUixFQUFBOEIsR0FBZ0MsT0FBQWs0QixFQUFBaGdDLEtBQUFnRyxFQUFBSixLQUFBa0MsSUFHaEMsU0FBQTlCLEdBQTJCLE9BQUFnNkIsRUFBQWhnQyxLQUFBZ0csRUFBQUosMkJDdkIzQixJQUFBdEIsRUFBZTdFLEVBQVEsR0FDdkI0SCxFQUFnQjVILEVBQVEsSUFDeEI4OUIsRUFBYzk5QixFQUFRLEVBQVJBLENBQWdCLFdBQzlCRyxFQUFBRCxRQUFBLFNBQUFnRixFQUFBczdCLEdBQ0EsSUFDQXA5QixFQURBOEwsRUFBQXJLLEVBQUFLLEdBQUF1QyxZQUVBLFlBQUE5RCxJQUFBdUwsUUFBQXZMLElBQUFQLEVBQUF5QixFQUFBcUssR0FBQTR1QixJQUFBMEMsRUFBQTU0QixFQUFBeEUscUJDUEEsSUFDQXE5QixFQURhemdDLEVBQVEsR0FDckJ5Z0MsVUFFQXRnQyxFQUFBRCxRQUFBdWdDLEtBQUFDLFdBQUEsaUNDRkEsSUFBQXQrQixFQUFhcEMsRUFBUSxHQUNyQnlDLEVBQWN6QyxFQUFRLEdBQ3RCdUMsRUFBZXZDLEVBQVEsSUFDdkJ3SyxFQUFrQnhLLEVBQVEsSUFDMUJ3VixFQUFXeFYsRUFBUSxJQUNuQjJnQyxFQUFZM2dDLEVBQVEsSUFDcEJzSyxFQUFpQnRLLEVBQVEsSUFDekJnRSxFQUFlaEUsRUFBUSxHQUN2Qm9HLEVBQVlwRyxFQUFRLEdBQ3BCcUwsRUFBa0JyTCxFQUFRLElBQzFCNGdDLEVBQXFCNWdDLEVBQVEsSUFDN0I2Z0MsRUFBd0I3Z0MsRUFBUSxJQUVoQ0csRUFBQUQsUUFBQSxTQUFBMEcsRUFBQStMLEVBQUFxaUIsRUFBQThMLEVBQUF2M0IsRUFBQXczQixHQUNBLElBQUEvdEIsRUFBQTVRLEVBQUF3RSxHQUNBc0ksRUFBQThELEVBQ0FndUIsRUFBQXozQixFQUFBLFlBQ0E4RyxFQUFBbkIsS0FBQWxOLFVBQ0FrRCxLQUNBKzdCLEVBQUEsU0FBQS8zQixHQUNBLElBQUFyQixFQUFBd0ksRUFBQW5ILEdBQ0EzRyxFQUFBOE4sRUFBQW5ILEVBQ0EsVUFBQUEsRUFBQSxTQUFBdEUsR0FDQSxRQUFBbThCLElBQUEvOEIsRUFBQVksS0FBQWlELEVBQUF0SCxLQUFBNEYsS0FBQSxJQUFBdkIsRUFBQSxFQUFBQSxJQUNPLE9BQUFzRSxFQUFBLFNBQUF0RSxHQUNQLFFBQUFtOEIsSUFBQS84QixFQUFBWSxLQUFBaUQsRUFBQXRILEtBQUE0RixLQUFBLElBQUF2QixFQUFBLEVBQUFBLElBQ08sT0FBQXNFLEVBQUEsU0FBQXRFLEdBQ1AsT0FBQW04QixJQUFBLzhCLEVBQUFZLFFBQUFqQixFQUFBa0UsRUFBQXRILEtBQUE0RixLQUFBLElBQUF2QixFQUFBLEVBQUFBLElBQ08sT0FBQXNFLEVBQUEsU0FBQXRFLEdBQW1FLE9BQWhDaUQsRUFBQXRILEtBQUE0RixLQUFBLElBQUF2QixFQUFBLEVBQUFBLEdBQWdDdUIsTUFDMUUsU0FBQXZCLEVBQUFtRCxHQUFpRSxPQUFuQ0YsRUFBQXRILEtBQUE0RixLQUFBLElBQUF2QixFQUFBLEVBQUFBLEVBQUFtRCxHQUFtQzVCLFFBR2pFLHNCQUFBK0ksSUFBQTZ4QixHQUFBMXdCLEVBQUFTLFVBQUExSyxFQUFBLFlBQ0EsSUFBQThJLEdBQUFsQyxVQUFBZ0QsVUFNRyxDQUNILElBQUF5ckIsRUFBQSxJQUFBdnNCLEVBRUFneUIsRUFBQXpGLEVBQUF1RixHQUFBRCxNQUFxRCxNQUFBdEYsRUFFckQwRixFQUFBLzZCLEVBQUEsV0FBa0RxMUIsRUFBQWoyQixJQUFBLEtBRWxENDdCLEVBQUEvMUIsRUFBQSxTQUFBMEksR0FBd0QsSUFBQTdFLEVBQUE2RSxLQUV4RHN0QixHQUFBTixHQUFBMzZCLEVBQUEsV0FJQSxJQUZBLElBQUFrN0IsRUFBQSxJQUFBcHlCLEVBQ0FsRixFQUFBLEVBQ0FBLEtBQUFzM0IsRUFBQU4sR0FBQWgzQixLQUNBLE9BQUFzM0IsRUFBQTk3QixLQUFBLEtBRUE0N0IsS0FDQWx5QixFQUFBeUQsRUFBQSxTQUFBbFAsRUFBQTZXLEdBQ0FoUSxFQUFBN0csRUFBQXlMLEVBQUF0SSxHQUNBLElBQUFrQixFQUFBKzRCLEVBQUEsSUFBQTd0QixFQUFBdlAsRUFBQXlMLEdBRUEsWUFEQXZMLEdBQUEyVyxHQUFBcW1CLEVBQUFybUIsRUFBQS9RLEVBQUF6QixFQUFBazVCLEdBQUFsNUIsR0FDQUEsS0FFQTlGLFVBQUFxTyxFQUNBQSxFQUFBNUksWUFBQXlILElBRUFpeUIsR0FBQUUsS0FDQUosRUFBQSxVQUNBQSxFQUFBLE9BQ0ExM0IsR0FBQTAzQixFQUFBLFNBRUFJLEdBQUFILElBQUFELEVBQUFELEdBRUFELEdBQUExd0IsRUFBQWtULGNBQUFsVCxFQUFBa1QsV0FwQ0FyVSxFQUFBNHhCLEVBQUFTLGVBQUE1dUIsRUFBQS9MLEVBQUEyQyxFQUFBeTNCLEdBQ0F4MkIsRUFBQTBFLEVBQUFsTixVQUFBZ3pCLEdBQ0F4ZixFQUFBQyxNQUFBLEVBNENBLE9BUEFtckIsRUFBQTF4QixFQUFBdEksR0FFQTFCLEVBQUEwQixHQUFBc0ksRUFDQXpNLElBQUFTLEVBQUFULEVBQUFxQixFQUFBckIsRUFBQU8sR0FBQWtNLEdBQUE4RCxHQUFBOU4sR0FFQTY3QixHQUFBRCxFQUFBVSxVQUFBdHlCLEVBQUF0SSxFQUFBMkMsR0FFQTJGLG9CQ3BFQSxJQWZBLElBU0F1eUIsRUFUQXIvQixFQUFhcEMsRUFBUSxHQUNyQnNDLEVBQVd0QyxFQUFRLElBQ25CMEUsRUFBVTFFLEVBQVEsSUFDbEJxTyxFQUFBM0osRUFBQSxlQUNBNEosRUFBQTVKLEVBQUEsUUFDQXlPLEtBQUEvUSxFQUFBNEosY0FBQTVKLEVBQUE4SixVQUNBaUMsRUFBQWdGLEVBQ0EvUyxFQUFBLEVBSUFzaEMsRUFBQSxpSEFFQTk3QixNQUFBLEtBRUF4RixFQVBBLElBUUFxaEMsRUFBQXIvQixFQUFBcy9CLEVBQUF0aEMsUUFDQWtDLEVBQUFtL0IsRUFBQXovQixVQUFBcU0sR0FBQSxHQUNBL0wsRUFBQW0vQixFQUFBei9CLFVBQUFzTSxHQUFBLElBQ0dILEdBQUEsRUFHSGhPLEVBQUFELFNBQ0FpVCxNQUNBaEYsU0FDQUUsUUFDQUMsc0NDeEJBbk8sRUFBQUQsUUFBaUJGLEVBQVEsTUFBa0JBLEVBQVEsRUFBUkEsQ0FBa0IsV0FDN0QsSUFBQTJoQyxFQUFBdjlCLEtBQUFxNEIsU0FHQW1GLGlCQUFBcmhDLEtBQUEsS0FBQW9oQyxFQUFBLHFCQUNTM2hDLEVBQVEsR0FBVzJoQyxtQ0NMNUIsSUFBQWwvQixFQUFjekMsRUFBUSxHQUV0QkcsRUFBQUQsUUFBQSxTQUFBMmhDLEdBQ0FwL0IsSUFBQVcsRUFBQXkrQixHQUFrQ3p0QixHQUFBLFdBR2xDLElBRkEsSUFBQXJOLEVBQUFrQixVQUFBbEIsT0FDQSs2QixFQUFBLElBQUFoMkIsTUFBQS9FLEdBQ0FBLEtBQUErNkIsRUFBQS82QixHQUFBa0IsVUFBQWxCLEdBQ0EsV0FBQVosS0FBQTI3QixxQ0NQQSxJQUFBci9CLEVBQWN6QyxFQUFRLEdBQ3RCNEgsRUFBZ0I1SCxFQUFRLElBQ3hCd0MsRUFBVXhDLEVBQVEsSUFDbEIyZ0MsRUFBWTNnQyxFQUFRLElBRXBCRyxFQUFBRCxRQUFBLFNBQUEyaEMsR0FDQXAvQixJQUFBVyxFQUFBeStCLEdBQWtDeHRCLEtBQUEsU0FBQTFSLEdBQ2xDLElBQ0FtTixFQUFBZ3lCLEVBQUFqZ0MsRUFBQWtnQyxFQURBQyxFQUFBLzVCLFVBQUEsR0FLQSxPQUhBTCxFQUFBekIsT0FDQTJKLE9BQUFuTSxJQUFBcStCLElBQ0FwNkIsRUFBQW82QixRQUNBcitCLEdBQUFoQixFQUFBLElBQUF3RCxNQUNBMjdCLEtBQ0FoeUIsR0FDQWpPLEVBQUEsRUFDQWtnQyxFQUFBdi9CLEVBQUF3L0IsRUFBQS81QixVQUFBLE1BQ0EwNEIsRUFBQWgrQixHQUFBLFdBQUFzL0IsR0FDQUgsRUFBQTUzQixLQUFBNjNCLEVBQUFFLEVBQUFwZ0MsU0FHQTgrQixFQUFBaCtCLEdBQUEsRUFBQW0vQixFQUFBNTNCLEtBQUE0M0IsR0FFQSxJQUFBMzdCLEtBQUEyN0IsdUJDekJBM2hDLEVBQUFELFNBQUEsaUJDQUEsSUFBQWdWLEVBQUEsRUFDQXNuQixFQUFBcDRCLEtBQUFxNEIsU0FDQXQ4QixFQUFBRCxRQUFBLFNBQUF5QixHQUNBLGdCQUFBcVMsWUFBQXJRLElBQUFoQyxFQUFBLEdBQUFBLEVBQUEsUUFBQXVULEVBQUFzbkIsR0FBQXQwQixTQUFBLHFCQ0hBL0gsRUFBQUQsUUFBQSxTQUFBcWxCLEVBQUFsa0IsR0FDQSxPQUNBTCxhQUFBLEVBQUF1a0IsR0FDQS9TLGVBQUEsRUFBQStTLEdBQ0E5UyxXQUFBLEVBQUE4UyxHQUNBbGtCLDJCQ0xBLElBQUEyQyxFQUFlaEUsRUFBUSxHQUN2QnE5QixFQUFlcjlCLEVBQVEsR0FBV3E5QixTQUVsQ2xmLEVBQUFuYSxFQUFBcTVCLElBQUFyNUIsRUFBQXE1QixFQUFBNkUsZUFDQS9oQyxFQUFBRCxRQUFBLFNBQUErRCxHQUNBLE9BQUFrYSxFQUFBa2YsRUFBQTZFLGNBQUFqK0Isd0JDTEEsSUFBQTdCLEVBQWFwQyxFQUFRLEdBQ3JCcUMsRUFBV3JDLEVBQVEsSUFDbkJtSyxFQUFjbkssRUFBUSxJQUN0Qm1pQyxFQUFhbmlDLEVBQVEsS0FDckJlLEVBQXFCZixFQUFRLEdBQWNpRixFQUMzQzlFLEVBQUFELFFBQUEsU0FBQVMsR0FDQSxJQUFBeWhDLEVBQUEvL0IsRUFBQWxCLFNBQUFrQixFQUFBbEIsT0FBQWdKLEtBQTBEL0gsRUFBQWpCLFlBQzFELEtBQUFSLEVBQUEwaEMsT0FBQSxJQUFBMWhDLEtBQUF5aEMsR0FBQXJoQyxFQUFBcWhDLEVBQUF6aEMsR0FBa0ZVLE1BQUE4Z0MsRUFBQWw5QixFQUFBdEUsdUJDUGxGLElBQUE0VCxFQUFhdlUsRUFBUSxHQUFSQSxDQUFtQixRQUNoQzBFLEVBQVUxRSxFQUFRLElBQ2xCRyxFQUFBRCxRQUFBLFNBQUF5QixHQUNBLE9BQUE0UyxFQUFBNVMsS0FBQTRTLEVBQUE1UyxHQUFBK0MsRUFBQS9DLG9CQ0ZBeEIsRUFBQUQsUUFBQSxnR0FFQTBGLE1BQUEsc0JDSEEsSUFBQXkzQixFQUFlcjlCLEVBQVEsR0FBV3E5QixTQUNsQ2w5QixFQUFBRCxRQUFBbTlCLEtBQUE5YixpQ0NDQSxJQUFBdmQsRUFBZWhFLEVBQVEsR0FDdkI2RSxFQUFlN0UsRUFBUSxHQUN2QnNpQyxFQUFBLFNBQUFwOUIsRUFBQW1MLEdBRUEsR0FEQXhMLEVBQUFLLElBQ0FsQixFQUFBcU0sSUFBQSxPQUFBQSxFQUFBLE1BQUFuTSxVQUFBbU0sRUFBQSw4QkFFQWxRLEVBQUFELFNBQ0EyTyxJQUFBL04sT0FBQXloQyxpQkFBQSxnQkFDQSxTQUFBMTdCLEVBQUEyN0IsRUFBQTN6QixHQUNBLEtBQ0FBLEVBQWM3TyxFQUFRLEdBQVJBLENBQWdCNEQsU0FBQXJELEtBQWlCUCxFQUFRLElBQWdCaUYsRUFBQW5FLE9BQUFrQixVQUFBLGFBQUE2TSxJQUFBLElBQ3ZFaEksTUFDQTI3QixJQUFBMzdCLGFBQUFpRixPQUNPLE1BQUF0SCxHQUFZZytCLEdBQUEsRUFDbkIsZ0JBQUF0OUIsRUFBQW1MLEdBSUEsT0FIQWl5QixFQUFBcDlCLEVBQUFtTCxHQUNBbXlCLEVBQUF0OUIsRUFBQXEzQixVQUFBbHNCLEVBQ0F4QixFQUFBM0osRUFBQW1MLEdBQ0FuTCxHQVZBLEtBWVEsUUFBQXZCLEdBQ1IyK0Isd0JDdkJBbmlDLEVBQUFELFFBQUEsa0VDQUEsSUFBQThELEVBQWVoRSxFQUFRLEdBQ3ZCdWlDLEVBQXFCdmlDLEVBQVEsSUFBYzZPLElBQzNDMU8sRUFBQUQsUUFBQSxTQUFBNEgsRUFBQXJFLEVBQUF5TCxHQUNBLElBQ0E1TCxFQURBRixFQUFBSyxFQUFBZ0UsWUFJRyxPQUZIckUsSUFBQThMLEdBQUEsbUJBQUE5TCxJQUFBRSxFQUFBRixFQUFBcEIsYUFBQWtOLEVBQUFsTixXQUFBZ0MsRUFBQVYsSUFBQWkvQixHQUNBQSxFQUFBejZCLEVBQUF4RSxHQUNHd0UsaUNDTkgsSUFBQTFDLEVBQWdCcEYsRUFBUSxJQUN4QnNGLEVBQWN0RixFQUFRLElBRXRCRyxFQUFBRCxRQUFBLFNBQUF3bEIsR0FDQSxJQUFBK2MsRUFBQXY4QixPQUFBWixFQUFBYSxPQUNBNEQsRUFBQSxHQUNBbEksRUFBQXVELEVBQUFzZ0IsR0FDQSxHQUFBN2pCLEVBQUEsR0FBQUEsR0FBQW1kLElBQUEsTUFBQXJULFdBQUEsMkJBQ0EsS0FBUTlKLEVBQUEsR0FBTUEsS0FBQSxLQUFBNGdDLE1BQUEsRUFBQTVnQyxJQUFBa0ksR0FBQTA0QixHQUNkLE9BQUExNEIsa0JDVEE1SixFQUFBRCxRQUFBa0UsS0FBQXMrQixNQUFBLFNBQUFyYixHQUVBLFdBQUFBLGdCQUFBLHVCQ0ZBLElBQUFzYixFQUFBditCLEtBQUF3K0IsTUFDQXppQyxFQUFBRCxTQUFBeWlDLEdBRUFBLEVBQUEsd0JBQUFBLEVBQUEseUJBRUEsT0FBQUEsR0FBQSxPQUNBLFNBQUF0YixHQUNBLFdBQUFBLFdBQUEsTUFBQUEsRUFBQSxLQUFBQSxNQUFBLEVBQUFqakIsS0FBQXRCLElBQUF1a0IsR0FBQSxHQUNDc2IsbUJDVEQsSUFBQXY5QixFQUFnQnBGLEVBQVEsSUFDeEJzRixFQUFjdEYsRUFBUSxJQUd0QkcsRUFBQUQsUUFBQSxTQUFBMmlDLEdBQ0EsZ0JBQUEvNkIsRUFBQWc3QixHQUNBLElBR0FsK0IsRUFBQW1ELEVBSEE1RixFQUFBK0QsT0FBQVosRUFBQXdDLElBQ0ExSCxFQUFBZ0YsRUFBQTA5QixHQUNBemlDLEVBQUE4QixFQUFBNEUsT0FFQSxPQUFBM0csRUFBQSxHQUFBQSxHQUFBQyxFQUFBd2lDLEVBQUEsUUFBQWwvQixHQUNBaUIsRUFBQXpDLEVBQUF3ZixXQUFBdmhCLElBQ0EsT0FBQXdFLEVBQUEsT0FBQXhFLEVBQUEsSUFBQUMsSUFBQTBILEVBQUE1RixFQUFBd2YsV0FBQXZoQixFQUFBLFdBQUEySCxFQUFBLE1BQ0E4NkIsRUFBQTFnQyxFQUFBa2dDLE9BQUFqaUMsR0FBQXdFLEVBQ0FpK0IsRUFBQTFnQyxFQUFBZ0csTUFBQS9ILElBQUEsR0FBQTJILEVBQUEsT0FBQW5ELEVBQUEsaURDYkEsSUFBQXVGLEVBQWNuSyxFQUFRLElBQ3RCeUMsRUFBY3pDLEVBQVEsR0FDdEJ1QyxFQUFldkMsRUFBUSxJQUN2QnNDLEVBQVd0QyxFQUFRLElBQ25Cb0wsRUFBZ0JwTCxFQUFRLElBQ3hCK2lDLEVBQWtCL2lDLEVBQVEsS0FDMUI0Z0MsRUFBcUI1Z0MsRUFBUSxJQUM3QndILEVBQXFCeEgsRUFBUSxJQUM3QjhOLEVBQWU5TixFQUFRLEVBQVJBLENBQWdCLFlBQy9CZ2pDLE9BQUFsMkIsTUFBQSxXQUFBQSxRQUtBbTJCLEVBQUEsV0FBOEIsT0FBQTk4QixNQUU5QmhHLEVBQUFELFFBQUEsU0FBQThTLEVBQUFwTSxFQUFBODBCLEVBQUExckIsRUFBQWt6QixFQUFBQyxFQUFBandCLEdBQ0E2dkIsRUFBQXJILEVBQUE5MEIsRUFBQW9KLEdBQ0EsSUFlQWdsQixFQUFBcnpCLEVBQUF5aEMsRUFmQUMsRUFBQSxTQUFBQyxHQUNBLElBQUFOLEdBQUFNLEtBQUFqekIsRUFBQSxPQUFBQSxFQUFBaXpCLEdBQ0EsT0FBQUEsR0FDQSxJQVZBLE9BV0EsSUFWQSxTQVVBLGtCQUE2QyxXQUFBNUgsRUFBQXYxQixLQUFBbTlCLElBQ3hDLGtCQUE0QixXQUFBNUgsRUFBQXYxQixLQUFBbTlCLEtBRWpDdjFCLEVBQUFuSCxFQUFBLFlBQ0EyOEIsRUFkQSxVQWNBTCxFQUNBTSxHQUFBLEVBQ0FuekIsRUFBQTJDLEVBQUFoUixVQUNBeWhDLEVBQUFwekIsRUFBQXZDLElBQUF1QyxFQW5CQSxlQW1CQTZ5QixHQUFBN3lCLEVBQUE2eUIsR0FDQVEsRUFBQUQsR0FBQUosRUFBQUgsR0FDQVMsRUFBQVQsRUFBQUssRUFBQUYsRUFBQSxXQUFBSyxPQUFBLy9CLEVBQ0FpZ0MsRUFBQSxTQUFBaDlCLEdBQUF5SixFQUFBckQsU0FBQXkyQixFQXdCQSxHQXJCQUcsSUFDQVIsRUFBQTU3QixFQUFBbzhCLEVBQUFyakMsS0FBQSxJQUFBeVMsT0FDQWxTLE9BQUFrQixXQUFBb2hDLEVBQUFwekIsT0FFQTR3QixFQUFBd0MsRUFBQXIxQixHQUFBLEdBRUE1RCxHQUFBLG1CQUFBaTVCLEVBQUF0MUIsSUFBQXhMLEVBQUE4Z0MsRUFBQXQxQixFQUFBbTFCLElBSUFNLEdBQUFFLEdBakNBLFdBaUNBQSxFQUFBOWlDLE9BQ0E2aUMsR0FBQSxFQUNBRSxFQUFBLFdBQWtDLE9BQUFELEVBQUFsakMsS0FBQTRGLFFBR2xDZ0UsSUFBQStJLElBQUE4dkIsSUFBQVEsR0FBQW56QixFQUFBdkMsSUFDQXhMLEVBQUErTixFQUFBdkMsRUFBQTQxQixHQUdBdDRCLEVBQUF4RSxHQUFBODhCLEVBQ0F0NEIsRUFBQTJDLEdBQUFrMUIsRUFDQUMsRUFNQSxHQUxBbE8sR0FDQXBvQixPQUFBMjJCLEVBQUFHLEVBQUFMLEVBOUNBLFVBK0NBdjJCLEtBQUFxMkIsRUFBQU8sRUFBQUwsRUFoREEsUUFpREFyMkIsUUFBQTIyQixHQUVBendCLEVBQUEsSUFBQXZSLEtBQUFxekIsRUFDQXJ6QixLQUFBME8sR0FBQTlOLEVBQUE4TixFQUFBMU8sRUFBQXF6QixFQUFBcnpCLFNBQ0tjLElBQUFhLEVBQUFiLEVBQUFPLEdBQUFnZ0MsR0FBQVEsR0FBQTU4QixFQUFBb3VCLEdBRUwsT0FBQUEsaUNDbEVBLElBQUF0ekIsRUFBYTFCLEVBQVEsSUFDckIrN0IsRUFBaUIvN0IsRUFBUSxJQUN6QjRnQyxFQUFxQjVnQyxFQUFRLElBQzdCb2pDLEtBR0FwakMsRUFBUSxHQUFSQSxDQUFpQm9qQyxFQUFxQnBqQyxFQUFRLEVBQVJBLENBQWdCLHVCQUE0QixPQUFBbUcsT0FFbEZoRyxFQUFBRCxRQUFBLFNBQUF3N0IsRUFBQTkwQixFQUFBb0osR0FDQTByQixFQUFBMTVCLFVBQUFOLEVBQUEwaEMsR0FBcURwekIsS0FBQStyQixFQUFBLEVBQUEvckIsS0FDckQ0d0IsRUFBQWxGLEVBQUE5MEIsRUFBQSwrQkNWQSxJQUFBZzVCLEVBQWU1L0IsRUFBUSxJQUN2QnNGLEVBQWN0RixFQUFRLElBRXRCRyxFQUFBRCxRQUFBLFNBQUE0SCxFQUFBKzdCLEVBQUFqOUIsR0FDQSxHQUFBZzVCLEVBQUFpRSxHQUFBLE1BQUEzL0IsVUFBQSxVQUFBMEMsRUFBQSwwQkFDQSxPQUFBVixPQUFBWixFQUFBd0Msc0JDTkEsSUFBQTYzQixFQUFZMy9CLEVBQVEsRUFBUkEsQ0FBZ0IsU0FDNUJHLEVBQUFELFFBQUEsU0FBQWdKLEdBQ0EsSUFBQTQ2QixFQUFBLElBQ0EsSUFDQSxNQUFBNTZCLEdBQUE0NkIsR0FDRyxNQUFBdC9CLEdBQ0gsSUFFQSxPQURBcy9CLEVBQUFuRSxJQUFBLEdBQ0EsTUFBQXoyQixHQUFBNDZCLEdBQ0ssTUFBQTcrQixLQUNGLDJCQ1RILElBQUFtRyxFQUFnQnBMLEVBQVEsSUFDeEI4TixFQUFlOU4sRUFBUSxFQUFSQSxDQUFnQixZQUMvQjZMLEVBQUFDLE1BQUE5SixVQUVBN0IsRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxZQUFBTixJQUFBTSxJQUFBbUgsRUFBQVUsUUFBQTdILEdBQUE0SCxFQUFBaUMsS0FBQTdKLGtDQ0xBLElBQUE4L0IsRUFBc0IvakMsRUFBUSxHQUM5QnVGLEVBQWlCdkYsRUFBUSxJQUV6QkcsRUFBQUQsUUFBQSxTQUFBNEIsRUFBQWtJLEVBQUEzSSxHQUNBMkksS0FBQWxJLEVBQUFpaUMsRUFBQTkrQixFQUFBbkQsRUFBQWtJLEVBQUF6RSxFQUFBLEVBQUFsRSxJQUNBUyxFQUFBa0ksR0FBQTNJLG9CQ05BLElBQUFzSixFQUFjM0ssRUFBUSxJQUN0QjhOLEVBQWU5TixFQUFRLEVBQVJBLENBQWdCLFlBQy9Cb0wsRUFBZ0JwTCxFQUFRLElBQ3hCRyxFQUFBRCxRQUFpQkYsRUFBUSxJQUFTZ2tDLGtCQUFBLFNBQUEvL0IsR0FDbEMsUUFBQU4sR0FBQU0sRUFBQSxPQUFBQSxFQUFBNkosSUFDQTdKLEVBQUEsZUFDQW1ILEVBQUFULEVBQUExRyxzQkNMQSxJQUFBaUgsRUFBeUJsTCxFQUFRLEtBRWpDRyxFQUFBRCxRQUFBLFNBQUErakMsRUFBQWw5QixHQUNBLFdBQUFtRSxFQUFBKzRCLEdBQUEsQ0FBQWw5QixrQ0NGQSxJQUFBTSxFQUFlckgsRUFBUSxJQUN2QjBLLEVBQXNCMUssRUFBUSxJQUM5Qm1KLEVBQWVuSixFQUFRLElBQ3ZCRyxFQUFBRCxRQUFBLFNBQUFtQixHQU9BLElBTkEsSUFBQTZELEVBQUFtQyxFQUFBbEIsTUFDQVksRUFBQW9DLEVBQUFqRSxFQUFBNkIsUUFDQTZJLEVBQUEzSCxVQUFBbEIsT0FDQWlELEVBQUFVLEVBQUFrRixFQUFBLEVBQUEzSCxVQUFBLFFBQUF0RSxFQUFBb0QsR0FDQTJLLEVBQUE5QixFQUFBLEVBQUEzSCxVQUFBLFFBQUF0RSxFQUNBdWdDLE9BQUF2Z0MsSUFBQStOLEVBQUEzSyxFQUFBMkQsRUFBQWdILEVBQUEzSyxHQUNBbTlCLEVBQUFsNkIsR0FBQTlFLEVBQUE4RSxLQUFBM0ksRUFDQSxPQUFBNkQsaUNDWkEsSUFBQWkvQixFQUF1Qm5rQyxFQUFRLElBQy9CMFAsRUFBVzFQLEVBQVEsS0FDbkJvTCxFQUFnQnBMLEVBQVEsSUFDeEJrSCxFQUFnQmxILEVBQVEsSUFNeEJHLEVBQUFELFFBQWlCRixFQUFRLElBQVJBLENBQXdCOEwsTUFBQSxpQkFBQXM0QixFQUFBZCxHQUN6Q245QixLQUFBMDRCLEdBQUEzM0IsRUFBQWs5QixHQUNBaitCLEtBQUFrK0IsR0FBQSxFQUNBbCtCLEtBQUFtK0IsR0FBQWhCLEdBRUMsV0FDRCxJQUFBcCtCLEVBQUFpQixLQUFBMDRCLEdBQ0F5RSxFQUFBbjlCLEtBQUFtK0IsR0FDQXQ2QixFQUFBN0QsS0FBQWsrQixLQUNBLE9BQUFuL0IsR0FBQThFLEdBQUE5RSxFQUFBNkIsUUFDQVosS0FBQTA0QixRQUFBbDdCLEVBQ0ErTCxFQUFBLElBRUFBLEVBQUEsVUFBQTR6QixFQUFBdDVCLEVBQ0EsVUFBQXM1QixFQUFBcCtCLEVBQUE4RSxJQUNBQSxFQUFBOUUsRUFBQThFLE1BQ0MsVUFHRG9CLEVBQUFtNUIsVUFBQW41QixFQUFBVSxNQUVBcTRCLEVBQUEsUUFDQUEsRUFBQSxVQUNBQSxFQUFBLDRCQ2pDQSxJQWFBSyxFQUFBQyxFQUFBQyxFQWJBbGlDLEVBQVV4QyxFQUFRLElBQ2xCMmtDLEVBQWEza0MsRUFBUSxLQUNyQjRrQyxFQUFXNWtDLEVBQVEsSUFDbkI2a0MsRUFBVTdrQyxFQUFRLElBQ2xCb0MsRUFBYXBDLEVBQVEsR0FDckI4a0MsRUFBQTFpQyxFQUFBMGlDLFFBQ0FDLEVBQUEzaUMsRUFBQTRpQyxhQUNBQyxFQUFBN2lDLEVBQUE4aUMsZUFDQUMsRUFBQS9pQyxFQUFBK2lDLGVBQ0FDLEVBQUFoakMsRUFBQWdqQyxTQUNBQyxFQUFBLEVBQ0FDLEtBR0FDLEVBQUEsV0FDQSxJQUFBcndCLEdBQUEvTyxLQUVBLEdBQUFtL0IsRUFBQXJqQyxlQUFBaVQsR0FBQSxDQUNBLElBQUFyTixFQUFBeTlCLEVBQUFwd0IsVUFDQW93QixFQUFBcHdCLEdBQ0FyTixNQUdBMjlCLEVBQUEsU0FBQUMsR0FDQUYsRUFBQWhsQyxLQUFBa2xDLEVBQUFueUIsT0FHQXl4QixHQUFBRSxJQUNBRixFQUFBLFNBQUFsOUIsR0FHQSxJQUZBLElBQUFhLEtBQ0F0SSxFQUFBLEVBQ0E2SCxVQUFBbEIsT0FBQTNHLEdBQUFzSSxFQUFBd0IsS0FBQWpDLFVBQUE3SCxNQU1BLE9BTEFrbEMsSUFBQUQsR0FBQSxXQUVBVixFQUFBLG1CQUFBOThCLElBQUFqRSxTQUFBaUUsR0FBQWEsSUFFQTg3QixFQUFBYSxHQUNBQSxHQUVBSixFQUFBLFNBQUEvdkIsVUFDQW93QixFQUFBcHdCLElBR3NCLFdBQWhCbFYsRUFBUSxHQUFSQSxDQUFnQjhrQyxHQUN0Qk4sRUFBQSxTQUFBdHZCLEdBQ0E0dkIsRUFBQVksU0FBQWxqQyxFQUFBK2lDLEVBQUFyd0IsRUFBQSxLQUdHa3dCLEtBQUFPLElBQ0huQixFQUFBLFNBQUF0dkIsR0FDQWt3QixFQUFBTyxJQUFBbmpDLEVBQUEraUMsRUFBQXJ3QixFQUFBLEtBR0dpd0IsR0FFSFQsR0FEQUQsRUFBQSxJQUFBVSxHQUNBUyxNQUNBbkIsRUFBQW9CLE1BQUFDLFVBQUFOLEVBQ0FoQixFQUFBaGlDLEVBQUFraUMsRUFBQXFCLFlBQUFyQixFQUFBLElBR0d0aUMsRUFBQTRqQyxrQkFBQSxtQkFBQUQsY0FBQTNqQyxFQUFBNmpDLGVBQ0h6QixFQUFBLFNBQUF0dkIsR0FDQTlTLEVBQUEyakMsWUFBQTd3QixFQUFBLFNBRUE5UyxFQUFBNGpDLGlCQUFBLFVBQUFSLEdBQUEsSUFHQWhCLEVBdkRBLHVCQXNER0ssRUFBQSxVQUNILFNBQUEzdkIsR0FDQTB2QixFQUFBekgsWUFBQTBILEVBQUEseUNBQ0FELEVBQUFzQixZQUFBLy9CLE1BQ0FvL0IsRUFBQWhsQyxLQUFBMlUsS0FLQSxTQUFBQSxHQUNBaXhCLFdBQUEzakMsRUFBQStpQyxFQUFBcndCLEVBQUEsUUFJQS9VLEVBQUFELFNBQ0EyTyxJQUFBazJCLEVBQ0F4aEIsTUFBQTBoQixvQkNsRkEsSUFBQTdpQyxFQUFhcEMsRUFBUSxHQUNyQm9tQyxFQUFnQnBtQyxFQUFRLEtBQVM2TyxJQUNqQ3czQixFQUFBamtDLEVBQUFra0Msa0JBQUFsa0MsRUFBQW1rQyx1QkFDQXpCLEVBQUExaUMsRUFBQTBpQyxRQUNBMEIsRUFBQXBrQyxFQUFBb2tDLFFBQ0FDLEVBQTZCLFdBQWhCem1DLEVBQVEsR0FBUkEsQ0FBZ0I4a0MsR0FFN0Iza0MsRUFBQUQsUUFBQSxXQUNBLElBQUFzMEIsRUFBQWlFLEVBQUFpTyxFQUVBQyxFQUFBLFdBQ0EsSUFBQUMsRUFBQS8rQixFQUVBLElBREE0K0IsSUFBQUcsRUFBQTlCLEVBQUErQixTQUFBRCxFQUFBRSxPQUNBdFMsR0FBQSxDQUNBM3NCLEVBQUEyc0IsRUFBQTNzQixHQUNBMnNCLElBQUF4a0IsS0FDQSxJQUNBbkksSUFDTyxNQUFBckQsR0FHUCxNQUZBZ3dCLEVBQUFrUyxJQUNBak8sT0FBQTkwQixFQUNBYSxHQUVLaTBCLE9BQUE5MEIsRUFDTGlqQyxLQUFBRyxTQUlBLEdBQUFOLEVBQ0FDLEVBQUEsV0FDQTVCLEVBQUFZLFNBQUFpQixTQUdHLElBQUFOLEdBQUFqa0MsRUFBQXErQixXQUFBcitCLEVBQUFxK0IsVUFBQXVHLFdBUUEsR0FBQVIsS0FBQVMsUUFBQSxDQUVILElBQUFDLEVBQUFWLEVBQUFTLGFBQUF0akMsR0FDQStpQyxFQUFBLFdBQ0FRLEVBQUFDLEtBQUFSLFNBU0FELEVBQUEsV0FFQU4sRUFBQTdsQyxLQUFBNkIsRUFBQXVrQyxRQXZCRyxDQUNILElBQUFTLEdBQUEsRUFDQWhtQixFQUFBaWMsU0FBQWdLLGVBQUEsSUFDQSxJQUFBaEIsRUFBQU0sR0FBQVcsUUFBQWxtQixHQUF1Q21tQixlQUFBLElBQ3ZDYixFQUFBLFdBQ0F0bEIsRUFBQTlOLEtBQUE4ekIsTUFzQkEsZ0JBQUF2L0IsR0FDQSxJQUFBMi9CLEdBQWdCMy9CLEtBQUFtSSxVQUFBck0sR0FDaEI4MEIsTUFBQXpvQixLQUFBdzNCLEdBQ0FoVCxJQUNBQSxFQUFBZ1QsRUFDQWQsS0FDS2pPLEVBQUErTyxrQ0NoRUwsSUFBQTUvQixFQUFnQjVILEVBQVEsSUFheEJHLEVBQUFELFFBQUErRSxFQUFBLFNBQUFpSyxHQUNBLFdBWkEsU0FBQUEsR0FDQSxJQUFBKzNCLEVBQUFRLEVBQ0F0aEMsS0FBQStnQyxRQUFBLElBQUFoNEIsRUFBQSxTQUFBdzRCLEVBQUFDLEdBQ0EsUUFBQWhrQyxJQUFBc2pDLFFBQUF0akMsSUFBQThqQyxFQUFBLE1BQUF2akMsVUFBQSwyQkFDQStpQyxFQUFBUyxFQUNBRCxFQUFBRSxJQUVBeGhDLEtBQUE4Z0MsUUFBQXIvQixFQUFBcS9CLEdBQ0E5Z0MsS0FBQXNoQyxPQUFBNy9CLEVBQUE2L0IsR0FJQSxDQUFBdjRCLGtDQ2ZBLElBQUE5TSxFQUFhcEMsRUFBUSxHQUNyQjY5QixFQUFrQjc5QixFQUFRLEdBQzFCbUssRUFBY25LLEVBQVEsSUFDdEJvSyxFQUFhcEssRUFBUSxJQUNyQnNDLEVBQVd0QyxFQUFRLElBQ25Cd0ssRUFBa0J4SyxFQUFRLElBQzFCb0csRUFBWXBHLEVBQVEsR0FDcEJzSyxFQUFpQnRLLEVBQVEsSUFDekJvRixFQUFnQnBGLEVBQVEsSUFDeEJtSixFQUFlbkosRUFBUSxJQUN2QnlLLEVBQWN6SyxFQUFRLEtBQ3RCNkssRUFBVzdLLEVBQVEsSUFBZ0JpRixFQUNuQ0QsRUFBU2hGLEVBQVEsR0FBY2lGLEVBQy9Cc0csRUFBZ0J2TCxFQUFRLEtBQ3hCNGdDLEVBQXFCNWdDLEVBQVEsSUFHN0I0bkMsRUFBQSxZQUVBQyxFQUFBLGVBQ0E5N0IsRUFBQTNKLEVBQUEsWUFDQTZKLEVBQUE3SixFQUFBLFNBQ0FnQyxFQUFBaEMsRUFBQWdDLEtBQ0F1SCxFQUFBdkosRUFBQXVKLFdBRUFxVCxFQUFBNWMsRUFBQTRjLFNBQ0E4b0IsRUFBQS83QixFQUNBb1QsRUFBQS9hLEVBQUErYSxJQUNBNG9CLEVBQUEzakMsRUFBQTJqQyxJQUNBLytCLEVBQUE1RSxFQUFBNEUsTUFDQWcvQixFQUFBNWpDLEVBQUE0akMsSUFDQUMsRUFBQTdqQyxFQUFBNmpDLElBSUFDLEVBQUFySyxFQUFBLEtBSEEsU0FJQXNLLEVBQUF0SyxFQUFBLEtBSEEsYUFJQXVLLEVBQUF2SyxFQUFBLEtBSEEsYUFNQSxTQUFBd0ssRUFBQWhuQyxFQUFBaW5DLEVBQUFDLEdBQ0EsSUFPQS9qQyxFQUFBaEUsRUFBQUMsRUFQQWtPLEVBQUEsSUFBQTdDLE1BQUF5OEIsR0FDQUMsRUFBQSxFQUFBRCxFQUFBRCxFQUFBLEVBQ0FHLEdBQUEsR0FBQUQsR0FBQSxFQUNBRSxFQUFBRCxHQUFBLEVBQ0FFLEVBQUEsS0FBQUwsRUFBQVAsRUFBQSxPQUFBQSxFQUFBLFNBQ0EzbkMsRUFBQSxFQUNBK0IsRUFBQWQsRUFBQSxPQUFBQSxHQUFBLEVBQUFBLEVBQUEsTUFrQ0EsS0FoQ0FBLEVBQUE4ZCxFQUFBOWQsS0FFQUEsT0FBQTJkLEdBRUF4ZSxFQUFBYSxLQUFBLElBQ0FtRCxFQUFBaWtDLElBRUFqa0MsRUFBQXdFLEVBQUFnL0IsRUFBQTNtQyxHQUFBNG1DLEdBQ0E1bUMsR0FBQVosRUFBQXNuQyxFQUFBLEdBQUF2akMsSUFBQSxJQUNBQSxJQUNBL0QsR0FBQSxJQUdBWSxHQURBbUQsRUFBQWtrQyxHQUFBLEVBQ0FDLEVBQUFsb0MsRUFFQWtvQyxFQUFBWixFQUFBLElBQUFXLElBRUFqb0MsR0FBQSxJQUNBK0QsSUFDQS9ELEdBQUEsR0FFQStELEVBQUFra0MsR0FBQUQsR0FDQWpvQyxFQUFBLEVBQ0FnRSxFQUFBaWtDLEdBQ0tqa0MsRUFBQWtrQyxHQUFBLEdBQ0xsb0MsR0FBQWEsRUFBQVosRUFBQSxHQUFBc25DLEVBQUEsRUFBQU8sR0FDQTlqQyxHQUFBa2tDLElBRUFsb0MsRUFBQWEsRUFBQTBtQyxFQUFBLEVBQUFXLEVBQUEsR0FBQVgsRUFBQSxFQUFBTyxHQUNBOWpDLEVBQUEsSUFHUThqQyxHQUFBLEVBQVczNUIsRUFBQXZPLEtBQUEsSUFBQUksS0FBQSxJQUFBOG5DLEdBQUEsR0FHbkIsSUFGQTlqQyxLQUFBOGpDLEVBQUE5bkMsRUFDQWdvQyxHQUFBRixFQUNRRSxFQUFBLEVBQVU3NUIsRUFBQXZPLEtBQUEsSUFBQW9FLEtBQUEsSUFBQWdrQyxHQUFBLEdBRWxCLE9BREE3NUIsSUFBQXZPLElBQUEsSUFBQStCLEVBQ0F3TSxFQUVBLFNBQUFpNkIsRUFBQWo2QixFQUFBMjVCLEVBQUFDLEdBQ0EsSUFPQS9uQyxFQVBBZ29DLEVBQUEsRUFBQUQsRUFBQUQsRUFBQSxFQUNBRyxHQUFBLEdBQUFELEdBQUEsRUFDQUUsRUFBQUQsR0FBQSxFQUNBSSxFQUFBTCxFQUFBLEVBQ0Fwb0MsRUFBQW1vQyxFQUFBLEVBQ0FwbUMsRUFBQXdNLEVBQUF2TyxLQUNBb0UsRUFBQSxJQUFBckMsRUFHQSxJQURBQSxJQUFBLEVBQ1EwbUMsRUFBQSxFQUFXcmtDLEVBQUEsSUFBQUEsRUFBQW1LLEVBQUF2TyxPQUFBeW9DLEdBQUEsR0FJbkIsSUFIQXJvQyxFQUFBZ0UsR0FBQSxJQUFBcWtDLEdBQUEsRUFDQXJrQyxLQUFBcWtDLEVBQ0FBLEdBQUFQLEVBQ1FPLEVBQUEsRUFBV3JvQyxFQUFBLElBQUFBLEVBQUFtTyxFQUFBdk8sT0FBQXlvQyxHQUFBLEdBQ25CLE9BQUFya0MsRUFDQUEsRUFBQSxFQUFBa2tDLE1BQ0csSUFBQWxrQyxJQUFBaWtDLEVBQ0gsT0FBQWpvQyxFQUFBd1ksSUFBQTdXLEdBQUE2YyxJQUVBeGUsR0FBQXVuQyxFQUFBLEVBQUFPLEdBQ0E5akMsR0FBQWtrQyxFQUNHLE9BQUF2bUMsR0FBQSxLQUFBM0IsRUFBQXVuQyxFQUFBLEVBQUF2akMsRUFBQThqQyxHQUdILFNBQUFRLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQSxPQUFBQSxFQUFBLE9BQUFBLEVBQUEsTUFBQUEsRUFBQSxHQUVBLFNBQUFDLEVBQUEva0MsR0FDQSxXQUFBQSxHQUVBLFNBQUFnbEMsRUFBQWhsQyxHQUNBLFdBQUFBLEtBQUEsT0FFQSxTQUFBaWxDLEVBQUFqbEMsR0FDQSxXQUFBQSxLQUFBLE1BQUFBLEdBQUEsT0FBQUEsR0FBQSxRQUVBLFNBQUFrbEMsRUFBQWxsQyxHQUNBLE9BQUFva0MsRUFBQXBrQyxFQUFBLE1BRUEsU0FBQW1sQyxFQUFBbmxDLEdBQ0EsT0FBQW9rQyxFQUFBcGtDLEVBQUEsTUFHQSxTQUFBcUwsRUFBQUosRUFBQXZOLEVBQUE0TixHQUNBdkssRUFBQWtLLEVBQUEwNEIsR0FBQWptQyxHQUF5QlYsSUFBQSxXQUFtQixPQUFBa0YsS0FBQW9KLE1BRzVDLFNBQUF0TyxFQUFBb29DLEVBQUFOLEVBQUEvK0IsRUFBQXMvQixHQUNBLElBQ0FDLEVBQUE5K0IsR0FEQVQsR0FFQSxHQUFBdS9CLEVBQUFSLEVBQUFNLEVBQUFsQixHQUFBLE1BQUF4OEIsRUFBQWs4QixHQUNBLElBQUFwakMsRUFBQTRrQyxFQUFBbkIsR0FBQXNCLEdBQ0FqNUIsRUFBQWc1QixFQUFBRixFQUFBakIsR0FDQXFCLEVBQUFobEMsRUFBQTBELE1BQUFvSSxJQUFBdzRCLEdBQ0EsT0FBQU8sRUFBQUcsSUFBQXI0QixVQUVBLFNBQUF2QyxFQUFBdzZCLEVBQUFOLEVBQUEvK0IsRUFBQTAvQixFQUFBcm9DLEVBQUFpb0MsR0FDQSxJQUNBQyxFQUFBOStCLEdBREFULEdBRUEsR0FBQXUvQixFQUFBUixFQUFBTSxFQUFBbEIsR0FBQSxNQUFBeDhCLEVBQUFrOEIsR0FJQSxJQUhBLElBQUFwakMsRUFBQTRrQyxFQUFBbkIsR0FBQXNCLEdBQ0FqNUIsRUFBQWc1QixFQUFBRixFQUFBakIsR0FDQXFCLEVBQUFDLEdBQUFyb0MsR0FDQWpCLEVBQUEsRUFBaUJBLEVBQUEyb0MsRUFBVzNvQyxJQUFBcUUsRUFBQThMLEVBQUFuUSxHQUFBcXBDLEVBQUFILEVBQUFscEMsRUFBQTJvQyxFQUFBM29DLEVBQUEsR0FHNUIsR0FBQWdLLEVBQUErSSxJQWdGQyxDQUNELElBQUEvTSxFQUFBLFdBQ0EyRixFQUFBLE9BQ0czRixFQUFBLFdBQ0gsSUFBQTJGLEdBQUEsTUFDRzNGLEVBQUEsV0FJSCxPQUhBLElBQUEyRixFQUNBLElBQUFBLEVBQUEsS0FDQSxJQUFBQSxFQUFBaU4sS0FwT0EsZUFxT0FqTixFQUFBcEwsT0FDRyxDQU1ILElBREEsSUFDQWdCLEVBREFnb0MsR0FKQTU5QixFQUFBLFNBQUFoRixHQUVBLE9BREF1RCxFQUFBbkUsS0FBQTRGLEdBQ0EsSUFBQSs3QixFQUFBcjlCLEVBQUExRCxNQUVBNmdDLEdBQUFFLEVBQUFGLEdBQ0E5NkIsRUFBQWpDLEVBQUFpOUIsR0FBQThCLEVBQUEsRUFBaUQ5OEIsRUFBQS9GLE9BQUE2aUMsSUFDakRqb0MsRUFBQW1MLEVBQUE4OEIsUUFBQTc5QixHQUFBekosRUFBQXlKLEVBQUFwSyxFQUFBbW1DLEVBQUFubUMsSUFFQXdJLElBQUF3L0IsRUFBQWxpQyxZQUFBc0UsR0FHQSxJQUFBczlCLEVBQUEsSUFBQXA5QixFQUFBLElBQUFGLEVBQUEsSUFDQTg5QixFQUFBNTlCLEVBQUEyN0IsR0FBQWtDLFFBQ0FULEVBQUFTLFFBQUEsY0FDQVQsRUFBQVMsUUFBQSxlQUNBVCxFQUFBVSxRQUFBLElBQUFWLEVBQUFVLFFBQUEsSUFBQXYvQixFQUFBeUIsRUFBQTI3QixJQUNBa0MsUUFBQSxTQUFBbDRCLEVBQUF2USxHQUNBd29DLEVBQUF0cEMsS0FBQTRGLEtBQUF5TCxFQUFBdlEsR0FBQSxTQUVBMm9DLFNBQUEsU0FBQXA0QixFQUFBdlEsR0FDQXdvQyxFQUFBdHBDLEtBQUE0RixLQUFBeUwsRUFBQXZRLEdBQUEsV0FFRyxRQWhISDBLLEVBQUEsU0FBQWhGLEdBQ0F1RCxFQUFBbkUsS0FBQTRGLEVBOUlBLGVBK0lBLElBQUE2SCxFQUFBbkosRUFBQTFELEdBQ0FaLEtBQUFxakMsR0FBQWorQixFQUFBaEwsS0FBQSxJQUFBdUwsTUFBQThILEdBQUEsR0FDQXpOLEtBQUFnaUMsR0FBQXYwQixHQUdBM0gsRUFBQSxTQUFBMEMsRUFBQWlELEVBQUFnQyxHQUNBdEosRUFBQW5FLEtBQUE4RixFQXBKQSxZQXFKQTNCLEVBQUFxRSxFQUFBNUMsRUFySkEsWUFzSkEsSUFBQWsrQixFQUFBdDdCLEVBQUF3NUIsR0FDQW41QixFQUFBNUosRUFBQXdNLEdBQ0EsR0FBQTVDLEVBQUEsR0FBQUEsRUFBQWk3QixFQUFBLE1BQUF0K0IsRUFBQSxpQkFFQSxHQUFBcUQsR0FEQTRFLE9BQUFqUSxJQUFBaVEsRUFBQXEyQixFQUFBajdCLEVBQUE3RixFQUFBeUssSUFDQXEyQixFQUFBLE1BQUF0K0IsRUF4SkEsaUJBeUpBeEYsS0FBQStoQyxHQUFBdjVCLEVBQ0F4SSxLQUFBaWlDLEdBQUFwNUIsRUFDQTdJLEtBQUFnaUMsR0FBQXYwQixHQUdBaXFCLElBQ0F2dUIsRUFBQXZELEVBaEpBLGFBZ0pBLE1BQ0F1RCxFQUFBckQsRUFsSkEsU0FrSkEsTUFDQXFELEVBQUFyRCxFQWxKQSxhQWtKQSxNQUNBcUQsRUFBQXJELEVBbEpBLGFBa0pBLE9BR0F6QixFQUFBeUIsRUFBQTI3QixJQUNBbUMsUUFBQSxTQUFBbjRCLEdBQ0EsT0FBQTNRLEVBQUFrRixLQUFBLEVBQUF5TCxHQUFBLFlBRUFzNEIsU0FBQSxTQUFBdDRCLEdBQ0EsT0FBQTNRLEVBQUFrRixLQUFBLEVBQUF5TCxHQUFBLElBRUF1NEIsU0FBQSxTQUFBdjRCLEdBQ0EsSUFBQW0zQixFQUFBOW5DLEVBQUFrRixLQUFBLEVBQUF5TCxFQUFBM0osVUFBQSxJQUNBLE9BQUE4Z0MsRUFBQSxNQUFBQSxFQUFBLGFBRUFxQixVQUFBLFNBQUF4NEIsR0FDQSxJQUFBbTNCLEVBQUE5bkMsRUFBQWtGLEtBQUEsRUFBQXlMLEVBQUEzSixVQUFBLElBQ0EsT0FBQThnQyxFQUFBLE1BQUFBLEVBQUEsSUFFQXNCLFNBQUEsU0FBQXo0QixHQUNBLE9BQUFrM0IsRUFBQTduQyxFQUFBa0YsS0FBQSxFQUFBeUwsRUFBQTNKLFVBQUEsTUFFQXFpQyxVQUFBLFNBQUExNEIsR0FDQSxPQUFBazNCLEVBQUE3bkMsRUFBQWtGLEtBQUEsRUFBQXlMLEVBQUEzSixVQUFBLFVBRUFzaUMsV0FBQSxTQUFBMzRCLEdBQ0EsT0FBQWczQixFQUFBM25DLEVBQUFrRixLQUFBLEVBQUF5TCxFQUFBM0osVUFBQSxXQUVBdWlDLFdBQUEsU0FBQTU0QixHQUNBLE9BQUFnM0IsRUFBQTNuQyxFQUFBa0YsS0FBQSxFQUFBeUwsRUFBQTNKLFVBQUEsV0FFQTZoQyxRQUFBLFNBQUFsNEIsRUFBQXZRLEdBQ0F3TixFQUFBMUksS0FBQSxFQUFBeUwsRUFBQW8zQixFQUFBM25DLElBRUEyb0MsU0FBQSxTQUFBcDRCLEVBQUF2USxHQUNBd04sRUFBQTFJLEtBQUEsRUFBQXlMLEVBQUFvM0IsRUFBQTNuQyxJQUVBb3BDLFNBQUEsU0FBQTc0QixFQUFBdlEsR0FDQXdOLEVBQUExSSxLQUFBLEVBQUF5TCxFQUFBcTNCLEVBQUE1bkMsRUFBQTRHLFVBQUEsS0FFQXlpQyxVQUFBLFNBQUE5NEIsRUFBQXZRLEdBQ0F3TixFQUFBMUksS0FBQSxFQUFBeUwsRUFBQXEzQixFQUFBNW5DLEVBQUE0RyxVQUFBLEtBRUEwaUMsU0FBQSxTQUFBLzRCLEVBQUF2USxHQUNBd04sRUFBQTFJLEtBQUEsRUFBQXlMLEVBQUFzM0IsRUFBQTduQyxFQUFBNEcsVUFBQSxLQUVBMmlDLFVBQUEsU0FBQWg1QixFQUFBdlEsR0FDQXdOLEVBQUExSSxLQUFBLEVBQUF5TCxFQUFBczNCLEVBQUE3bkMsRUFBQTRHLFVBQUEsS0FFQTRpQyxXQUFBLFNBQUFqNUIsRUFBQXZRLEdBQ0F3TixFQUFBMUksS0FBQSxFQUFBeUwsRUFBQXczQixFQUFBL25DLEVBQUE0RyxVQUFBLEtBRUE2aUMsV0FBQSxTQUFBbDVCLEVBQUF2USxHQUNBd04sRUFBQTFJLEtBQUEsRUFBQXlMLEVBQUF1M0IsRUFBQTluQyxFQUFBNEcsVUFBQSxPQXNDQTI0QixFQUFBNzBCLEVBL1BBLGVBZ1FBNjBCLEVBQUEzMEIsRUEvUEEsWUFnUUEzSixFQUFBMkosRUFBQTI3QixHQUFBeDlCLEVBQUFrRSxNQUFBLEdBQ0FwTyxFQUFBLFlBQUE2TCxFQUNBN0wsRUFBQSxTQUFBK0wsaUJDbFJBOUwsRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxRQUFBTixHQUFBTSxFQUFBLE1BQUFDLFVBQUEseUJBQUFELEdBQ0EsT0FBQUEsb0JDSEEsSUFBQXNRLEVBQWF2VSxFQUFRLElBQVJBLENBQW1CLFFBQ2hDMEUsRUFBVTFFLEVBQVEsSUFDbEJHLEVBQUFELFFBQUEsU0FBQXlCLEdBQ0EsT0FBQTRTLEVBQUE1UyxLQUFBNFMsRUFBQTVTLEdBQUErQyxFQUFBL0Msc0JDSEEsSUFBQVUsRUFBV3JDLEVBQVEsSUFDbkJvQyxFQUFhcEMsRUFBUSxJQUVyQnlFLEVBQUFyQyxFQURBLHdCQUNBQSxFQURBLDJCQUdBakMsRUFBQUQsUUFBQSxTQUFBeUIsRUFBQU4sR0FDQSxPQUFBb0QsRUFBQTlDLEtBQUE4QyxFQUFBOUMsUUFBQWdDLElBQUF0QyxVQUNDLGVBQUE2SSxNQUNEeEMsUUFBQXJGLEVBQUFxRixRQUNBbkcsS0FBUXZCLEVBQVEsSUFBWSxnQkFDNUJ1L0IsVUFBQSwwRENUQSxJQUFBdjdCLEVBQWVoRSxFQUFRLElBR3ZCRyxFQUFBRCxRQUFBLFNBQUErRCxFQUFBYixHQUNBLElBQUFZLEVBQUFDLEdBQUEsT0FBQUEsRUFDQSxJQUFBNEQsRUFBQS9CLEVBQ0EsR0FBQTFDLEdBQUEsbUJBQUF5RSxFQUFBNUQsRUFBQWlFLFlBQUFsRSxFQUFBOEIsRUFBQStCLEVBQUF0SCxLQUFBMEQsSUFBQSxPQUFBNkIsRUFDQSxzQkFBQStCLEVBQUE1RCxFQUFBNkUsV0FBQTlFLEVBQUE4QixFQUFBK0IsRUFBQXRILEtBQUEwRCxJQUFBLE9BQUE2QixFQUNBLElBQUExQyxHQUFBLG1CQUFBeUUsRUFBQTVELEVBQUFpRSxZQUFBbEUsRUFBQThCLEVBQUErQixFQUFBdEgsS0FBQTBELElBQUEsT0FBQTZCLEVBQ0EsTUFBQTVCLFVBQUEsMkRDVEEsSUFBQTZFLEVBQUEzRSxLQUFBMkUsS0FDQUMsRUFBQTVFLEtBQUE0RSxNQUNBN0ksRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxPQUFBZ0YsTUFBQWhGLE1BQUEsR0FBQUEsRUFBQSxFQUFBK0UsRUFBQUQsR0FBQTlFLG1CQ0pBOUQsRUFBQUQsNEJDQ0EsSUFBQTJFLEVBQWU3RSxFQUFRLElBQ3ZCNDhCLEVBQVU1OEIsRUFBUSxLQUNsQjI4QixFQUFrQjM4QixFQUFRLEtBQzFCc0gsRUFBZXRILEVBQVEsSUFBUkEsQ0FBdUIsWUFDdEM2OEIsRUFBQSxhQUlBQyxFQUFBLFdBRUEsSUFJQUMsRUFKQUMsRUFBZWg5QixFQUFRLElBQVJBLENBQXVCLFVBQ3RDSSxFQUFBdThCLEVBQUE1MUIsT0FjQSxJQVZBaTJCLEVBQUFDLE1BQUFDLFFBQUEsT0FDRWw5QixFQUFRLEtBQVNtOUIsWUFBQUgsR0FDbkJBLEVBQUEvcUIsSUFBQSxlQUdBOHFCLEVBQUFDLEVBQUFJLGNBQUFDLFVBQ0FDLE9BQ0FQLEVBQUFRLE1BQUFDLHVDQUNBVCxFQUFBVSxRQUNBWCxFQUFBQyxFQUFBLzVCLEVBQ0E1QyxZQUFBMDhCLEVBQUEsVUFBQUgsRUFBQXY4QixJQUNBLE9BQUEwOEIsS0FHQTM4QixFQUFBRCxRQUFBWSxPQUFBWSxRQUFBLFNBQUF3RCxFQUFBdzRCLEdBQ0EsSUFBQXp6QixFQVFBLE9BUEEsT0FBQS9FLEdBQ0EyM0IsRUFBQSxVQUFBaDRCLEVBQUFLLEdBQ0ErRSxFQUFBLElBQUE0eUIsRUFDQUEsRUFBQSxlQUVBNXlCLEVBQUEzQyxHQUFBcEMsR0FDRytFLEVBQUE2eUIsU0FDSG41QixJQUFBKzVCLEVBQUF6ekIsRUFBQTJ5QixFQUFBM3lCLEVBQUF5ekIscUJDdENBLElBQUFoQixFQUFZMThCLEVBQVEsS0FDcEIyOEIsRUFBa0IzOEIsRUFBUSxLQUUxQkcsRUFBQUQsUUFBQVksT0FBQWdNLE1BQUEsU0FBQTVILEdBQ0EsT0FBQXczQixFQUFBeDNCLEVBQUF5M0IsbUJDSkF4OEIsRUFBQUQsUUFBQSxnR0FFQTBGLE1BQUEsc0JDSEEsSUFBQXM0QixFQUFVbCtCLEVBQVEsSUFBY2lGLEVBQ2hDTyxFQUFVeEYsRUFBUSxJQUNsQitOLEVBQVUvTixFQUFRLEdBQVJBLENBQWdCLGVBRTFCRyxFQUFBRCxRQUFBLFNBQUErRCxFQUFBdUMsRUFBQTIzQixHQUNBbDZCLElBQUF1QixFQUFBdkIsRUFBQWs2QixFQUFBbDZCLElBQUFqQyxVQUFBK0wsSUFBQW13QixFQUFBajZCLEVBQUE4SixHQUFvRXlFLGNBQUEsRUFBQW5SLE1BQUFtRixzQkNMcEV0RyxFQUFBK0UsRUFBWWpGLEVBQVEscUJDQXBCLElBQUFvQyxFQUFhcEMsRUFBUSxJQUNyQnFDLEVBQVdyQyxFQUFRLElBQ25CbUssRUFBY25LLEVBQVEsSUFDdEJtaUMsRUFBYW5pQyxFQUFRLEtBQ3JCZSxFQUFxQmYsRUFBUSxJQUFjaUYsRUFDM0M5RSxFQUFBRCxRQUFBLFNBQUFTLEdBQ0EsSUFBQXloQyxFQUFBLy9CLEVBQUFsQixTQUFBa0IsRUFBQWxCLE9BQUFnSixLQUEwRC9ILEVBQUFqQixZQUMxRCxLQUFBUixFQUFBMGhDLE9BQUEsSUFBQTFoQyxLQUFBeWhDLEdBQUFyaEMsRUFBQXFoQyxFQUFBemhDLEdBQWtGVSxNQUFBOGdDLEVBQUFsOUIsRUFBQXRFLHFCQ1BsRlQsRUFBQStFLEtBQWNrYyxvRENBZCxTQUFBL2UsRUFBQWpDLEdBQUEsSUFHQWttQixFQUhBMGtCLEVBQUEvcUMsRUFBQSxLQU1BcW1CLEVBREEsb0JBQUFoaUIsS0FDQUEsS0FDQyxvQkFBQUYsT0FDREEsWUFDQyxJQUFBL0IsRUFDREEsRUFFQWpDLEVBS0EsSUFBQThKLEVBQWFuSixPQUFBaXFDLEVBQUEsRUFBQWpxQyxDQUFRdWxCLEdBQ04ya0IsRUFBQTs7Ozs7RUNWZixJQUFBOVYsRUFBQXAwQixPQUFBbzBCLHNCQUNBanpCLEVBQUFuQixPQUFBa0IsVUFBQUMsZUFDQWdwQyxFQUFBbnFDLE9BQUFrQixVQUFBbWYscUJBc0RBaGhCLEVBQUFELFFBNUNBLFdBQ0EsSUFDQSxJQUFBWSxPQUFBb3FDLE9BQ0EsU0FNQSxJQUFBQyxFQUFBLElBQUFqbEMsT0FBQSxPQUVBLEdBREFpbEMsRUFBQSxRQUNBLE1BQUFycUMsT0FBQTg4QixvQkFBQXVOLEdBQUEsR0FDQSxTQUtBLElBREEsSUFBQUMsS0FDQWhyQyxFQUFBLEVBQWlCQSxFQUFBLEdBQVFBLElBQ3pCZ3JDLEVBQUEsSUFBQWxsQyxPQUFBbWxDLGFBQUFqckMsTUFLQSxrQkFIQVUsT0FBQTg4QixvQkFBQXdOLEdBQUFqNkIsSUFBQSxTQUFBdFAsR0FDQSxPQUFBdXBDLEVBQUF2cEMsS0FFQW9FLEtBQUEsSUFDQSxTQUlBLElBQUFxbEMsS0FJQSxNQUhBLHVCQUFBMWxDLE1BQUEsSUFBQWtMLFFBQUEsU0FBQXk2QixHQUNBRCxFQUFBQyxPQUdBLHlCQURBenFDLE9BQUFnTSxLQUFBaE0sT0FBQW9xQyxVQUFrQ0ksSUFBQXJsQyxLQUFBLElBTWhDLE1BQUF1bEMsR0FFRixVQUlBQyxHQUFBM3FDLE9BQUFvcUMsT0FBQSxTQUFBem5DLEVBQUFkLEdBS0EsSUFKQSxJQUFBMFIsRUFFQXEzQixFQURBdGYsRUF0REEsU0FBQXRtQixHQUNBLFVBQUFBLFFBQUFuQyxJQUFBbUMsRUFDQSxVQUFBNUIsVUFBQSx5REFHQSxPQUFBcEQsT0FBQWdGLEdBaURBdUIsQ0FBQTVELEdBR0F0QixFQUFBLEVBQWdCQSxFQUFBOEYsVUFBQWxCLE9BQXNCNUUsSUFBQSxDQUd0QyxRQUFBUixLQUZBMFMsRUFBQXZULE9BQUFtSCxVQUFBOUYsSUFHQUYsRUFBQTFCLEtBQUE4VCxFQUFBMVMsS0FDQXlxQixFQUFBenFCLEdBQUEwUyxFQUFBMVMsSUFJQSxHQUFBdXpCLEVBQUEsQ0FDQXdXLEVBQUF4VyxFQUFBN2dCLEdBQ0EsUUFBQWpVLEVBQUEsRUFBa0JBLEVBQUFzckMsRUFBQTNrQyxPQUFvQjNHLElBQ3RDNnFDLEVBQUExcUMsS0FBQThULEVBQUFxM0IsRUFBQXRyQyxNQUNBZ3NCLEVBQUFzZixFQUFBdHJDLElBQUFpVSxFQUFBcTNCLEVBQUF0ckMsTUFNQSxPQUFBZ3NCLG9CQ3hGQWpzQixFQUFBRCxTQUFrQkYsRUFBUSxLQUFzQkEsRUFBUSxFQUFSQSxDQUFrQixXQUNsRSxPQUF1RyxHQUF2R2MsT0FBQUMsZUFBK0JmLEVBQVEsR0FBUkEsQ0FBdUIsWUFBZ0JpQixJQUFBLFdBQW1CLFlBQWMyRCxxQkNEdkcxRSxFQUFBK0UsRUFBWWpGLEVBQVEsb0JDQXBCLElBQUF3RixFQUFVeEYsRUFBUSxJQUNsQmtILEVBQWdCbEgsRUFBUSxJQUN4QjBNLEVBQW1CMU0sRUFBUSxHQUFSQSxFQUEyQixHQUM5Q3NILEVBQWV0SCxFQUFRLEdBQVJBLENBQXVCLFlBRXRDRyxFQUFBRCxRQUFBLFNBQUE0QixFQUFBOHZCLEdBQ0EsSUFHQWp3QixFQUhBdUQsRUFBQWdDLEVBQUFwRixHQUNBMUIsRUFBQSxFQUNBNkosS0FFQSxJQUFBdEksS0FBQXVELEVBQUF2RCxHQUFBMkYsR0FBQTlCLEVBQUFOLEVBQUF2RCxJQUFBc0ksRUFBQUMsS0FBQXZJLEdBRUEsS0FBQWl3QixFQUFBN3FCLE9BQUEzRyxHQUFBb0YsRUFBQU4sRUFBQXZELEVBQUFpd0IsRUFBQXh4QixTQUNBc00sRUFBQXpDLEVBQUF0SSxJQUFBc0ksRUFBQUMsS0FBQXZJLElBRUEsT0FBQXNJLG9CQ2ZBLElBQUFqRixFQUFTaEYsRUFBUSxHQUNqQjZFLEVBQWU3RSxFQUFRLEdBQ3ZCMnJDLEVBQWMzckMsRUFBUSxJQUV0QkcsRUFBQUQsUUFBaUJGLEVBQVEsR0FBZ0JjLE9BQUErNkIsaUJBQUEsU0FBQTMyQixFQUFBdzRCLEdBQ3pDNzRCLEVBQUFLLEdBS0EsSUFKQSxJQUdBNUIsRUFIQXdKLEVBQUE2K0IsRUFBQWpPLEdBQ0EzMkIsRUFBQStGLEVBQUEvRixPQUNBM0csRUFBQSxFQUVBMkcsRUFBQTNHLEdBQUE0RSxFQUFBQyxFQUFBQyxFQUFBNUIsRUFBQXdKLEVBQUExTSxLQUFBczlCLEVBQUFwNkIsSUFDQSxPQUFBNEIsb0JDVkEsSUFBQWdDLEVBQWdCbEgsRUFBUSxJQUN4QjZLLEVBQVc3SyxFQUFRLElBQWdCaUYsRUFDbkNpRCxLQUFpQkEsU0FFakIwakMsRUFBQSxpQkFBQXpuQyxnQkFBQXJELE9BQUE4OEIsb0JBQ0E5OEIsT0FBQTg4QixvQkFBQXo1QixXQVVBaEUsRUFBQUQsUUFBQStFLEVBQUEsU0FBQWhCLEdBQ0EsT0FBQTJuQyxHQUFBLG1CQUFBMWpDLEVBQUEzSCxLQUFBMEQsR0FUQSxTQUFBQSxHQUNBLElBQ0EsT0FBQTRHLEVBQUE1RyxHQUNHLE1BQUFPLEdBQ0gsT0FBQW9uQyxFQUFBempDLFNBS0EwakMsQ0FBQTVuQyxHQUFBNEcsRUFBQTNELEVBQUFqRCxtQ0NmQSxJQUFBMG5DLEVBQWMzckMsRUFBUSxJQUN0QjhyQyxFQUFXOXJDLEVBQVEsSUFDbkJpSCxFQUFVakgsRUFBUSxJQUNsQnFILEVBQWVySCxFQUFRLElBQ3ZCZ0gsRUFBY2hILEVBQVEsSUFDdEIrckMsRUFBQWpyQyxPQUFBb3FDLE9BR0EvcUMsRUFBQUQsU0FBQTZyQyxHQUE2Qi9yQyxFQUFRLEVBQVJBLENBQWtCLFdBQy9DLElBQUE4aEMsS0FDQXQrQixLQUVBSixFQUFBakMsU0FDQXdnQyxFQUFBLHVCQUdBLE9BRkFHLEVBQUExK0IsR0FBQSxFQUNBdStCLEVBQUEvN0IsTUFBQSxJQUFBa0wsUUFBQSxTQUFBZ0osR0FBb0N0VyxFQUFBc1csT0FDakIsR0FBbkJpeUIsS0FBbUJqSyxHQUFBMStCLElBQUF0QyxPQUFBZ00sS0FBQWkvQixLQUFzQ3ZvQyxJQUFBeUMsS0FBQSxLQUFBMDdCLElBQ3hELFNBQUFsK0IsRUFBQWQsR0FNRCxJQUxBLElBQUF1OEIsRUFBQTczQixFQUFBNUQsR0FDQW1NLEVBQUEzSCxVQUFBbEIsT0FDQWlELEVBQUEsRUFDQWdpQyxFQUFBRixFQUFBN21DLEVBQ0FnbkMsRUFBQWhsQyxFQUFBaEMsRUFDQTJLLEVBQUE1RixHQU1BLElBTEEsSUFJQXJJLEVBSkF5QixFQUFBNEQsRUFBQWlCLFVBQUErQixNQUNBOEMsRUFBQWsvQixFQUFBTCxFQUFBdm9DLEdBQUE0USxPQUFBZzRCLEVBQUE1b0MsSUFBQXVvQyxFQUFBdm9DLEdBQ0EyRCxFQUFBK0YsRUFBQS9GLE9BQ0E2aUMsRUFBQSxFQUVBN2lDLEVBQUE2aUMsR0FBQXFDLEVBQUExckMsS0FBQTZDLEVBQUF6QixFQUFBbUwsRUFBQTg4QixRQUFBMUssRUFBQXY5QixHQUFBeUIsRUFBQXpCLElBQ0csT0FBQXU5QixHQUNGNk0sZ0NDaENELElBQUFua0MsRUFBZ0I1SCxFQUFRLElBQ3hCZ0UsRUFBZWhFLEVBQVEsR0FDdkIya0MsRUFBYTNrQyxFQUFRLEtBQ3JCME4sS0FBQXZGLE1BQ0ErakMsS0FVQS9yQyxFQUFBRCxRQUFBMEQsU0FBQWhDLE1BQUEsU0FBQWtHLEdBQ0EsSUFBQUQsRUFBQUQsRUFBQXpCLE1BQ0FnbUMsRUFBQXorQixFQUFBbk4sS0FBQTBILFVBQUEsR0FDQW1rQyxFQUFBLFdBQ0EsSUFBQTFqQyxFQUFBeWpDLEVBQUFuNEIsT0FBQXRHLEVBQUFuTixLQUFBMEgsWUFDQSxPQUFBOUIsZ0JBQUFpbUMsRUFiQSxTQUFBcHBDLEVBQUFrUCxFQUFBeEosR0FDQSxLQUFBd0osS0FBQWc2QixHQUFBLENBQ0EsUUFBQXJxQyxLQUFBekIsRUFBQSxFQUEyQkEsRUFBQThSLEVBQVM5UixJQUFBeUIsRUFBQXpCLEdBQUEsS0FBQUEsRUFBQSxJQUVwQzhyQyxFQUFBaDZCLEdBQUF0TyxTQUFBLHNCQUFBL0IsRUFBQW9FLEtBQUEsVUFDRyxPQUFBaW1DLEVBQUFoNkIsR0FBQWxQLEVBQUEwRixHQVFIMmpDLENBQUF4a0MsRUFBQWEsRUFBQTNCLE9BQUEyQixHQUFBaThCLEVBQUE5OEIsRUFBQWEsRUFBQVosSUFHQSxPQURBOUQsRUFBQTZELEVBQUE3RixhQUFBb3FDLEVBQUFwcUMsVUFBQTZGLEVBQUE3RixXQUNBb3FDLGtCQ3RCQWpzQyxFQUFBRCxRQUFBLFNBQUEySCxFQUFBYSxFQUFBWixHQUNBLElBQUF3a0MsT0FBQTNvQyxJQUFBbUUsRUFDQSxPQUFBWSxFQUFBM0IsUUFDQSxjQUFBdWxDLEVBQUF6a0MsSUFDQUEsRUFBQXRILEtBQUF1SCxHQUNBLGNBQUF3a0MsRUFBQXprQyxFQUFBYSxFQUFBLElBQ0FiLEVBQUF0SCxLQUFBdUgsRUFBQVksRUFBQSxJQUNBLGNBQUE0akMsRUFBQXprQyxFQUFBYSxFQUFBLEdBQUFBLEVBQUEsSUFDQWIsRUFBQXRILEtBQUF1SCxFQUFBWSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxjQUFBNGpDLEVBQUF6a0MsRUFBQWEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQWIsRUFBQXRILEtBQUF1SCxFQUFBWSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBLGNBQUE0akMsRUFBQXprQyxFQUFBYSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0FiLEVBQUF0SCxLQUFBdUgsRUFBQVksRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNHLE9BQUFiLEVBQUFHLE1BQUFGLEVBQUFZLHFCQ2RILElBQUE2akMsRUFBZ0J2c0MsRUFBUSxHQUFXd3NDLFNBQ25DQyxFQUFZenNDLEVBQVEsSUFBZ0I0K0IsS0FDcEM4TixFQUFTMXNDLEVBQVEsSUFDakIyc0MsRUFBQSxjQUVBeHNDLEVBQUFELFFBQUEsSUFBQXFzQyxFQUFBRyxFQUFBLFlBQUFILEVBQUFHLEVBQUEsaUJBQUFqSyxFQUFBbUssR0FDQSxJQUFBcm1DLEVBQUFrbUMsRUFBQXZtQyxPQUFBdThCLEdBQUEsR0FDQSxPQUFBOEosRUFBQWhtQyxFQUFBcW1DLElBQUEsSUFBQUQsRUFBQTlsQyxLQUFBTixHQUFBLFNBQ0NnbUMsbUJDUkQsSUFBQU0sRUFBa0I3c0MsRUFBUSxHQUFXOHNDLFdBQ3JDTCxFQUFZenNDLEVBQVEsSUFBZ0I0K0IsS0FFcEN6K0IsRUFBQUQsUUFBQSxFQUFBMnNDLEVBQWlDN3NDLEVBQVEsSUFBYyxRQUFBZ2YsSUFBQSxTQUFBeWpCLEdBQ3ZELElBQUFsOEIsRUFBQWttQyxFQUFBdm1DLE9BQUF1OEIsR0FBQSxHQUNBeDRCLEVBQUE0aUMsRUFBQXRtQyxHQUNBLFdBQUEwRCxHQUFBLEtBQUExRCxFQUFBODdCLE9BQUEsTUFBQXA0QixHQUNDNGlDLG1CQ1BELElBQUE3TixFQUFVaC9CLEVBQVEsSUFDbEJHLEVBQUFELFFBQUEsU0FBQStELEVBQUE4b0MsR0FDQSxvQkFBQTlvQyxHQUFBLFVBQUErNkIsRUFBQS82QixHQUFBLE1BQUFDLFVBQUE2b0MsR0FDQSxPQUFBOW9DLG9CQ0ZBLElBQUFELEVBQWVoRSxFQUFRLEdBQ3ZCZ0osRUFBQTVFLEtBQUE0RSxNQUNBN0ksRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxPQUFBRCxFQUFBQyxJQUFBK29DLFNBQUEvb0MsSUFBQStFLEVBQUEvRSx1QkNIQTlELEVBQUFELFFBQUFrRSxLQUFBNm9DLE9BQUEsU0FBQTVsQixHQUNBLE9BQUFBLE9BQUEsTUFBQUEsRUFBQSxLQUFBQSxNQUFBLEVBQUFqakIsS0FBQTRqQyxJQUFBLEVBQUEzZ0IscUJDREEsSUFBQXFiLEVBQVcxaUMsRUFBUSxJQUNuQituQyxFQUFBM2pDLEtBQUEyakMsSUFDQW1GLEVBQUFuRixFQUFBLE9BQ0FvRixFQUFBcEYsRUFBQSxPQUNBcUYsRUFBQXJGLEVBQUEsVUFBQW9GLEdBQ0FFLEVBQUF0RixFQUFBLFFBTUE1bkMsRUFBQUQsUUFBQWtFLEtBQUFrcEMsUUFBQSxTQUFBam1CLEdBQ0EsSUFFQXppQixFQUFBcUYsRUFGQXNqQyxFQUFBbnBDLEtBQUErYSxJQUFBa0ksR0FDQW1tQixFQUFBOUssRUFBQXJiLEdBRUEsT0FBQWttQixFQUFBRixFQUFBRyxFQVJBLFNBQUEzckMsR0FDQSxPQUFBQSxFQUFBLEVBQUFxckMsRUFBQSxFQUFBQSxFQU9BTyxDQUFBRixFQUFBRixFQUFBRixHQUFBRSxFQUFBRixHQUVBbGpDLEdBREFyRixHQUFBLEVBQUF1b0MsRUFBQUQsR0FBQUssSUFDQTNvQyxFQUFBMm9DLElBRUFILEdBQUFuakMsS0FBQXVqQyxHQUFBeHVCLEtBQ0F3dUIsRUFBQXZqQyxvQkNwQkEsSUFBQXBGLEVBQWU3RSxFQUFRLEdBQ3ZCRyxFQUFBRCxRQUFBLFNBQUF5UCxFQUFBOUgsRUFBQXhHLEVBQUEyTCxHQUNBLElBQ0EsT0FBQUEsRUFBQW5GLEVBQUFoRCxFQUFBeEQsR0FBQSxHQUFBQSxFQUFBLElBQUF3RyxFQUFBeEcsR0FFRyxNQUFBbUQsR0FDSCxJQUFBa3BDLEVBQUEvOUIsRUFBQSxPQUVBLFdBREFoTSxJQUFBK3BDLEdBQUE3b0MsRUFBQTZvQyxFQUFBbnRDLEtBQUFvUCxJQUNBbkwscUJDVEEsSUFBQW9ELEVBQWdCNUgsRUFBUSxJQUN4QnFILEVBQWVySCxFQUFRLElBQ3ZCZ0gsRUFBY2hILEVBQVEsSUFDdEJtSixFQUFlbkosRUFBUSxJQUV2QkcsRUFBQUQsUUFBQSxTQUFBNEgsRUFBQWdDLEVBQUE4RixFQUFBKzlCLEVBQUFDLEdBQ0FobUMsRUFBQWtDLEdBQ0EsSUFBQTVFLEVBQUFtQyxFQUFBUyxHQUNBekQsRUFBQTJDLEVBQUE5QixHQUNBNkIsRUFBQW9DLEVBQUFqRSxFQUFBNkIsUUFDQWlELEVBQUE0akMsRUFBQTdtQyxFQUFBLElBQ0EzRyxFQUFBd3RDLEdBQUEsSUFDQSxHQUFBaCtCLEVBQUEsU0FBdUIsQ0FDdkIsR0FBQTVGLEtBQUEzRixFQUFBLENBQ0FzcEMsRUFBQXRwQyxFQUFBMkYsR0FDQUEsR0FBQTVKLEVBQ0EsTUFHQSxHQURBNEosR0FBQTVKLEVBQ0F3dEMsRUFBQTVqQyxFQUFBLEVBQUFqRCxHQUFBaUQsRUFDQSxNQUFBOUYsVUFBQSwrQ0FHQSxLQUFRMHBDLEVBQUE1akMsR0FBQSxFQUFBakQsRUFBQWlELEVBQXNDQSxHQUFBNUosRUFBQTRKLEtBQUEzRixJQUM5Q3NwQyxFQUFBN2pDLEVBQUE2akMsRUFBQXRwQyxFQUFBMkYsS0FBQTlFLElBRUEsT0FBQXlvQyxpQ0N4QkEsSUFBQXRtQyxFQUFlckgsRUFBUSxJQUN2QjBLLEVBQXNCMUssRUFBUSxJQUM5Qm1KLEVBQWVuSixFQUFRLElBRXZCRyxFQUFBRCxXQUFBb1EsWUFBQSxTQUFBN00sRUFBQThNLEdBQ0EsSUFBQXJMLEVBQUFtQyxFQUFBbEIsTUFDQStMLEVBQUEvSSxFQUFBakUsRUFBQTZCLFFBQ0FxbEIsRUFBQTFoQixFQUFBakgsRUFBQXlPLEdBQ0FtQyxFQUFBM0osRUFBQTZGLEVBQUEyQixHQUNBUixFQUFBekosVUFBQWxCLE9BQUEsRUFBQWtCLFVBQUEsUUFBQXRFLEVBQ0EraEIsRUFBQXRoQixLQUFBaUIsVUFBQTFCLElBQUErTixFQUFBUSxFQUFBeEgsRUFBQWdILEVBQUFRLElBQUFtQyxFQUFBbkMsRUFBQWthLEdBQ0F5aEIsRUFBQSxFQU1BLElBTEF4NUIsRUFBQStYLEtBQUEvWCxFQUFBcVIsSUFDQW1vQixHQUFBLEVBQ0F4NUIsR0FBQXFSLEVBQUEsRUFDQTBHLEdBQUExRyxFQUFBLEdBRUFBLEtBQUEsR0FDQXJSLEtBQUFuUCxJQUFBa25CLEdBQUFsbkIsRUFBQW1QLFVBQ0FuUCxFQUFBa25CLEdBQ0FBLEdBQUF5aEIsRUFDQXg1QixHQUFBdzVCLEVBQ0csT0FBQTNvQyxrQkN4QkgvRSxFQUFBRCxRQUFBLFNBQUErUCxFQUFBNU8sR0FDQSxPQUFVQSxRQUFBNE8sNEJDQU5qUSxFQUFRLElBQWdCLFVBQUE4dEMsT0FBd0I5dEMsRUFBUSxHQUFjaUYsRUFBQXM1QixPQUFBdjhCLFVBQUEsU0FDMUV3USxjQUFBLEVBQ0F2UixJQUFPakIsRUFBUSxxQkNIZkcsRUFBQUQsUUFBQSxTQUFBcUUsR0FDQSxJQUNBLE9BQVlDLEdBQUEsRUFBQStPLEVBQUFoUCxLQUNULE1BQUFDLEdBQ0gsT0FBWUEsR0FBQSxFQUFBK08sRUFBQS9PLHNCQ0paLElBQUFLLEVBQWU3RSxFQUFRLEdBQ3ZCZ0UsRUFBZWhFLEVBQVEsR0FDdkIrdEMsRUFBMkIvdEMsRUFBUSxLQUVuQ0csRUFBQUQsUUFBQSxTQUFBZ1AsRUFBQW1ZLEdBRUEsR0FEQXhpQixFQUFBcUssR0FDQWxMLEVBQUFxakIsTUFBQTVmLGNBQUF5SCxFQUFBLE9BQUFtWSxFQUNBLElBQUEybUIsRUFBQUQsRUFBQTlvQyxFQUFBaUssR0FHQSxPQURBKzNCLEVBREErRyxFQUFBL0csU0FDQTVmLEdBQ0EybUIsRUFBQTlHLHVDQ1RBLElBQUErRyxFQUFhanVDLEVBQVEsS0FDckJpUCxFQUFlalAsRUFBUSxJQUl2QkcsRUFBQUQsUUFBaUJGLEVBQVEsR0FBUkEsQ0FIakIsTUFHd0MsU0FBQWlCLEdBQ3hDLGtCQUF5QixPQUFBQSxFQUFBa0YsS0FBQThCLFVBQUFsQixPQUFBLEVBQUFrQixVQUFBLFFBQUF0RSxNQUd6QjFDLElBQUEsU0FBQVUsR0FDQSxJQUFBNGIsRUFBQTB3QixFQUFBQyxTQUFBai9CLEVBQUE5SSxLQVJBLE9BUUF4RSxHQUNBLE9BQUE0YixLQUFBaEssR0FHQTFFLElBQUEsU0FBQWxOLEVBQUFOLEdBQ0EsT0FBQTRzQyxFQUFBL1AsSUFBQWp2QixFQUFBOUksS0FiQSxPQWFBLElBQUF4RSxFQUFBLEVBQUFBLEVBQUFOLEtBRUM0c0MsR0FBQSxpQ0NqQkQsSUFBQWpwQyxFQUFTaEYsRUFBUSxHQUFjaUYsRUFDL0J2RCxFQUFhMUIsRUFBUSxJQUNyQndLLEVBQWtCeEssRUFBUSxJQUMxQndDLEVBQVV4QyxFQUFRLElBQ2xCc0ssRUFBaUJ0SyxFQUFRLElBQ3pCMmdDLEVBQVkzZ0MsRUFBUSxJQUNwQm11QyxFQUFrQm51QyxFQUFRLEtBQzFCMFAsRUFBVzFQLEVBQVEsS0FDbkJzTCxFQUFpQnRMLEVBQVEsSUFDekI2OUIsRUFBa0I3OUIsRUFBUSxHQUMxQjBWLEVBQWMxVixFQUFRLElBQVMwVixRQUMvQnpHLEVBQWVqUCxFQUFRLElBQ3ZCNFgsRUFBQWltQixFQUFBLFlBRUFxUSxFQUFBLFNBQUFwbUMsRUFBQW5HLEdBRUEsSUFDQTRiLEVBREF2VCxFQUFBMEwsRUFBQS9ULEdBRUEsU0FBQXFJLEVBQUEsT0FBQWxDLEVBQUF1OEIsR0FBQXI2QixHQUVBLElBQUF1VCxFQUFBelYsRUFBQXNtQyxHQUF1Qjd3QixFQUFPQSxJQUFBMWIsRUFDOUIsR0FBQTBiLEVBQUF6RCxHQUFBblksRUFBQSxPQUFBNGIsR0FJQXBkLEVBQUFELFNBQ0FxaEMsZUFBQSxTQUFBNXVCLEVBQUEvTCxFQUFBMkMsRUFBQXkzQixHQUNBLElBQUE5eEIsRUFBQXlELEVBQUEsU0FBQTdLLEVBQUF3UyxHQUNBaFEsRUFBQXhDLEVBQUFvSCxFQUFBdEksRUFBQSxNQUNBa0IsRUFBQSsyQixHQUFBajRCLEVBQ0FrQixFQUFBdThCLEdBQUEzaUMsRUFBQSxNQUNBb0csRUFBQXNtQyxRQUFBenFDLEVBQ0FtRSxFQUFBdW1DLFFBQUExcUMsRUFDQW1FLEVBQUE4UCxHQUFBLE9BQ0FqVSxHQUFBMlcsR0FBQXFtQixFQUFBcm1CLEVBQUEvUSxFQUFBekIsRUFBQWs1QixHQUFBbDVCLEtBc0RBLE9BcERBMEMsRUFBQTBFLEVBQUFsTixXQUdBdWhCLE1BQUEsV0FDQSxRQUFBemIsRUFBQW1ILEVBQUE5SSxLQUFBUyxHQUFBME0sRUFBQXhMLEVBQUF1OEIsR0FBQTltQixFQUFBelYsRUFBQXNtQyxHQUE4RTd3QixFQUFPQSxJQUFBMWIsRUFDckYwYixFQUFBcmMsR0FBQSxFQUNBcWMsRUFBQXJiLElBQUFxYixFQUFBcmIsRUFBQXFiLEVBQUFyYixFQUFBTCxPQUFBOEIsVUFDQTJQLEVBQUFpSyxFQUFBbmQsR0FFQTBILEVBQUFzbUMsR0FBQXRtQyxFQUFBdW1DLFFBQUExcUMsRUFDQW1FLEVBQUE4UCxHQUFBLEdBSUEwMkIsT0FBQSxTQUFBM3NDLEdBQ0EsSUFBQW1HLEVBQUFtSCxFQUFBOUksS0FBQVMsR0FDQTJXLEVBQUEyd0IsRUFBQXBtQyxFQUFBbkcsR0FDQSxHQUFBNGIsRUFBQSxDQUNBLElBQUF2TixFQUFBdU4sRUFBQTFiLEVBQ0Fza0IsRUFBQTVJLEVBQUFyYixTQUNBNEYsRUFBQXU4QixHQUFBOW1CLEVBQUFuZCxHQUNBbWQsRUFBQXJjLEdBQUEsRUFDQWlsQixNQUFBdGtCLEVBQUFtTyxHQUNBQSxNQUFBOU4sRUFBQWlrQixHQUNBcmUsRUFBQXNtQyxJQUFBN3dCLElBQUF6VixFQUFBc21DLEdBQUFwK0IsR0FDQWxJLEVBQUF1bUMsSUFBQTl3QixJQUFBelYsRUFBQXVtQyxHQUFBbG9CLEdBQ0FyZSxFQUFBOFAsS0FDUyxRQUFBMkYsR0FJVHpNLFFBQUEsU0FBQWhILEdBQ0FtRixFQUFBOUksS0FBQVMsR0FHQSxJQUZBLElBQ0EyVyxFQURBdFksRUFBQXpDLEVBQUFzSCxFQUFBN0IsVUFBQWxCLE9BQUEsRUFBQWtCLFVBQUEsUUFBQXRFLEVBQUEsR0FFQTRaLE1BQUExYixFQUFBc0UsS0FBQWlvQyxJQUdBLElBRkFucEMsRUFBQXNZLEVBQUFoSyxFQUFBZ0ssRUFBQXpELEVBQUEzVCxNQUVBb1gsS0FBQXJjLEdBQUFxYyxJQUFBcmIsR0FLQXNELElBQUEsU0FBQTdELEdBQ0EsUUFBQXVzQyxFQUFBai9CLEVBQUE5SSxLQUFBUyxHQUFBakYsTUFHQWs4QixHQUFBNzRCLEVBQUFrSyxFQUFBbE4sVUFBQSxRQUNBZixJQUFBLFdBQ0EsT0FBQWdPLEVBQUE5SSxLQUFBUyxHQUFBZ1IsTUFHQTFJLEdBRUFndkIsSUFBQSxTQUFBcDJCLEVBQUFuRyxFQUFBTixHQUNBLElBQ0E4a0IsRUFBQW5jLEVBREF1VCxFQUFBMndCLEVBQUFwbUMsRUFBQW5HLEdBb0JLLE9BakJMNGIsRUFDQUEsRUFBQWhLLEVBQUFsUyxHQUdBeUcsRUFBQXVtQyxHQUFBOXdCLEdBQ0FuZCxFQUFBNEosRUFBQTBMLEVBQUEvVCxHQUFBLEdBQ0FtWSxFQUFBblksRUFDQTRSLEVBQUFsUyxFQUNBYSxFQUFBaWtCLEVBQUFyZSxFQUFBdW1DLEdBQ0F4c0MsT0FBQThCLEVBQ0F6QyxHQUFBLEdBRUE0RyxFQUFBc21DLEtBQUF0bUMsRUFBQXNtQyxHQUFBN3dCLEdBQ0E0SSxNQUFBdGtCLEVBQUEwYixHQUNBelYsRUFBQThQLEtBRUEsTUFBQTVOLElBQUFsQyxFQUFBdThCLEdBQUFyNkIsR0FBQXVULElBQ0t6VixHQUVMb21DLFdBQ0ExTSxVQUFBLFNBQUF0eUIsRUFBQXRJLEVBQUEyQyxHQUdBNGtDLEVBQUFqL0IsRUFBQXRJLEVBQUEsU0FBQXc5QixFQUFBZCxHQUNBbjlCLEtBQUEwNEIsR0FBQTV2QixFQUFBbTFCLEVBQUF4OUIsR0FDQVQsS0FBQW0rQixHQUFBaEIsRUFDQW45QixLQUFBa29DLFFBQUExcUMsR0FDSyxXQUtMLElBSkEsSUFDQTIvQixFQURBbjlCLEtBQ0FtK0IsR0FDQS9tQixFQUZBcFgsS0FFQWtvQyxHQUVBOXdCLEtBQUFyYyxHQUFBcWMsSUFBQXJiLEVBRUEsT0FOQWlFLEtBTUEwNEIsS0FOQTE0QixLQU1Ba29DLEdBQUE5d0IsTUFBQTFiLEVBTkFzRSxLQU1BMDRCLEdBQUF1UCxJQU1BMStCLEVBQUEsVUFBQTR6QixFQUFBL2xCLEVBQUF6RCxFQUNBLFVBQUF3cEIsRUFBQS9sQixFQUFBaEssR0FDQWdLLEVBQUF6RCxFQUFBeUQsRUFBQWhLLEtBZEFwTixLQVFBMDRCLFFBQUFsN0IsRUFDQStMLEVBQUEsS0FNS25HLEVBQUEsb0JBQUFBLEdBQUEsR0FHTCtCLEVBQUExRSxtQ0M1SUEsSUFBQXFuQyxFQUFhanVDLEVBQVEsS0FDckJpUCxFQUFlalAsRUFBUSxJQUl2QkcsRUFBQUQsUUFBaUJGLEVBQVEsR0FBUkEsQ0FIakIsTUFHd0MsU0FBQWlCLEdBQ3hDLGtCQUF5QixPQUFBQSxFQUFBa0YsS0FBQThCLFVBQUFsQixPQUFBLEVBQUFrQixVQUFBLFFBQUF0RSxNQUd6Qml2QixJQUFBLFNBQUF2eEIsR0FDQSxPQUFBNHNDLEVBQUEvUCxJQUFBanZCLEVBQUE5SSxLQVJBLE9BUUE5RSxFQUFBLElBQUFBLEVBQUEsRUFBQUEsT0FFQzRzQyxpQ0NaRCxJQWFBTSxFQWJBQyxFQUFXeHVDLEVBQVEsR0FBUkEsQ0FBMEIsR0FDckN1QyxFQUFldkMsRUFBUSxJQUN2QndWLEVBQVd4VixFQUFRLElBQ25Ca3JDLEVBQWFsckMsRUFBUSxLQUNyQnl1QyxFQUFXenVDLEVBQVEsS0FDbkJnRSxFQUFlaEUsRUFBUSxHQUN2Qm9HLEVBQVlwRyxFQUFRLEdBQ3BCaVAsRUFBZWpQLEVBQVEsSUFFdkIyVixFQUFBSCxFQUFBRyxRQUNBUixFQUFBclUsT0FBQXFVLGFBQ0F1NUIsRUFBQUQsRUFBQUUsUUFDQUMsS0FHQWo4QixFQUFBLFNBQUExUixHQUNBLGtCQUNBLE9BQUFBLEVBQUFrRixLQUFBOEIsVUFBQWxCLE9BQUEsRUFBQWtCLFVBQUEsUUFBQXRFLEtBSUFxeEIsR0FFQS96QixJQUFBLFNBQUFVLEdBQ0EsR0FBQXFDLEVBQUFyQyxHQUFBLENBQ0EsSUFBQTJSLEVBQUFxQyxFQUFBaFUsR0FDQSxXQUFBMlIsRUFBQW83QixFQUFBei9CLEVBQUE5SSxLQWxCQSxZQWtCQWxGLElBQUFVLEdBQ0EyUixJQUFBbk4sS0FBQWsrQixTQUFBMWdDLElBSUFrTCxJQUFBLFNBQUFsTixFQUFBTixHQUNBLE9BQUFvdEMsRUFBQXZRLElBQUFqdkIsRUFBQTlJLEtBeEJBLFdBd0JBeEUsRUFBQU4sS0FLQXd0QyxFQUFBMXVDLEVBQUFELFFBQWdDRixFQUFRLEdBQVJBLENBN0JoQyxVQTZCdUQyUyxFQUFBcWlCLEVBQUF5WixHQUFBLE1BR3ZEcm9DLEVBQUEsV0FBdUIsZUFBQXlvQyxHQUFBaGdDLEtBQUEvTixPQUFBZ3VDLFFBQUFodUMsUUFBQTh0QyxHQUFBLEdBQUEzdEMsSUFBQTJ0QyxPQUV2QjFELEdBREFxRCxFQUFBRSxFQUFBbE4sZUFBQTV1QixFQWpDQSxZQWtDQTNRLFVBQUFnekIsR0FDQXhmLEVBQUFDLE1BQUEsRUFDQSs0QixHQUFBLHFDQUFBN3NDLEdBQ0EsSUFBQTBPLEVBQUF3K0IsRUFBQTdzQyxVQUNBb0csRUFBQWlJLEVBQUExTyxHQUNBWSxFQUFBOE4sRUFBQTFPLEVBQUEsU0FBQWlELEVBQUFtRCxHQUVBLEdBQUEvRCxFQUFBWSxLQUFBdVEsRUFBQXZRLEdBQUEsQ0FDQXVCLEtBQUFpb0MsS0FBQWpvQyxLQUFBaW9DLEdBQUEsSUFBQUcsR0FDQSxJQUFBdGtDLEVBQUE5RCxLQUFBaW9DLEdBQUF6c0MsR0FBQWlELEVBQUFtRCxHQUNBLGFBQUFwRyxFQUFBd0UsS0FBQThELEVBRU8sT0FBQTdCLEVBQUE3SCxLQUFBNEYsS0FBQXZCLEVBQUFtRCxzQ0N0RFAsSUFBQXlDLEVBQWtCeEssRUFBUSxJQUMxQjJWLEVBQWMzVixFQUFRLElBQVMyVixRQUMvQjlRLEVBQWU3RSxFQUFRLEdBQ3ZCZ0UsRUFBZWhFLEVBQVEsR0FDdkJzSyxFQUFpQnRLLEVBQVEsSUFDekIyZ0MsRUFBWTNnQyxFQUFRLElBQ3BCZ0wsRUFBd0JoTCxFQUFRLElBQ2hDK3VDLEVBQVcvdUMsRUFBUSxJQUNuQmlQLEVBQWVqUCxFQUFRLElBQ3ZCdU0sRUFBQXZCLEVBQUEsR0FDQXdCLEVBQUF4QixFQUFBLEdBQ0FrSyxFQUFBLEVBR0F3NUIsRUFBQSxTQUFBNW1DLEdBQ0EsT0FBQUEsRUFBQXVtQyxLQUFBdm1DLEVBQUF1bUMsR0FBQSxJQUFBVyxJQUVBQSxFQUFBLFdBQ0E3b0MsS0FBQXZCLE1BRUFxcUMsRUFBQSxTQUFBeHFDLEVBQUE5QyxHQUNBLE9BQUE0SyxFQUFBOUgsRUFBQUcsRUFBQSxTQUFBWCxHQUNBLE9BQUFBLEVBQUEsS0FBQXRDLEtBR0FxdEMsRUFBQWh0QyxXQUNBZixJQUFBLFNBQUFVLEdBQ0EsSUFBQTRiLEVBQUEweEIsRUFBQTlvQyxLQUFBeEUsR0FDQSxHQUFBNGIsRUFBQSxPQUFBQSxFQUFBLElBRUEvWCxJQUFBLFNBQUE3RCxHQUNBLFFBQUFzdEMsRUFBQTlvQyxLQUFBeEUsSUFFQWtOLElBQUEsU0FBQWxOLEVBQUFOLEdBQ0EsSUFBQWtjLEVBQUEweEIsRUFBQTlvQyxLQUFBeEUsR0FDQTRiLElBQUEsR0FBQWxjLEVBQ0E4RSxLQUFBdkIsRUFBQXNGLE1BQUF2SSxFQUFBTixLQUVBaXRDLE9BQUEsU0FBQTNzQyxHQUNBLElBQUFxSSxFQUFBd0MsRUFBQXJHLEtBQUF2QixFQUFBLFNBQUFYLEdBQ0EsT0FBQUEsRUFBQSxLQUFBdEMsSUFHQSxPQURBcUksR0FBQTdELEtBQUF2QixFQUFBK2xCLE9BQUEzZ0IsRUFBQSxNQUNBQSxJQUlBN0osRUFBQUQsU0FDQXFoQyxlQUFBLFNBQUE1dUIsRUFBQS9MLEVBQUEyQyxFQUFBeTNCLEdBQ0EsSUFBQTl4QixFQUFBeUQsRUFBQSxTQUFBN0ssRUFBQXdTLEdBQ0FoUSxFQUFBeEMsRUFBQW9ILEVBQUF0SSxFQUFBLE1BQ0FrQixFQUFBKzJCLEdBQUFqNEIsRUFDQWtCLEVBQUF1OEIsR0FBQW52QixJQUNBcE4sRUFBQXVtQyxRQUFBMXFDLE9BQ0FBLEdBQUEyVyxHQUFBcW1CLEVBQUFybUIsRUFBQS9RLEVBQUF6QixFQUFBazVCLEdBQUFsNUIsS0FvQkEsT0FsQkEwQyxFQUFBMEUsRUFBQWxOLFdBR0Fzc0MsT0FBQSxTQUFBM3NDLEdBQ0EsSUFBQXFDLEVBQUFyQyxHQUFBLFNBQ0EsSUFBQTJSLEVBQUFxQyxFQUFBaFUsR0FDQSxXQUFBMlIsRUFBQW83QixFQUFBei9CLEVBQUE5SSxLQUFBUyxJQUFBLE9BQUFqRixHQUNBMlIsR0FBQXk3QixFQUFBejdCLEVBQUFuTixLQUFBaytCLFlBQUEvd0IsRUFBQW5OLEtBQUFrK0IsS0FJQTcrQixJQUFBLFNBQUE3RCxHQUNBLElBQUFxQyxFQUFBckMsR0FBQSxTQUNBLElBQUEyUixFQUFBcUMsRUFBQWhVLEdBQ0EsV0FBQTJSLEVBQUFvN0IsRUFBQXovQixFQUFBOUksS0FBQVMsSUFBQXBCLElBQUE3RCxHQUNBMlIsR0FBQXk3QixFQUFBejdCLEVBQUFuTixLQUFBaytCLE9BR0FuMUIsR0FFQWd2QixJQUFBLFNBQUFwMkIsRUFBQW5HLEVBQUFOLEdBQ0EsSUFBQWlTLEVBQUFxQyxFQUFBOVEsRUFBQWxELElBQUEsR0FHQSxPQUZBLElBQUEyUixFQUFBbzdCLEVBQUE1bUMsR0FBQStHLElBQUFsTixFQUFBTixHQUNBaVMsRUFBQXhMLEVBQUF1OEIsSUFBQWhqQyxFQUNBeUcsR0FFQTZtQyxRQUFBRCxvQkNsRkEsSUFBQXRwQyxFQUFnQnBGLEVBQVEsSUFDeEJtSixFQUFlbkosRUFBUSxJQUN2QkcsRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxRQUFBTixJQUFBTSxFQUFBLFNBQ0EsSUFBQWlyQyxFQUFBOXBDLEVBQUFuQixHQUNBOEMsRUFBQW9DLEVBQUErbEMsR0FDQSxHQUFBQSxJQUFBbm9DLEVBQUEsTUFBQTRFLFdBQUEsaUJBQ0EsT0FBQTVFLG9CQ1BBLElBQUE4RCxFQUFXN0ssRUFBUSxJQUNuQjhyQyxFQUFXOXJDLEVBQVEsSUFDbkI2RSxFQUFlN0UsRUFBUSxHQUN2Qm12QyxFQUFjbnZDLEVBQVEsR0FBV212QyxRQUNqQ2h2QyxFQUFBRCxRQUFBaXZDLEtBQUFDLFNBQUEsU0FBQW5yQyxHQUNBLElBQUE2SSxFQUFBakMsRUFBQTVGLEVBQUFKLEVBQUFaLElBQ0ErbkMsRUFBQUYsRUFBQTdtQyxFQUNBLE9BQUErbUMsRUFBQWwvQixFQUFBa0gsT0FBQWc0QixFQUFBL25DLElBQUE2SSxpQ0NOQSxJQUFBcVEsRUFBY25kLEVBQVEsSUFDdEJnRSxFQUFlaEUsRUFBUSxHQUN2Qm1KLEVBQWVuSixFQUFRLElBQ3ZCd0MsRUFBVXhDLEVBQVEsSUFDbEJxdkMsRUFBMkJydkMsRUFBUSxFQUFSQSxDQUFnQixzQkFnQzNDRyxFQUFBRCxRQTlCQSxTQUFBb3ZDLEVBQUE3ckMsRUFBQXdnQyxFQUFBdGhDLEVBQUE0c0MsRUFBQWgvQixFQUFBNGYsRUFBQTFMLEVBQUErcUIsR0FNQSxJQUxBLElBR0FDLEVBQUFDLEVBSEFDLEVBQUFwL0IsRUFDQXEvQixFQUFBLEVBQ0E1TixJQUFBdmQsR0FBQWppQixFQUFBaWlCLEVBQUErcUIsRUFBQSxHQUdBSSxFQUFBTCxHQUFBLENBQ0EsR0FBQUssS0FBQWp0QyxFQUFBLENBU0EsR0FSQThzQyxFQUFBek4sSUFBQXIvQixFQUFBaXRDLEtBQUEzTCxHQUFBdGhDLEVBQUFpdEMsR0FFQUYsR0FBQSxFQUNBMXJDLEVBQUF5ckMsS0FFQUMsT0FBQS9yQyxLQURBK3JDLEVBQUFELEVBQUFKLE1BQ0FLLEVBQUF2eUIsRUFBQXN5QixJQUdBQyxHQUFBdmYsRUFBQSxFQUNBd2YsRUFBQUwsRUFBQTdyQyxFQUFBd2dDLEVBQUF3TCxFQUFBdG1DLEVBQUFzbUMsRUFBQTFvQyxRQUFBNG9DLEVBQUF4ZixFQUFBLFNBQ08sQ0FDUCxHQUFBd2YsR0FBQSx1QkFBQXpyQyxZQUNBVCxFQUFBa3NDLEdBQUFGLEVBR0FFLElBRUFDLElBRUEsT0FBQUQsb0JDbENBLElBQUF4bUMsRUFBZW5KLEVBQVEsSUFDdkI2dkMsRUFBYTd2QyxFQUFRLElBQ3JCc0YsRUFBY3RGLEVBQVEsSUFFdEJHLEVBQUFELFFBQUEsU0FBQTRILEVBQUFnb0MsRUFBQUMsRUFBQWhrQixHQUNBLElBQUEzb0IsRUFBQThDLE9BQUFaLEVBQUF3QyxJQUNBa29DLEVBQUE1c0MsRUFBQTJELE9BQ0FrcEMsT0FBQXRzQyxJQUFBb3NDLEVBQUEsSUFBQTdwQyxPQUFBNnBDLEdBQ0FHLEVBQUEvbUMsRUFBQTJtQyxHQUNBLEdBQUFJLEdBQUFGLEdBQUEsSUFBQUMsRUFBQSxPQUFBN3NDLEVBQ0EsSUFBQStzQyxFQUFBRCxFQUFBRixFQUNBSSxFQUFBUCxFQUFBdHZDLEtBQUEwdkMsRUFBQTdyQyxLQUFBMkUsS0FBQW9uQyxFQUFBRixFQUFBbHBDLFNBRUEsT0FEQXFwQyxFQUFBcnBDLE9BQUFvcEMsSUFBQUMsSUFBQWpvQyxNQUFBLEVBQUFnb0MsSUFDQXBrQixFQUFBcWtCLEVBQUFodEMsSUFBQWd0QyxvQkNkQSxJQUFBekUsRUFBYzNyQyxFQUFRLElBQ3RCa0gsRUFBZ0JsSCxFQUFRLElBQ3hCaXNDLEVBQWFqc0MsRUFBUSxJQUFlaUYsRUFDcEM5RSxFQUFBRCxRQUFBLFNBQUFtd0MsR0FDQSxnQkFBQXBzQyxHQU9BLElBTkEsSUFLQXRDLEVBTEF1RCxFQUFBZ0MsRUFBQWpELEdBQ0E2SSxFQUFBNitCLEVBQUF6bUMsR0FDQTZCLEVBQUErRixFQUFBL0YsT0FDQTNHLEVBQUEsRUFDQTZKLEtBRUFsRCxFQUFBM0csR0FBQTZyQyxFQUFBMXJDLEtBQUEyRSxFQUFBdkQsRUFBQW1MLEVBQUExTSxPQUNBNkosRUFBQUMsS0FBQW1tQyxHQUFBMXVDLEVBQUF1RCxFQUFBdkQsSUFBQXVELEVBQUF2RCxJQUNLLE9BQUFzSSxxQkNaTCxJQUFBVSxFQUFjM0ssRUFBUSxJQUN0QnFVLEVBQVdyVSxFQUFRLEtBQ25CRyxFQUFBRCxRQUFBLFNBQUEwRyxHQUNBLGtCQUNBLEdBQUErRCxFQUFBeEUsT0FBQVMsRUFBQSxNQUFBMUMsVUFBQTBDLEVBQUEseUJBQ0EsT0FBQXlOLEVBQUFsTyx5QkNOQSxJQUFBdzZCLEVBQVkzZ0MsRUFBUSxJQUVwQkcsRUFBQUQsUUFBQSxTQUFBNlQsRUFBQWpHLEdBQ0EsSUFBQTdELEtBRUEsT0FEQTAyQixFQUFBNXNCLEdBQUEsRUFBQTlKLEVBQUFDLEtBQUFELEVBQUE2RCxHQUNBN0Qsa0JDSkE5SixFQUFBRCxRQUFBa0UsS0FBQWtzQyxPQUFBLFNBQUFqcEIsRUFBQWtwQixFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQ0EsSUFBQXpvQyxVQUFBbEIsUUFFQXNnQixNQUVBa3BCLE1BRUFDLE1BRUFDLE1BRUFDLEtBQ0ExM0IsSUFDQXFPLElBQUFySSxLQUFBcUksS0FBQXJJLElBQUFxSSxHQUNBQSxFQUFBa3BCLElBQUFHLEVBQUFELElBQUFELEVBQUFELEdBQUFFLG9CQ2ZBLElBQUFuckMsRUFBY3RGLEVBQVEsS0FDdEJHLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsT0FBQW5ELE9BQUF3RSxFQUFBckIsc0JDRkEsSUFBQXVCLEVBQVV4RixFQUFRLElBQ2xCcUgsRUFBZXJILEVBQVEsS0FDdkJzSCxFQUFldEgsRUFBUSxJQUFSQSxDQUF1QixZQUN0Q3VILEVBQUF6RyxPQUFBa0IsVUFFQTdCLEVBQUFELFFBQUFZLE9BQUEwRyxnQkFBQSxTQUFBdEMsR0FFQSxPQURBQSxFQUFBbUMsRUFBQW5DLEdBQ0FNLEVBQUFOLEVBQUFvQyxHQUFBcEMsRUFBQW9DLEdBQ0EsbUJBQUFwQyxFQUFBdUMsYUFBQXZDLGVBQUF1QyxZQUNBdkMsRUFBQXVDLFlBQUF6RixVQUNHa0QsYUFBQXBFLE9BQUF5RyxFQUFBLHVCQ1ZILElBQUFLLEVBQWdCNUgsRUFBUSxLQUN4QkcsRUFBQUQsUUFBQSxTQUFBMkgsRUFBQUMsRUFBQWYsR0FFQSxHQURBYSxFQUFBQyxRQUNBbEUsSUFBQW1FLEVBQUEsT0FBQUQsRUFDQSxPQUFBZCxHQUNBLHVCQUFBbkMsR0FDQSxPQUFBaUQsRUFBQXRILEtBQUF1SCxFQUFBbEQsSUFFQSx1QkFBQUEsRUFBQW1ELEdBQ0EsT0FBQUYsRUFBQXRILEtBQUF1SCxFQUFBbEQsRUFBQW1ELElBRUEsdUJBQUFuRCxFQUFBbUQsRUFBQXRILEdBQ0EsT0FBQW9ILEVBQUF0SCxLQUFBdUgsRUFBQWxELEVBQUFtRCxFQUFBdEgsSUFHQSxrQkFDQSxPQUFBb0gsRUFBQUcsTUFBQUYsRUFBQUcsOEJDakJBOUgsRUFBQUQsU0FBa0JGLEVBQVEsTUFBc0JBLEVBQVEsR0FBUkEsQ0FBa0IsV0FDbEUsT0FBdUcsR0FBdkdjLE9BQUFDLGVBQStCZixFQUFRLElBQVJBLENBQXVCLFlBQWdCaUIsSUFBQSxXQUFtQixZQUFjMkQscUJDRHZHLElBQUFaLEVBQWVoRSxFQUFRLElBQ3ZCcTlCLEVBQWVyOUIsRUFBUSxJQUFXcTlCLFNBRWxDbGYsRUFBQW5hLEVBQUFxNUIsSUFBQXI1QixFQUFBcTVCLEVBQUE2RSxlQUNBL2hDLEVBQUFELFFBQUEsU0FBQStELEdBQ0EsT0FBQWthLEVBQUFrZixFQUFBNkUsY0FBQWorQixxQ0NIQS9ELEVBQUFzQixZQUFBLEVBRUEsSUFFQW12QyxFQUFBL1UsRUFGZ0I1N0IsRUFBUSxNQU14QjR3QyxFQUFBaFYsRUFGYzU3QixFQUFRLE1BSXRCNndDLEVBQUEsbUJBQUFELEVBQUFwVixTQUFBLGlCQUFBbVYsRUFBQW5WLFFBQUEsU0FBQTFhLEdBQWlILGNBQUFBLEdBQXFCLFNBQUFBLEdBQW1CLE9BQUFBLEdBQUEsbUJBQUE4dkIsRUFBQXBWLFNBQUExYSxFQUFBclosY0FBQW1wQyxFQUFBcFYsU0FBQTFhLElBQUE4dkIsRUFBQXBWLFFBQUF4NUIsVUFBQSxnQkFBQThlLEdBRXpKLFNBQUE4YSxFQUFBOWEsR0FBc0MsT0FBQUEsS0FBQXRmLFdBQUFzZixHQUF1QzBhLFFBQUExYSxHQUU3RTVnQixFQUFBczdCLFFBQUEsbUJBQUFvVixFQUFBcFYsU0FBQSxXQUFBcVYsRUFBQUYsRUFBQW5WLFNBQUEsU0FBQTFhLEdBQ0EsZ0JBQUFBLEVBQUEsWUFBQSt2QixFQUFBL3ZCLElBQ0MsU0FBQUEsR0FDRCxPQUFBQSxHQUFBLG1CQUFBOHZCLEVBQUFwVixTQUFBMWEsRUFBQXJaLGNBQUFtcEMsRUFBQXBWLFNBQUExYSxJQUFBOHZCLEVBQUFwVixRQUFBeDVCLFVBQUEsa0JBQUE4ZSxFQUFBLFlBQUErdkIsRUFBQS92QixrQ0NsQkEsSUFBQTNXLEVBQWNuSyxFQUFRLElBQ3RCeUMsRUFBY3pDLEVBQVEsSUFDdEJ1QyxFQUFldkMsRUFBUSxLQUN2QnNDLEVBQVd0QyxFQUFRLElBQ25Cb0wsRUFBZ0JwTCxFQUFRLEtBQ3hCK2lDLEVBQWtCL2lDLEVBQVEsS0FDMUI0Z0MsRUFBcUI1Z0MsRUFBUSxLQUM3QndILEVBQXFCeEgsRUFBUSxLQUM3QjhOLEVBQWU5TixFQUFRLEdBQVJBLENBQWdCLFlBQy9CZ2pDLE9BQUFsMkIsTUFBQSxXQUFBQSxRQUtBbTJCLEVBQUEsV0FBOEIsT0FBQTk4QixNQUU5QmhHLEVBQUFELFFBQUEsU0FBQThTLEVBQUFwTSxFQUFBODBCLEVBQUExckIsRUFBQWt6QixFQUFBQyxFQUFBandCLEdBQ0E2dkIsRUFBQXJILEVBQUE5MEIsRUFBQW9KLEdBQ0EsSUFlQWdsQixFQUFBcnpCLEVBQUF5aEMsRUFmQUMsRUFBQSxTQUFBQyxHQUNBLElBQUFOLEdBQUFNLEtBQUFqekIsRUFBQSxPQUFBQSxFQUFBaXpCLEdBQ0EsT0FBQUEsR0FDQSxJQVZBLE9BV0EsSUFWQSxTQVVBLGtCQUE2QyxXQUFBNUgsRUFBQXYxQixLQUFBbTlCLElBQ3hDLGtCQUE0QixXQUFBNUgsRUFBQXYxQixLQUFBbTlCLEtBRWpDdjFCLEVBQUFuSCxFQUFBLFlBQ0EyOEIsRUFkQSxVQWNBTCxFQUNBTSxHQUFBLEVBQ0FuekIsRUFBQTJDLEVBQUFoUixVQUNBeWhDLEVBQUFwekIsRUFBQXZDLElBQUF1QyxFQW5CQSxlQW1CQTZ5QixHQUFBN3lCLEVBQUE2eUIsR0FDQVEsRUFBQUQsR0FBQUosRUFBQUgsR0FDQVMsRUFBQVQsRUFBQUssRUFBQUYsRUFBQSxXQUFBSyxPQUFBLy9CLEVBQ0FpZ0MsRUFBQSxTQUFBaDlCLEdBQUF5SixFQUFBckQsU0FBQXkyQixFQXdCQSxHQXJCQUcsSUFDQVIsRUFBQTU3QixFQUFBbzhCLEVBQUFyakMsS0FBQSxJQUFBeVMsT0FDQWxTLE9BQUFrQixXQUFBb2hDLEVBQUFwekIsT0FFQTR3QixFQUFBd0MsRUFBQXIxQixHQUFBLEdBRUE1RCxHQUFBLG1CQUFBaTVCLEVBQUF0MUIsSUFBQXhMLEVBQUE4Z0MsRUFBQXQxQixFQUFBbTFCLElBSUFNLEdBQUFFLEdBakNBLFdBaUNBQSxFQUFBOWlDLE9BQ0E2aUMsR0FBQSxFQUNBRSxFQUFBLFdBQWtDLE9BQUFELEVBQUFsakMsS0FBQTRGLFFBR2xDZ0UsSUFBQStJLElBQUE4dkIsSUFBQVEsR0FBQW56QixFQUFBdkMsSUFDQXhMLEVBQUErTixFQUFBdkMsRUFBQTQxQixHQUdBdDRCLEVBQUF4RSxHQUFBODhCLEVBQ0F0NEIsRUFBQTJDLEdBQUFrMUIsRUFDQUMsRUFNQSxHQUxBbE8sR0FDQXBvQixPQUFBMjJCLEVBQUFHLEVBQUFMLEVBOUNBLFVBK0NBdjJCLEtBQUFxMkIsRUFBQU8sRUFBQUwsRUFoREEsUUFpREFyMkIsUUFBQTIyQixHQUVBendCLEVBQUEsSUFBQXZSLEtBQUFxekIsRUFDQXJ6QixLQUFBME8sR0FBQTlOLEVBQUE4TixFQUFBMU8sRUFBQXF6QixFQUFBcnpCLFNBQ0tjLElBQUFhLEVBQUFiLEVBQUFPLEdBQUFnZ0MsR0FBQVEsR0FBQTU4QixFQUFBb3VCLEdBRUwsT0FBQUEsb0JDbkVBNzBCLEVBQUFELFFBQWlCRixFQUFRLHFCQ0F6QixJQUFBd0YsRUFBVXhGLEVBQVEsSUFDbEJrSCxFQUFnQmxILEVBQVEsSUFDeEIwTSxFQUFtQjFNLEVBQVEsSUFBUkEsRUFBMkIsR0FDOUNzSCxFQUFldEgsRUFBUSxJQUFSQSxDQUF1QixZQUV0Q0csRUFBQUQsUUFBQSxTQUFBNEIsRUFBQTh2QixHQUNBLElBR0Fqd0IsRUFIQXVELEVBQUFnQyxFQUFBcEYsR0FDQTFCLEVBQUEsRUFDQTZKLEtBRUEsSUFBQXRJLEtBQUF1RCxFQUFBdkQsR0FBQTJGLEdBQUE5QixFQUFBTixFQUFBdkQsSUFBQXNJLEVBQUFDLEtBQUF2SSxHQUVBLEtBQUFpd0IsRUFBQTdxQixPQUFBM0csR0FBQW9GLEVBQUFOLEVBQUF2RCxFQUFBaXdCLEVBQUF4eEIsU0FDQXNNLEVBQUF6QyxFQUFBdEksSUFBQXNJLEVBQUFDLEtBQUF2SSxJQUVBLE9BQUFzSSxrQkNmQSxJQUFBL0IsS0FBaUJBLFNBRWpCL0gsRUFBQUQsUUFBQSxTQUFBK0QsR0FDQSxPQUFBaUUsRUFBQTNILEtBQUEwRCxHQUFBa0UsTUFBQSxzQkNIQWpJLEVBQUErRSxFQUFBbkUsT0FBQW8wQix1Q0NDQSxJQUFBd0gsRUFBWTE4QixFQUFRLEtBQ3BCMjlCLEVBQWlCMzlCLEVBQVEsS0FBa0JnVSxPQUFBLHNCQUUzQzlULEVBQUErRSxFQUFBbkUsT0FBQTg4QixxQkFBQSxTQUFBMTRCLEdBQ0EsT0FBQXczQixFQUFBeDNCLEVBQUF5NEIscUJDTEEsSUFBQTEyQixFQUFVakgsRUFBUSxLQUNsQnVGLEVBQWlCdkYsRUFBUSxJQUN6QmtILEVBQWdCbEgsRUFBUSxJQUN4QitFLEVBQWtCL0UsRUFBUSxLQUMxQndGLEVBQVV4RixFQUFRLElBQ2xCOEUsRUFBcUI5RSxFQUFRLEtBQzdCbUgsRUFBQXJHLE9BQUFzRyx5QkFFQWxILEVBQUErRSxFQUFZakYsRUFBUSxJQUFnQm1ILEVBQUEsU0FBQWpDLEVBQUE1QixHQUdwQyxHQUZBNEIsRUFBQWdDLEVBQUFoQyxHQUNBNUIsRUFBQXlCLEVBQUF6QixHQUFBLEdBQ0F3QixFQUFBLElBQ0EsT0FBQXFDLEVBQUFqQyxFQUFBNUIsR0FDRyxNQUFBa0IsSUFDSCxHQUFBZ0IsRUFBQU4sRUFBQTVCLEdBQUEsT0FBQWlDLEdBQUEwQixFQUFBaEMsRUFBQTFFLEtBQUEyRSxFQUFBNUIsR0FBQTRCLEVBQUE1QixtQ0M2Q0FuRCxFQUFBRCxRQXpDQSwyQ0NoQkFBLEVBQUFzQixZQUFBLEVBQ0F0QixFQUFBNHdDLGdCQUFBLFNBQUFDLEdBQ0EsWUFBQUEsRUFBQTFPLE9BQUEsR0FBQTBPLEVBQUEsSUFBQUEsR0FHQTd3QyxFQUFBOHdDLGtCQUFBLFNBQUFELEdBQ0EsWUFBQUEsRUFBQTFPLE9BQUEsR0FBQTBPLEVBQUFFLE9BQUEsR0FBQUYsR0FMQSxJQVFBRyxFQUFBaHhDLEVBQUFneEMsWUFBQSxTQUFBSCxFQUFBSSxHQUNBLFdBQUE1UyxPQUFBLElBQUE0UyxFQUFBLHFCQUFBdHFDLEtBQUFrcUMsSUFHQTd3QyxFQUFBa3hDLGNBQUEsU0FBQUwsRUFBQUksR0FDQSxPQUFBRCxFQUFBSCxFQUFBSSxHQUFBSixFQUFBRSxPQUFBRSxFQUFBcHFDLFFBQUFncUMsR0FHQTd3QyxFQUFBbXhDLG1CQUFBLFNBQUFOLEdBQ0EsWUFBQUEsRUFBQTFPLE9BQUEwTyxFQUFBaHFDLE9BQUEsR0FBQWdxQyxFQUFBNW9DLE1BQUEsTUFBQTRvQyxHQUdBN3dDLEVBQUFveEMsVUFBQSxTQUFBUCxHQUNBLElBQUFRLEVBQUFSLEdBQUEsSUFDQVMsRUFBQSxHQUNBbnhCLEVBQUEsR0FFQW94QixFQUFBRixFQUFBeGdDLFFBQUEsTUFDQSxJQUFBMGdDLElBQ0FweEIsRUFBQWt4QixFQUFBTixPQUFBUSxHQUNBRixJQUFBTixPQUFBLEVBQUFRLElBR0EsSUFBQUMsRUFBQUgsRUFBQXhnQyxRQUFBLEtBTUEsT0FMQSxJQUFBMmdDLElBQ0FGLEVBQUFELEVBQUFOLE9BQUFTLEdBQ0FILElBQUFOLE9BQUEsRUFBQVMsS0FJQUgsV0FDQUMsT0FBQSxNQUFBQSxFQUFBLEdBQUFBLEVBQ0FueEIsS0FBQSxNQUFBQSxFQUFBLEdBQUFBLElBSUFuZ0IsRUFBQXl4QyxXQUFBLFNBQUFDLEdBQ0EsSUFBQUwsRUFBQUssRUFBQUwsU0FDQUMsRUFBQUksRUFBQUosT0FDQW54QixFQUFBdXhCLEVBQUF2eEIsS0FHQTB3QixFQUFBUSxHQUFBLElBTUEsT0FKQUMsR0FBQSxNQUFBQSxJQUFBVCxHQUFBLE1BQUFTLEVBQUFuUCxPQUFBLEdBQUFtUCxFQUFBLElBQUFBLEdBRUFueEIsR0FBQSxNQUFBQSxJQUFBMHdCLEdBQUEsTUFBQTF3QixFQUFBZ2lCLE9BQUEsR0FBQWhpQixFQUFBLElBQUFBLEdBRUEwd0IsaUNDekRBandDLE9BQUFDLGVBQUFiLEVBQUEsY0FDQW1CLE9BQUEsSUFHQW5CLEVBQUFzN0IsUUFBQSxTQUFBcVcsR0FDQSxPQUFBQSxHQUFBLGlCQUFBQSxFQUFBbnZDLEtBQUEsd0ZBR0F2QyxFQUFBRCxVQUFBLHVDQ1JBLFNBQUE0eEMsSUFFQSxHQUNBLG9CQUFBQyxnQ0FDQSxtQkFBQUEsK0JBQUFELFNBY0EsSUFFQUMsK0JBQUFELFlBQ0csTUFBQXRHLEdBR0h3RyxRQUFBeHBDLE1BQUFnakMsSUFPQXNHLEdBQ0EzeEMsRUFBQUQsUUFBbUJGLEVBQVEsbUNDNUIzQixJQUFBaXlDLEdBQ0FDLG1CQUFBLEVBQ0FDLGNBQUEsRUFDQUMsY0FBQSxFQUNBQyxhQUFBLEVBQ0FDLGlCQUFBLEVBQ0FDLDBCQUFBLEVBQ0FDLFFBQUEsRUFDQUMsV0FBQSxFQUNBL3ZDLE1BQUEsR0FHQWd3QyxHQUNBL3hDLE1BQUEsRUFDQW9HLFFBQUEsRUFDQS9FLFdBQUEsRUFDQTJ3QyxRQUFBLEVBQ0F2VCxRQUFBLEVBQ0FuM0IsV0FBQSxFQUNBMnFDLE9BQUEsR0FHQTd4QyxFQUFBRCxPQUFBQyxlQUNBNjhCLEVBQUE5OEIsT0FBQTg4QixvQkFDQTFJLEVBQUFwMEIsT0FBQW8wQixzQkFDQTl0QixFQUFBdEcsT0FBQXNHLHlCQUNBSSxFQUFBMUcsT0FBQTBHLGVBQ0FxckMsRUFBQXJyQyxLQUFBMUcsUUFrQ0FYLEVBQUFELFFBaENBLFNBQUE0eUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxvQkFBQUQsRUFBQSxDQUVBLEdBQUFILEVBQUEsQ0FDQSxJQUFBSyxFQUFBMXJDLEVBQUF3ckMsR0FDQUUsT0FBQUwsR0FDQUMsRUFBQUMsRUFBQUcsRUFBQUQsR0FJQSxJQUFBbm1DLEVBQUE4d0IsRUFBQW9WLEdBRUE5ZCxJQUNBcG9CLElBQUFrSCxPQUFBa2hCLEVBQUE4ZCxLQUdBLFFBQUE1eUMsRUFBQSxFQUF1QkEsRUFBQTBNLEVBQUEvRixTQUFpQjNHLEVBQUEsQ0FDeEMsSUFBQXVCLEVBQUFtTCxFQUFBMU0sR0FDQSxLQUFBNnhDLEVBQUF0d0MsSUFBQSt3QyxFQUFBL3dDLElBQUFzeEMsS0FBQXR4QyxJQUFBLENBQ0EsSUFBQW82QixFQUFBMzBCLEVBQUE0ckMsRUFBQXJ4QyxHQUNBLElBQ0FaLEVBQUFneUMsRUFBQXB4QyxFQUFBbzZCLEdBQ2lCLE1BQUF2M0IsTUFJakIsT0FBQXV1QyxFQUdBLE9BQUFBLGtDQ2hFQSxTQUFBM3dDLEdBQ0EsSUFBQSt3QyxFQUFBLGlCQUFBL3dDLFFBQUF0QixpQkFBQXNCLEVBRWU0b0MsRUFBQSxxRENIQSxTQUFBb0ksRUFBQS9zQixHQUNmLElBQUFwYyxFQUNBOUksRUFBQWtsQixFQUFBbGxCLE9BYUEsTUFYQSxtQkFBQUEsRUFDQUEsRUFBQWt5QyxXQUNBcHBDLEVBQUE5SSxFQUFBa3lDLFlBRUFwcEMsRUFBQTlJLEVBQUEsY0FDQUEsRUFBQWt5QyxXQUFBcHBDLEdBR0FBLEVBQUEsZUFHQUEsRUFmQWpLLEVBQUFVLEVBQUFzcUMsRUFBQSxzQkFBQW9JLGtDQ0VBbHpDLEVBQUFzQixZQUFBLEVBRUEsSUFBQXF2QyxFQUFBLG1CQUFBMXZDLFFBQUEsaUJBQUFBLE9BQUF3TyxTQUFBLFNBQUFtUixHQUFvRyxjQUFBQSxHQUFxQixTQUFBQSxHQUFtQixPQUFBQSxHQUFBLG1CQUFBM2YsUUFBQTJmLEVBQUFyWixjQUFBdEcsUUFBQTJmLElBQUEzZixPQUFBYSxVQUFBLGdCQUFBOGUsR0FFNUl3eUIsRUFBQXh5QyxPQUFBb3FDLFFBQUEsU0FBQXpuQyxHQUFtRCxRQUFBckQsRUFBQSxFQUFnQkEsRUFBQTZILFVBQUFsQixPQUFzQjNHLElBQUEsQ0FBTyxJQUFBdUMsRUFBQXNGLFVBQUE3SCxHQUEyQixRQUFBdUIsS0FBQWdCLEVBQTBCN0IsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBb0MsRUFBQWhCLEtBQXlEOEIsRUFBQTlCLEdBQUFnQixFQUFBaEIsSUFBaUMsT0FBQThCLEdBSS9POHZDLEVBQUEzWCxFQUZlNTdCLEVBQVEsTUFNdkJ3ekMsRUFBQTVYLEVBRmlCNTdCLEVBQVEsS0FJekJ5ekMsRUFBcUJ6ekMsRUFBUSxLQUU3QjB6QyxFQUFpQjF6QyxFQUFRLEtBSXpCMnpDLEVBQUEvWCxFQUYrQjU3QixFQUFRLE1BSXZDNHpDLEVBQWdCNXpDLEVBQVEsS0FFeEIsU0FBQTQ3QixFQUFBOWEsR0FBc0MsT0FBQUEsS0FBQXRmLFdBQUFzZixHQUF1QzBhLFFBQUExYSxHQUU3RSxJQUdBK3lCLEVBQUEsV0FDQSxJQUNBLE9BQUExdkMsT0FBQTJ2QyxRQUFBQyxVQUNHLE1BQUF2dkMsR0FHSCxXQTZRQXRFLEVBQUFzN0IsUUFyUUEsV0FDQSxJQUFBTSxFQUFBN3pCLFVBQUFsQixPQUFBLFFBQUFwRCxJQUFBc0UsVUFBQSxHQUFBQSxVQUFBLE9BRUEsRUFBQXVyQyxFQUFBaFksU0FBQW9ZLEVBQUFJLFVBQUEsK0JBRUEsSUFBQUMsRUFBQTl2QyxPQUFBMnZDLFFBQ0FJLEdBQUEsRUFBQU4sRUFBQU8sbUJBQ0FDLElBQUEsRUFBQVIsRUFBQVMsZ0NBRUFDLEVBQUF4WSxFQUFBeVksYUFDQUEsT0FBQTV3QyxJQUFBMndDLEtBQ0FFLEVBQUExWSxFQUFBMlksb0JBQ0FBLE9BQUE5d0MsSUFBQTZ3QyxFQUFBWixFQUFBYyxnQkFBQUYsRUFDQUcsRUFBQTdZLEVBQUE4WSxVQUNBQSxPQUFBanhDLElBQUFneEMsRUFBQSxFQUFBQSxFQUVBRSxFQUFBL1ksRUFBQStZLFVBQUEsRUFBQW5CLEVBQUFyQyxxQkFBQSxFQUFBcUMsRUFBQTVDLGlCQUFBaFYsRUFBQStZLFdBQUEsR0FFQUMsRUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFELE1BQ0FwekMsRUFBQXF6QyxFQUFBcnpDLElBQ0FveUMsRUFBQWlCLEVBQUFqQixNQUVBa0IsRUFBQTl3QyxPQUFBeXRDLFNBTUFiLEVBTEFrRSxFQUFBMUQsU0FDQTBELEVBQUF6RCxPQUNBeUQsRUFBQTUwQixLQVNBLE9BSkEsRUFBQWt6QixFQUFBL1gsVUFBQXFaLElBQUEsRUFBQW5CLEVBQUF4QyxhQUFBSCxFQUFBOEQsR0FBQSxrSEFBQTlELEVBQUEsb0JBQUE4RCxFQUFBLE1BRUFBLElBQUE5RCxHQUFBLEVBQUEyQyxFQUFBdEMsZUFBQUwsRUFBQThELEtBRUEsRUFBQXBCLEVBQUF5QixnQkFBQW5FLEVBQUFnRCxFQUFBcHlDLElBR0F3ekMsRUFBQSxXQUNBLE9BQUEvd0MsS0FBQXE0QixTQUFBdjBCLFNBQUEsSUFBQStvQyxPQUFBLEVBQUEyRCxJQUdBUSxHQUFBLEVBQUF6QixFQUFBblksV0FFQTZaLEVBQUEsU0FBQUMsR0FDQWhDLEVBQUFRLEVBQUF3QixHQUVBeEIsRUFBQS9zQyxPQUFBa3RDLEVBQUFsdEMsT0FFQXF1QyxFQUFBRyxnQkFBQXpCLEVBQUFsQyxTQUFBa0MsRUFBQWpDLFNBR0EyRCxFQUFBLFNBQUEvUCxJQUVBLEVBQUFtTyxFQUFBNkIsMkJBQUFoUSxJQUVBaVEsRUFBQVosRUFBQXJQLEVBQUFzTyxTQUdBNEIsRUFBQSxXQUNBRCxFQUFBWixFQUFBakIsT0FHQStCLEdBQUEsRUFFQUYsRUFBQSxTQUFBOUQsR0FDQWdFLEdBQ0FBLEdBQUEsRUFDQVAsS0FJQUQsRUFBQVMsb0JBQUFqRSxFQUZBLE1BRUE2QyxFQUFBLFNBQUFxQixHQUNBQSxFQUNBVCxHQUFvQnhELE9BSnBCLE1BSW9CRCxhQUVwQm1FLEVBQUFuRSxNQU1BbUUsRUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFuQyxFQUFBbEMsU0FNQW5uQyxFQUFBeXJDLEVBQUFubEMsUUFBQWtsQyxFQUFBdDBDLE1BRUEsSUFBQThJLE1BQUEsR0FFQSxJQUFBaTFCLEVBQUF3VyxFQUFBbmxDLFFBQUFpbEMsRUFBQXIwQyxNQUVBLElBQUErOUIsTUFBQSxHQUVBLElBQUF5VyxFQUFBMXJDLEVBQUFpMUIsRUFFQXlXLElBQ0FQLEdBQUEsRUFDQVEsRUFBQUQsS0FJQUUsRUFBQXZCLEVBQUFqQixLQUNBcUMsR0FBQUcsRUFBQTEwQyxLQUlBMjBDLEVBQUEsU0FBQTFFLEdBQ0EsT0FBQWlELEdBQUEsRUFBQW5CLEVBQUEvQixZQUFBQyxJQXlFQXdFLEVBQUEsU0FBQXYwQyxHQUNBb3lDLEVBQUFtQyxHQUFBdjBDLElBV0EwMEMsRUFBQSxFQUVBQyxFQUFBLFNBQUFMLEdBR0EsS0FGQUksR0FBQUosS0FHQSxFQUFBdkMsRUFBQTVOLGtCQUFBN2hDLE9BM05BLFdBMk5BcXhDLEdBRUFwQixJQUFBLEVBQUFSLEVBQUE1TixrQkFBQTdoQyxPQTVOQSxhQTROQXd4QyxJQUNLLElBQUFZLEtBQ0wsRUFBQTNDLEVBQUE2QyxxQkFBQXR5QyxPQS9OQSxXQStOQXF4QyxHQUVBcEIsSUFBQSxFQUFBUixFQUFBNkMscUJBQUF0eUMsT0FoT0EsYUFnT0F3eEMsS0FJQWUsR0FBQSxFQWdDQTVDLEdBQ0Evc0MsT0FBQWt0QyxFQUFBbHRDLE9BQ0E4cUMsT0FBQSxNQUNBRCxTQUFBeUUsRUFDQUMsYUFDQXBzQyxLQXZJQSxTQUFBNm1DLEVBQUFnRCxJQUNBLEVBQUFSLEVBQUEvWCxXQUFBLHFCQUFBdVYsRUFBQSxZQUFBRixFQUFBRSxVQUFBcHRDLElBQUFvdEMsRUFBQWdELFlBQUFwd0MsSUFBQW93QyxHQUFBLGlKQUVBLElBQ0FuQyxHQUFBLEVBQUE2QixFQUFBeUIsZ0JBQUFuRSxFQUFBZ0QsRUFBQW9CLElBQUFyQixFQUFBbEMsVUFFQXdELEVBQUFTLG9CQUFBakUsRUFIQSxPQUdBNkMsRUFBQSxTQUFBcUIsR0FDQSxHQUFBQSxFQUFBLENBRUEsSUFBQWEsRUFBQUwsRUFBQTFFLEdBQ0Fqd0MsRUFBQWl3QyxFQUFBandDLElBQ0FveUMsRUFBQW5DLEVBQUFtQyxNQUdBLEdBQUFHLEVBR0EsR0FGQUQsRUFBQTJDLFdBQWlDajFDLE1BQUFveUMsU0FBeUIsS0FBQTRDLEdBRTFEcEMsRUFDQXB3QyxPQUFBeXRDLFNBQUErRSxXQUNTLENBQ1QsSUFBQUUsRUFBQVgsRUFBQW5sQyxRQUFBK2lDLEVBQUFsQyxTQUFBandDLEtBQ0FtMUMsRUFBQVosRUFBQS90QyxNQUFBLE9BQUEwdUMsRUFBQSxFQUFBQSxFQUFBLEdBRUFDLEVBQUE1c0MsS0FBQTBuQyxFQUFBandDLEtBQ0F1MEMsRUFBQVksRUFFQXpCLEdBQW9CeEQsT0F2QnBCLE9BdUJvQkQsa0JBR3BCLEVBQUEyQixFQUFBL1gsY0FBQTczQixJQUFBb3dDLEVBQUEsbUZBRUE1dkMsT0FBQXl0QyxTQUFBK0UsV0F5R0Fod0MsUUFwR0EsU0FBQW9xQyxFQUFBZ0QsSUFDQSxFQUFBUixFQUFBL1gsV0FBQSxxQkFBQXVWLEVBQUEsWUFBQUYsRUFBQUUsVUFBQXB0QyxJQUFBb3RDLEVBQUFnRCxZQUFBcHdDLElBQUFvd0MsR0FBQSxvSkFFQSxJQUNBbkMsR0FBQSxFQUFBNkIsRUFBQXlCLGdCQUFBbkUsRUFBQWdELEVBQUFvQixJQUFBckIsRUFBQWxDLFVBRUF3RCxFQUFBUyxvQkFBQWpFLEVBSEEsVUFHQTZDLEVBQUEsU0FBQXFCLEdBQ0EsR0FBQUEsRUFBQSxDQUVBLElBQUFhLEVBQUFMLEVBQUExRSxHQUNBandDLEVBQUFpd0MsRUFBQWp3QyxJQUNBb3lDLEVBQUFuQyxFQUFBbUMsTUFHQSxHQUFBRyxFQUdBLEdBRkFELEVBQUE4QyxjQUFvQ3AxQyxNQUFBb3lDLFNBQXlCLEtBQUE0QyxHQUU3RHBDLEVBQ0Fwd0MsT0FBQXl0QyxTQUFBanJDLFFBQUFnd0MsT0FDUyxDQUNULElBQUFFLEVBQUFYLEVBQUFubEMsUUFBQStpQyxFQUFBbEMsU0FBQWp3QyxNQUVBLElBQUFrMUMsSUFBQVgsRUFBQVcsR0FBQWpGLEVBQUFqd0MsS0FFQTB6QyxHQUFvQnhELE9BckJwQixVQXFCb0JELGtCQUdwQixFQUFBMkIsRUFBQS9YLGNBQUE3M0IsSUFBQW93QyxFQUFBLHNGQUVBNXZDLE9BQUF5dEMsU0FBQWpyQyxRQUFBZ3dDLE9Bd0VBUCxLQUNBWSxPQWhFQSxXQUNBLE9BQUFaLEdBQUEsSUFnRUFhLFVBN0RBLFdBQ0EsT0FBQWIsRUFBQSxJQTZEQWMsTUF4Q0EsV0FDQSxJQUFBQyxFQUFBbHZDLFVBQUFsQixPQUFBLFFBQUFwRCxJQUFBc0UsVUFBQSxJQUFBQSxVQUFBLEdBRUFtdkMsRUFBQWhDLEVBQUFpQyxVQUFBRixHQU9BLE9BTEFULElBQ0FGLEVBQUEsR0FDQUUsR0FBQSxHQUdBLFdBTUEsT0FMQUEsSUFDQUEsR0FBQSxFQUNBRixHQUFBLElBR0FZLE1BeUJBRSxPQXJCQSxTQUFBOVIsR0FDQSxJQUFBK1IsRUFBQW5DLEVBQUFvQyxlQUFBaFMsR0FHQSxPQUZBZ1IsRUFBQSxHQUVBLFdBQ0FBLEdBQUEsR0FDQWUsT0FrQkEsT0FBQXpELGlDQ3pTQSxTQUFBMkQsRUFBQTd5QyxFQUFBbUQsR0FDQSxPQUFBbkQsSUFBQW1ELEVBbUJBLFNBQUEydkMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBM3ZDLFVBQUFsQixPQUFBLFFBQUFwRCxJQUFBc0UsVUFBQSxHQUFBQSxVQUFBLEdBQUF3dkMsRUFFQUksRUFBQSxLQUNBQyxFQUFBLEtBRUEsa0JBT0EsT0E3QkEsU0FBQUYsRUFBQXp4QixFQUFBblcsR0FDQSxVQUFBbVcsR0FBQSxPQUFBblcsR0FBQW1XLEVBQUFwZixTQUFBaUosRUFBQWpKLE9BQ0EsU0FLQSxJQURBLElBQUFBLEVBQUFvZixFQUFBcGYsT0FDQTNHLEVBQUEsRUFBaUJBLEVBQUEyRyxFQUFZM0csSUFDN0IsSUFBQXczQyxFQUFBenhCLEVBQUEvbEIsR0FBQTRQLEVBQUE1UCxJQUNBLFNBSUEsU0FVQTIzQyxDQUFBSCxFQUFBQyxFQUFBNXZDLGFBRUE2dkMsRUFBQUgsRUFBQTN2QyxNQUFBLEtBQUFDLFlBR0E0dkMsRUFBQTV2QyxVQUNBNnZDLEdBbUJBLFNBQUFFLEVBQUFDLEdBQ0EsUUFBQUMsRUFBQWp3QyxVQUFBbEIsT0FBQW94QyxFQUFBcnNDLE1BQUFvc0MsRUFBQSxFQUFBQSxFQUFBLEtBQUFFLEVBQUEsRUFBOEZBLEVBQUFGLEVBQWFFLElBQzNHRCxFQUFBQyxFQUFBLEdBQUFud0MsVUFBQW13QyxHQUdBLGtCQUNBLFFBQUFDLEVBQUFwd0MsVUFBQWxCLE9BQUF1eEMsRUFBQXhzQyxNQUFBdXNDLEdBQUFFLEVBQUEsRUFBdUVBLEVBQUFGLEVBQWVFLElBQ3RGRCxFQUFBQyxHQUFBdHdDLFVBQUFzd0MsR0FHQSxJQUFBQyxFQUFBLEVBQ0FDLEVBQUFILEVBQUFwd0IsTUFDQXd3QixFQTNCQSxTQUFBSixHQUNBLElBQUFJLEVBQUE1c0MsTUFBQXFSLFFBQUFtN0IsRUFBQSxJQUFBQSxFQUFBLEdBQUFBLEVBRUEsSUFBQUksRUFBQWxvQyxNQUFBLFNBQUFtb0MsR0FDQSx5QkFBQUEsSUFDRyxDQUNILElBQUFDLEVBQUFGLEVBQUF2bkMsSUFBQSxTQUFBd25DLEdBQ0EsY0FBQUEsSUFDSzF5QyxLQUFBLE1BQ0wsVUFBQXdDLE1BQUEsd0dBQUFtd0MsRUFBQSxLQUdBLE9BQUFGLEVBZUFHLENBQUFQLEdBRUFRLEVBQUFiLEVBQUFqd0MsV0FBQXJFLEdBQUEsV0FHQSxPQUZBNjBDLElBRUFDLEVBQUF6d0MsTUFBQSxLQUFBQyxhQUNLK0wsT0FBQW1rQyxJQUdMWSxFQUFBckIsRUFBQSxXQUlBLElBSEEsSUFBQXNCLEtBQ0FqeUMsRUFBQTJ4QyxFQUFBM3hDLE9BRUEzRyxFQUFBLEVBQXFCQSxFQUFBMkcsRUFBWTNHLElBRWpDNDRDLEVBQUE5dUMsS0FBQXd1QyxFQUFBdDRDLEdBQUE0SCxNQUFBLEtBQUFDLFlBSUEsT0FBQTZ3QyxFQUFBOXdDLE1BQUEsS0FBQWd4QyxLQVVBLE9BUEFELEVBQUFOLGFBQ0FNLEVBQUFQLGVBQUEsV0FDQSxPQUFBQSxHQUVBTyxFQUFBRSxvQkFBQSxXQUNBLE9BQUFULEVBQUEsR0FFQU8sR0FqR0E3NEMsRUFBQXNCLFlBQUEsRUFDQXRCLEVBQUF3M0MsaUJBQ0F4M0MsRUFBQTgzQyx3QkFDQTkzQyxFQUFBZzVDLHlCQW9HQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFueEMsVUFBQWxCLE9BQUEsUUFBQXBELElBQUFzRSxVQUFBLEdBQUFBLFVBQUEsR0FBQW94QyxFQUVBLG9CQUFBRixFQUNBLFVBQUExd0MsTUFBQSxnSUFBQTB3QyxHQUVBLElBQUFHLEVBQUF4NEMsT0FBQWdNLEtBQUFxc0MsR0FDQSxPQUFBQyxFQUFBRSxFQUFBbm9DLElBQUEsU0FBQXhQLEdBQ0EsT0FBQXczQyxFQUFBeDNDLEtBQ0csV0FDSCxRQUFBNDNDLEVBQUF0eEMsVUFBQWxCLE9BQUE2RixFQUFBZCxNQUFBeXRDLEdBQUFDLEVBQUEsRUFBd0VBLEVBQUFELEVBQWVDLElBQ3ZGNXNDLEVBQUE0c0MsR0FBQXZ4QyxVQUFBdXhDLEdBR0EsT0FBQTVzQyxFQUFBUSxPQUFBLFNBQUFxc0MsRUFBQXA0QyxFQUFBMkksR0FFQSxPQURBeXZDLEVBQUFILEVBQUF0dkMsSUFBQTNJLEVBQ0FvNEMsVUFsQkEsSUFBQUosRUFBQW41QyxFQUFBbTVDLGVBQUFyQixFQUFBTixvQkN2R0EsSUFBQWdDLEVBQWMxNUMsRUFBUSxLQUt0QkcsRUFBQUQsUUFBQXk1QyxFQUNBeDVDLEVBQUFELFFBQUEwNUMsUUFDQXo1QyxFQUFBRCxRQUFBMjVDLFFBc0dBLFNBQUFwWCxFQUFBcVgsR0FDQSxPQUFBQyxFQUFBSCxFQUFBblgsRUFBQXFYLEtBdEdBMzVDLEVBQUFELFFBQUE2NUMsbUJBQ0E1NUMsRUFBQUQsUUFBQTg1QyxpQkFPQSxJQUFBQyxFQUFBLElBQUExYixRQUdBLFVBT0EsMEdBQ0F0NEIsS0FBQSxVQVNBLFNBQUEyekMsRUFBQW5YLEVBQUFxWCxHQVFBLElBUEEsSUFLQS92QyxFQUxBbXdDLEtBQ0F2NEMsRUFBQSxFQUNBcUksRUFBQSxFQUNBK21DLEVBQUEsR0FDQW9KLEVBQUFMLEtBQUFNLFdBQUEsSUFHQSxPQUFBcndDLEVBQUFrd0MsRUFBQTExQyxLQUFBaytCLEtBQUEsQ0FDQSxJQUFBamlDLEVBQUF1SixFQUFBLEdBQ0Fzd0MsRUFBQXR3QyxFQUFBLEdBQ0FpRixFQUFBakYsRUFBQUMsTUFLQSxHQUpBK21DLEdBQUF0TyxFQUFBdDZCLE1BQUE2QixFQUFBZ0YsR0FDQWhGLEVBQUFnRixFQUFBeE8sRUFBQXVHLE9BR0FzekMsRUFDQXRKLEdBQUFzSixFQUFBLE9BREEsQ0FLQSxJQUFBcnFDLEVBQUF5eUIsRUFBQXo0QixHQUNBbW5DLEVBQUFwbkMsRUFBQSxHQUNBcEosRUFBQW9KLEVBQUEsR0FDQXV3QyxFQUFBdndDLEVBQUEsR0FDQXd3QyxFQUFBeHdDLEVBQUEsR0FDQXl3QyxFQUFBendDLEVBQUEsR0FDQTB3QyxFQUFBMXdDLEVBQUEsR0FHQWduQyxJQUNBbUosRUFBQWh3QyxLQUFBNm1DLEdBQ0FBLEVBQUEsSUFHQSxJQUFBMkosRUFBQSxNQUFBdkosR0FBQSxNQUFBbmhDLE9BQUFtaEMsRUFDQXRCLEVBQUEsTUFBQTJLLEdBQUEsTUFBQUEsRUFDQUcsRUFBQSxNQUFBSCxHQUFBLE1BQUFBLEVBQ0FKLEVBQUFyd0MsRUFBQSxJQUFBb3dDLEVBQ0FTLEVBQUFOLEdBQUFDLEVBRUFMLEVBQUFod0MsTUFDQXZKLFFBQUFnQixJQUNBd3ZDLFVBQUEsR0FDQWlKLFlBQ0FPLFdBQ0E5SyxTQUNBNkssVUFDQUQsYUFDQUcsVUFBQUMsRUFBQUQsR0FBQUgsRUFBQSxVQUFBSyxFQUFBVixHQUFBLFNBY0EsT0FUQXB3QyxFQUFBeTRCLEVBQUExN0IsU0FDQWdxQyxHQUFBdE8sRUFBQXdPLE9BQUFqbkMsSUFJQSttQyxHQUNBbUosRUFBQWh3QyxLQUFBNm1DLEdBR0FtSixFQW9CQSxTQUFBYSxFQUFBdFksR0FDQSxPQUFBdVksVUFBQXZZLEdBQUE5N0IsUUFBQSxtQkFBQWxHLEdBQ0EsVUFBQUEsRUFBQWtoQixXQUFBLEdBQUF6WixTQUFBLElBQUEreUMsZ0JBVUEsU0FBQUMsRUFBQXpZLEdBQ0EsT0FBQXVZLFVBQUF2WSxHQUFBOTdCLFFBQUEsaUJBQUFsRyxHQUNBLFVBQUFBLEVBQUFraEIsV0FBQSxHQUFBelosU0FBQSxJQUFBK3lDLGdCQU9BLFNBQUFsQixFQUFBRyxHQUtBLElBSEEsSUFBQWlCLEVBQUEsSUFBQXJ2QyxNQUFBb3VDLEVBQUFuekMsUUFHQTNHLEVBQUEsRUFBaUJBLEVBQUE4NUMsRUFBQW56QyxPQUFtQjNHLElBQ3BDLGlCQUFBODVDLEVBQUE5NUMsS0FDQSs2QyxFQUFBLzZDLEdBQUEsSUFBQW0rQixPQUFBLE9BQUEyYixFQUFBOTVDLEdBQUF3NkMsUUFBQSxPQUlBLGdCQUFBOTVCLEVBQUFzNkIsR0FNQSxJQUxBLElBQUFySyxFQUFBLEdBQ0F6OUIsRUFBQXdOLE1BRUF1NkIsR0FEQUQsT0FDQUUsT0FBQVAsRUFBQVEsbUJBRUFuN0MsRUFBQSxFQUFtQkEsRUFBQTg1QyxFQUFBbnpDLE9BQW1CM0csSUFBQSxDQUN0QyxJQUFBbzdDLEVBQUF0QixFQUFBOTVDLEdBRUEsb0JBQUFvN0MsRUFBQSxDQU1BLElBQ0FDLEVBREFwNkMsRUFBQWlTLEVBQUFrb0MsRUFBQTc2QyxNQUdBLFNBQUFVLEVBQUEsQ0FDQSxHQUFBbTZDLEVBQUFiLFNBQUEsQ0FFQWEsRUFBQWQsVUFDQTNKLEdBQUF5SyxFQUFBckssUUFHQSxTQUVBLFVBQUFqdEMsVUFBQSxhQUFBczNDLEVBQUE3NkMsS0FBQSxtQkFJQSxHQUFBKzRDLEVBQUFyNEMsR0FBQSxDQUNBLElBQUFtNkMsRUFBQTNMLE9BQ0EsVUFBQTNyQyxVQUFBLGFBQUFzM0MsRUFBQTc2QyxLQUFBLGtDQUFBNjVCLEtBQUFDLFVBQUFwNUIsR0FBQSxLQUdBLE9BQUFBLEVBQUEwRixPQUFBLENBQ0EsR0FBQXkwQyxFQUFBYixTQUNBLFNBRUEsVUFBQXoyQyxVQUFBLGFBQUFzM0MsRUFBQTc2QyxLQUFBLHFCQUlBLFFBQUFpcEMsRUFBQSxFQUF1QkEsRUFBQXZvQyxFQUFBMEYsT0FBa0I2aUMsSUFBQSxDQUd6QyxHQUZBNlIsRUFBQUosRUFBQWg2QyxFQUFBdW9DLEtBRUF1UixFQUFBLzZDLEdBQUF5RyxLQUFBNDBDLEdBQ0EsVUFBQXYzQyxVQUFBLGlCQUFBczNDLEVBQUE3NkMsS0FBQSxlQUFBNjZDLEVBQUFaLFFBQUEsb0JBQUFwZ0IsS0FBQUMsVUFBQWdoQixHQUFBLEtBR0ExSyxJQUFBLElBQUFuSCxFQUFBNFIsRUFBQXJLLE9BQUFxSyxFQUFBcEIsV0FBQXFCLE9BcEJBLENBNEJBLEdBRkFBLEVBQUFELEVBQUFmLFNBQUFTLEVBQUE3NUMsR0FBQWc2QyxFQUFBaDZDLElBRUE4NUMsRUFBQS82QyxHQUFBeUcsS0FBQTQwQyxHQUNBLFVBQUF2M0MsVUFBQSxhQUFBczNDLEVBQUE3NkMsS0FBQSxlQUFBNjZDLEVBQUFaLFFBQUEsb0JBQUFhLEVBQUEsS0FHQTFLLEdBQUF5SyxFQUFBckssT0FBQXNLLFFBckRBMUssR0FBQXlLLEVBd0RBLE9BQUF6SyxHQVVBLFNBQUErSixFQUFBclksR0FDQSxPQUFBQSxFQUFBOTdCLFFBQUEsNkJBQW1DLFFBU25DLFNBQUFrMEMsRUFBQU4sR0FDQSxPQUFBQSxFQUFBNXpDLFFBQUEsd0JBVUEsU0FBQSswQyxFQUFBNVgsRUFBQWgzQixHQUVBLE9BREFnM0IsRUFBQWgzQixPQUNBZzNCLEVBU0EsU0FBQWdLLEVBQUFnTSxHQUNBLE9BQUFBLEVBQUE2QixVQUFBLE9Bd0VBLFNBQUEzQixFQUFBRSxFQUFBcHRDLEVBQUFndEMsR0FDQUosRUFBQTVzQyxLQUNBZ3RDLEVBQWlDaHRDLEdBQUFndEMsRUFDakNodEMsTUFVQSxJQUxBLElBQUE4dUMsR0FGQTlCLFNBRUE4QixPQUNBbHFDLEdBQUEsSUFBQW9vQyxFQUFBcG9DLElBQ0FtcUMsRUFBQSxHQUdBejdDLEVBQUEsRUFBaUJBLEVBQUE4NUMsRUFBQW56QyxPQUFtQjNHLElBQUEsQ0FDcEMsSUFBQW83QyxFQUFBdEIsRUFBQTk1QyxHQUVBLG9CQUFBbzdDLEVBQ0FLLEdBQUFmLEVBQUFVLE9BQ0ssQ0FDTCxJQUFBckssRUFBQTJKLEVBQUFVLEVBQUFySyxRQUNBbUosRUFBQSxNQUFBa0IsRUFBQVosUUFBQSxJQUVBOXRDLEVBQUE1QyxLQUFBc3hDLEdBRUFBLEVBQUEzTCxTQUNBeUssR0FBQSxNQUFBbkosRUFBQW1KLEVBQUEsTUFhQXVCLEdBTkF2QixFQUpBa0IsRUFBQWIsU0FDQWEsRUFBQWQsUUFHQXZKLEVBQUEsSUFBQW1KLEVBQUEsS0FGQSxNQUFBbkosRUFBQSxJQUFBbUosRUFBQSxNQUtBbkosRUFBQSxJQUFBbUosRUFBQSxLQU9BLElBQUFGLEVBQUFVLEVBQUFoQixFQUFBTSxXQUFBLEtBQ0EwQixFQUFBRCxFQUFBMXpDLE9BQUFpeUMsRUFBQXJ6QyxVQUFBcXpDLEVBa0JBLE9BWkF3QixJQUNBQyxHQUFBQyxFQUFBRCxFQUFBMXpDLE1BQUEsR0FBQWl5QyxFQUFBcnpDLFFBQUE4MEMsR0FBQSxNQUFBekIsRUFBQSxXQUlBeUIsR0FEQW5xQyxFQUNBLElBSUFrcUMsR0FBQUUsRUFBQSxTQUFBMUIsRUFBQSxNQUdBc0IsRUFBQSxJQUFBbmQsT0FBQSxJQUFBc2QsRUFBQS9OLEVBQUFnTSxJQUFBaHRDLEdBZUEsU0FBQTZzQyxFQUFBNUksRUFBQWprQyxFQUFBZ3RDLEdBUUEsT0FQQUosRUFBQTVzQyxLQUNBZ3RDLEVBQWlDaHRDLEdBQUFndEMsRUFDakNodEMsTUFHQWd0QyxRQUVBL0ksYUFBQXhTLE9BbEpBLFNBQUF3UyxFQUFBamtDLEdBRUEsSUFBQWlxQixFQUFBZ2EsRUFBQXB1QyxPQUFBbzVDLE1BQUEsYUFFQSxHQUFBaGxCLEVBQ0EsUUFBQTMyQixFQUFBLEVBQW1CQSxFQUFBMjJCLEVBQUFod0IsT0FBbUIzRyxJQUN0QzBNLEVBQUE1QyxNQUNBdkosS0FBQVAsRUFDQSt3QyxPQUFBLEtBQ0FpSixVQUFBLEtBQ0FPLFVBQUEsRUFDQTlLLFFBQUEsRUFDQTZLLFNBQUEsRUFDQUQsVUFBQSxFQUNBRyxRQUFBLE9BS0EsT0FBQWMsRUFBQTNLLEVBQUFqa0MsR0FnSUFrdkMsQ0FBQWpMLEVBQWtELEdBR2xEMkksRUFBQTNJLEdBeEhBLFNBQUFBLEVBQUFqa0MsRUFBQWd0QyxHQUdBLElBRkEsSUFBQW1DLEtBRUE3N0MsRUFBQSxFQUFpQkEsRUFBQTJ3QyxFQUFBaHFDLE9BQWlCM0csSUFDbEM2N0MsRUFBQS94QyxLQUFBeXZDLEVBQUE1SSxFQUFBM3dDLEdBQUEwTSxFQUFBZ3RDLEdBQUFuM0MsUUFLQSxPQUFBKzRDLEVBRkEsSUFBQW5kLE9BQUEsTUFBQTBkLEVBQUFoMkMsS0FBQSxTQUFBNm5DLEVBQUFnTSxJQUVBaHRDLEdBZ0hBb3ZDLENBQTJDLEVBQThCLEVBQUFwQyxHQXJHekUsU0FBQS9JLEVBQUFqa0MsRUFBQWd0QyxHQUNBLE9BQUFFLEVBQUFKLEVBQUE3SSxFQUFBK0ksR0FBQWh0QyxFQUFBZ3RDLEdBdUdBcUMsQ0FBMEMsRUFBOEIsRUFBQXJDLGtDQ3RheEVoNUMsT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQWs4QyxxQkFBQXo0QyxFQUVBLElBRUEwNEMsRUFFQSxTQUFBdjdCLEdBQXNDLE9BQUFBLEtBQUF0ZixXQUFBc2YsR0FBdUMwYSxRQUFBMWEsR0FGN0U4YSxDQUZ3QjU3QixFQUFRLE1BTWhDRSxFQUFBazhDLGdCQUFBQyxFQUFBN2dCOzs7Ozs7OztHQ0phLElBQUFoN0IsRUFBTVIsRUFBUSxLQUFlNkIsRUFBQSxtQkFBQVYsZUFBQW03QyxJQUFBcDZDLEVBQUFMLEVBQUFWLE9BQUFtN0MsSUFBQSx1QkFBQUMsRUFBQTE2QyxFQUFBVixPQUFBbTdDLElBQUEsc0JBQUFwN0MsRUFBQVcsRUFBQVYsT0FBQW03QyxJQUFBLHdCQUFBaDdDLEVBQUFPLEVBQUFWLE9BQUFtN0MsSUFBQSwyQkFBQUUsRUFBQTM2QyxFQUFBVixPQUFBbTdDLElBQUEsd0JBQUEvb0MsRUFBQTFSLEVBQUFWLE9BQUFtN0MsSUFBQSx3QkFBQS9tQyxFQUFBMVQsRUFBQVYsT0FBQW03QyxJQUFBLHVCQUFBajFCLEVBQUF4bEIsRUFBQVYsT0FBQW03QyxJQUFBLDBCQUFBRyxFQUFBNTZDLEVBQUFWLE9BQUFtN0MsSUFBQSwyQkFBOFl6NkMsR0FBQVYsT0FBQW03QyxJQUFBLHFCQUN4YixJQUFBSSxFQUFBLG1CQUFBdjdDLGVBQUF3TyxTQUNBLFNBQUFuTSxFQUFBb0IsR0FBYyxRQUFBbUQsRUFBQUUsVUFBQWxCLE9BQUEsRUFBQXJHLEVBQUEseURBQUFrRSxFQUFBbkUsRUFBQSxFQUE4RkEsRUFBQXNILEVBQUl0SCxJQUFBQyxHQUFBLFdBQUE2NkMsbUJBQUF0ekMsVUFBQXhILEVBQUEsS0FEOUQsU0FBQW1FLEVBQUFtRCxFQUFBckgsRUFBQUQsRUFBQStELEVBQUE2NkIsRUFBQS9lLEVBQUFyYixHQUE0QixJQUFBTCxFQUFBLENBQWdCLEdBQVRBLE9BQUEsT0FBUyxJQUFBbUQsRUFBQW5ELEVBQUE2RCxNQUFBLHFJQUF1SixDQUFLLElBQUFxUixHQUFBcFosRUFBQUQsRUFBQStELEVBQUE2NkIsRUFBQS9lLEVBQUFyYixHQUFBNUUsRUFBQSxHQUF3QnVFLEVBQUE2RCxNQUFBVixFQUFBcEIsUUFBQSxpQkFBbUMsT0FBQW1ULEVBQUF6WixTQUFpQk0sS0FBQSxzQkFBNkMsTUFBaEJpRSxFQUFBZ0UsWUFBQSxFQUFnQmhFLEdBQzlNazlCLEVBQUEsMkJBQUFsOUIsRUFBQSw0SEFBa0NsRSxHQUE2SCxJQUFBd08sR0FBT3l0QyxVQUFBLFdBQXFCLFVBQVNDLG1CQUFBLGFBQWdDQyxvQkFBQSxhQUFpQ0MsZ0JBQUEsY0FBOEJ0YyxLQUN4YyxTQUFBdWMsRUFBQW40QyxFQUFBbUQsRUFBQXJILEdBQWtCeUYsS0FBQTIxQixNQUFBbDNCLEVBQWF1QixLQUFBOG9CLFFBQUFsbkIsRUFBZTVCLEtBQUE2MkMsS0FBQXhjLEVBQVlyNkIsS0FBQXljLFFBQUFsaUIsR0FBQXdPLEVBQXNTLFNBQUFsTSxLQUFzQyxTQUFBRSxFQUFBMEIsRUFBQW1ELEVBQUFySCxHQUFrQnlGLEtBQUEyMUIsTUFBQWwzQixFQUFhdUIsS0FBQThvQixRQUFBbG5CLEVBQWU1QixLQUFBNjJDLEtBQUF4YyxFQUFZcjZCLEtBQUF5YyxRQUFBbGlCLEdBQUF3TyxFQUFwWDZ0QyxFQUFBLzZDLFVBQUFpN0Msb0JBQWdDRixFQUFBLzZDLFVBQUFxekMsU0FBQSxTQUFBendDLEVBQUFtRCxHQUFtQyxpQkFBQW5ELEdBQUEsbUJBQUFBLEdBQUEsTUFBQUEsR0FBQXBCLEVBQUEsTUFBbUUyQyxLQUFBeWMsUUFBQWs2QixnQkFBQTMyQyxLQUFBdkIsRUFBQW1ELEVBQUEsYUFBbURnMUMsRUFBQS82QyxVQUFBazdDLFlBQUEsU0FBQXQ0QyxHQUFvQ3VCLEtBQUF5YyxRQUFBZzZCLG1CQUFBejJDLEtBQUF2QixFQUFBLGdCQUFxRTVCLEVBQUFoQixVQUFBKzZDLEVBQUEvNkMsVUFBb0csSUFBQW03QyxFQUFBajZDLEVBQUFsQixVQUFBLElBQUFnQixFQUNsZG02QyxFQUFBMTFDLFlBQUF2RSxFQUFnQjFDLEVBQUEyOEMsRUFBQUosRUFBQS82QyxXQUFpQm03QyxFQUFBQyxzQkFBQSxFQUEwQixJQUFBQyxHQUFPQyxRQUFBLEtBQUFDLGtCQUFBLE1BQW9DQyxFQUFBMThDLE9BQUFrQixVQUFBQyxlQUFBMC9CLEdBQXNDaGdDLEtBQUEsRUFBQXVXLEtBQUEsRUFBQXVsQyxRQUFBLEVBQUFDLFVBQUEsR0FDNUksU0FBQUMsRUFBQS80QyxFQUFBbUQsRUFBQXJILEdBQWtCLElBQUFELE9BQUEsRUFBQStELEtBQWlCNjZCLEVBQUEsS0FBQS9lLEVBQUEsS0FBZSxTQUFBdlksRUFBQSxJQUFBdEgsVUFBQSxJQUFBc0gsRUFBQW1RLE1BQUFvSSxFQUFBdlksRUFBQW1RLFVBQUEsSUFBQW5RLEVBQUFwRyxNQUFBMDlCLEVBQUEsR0FBQXQzQixFQUFBcEcsS0FBQW9HLEVBQUF5MUMsRUFBQWo5QyxLQUFBd0gsRUFBQXRILEtBQUFraEMsRUFBQTEvQixlQUFBeEIsS0FBQStELEVBQUEvRCxHQUFBc0gsRUFBQXRILElBQTRILElBQUF3RSxFQUFBZ0QsVUFBQWxCLE9BQUEsRUFBeUIsT0FBQTlCLEVBQUFULEVBQUFvNUMsU0FBQWw5QyxPQUFzQixLQUFBdUUsRUFBQSxDQUFhLFFBQUE2VSxFQUFBaE8sTUFBQTdHLEdBQUE1RSxFQUFBLEVBQXVCQSxFQUFBNEUsRUFBSTVFLElBQUF5WixFQUFBelosR0FBQTRILFVBQUE1SCxFQUFBLEdBQXdCbUUsRUFBQW81QyxTQUFBOWpDLEVBQWEsR0FBQWxWLEtBQUF3dEMsYUFBQSxJQUFBM3hDLEtBQUF3RSxFQUFBTCxFQUFBd3RDLGtCQUFBLElBQUE1dEMsRUFBQS9ELEtBQUErRCxFQUFBL0QsR0FBQXdFLEVBQUF4RSxJQUE0RSxPQUFPbzlDLFNBQUEzN0MsRUFBQVEsS0FBQWtDLEVBQUFqRCxJQUFBMDlCLEVBQUFubkIsSUFBQW9JLEVBQUF3YixNQUFBdDNCLEVBQUFzNUMsT0FBQVQsRUFBQUMsU0FDaFMsU0FBQVMsRUFBQW41QyxHQUFjLHVCQUFBQSxHQUFBLE9BQUFBLEtBQUFpNUMsV0FBQTM3QyxFQUE0SixJQUFBZ0QsRUFBQSxPQUFBNUIsS0FBa0IsU0FBQTA2QyxFQUFBcDVDLEVBQUFtRCxFQUFBckgsRUFBQUQsR0FBb0IsR0FBQTZDLEVBQUF5RCxPQUFBLENBQWEsSUFBQXZDLEVBQUFsQixFQUFBNGtCLE1BQXNFLE9BQXhEMWpCLEVBQUF5RixPQUFBckYsRUFBV0osRUFBQXk1QyxVQUFBbDJDLEVBQWN2RCxFQUFBbXpDLEtBQUFqM0MsRUFBUzhELEVBQUF5cUIsUUFBQXh1QixFQUFZK0QsRUFBQWtoQixNQUFBLEVBQVVsaEIsRUFBUyxPQUFPeUYsT0FBQXJGLEVBQUFxNUMsVUFBQWwyQyxFQUFBNHZDLEtBQUFqM0MsRUFBQXV1QixRQUFBeHVCLEVBQUFpbEIsTUFBQSxHQUNoWixTQUFBM2hCLEVBQUFhLEdBQWNBLEVBQUFxRixPQUFBLEtBQWNyRixFQUFBcTVDLFVBQUEsS0FBaUJyNUMsRUFBQSt5QyxLQUFBLEtBQVkveUMsRUFBQXFxQixRQUFBLEtBQWVycUIsRUFBQThnQixNQUFBLEVBQVUsR0FBQXBpQixFQUFBeUQsUUFBQXpELEVBQUE0RyxLQUFBdEYsR0FFbUcsU0FBQWYsRUFBQWUsRUFBQW1ELEVBQUFySCxHQUFrQixhQUFBa0UsRUFBQSxFQUR2TSxTQUFBeEIsRUFBQXdCLEVBQUFtRCxFQUFBckgsRUFBQUQsR0FBb0IsSUFBQStELFNBQUFJLEVBQWUsY0FBQUosR0FBQSxZQUFBQSxJQUFBSSxFQUFBLE1BQXlDLElBQUF5NkIsR0FBQSxFQUFTLFVBQUF6NkIsRUFBQXk2QixHQUFBLE9BQWlCLE9BQUE3NkIsR0FBZSwwQkFBQTY2QixHQUFBLEVBQWlDLE1BQU0sb0JBQUF6NkIsRUFBQWk1QyxVQUFpQyxLQUFBMzdDLEVBQUEsS0FBQXE2QyxFQUFBbGQsR0FBQSxHQUFvQixHQUFBQSxFQUFBLE9BQUEzK0IsRUFBQUQsRUFBQW1FLEVBQUEsS0FBQW1ELEVBQUEsSUFBQW0zQixFQUFBdDZCLEVBQUEsR0FBQW1ELEdBQUEsRUFBZ0UsR0FBdkJzM0IsRUFBQSxFQUFJdDNCLEVBQUEsS0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQW1CK0QsTUFBQXFSLFFBQUF2WSxHQUFBLFFBQUEwYixFQUFBLEVBQWdDQSxFQUFBMWIsRUFBQW1DLE9BQVd1WixJQUFBLENBQVksSUFBQXJiLEVBQUE4QyxFQUFBbTNCLEVBQVAxNkIsRUFBQUksRUFBQTBiLEdBQU9BLEdBQWUrZSxHQUFBajhCLEVBQUFvQixFQUFBUyxFQUFBdkUsRUFBQUQsUUFBYyxHQUFBd0UsRUFBQSxPQUFBTCxHQUFBLGlCQUFBQSxFQUFBLHdCQUFBSyxFQUFBeTNDLEdBQUE5M0MsRUFBQTgzQyxJQUFBOTNDLEVBQUEsZUFBQUssRUFBQSx3QkFBQUEsRUFBQSxJQUFBTCxFQUFBSyxFQUFBMUUsS0FBQXFFLEdBQUEwYixFQUNyVyxJQUFFOWIsRUFBQUksRUFBQW9MLFFBQUFDLE1BQW1Cb3ZCLEdBQUFqOEIsRUFBQW9CLElBQUFuRCxNQUFBNEQsRUFBQThDLEVBQUFtM0IsRUFBQTE2QixFQUFBOGIsS0FBQTVmLEVBQUFELE9BQXNDLFdBQUErRCxHQUFBaEIsRUFBQSx5QkFBQTlDLEVBQUEsR0FBQWtFLEdBQUEscUJBQTBFOUQsT0FBQWdNLEtBQUFsSSxHQUFBcUIsS0FBQSxVQUE4QnZGLEVBQUEsSUFBUyxPQUFBMitCLEVBQTJCajhCLENBQUF3QixFQUFBLEdBQUFtRCxFQUFBckgsR0FBNkIsU0FBQXcrQixFQUFBdDZCLEVBQUFtRCxHQUFnQix1QkFBQW5ELEdBQUEsT0FBQUEsR0FBQSxNQUFBQSxFQUFBakQsSUFIckYsU0FBQWlELEdBQW1CLElBQUFtRCxHQUFPbTJDLElBQUEsS0FBQUMsSUFBQSxNQUFtQixjQUFBdjVDLEdBQUErQixRQUFBLGlCQUFBL0IsR0FBNkMsT0FBQW1ELEVBQUFuRCxLQUdMdzVDLENBQUF4NUMsRUFBQWpELEtBQUFvRyxFQUFBRyxTQUFBLElBQThFLFNBQUFtMkMsRUFBQXo1QyxFQUFBbUQsR0FBZ0JuRCxFQUFBK3lDLEtBQUFwM0MsS0FBQXFFLEVBQUFxcUIsUUFBQWxuQixFQUFBbkQsRUFBQThnQixTQUNsVixTQUFBNDRCLEVBQUExNUMsRUFBQW1ELEVBQUFySCxHQUFtQixJQUFBRCxFQUFBbUUsRUFBQXFGLE9BQUF6RixFQUFBSSxFQUFBcTVDLFVBQTZCcjVDLElBQUEreUMsS0FBQXAzQyxLQUFBcUUsRUFBQXFxQixRQUFBbG5CLEVBQUFuRCxFQUFBOGdCLFNBQXFDNVosTUFBQXFSLFFBQUF2WSxHQUFBZCxFQUFBYyxFQUFBbkUsRUFBQUMsRUFBQSxTQUFBa0UsR0FBcUMsT0FBQUEsSUFBUyxNQUFBQSxJQUFBbTVDLEVBQUFuNUMsT0FKbkksU0FBQUEsRUFBQW1ELEdBQWdCLE9BQU84MUMsU0FBQTM3QyxFQUFBUSxLQUFBa0MsRUFBQWxDLEtBQUFmLElBQUFvRyxFQUFBbVEsSUFBQXRULEVBQUFzVCxJQUFBNGpCLE1BQUFsM0IsRUFBQWszQixNQUFBZ2lCLE9BQUFsNUMsRUFBQWs1QyxRQUk0R1MsQ0FBQTM1QyxFQUFBSixJQUFBSSxFQUFBakQsS0FBQW9HLEtBQUFwRyxNQUFBaUQsRUFBQWpELElBQUEsT0FBQWlELEVBQUFqRCxLQUFBZ0YsUUFBQXpCLEVBQUEsWUFBQXhFLElBQUFELEVBQUF5SixLQUFBdEYsSUFBd0csU0FBQWQsRUFBQWMsRUFBQW1ELEVBQUFySCxFQUFBRCxFQUFBK0QsR0FBc0IsSUFBQTY2QixFQUFBLEdBQVMsTUFBQTMrQixJQUFBMitCLEdBQUEsR0FBQTMrQixHQUFBaUcsUUFBQXpCLEVBQUEsWUFBc0RyQixFQUFBZSxFQUFBMDVDLEVBQWJ2MkMsRUFBQWkyQyxFQUFBajJDLEVBQUFzM0IsRUFBQTUrQixFQUFBK0QsSUFBdUJULEVBQUFnRSxHQUMxVSxJQUFBeTJDLEdBQU9DLFVBQVV0dEMsSUFBQSxTQUFBdk0sRUFBQW1ELEVBQUFySCxHQUFvQixTQUFBa0UsRUFBQSxPQUFBQSxFQUFvQixJQUFBbkUsS0FBeUIsT0FBaEJxRCxFQUFBYyxFQUFBbkUsRUFBQSxLQUFBc0gsRUFBQXJILEdBQWdCRCxHQUFTcVEsUUFBQSxTQUFBbE0sRUFBQW1ELEVBQUFySCxHQUF5QixTQUFBa0UsRUFBQSxPQUFBQSxFQUF1Q2YsRUFBQWUsRUFBQXk1QyxFQUFuQnQyQyxFQUFBaTJDLEVBQUEsVUFBQWoyQyxFQUFBckgsSUFBNEJxRCxFQUFBZ0UsSUFBSzJkLE1BQUEsU0FBQTlnQixHQUFtQixPQUFBZixFQUFBZSxFQUFBLFdBQXNCLGFBQVksT0FBT21YLFFBQUEsU0FBQW5YLEdBQXFCLElBQUFtRCxLQUEyQyxPQUFsQ2pFLEVBQUFjLEVBQUFtRCxFQUFBLGNBQUFuRCxHQUF1QixPQUFBQSxJQUFXbUQsR0FBUzIyQyxLQUFBLFNBQUE5NUMsR0FBdUMsT0FBckJtNUMsRUFBQW41QyxJQUFBcEIsRUFBQSxPQUFxQm9CLElBQVUrNUMsVUFBQSxXQUFzQixPQUFPckIsUUFBQSxPQUFjc0IsVUFBQTdCLEVBQUE4QixjQUFBMzdDLEVBQUE0N0MsY0FBQSxTQUFBbDZDLEVBQUFtRCxHQUN6TyxZQURrUyxJQUFBQSxNQUFBLE9BQXFCbkQsR0FBR2k1QyxTQUFBdG9DLEVBQUF3cEMsc0JBQUFoM0MsRUFDM2RpM0MsY0FBQXA2QyxFQUFBcTZDLGVBQUFyNkMsRUFBQXM2QyxTQUFBLEtBQUFDLFNBQUEsS0FBQUMsY0FBQSxPQUFpRkYsVUFBWXJCLFNBQUF0cUMsRUFBQThyQyxTQUFBejZDLEdBQXVCQSxFQUFBdTZDLFNBQUF2NkMsRUFBYUEsRUFBQXc2QyxjQUY4TSxTQUFBeDZDLEVBQUFtRCxHQUFpQixJQUFBckgsRUFBQTI4QyxFQUFBRSxrQkFBbUQsT0FBekIsT0FBQTc4QyxHQUFBOEMsRUFBQSxPQUF5QjlDLEVBQUE0K0MsWUFBQTE2QyxFQUFBbUQsSUFFbFJuRyxLQUFBLEtBQUFnRCxHQUFnQ0EsR0FBUzI2QyxXQUFBLFNBQUEzNkMsR0FBd0IsT0FBT2k1QyxTQUFBcEIsRUFBQStDLE9BQUE1NkMsSUFBcUI2NkMsU0FBQXYrQyxFQUFBdytDLFdBQUFwK0MsRUFBQXErQyxtQkFBQXQ0QixFQUFBdTRCLGtCQUFBcEQsRUFBQXRhLGNBQUF5YixFQUFBa0MsYUFBQSxTQUFBajdDLEVBQUFtRCxFQUFBckgsSUFBK0csT0FBQWtFLFFBQUEsSUFBQUEsSUFBQXBCLEVBQUEsTUFBQW9CLEdBQXVDLElBQUFuRSxPQUFBLEVBQUErRCxFQUFBaEUsS0FBbUJvRSxFQUFBazNCLE9BQUF1RCxFQUFBejZCLEVBQUFqRCxJQUFBMmUsRUFBQTFiLEVBQUFzVCxJQUFBalQsRUFBQUwsRUFBQWs1QyxPQUFxQyxTQUFBLzFDLEVBQUEsTUFBWSxJQUFBQSxFQUFBbVEsTUFBQW9JLEVBQUF2WSxFQUFBbVEsSUFBQWpULEVBQUFvNEMsRUFBQUMsY0FBc0MsSUFBQXYxQyxFQUFBcEcsTUFBQTA5QixFQUFBLEdBQUF0M0IsRUFBQXBHLEtBQzlkLElBQUFtWSxPQUFBLEVBQWtFLElBQUFyWixLQUFyRG1FLEVBQUFsQyxNQUFBa0MsRUFBQWxDLEtBQUEwdkMsZUFBQXQ0QixFQUFBbFYsRUFBQWxDLEtBQUEwdkMsY0FBcURycUMsRUFBQXkxQyxFQUFBajlDLEtBQUF3SCxFQUFBdEgsS0FBQWtoQyxFQUFBMS9CLGVBQUF4QixLQUFBK0QsRUFBQS9ELFFBQUEsSUFBQXNILEVBQUF0SCxTQUFBLElBQUFxWixJQUFBclosR0FBQXNILEVBQUF0SCxJQUE4RyxRQUFyQkEsRUFBQXdILFVBQUFsQixPQUFBLEdBQXFCdkMsRUFBQW81QyxTQUFBbDlDLE9BQXNCLEtBQUFELEVBQUEsQ0FBYXFaLEVBQUFoTyxNQUFBckwsR0FBVyxRQUFBSixFQUFBLEVBQVlBLEVBQUFJLEVBQUlKLElBQUF5WixFQUFBelosR0FBQTRILFVBQUE1SCxFQUFBLEdBQXdCbUUsRUFBQW81QyxTQUFBOWpDLEVBQWEsT0FBTytqQyxTQUFBMzdDLEVBQUFRLEtBQUFrQyxFQUFBbEMsS0FBQWYsSUFBQTA5QixFQUFBbm5CLElBQUFvSSxFQUFBd2IsTUFBQXQzQixFQUFBczVDLE9BQUE3NEMsSUFBcUQ2NkMsY0FBQSxTQUFBbDdDLEdBQTJCLElBQUFtRCxFQUFBNDFDLEVBQUEvN0MsS0FBQSxLQUFBZ0QsR0FBOEIsT0FBVG1ELEVBQUFyRixLQUFBa0MsRUFBU21ELEdBQVNnNEMsZUFBQWhDLEVBQUFyMkMsUUFBQSxTQUFBczRDLG9EQUF1RkMsa0JBQUE1QyxFQUN4ZW5TLE9BQUExcUMsSUFBVTAvQyxHQUFJMWtCLFFBQUFnakIsR0FBVTJCLEVBQUFELEdBQUExQixHQUFBMEIsRUFBVy8vQyxFQUFBRCxRQUFBaWdELEVBQUEza0IsU0FBQTJrQjs7Ozs7Ozs7R0NYdEIsSUFBQTdCLEVBQU90K0MsRUFBUSxHQUFPNkIsRUFBSTdCLEVBQVEsS0FBZW9nRCxFQUFLcGdELEVBQVEsS0FDM0UsU0FBQXVWLEVBQUEzUSxHQUFjLFFBQUFtRCxFQUFBRSxVQUFBbEIsT0FBQSxFQUFBdEcsRUFBQSx5REFBQW1FLEVBQUFsRSxFQUFBLEVBQThGQSxFQUFBcUgsRUFBSXJILElBQUFELEdBQUEsV0FBQTg2QyxtQkFBQXR6QyxVQUFBdkgsRUFBQSxLQUR6QixTQUFBa0UsRUFBQW1ELEVBQUF0SCxFQUFBQyxFQUFBOEQsRUFBQVMsRUFBQW82QixFQUFBdmxCLEdBQTZCLElBQUFsVixFQUFBLENBQWdCLEdBQVRBLE9BQUEsT0FBUyxJQUFBbUQsRUFBQW5ELEVBQUE2RCxNQUFBLHFJQUF1SixDQUFLLElBQUE2WCxHQUFBN2YsRUFBQUMsRUFBQThELEVBQUFTLEVBQUFvNkIsRUFBQXZsQixHQUFBelosRUFBQSxHQUF3QnVFLEVBQUE2RCxNQUFBVixFQUFBcEIsUUFBQSxpQkFBbUMsT0FBQTJaLEVBQUFqZ0IsU0FBaUJNLEtBQUEsc0JBQTZDLE1BQWhCaUUsRUFBQWdFLFlBQUEsRUFBZ0JoRSxHQUNwUHk3QyxFQUFBLDJCQUFBejdDLEVBQUEsNEhBQW1DbkUsR0FBNkg2OUMsR0FBQS9vQyxFQUFBLE9BQ3JVLElBQUErcUMsR0FBQSxFQUFBQyxFQUFBLEtBQUFDLEdBQUEsRUFBQUMsRUFBQSxLQUFBQyxHQUFvQ0MsUUFBQSxTQUFBLzdDLEdBQW9CMDdDLEdBQUEsRUFBTUMsRUFBQTM3QyxJQUFPLFNBQUFnOEMsRUFBQWg4QyxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUE4RCxFQUFBUyxFQUFBbzZCLEVBQUF2bEIsRUFBQXdHLEdBQStCZ2dDLEdBQUEsRUFBTUMsRUFBQSxLQUQ4TyxTQUFBMzdDLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQThELEVBQUFTLEVBQUFvNkIsRUFBQXZsQixFQUFBd0csR0FBK0IsSUFBQWpnQixFQUFBeUwsTUFBQTlKLFVBQUFtRyxNQUFBNUgsS0FBQTBILFVBQUEsR0FBOEMsSUFBSUYsRUFBQUMsTUFBQXZILEVBQUFKLEdBQWEsTUFBQUcsR0FBUzJGLEtBQUF3NkMsUUFBQW5nRCxLQUM3VXdILE1BQUEwNEMsRUFBQXo0QyxXQUE2SixJQUFBNDRDLEVBQUEsS0FBQUMsS0FDL1EsU0FBQUMsSUFBYyxHQUFBRixFQUFBLFFBQUFqOEMsS0FBQWs4QyxFQUFBLENBQXVCLElBQUEvNEMsRUFBQSs0QyxFQUFBbDhDLEdBQUFuRSxFQUFBb2dELEVBQUE5dkMsUUFBQW5NLEdBQWtELElBQXRCLEVBQUFuRSxHQUFBOFUsRUFBQSxLQUFBM1EsSUFBc0JvOEMsRUFBQXZnRCxHQUFtRSxRQUFBQyxLQUF4RHFILEVBQUFrNUMsZUFBQTFyQyxFQUFBLEtBQUEzUSxHQUFpQ284QyxFQUFBdmdELEdBQUFzSCxFQUFRdEgsRUFBQXNILEVBQUFtNUMsV0FBZSxDQUFnQixJQUFBMThDLE9BQUEsRUFBYVMsRUFBQXhFLEVBQUFDLEdBQUEyK0IsRUFBQXQzQixFQUFBK1IsRUFBQXBaLEVBQW1CeWdELEVBQUFsL0MsZUFBQTZYLElBQUF2RSxFQUFBLEtBQUF1RSxHQUFzQ3FuQyxFQUFBcm5DLEdBQUE3VSxFQUFRLElBQUFxYixFQUFBcmIsRUFBQW04Qyx3QkFBZ0MsR0FBQTlnQyxFQUFBLENBQU0sSUFBQTliLEtBQUE4YixJQUFBcmUsZUFBQXVDLElBQUE2OEMsRUFBQS9nQyxFQUFBOWIsR0FBQTY2QixFQUFBdmxCLEdBQTZDdFYsR0FBQSxPQUFLUyxFQUFBcThDLGtCQUFBRCxFQUFBcDhDLEVBQUFxOEMsaUJBQUFqaUIsRUFBQXZsQixHQUFBdFYsR0FBQSxHQUFBQSxHQUFBLEVBQStEQSxHQUFBK1EsRUFBQSxLQUFBN1UsRUFBQWtFLEtBQy9ZLFNBQUF5OEMsRUFBQXo4QyxFQUFBbUQsRUFBQXRILEdBQW1COGdELEVBQUEzOEMsSUFBQTJRLEVBQUEsTUFBQTNRLEdBQXdCMjhDLEVBQUEzOEMsR0FBQW1ELEVBQVF5NUMsRUFBQTU4QyxHQUFBbUQsRUFBQW01QyxXQUFBemdELEdBQUFpNEMsYUFBbUMsSUFBQXNJLEtBQUFHLEtBQWVJLEtBQU1DLEtBQU1DLEVBQUEsS0FBQUMsRUFBQSxLQUFBQyxFQUFBLEtBQXlCLFNBQUFDLEVBQUFoOUMsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFxQnFILEVBQUFuRCxFQUFBbEMsTUFBQSxnQkFBMEJrQyxFQUFBaTlDLGNBQUFGLEVBQUFqaEQsR0FGaEQsU0FBQWtFLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQThELEVBQUFTLEVBQUFvNkIsRUFBQXZsQixFQUFBd0csR0FBd0QsR0FBekJzZ0MsRUFBQTU0QyxNQUFBN0IsS0FBQThCLFdBQXlCcTRDLEVBQUEsQ0FBTyxHQUFBQSxFQUFBLENBQU8sSUFBQWpnRCxFQUFBa2dELEVBQVNELEdBQUEsRUFBTUMsRUFBQSxVQUFRaHJDLEVBQUEsT0FBQWxWLE9BQUEsRUFBdUJtZ0QsT0FBQSxFQUFBQyxFQUFBcGdELElBRTlDeWhELENBQUEvNUMsRUFBQXRILE9BQUEsRUFBQW1FLEdBQWlCQSxFQUFBaTlDLGNBQUEsS0FBcUIsU0FBQUUsRUFBQW45QyxFQUFBbUQsR0FBd0MsT0FBdkIsTUFBQUEsR0FBQXdOLEVBQUEsTUFBdUIsTUFBQTNRLEVBQUFtRCxFQUFvQitELE1BQUFxUixRQUFBdlksR0FBcUJrSCxNQUFBcVIsUUFBQXBWLElBQUFuRCxFQUFBc0YsS0FBQWxDLE1BQUFwRCxFQUFBbUQsR0FBQW5ELElBQStDQSxFQUFBc0YsS0FBQW5DLEdBQVVuRCxHQUFTa0gsTUFBQXFSLFFBQUFwVixJQUFBbkQsR0FBQW9QLE9BQUFqTSxJQUFBbkQsRUFBQW1ELEdBQ3hZLFNBQUFpNkMsRUFBQXA5QyxFQUFBbUQsRUFBQXRILEdBQW1CcUwsTUFBQXFSLFFBQUF2WSxLQUFBa00sUUFBQS9JLEVBQUF0SCxHQUFBbUUsR0FBQW1ELEVBQUF4SCxLQUFBRSxFQUFBbUUsR0FBK0MsSUFBQXE5QyxFQUFBLEtBQVksU0FBQUMsRUFBQXQ5QyxFQUFBbUQsR0FBaUIsR0FBQW5ELEVBQUEsQ0FBTSxJQUFBbkUsRUFBQW1FLEVBQUF1OUMsbUJBQUF6aEQsRUFBQWtFLEVBQUF3OUMsbUJBQWtELEdBQUF0MkMsTUFBQXFSLFFBQUExYyxHQUFBLFFBQUErRCxFQUFBLEVBQWdDQSxFQUFBL0QsRUFBQXNHLFNBQUFuQyxFQUFBeTlDLHVCQUFzQzc5QyxJQUFBbzlDLEVBQUFoOUMsRUFBQW1ELEVBQUF0SCxFQUFBK0QsR0FBQTlELEVBQUE4RCxTQUFzQi9ELEdBQUFtaEQsRUFBQWg5QyxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQW9Ca0UsRUFBQXU5QyxtQkFBQSxLQUEwQnY5QyxFQUFBdzlDLG1CQUFBLEtBQTBCeDlDLEVBQUEwOUMsZ0JBQUExOUMsRUFBQTZDLFlBQUE4NkMsUUFBQTM5QyxJQUE0QyxTQUFBNDlDLEVBQUE1OUMsR0FBZSxPQUFBczlDLEVBQUF0OUMsR0FBQSxHQUFnQixTQUFBNjlDLEVBQUE3OUMsR0FBZSxPQUFBczlDLEVBQUF0OUMsR0FBQSxHQUNyWixJQUFBODlDLEVBQVEsU0FBQTk5QyxHQUFtQ2k4QyxHQUFBdHJDLEVBQUEsT0FBbUJzckMsRUFBQS8wQyxNQUFBOUosVUFBQW1HLE1BQUE1SCxLQUFBcUUsR0FBaUNtOEMsS0FBL0YyQixFQUFvRyxTQUFBOTlDLEdBQXNDLElBQUFuRSxFQUFBc0gsR0FBQSxFQUFXLElBQUF0SCxLQUFBbUUsRUFBQSxHQUFBQSxFQUFBM0MsZUFBQXhCLEdBQUEsQ0FBbUMsSUFBQUMsRUFBQWtFLEVBQUFuRSxHQUFXcWdELEVBQUE3K0MsZUFBQXhCLElBQUFxZ0QsRUFBQXJnRCxLQUFBQyxJQUFBb2dELEVBQUFyZ0QsSUFBQThVLEVBQUEsTUFBQTlVLEdBQUFxZ0QsRUFBQXJnRCxHQUFBQyxFQUFBcUgsR0FBQSxHQUF3RUEsR0FBQWc1QyxLQUMzUSxTQUFBNEIsRUFBQS85QyxFQUFBbUQsR0FBaUIsSUFBQXRILEVBQUFtRSxFQUFBZytDLFVBQWtCLElBQUFuaUQsRUFBQSxZQUFrQixJQUFBQyxFQUFBK2dELEVBQUFoaEQsR0FBWSxJQUFBQyxFQUFBLFlBQWtCRCxFQUFBQyxFQUFBcUgsR0FBT25ELEVBQUEsT0FBQW1ELEdBQVksZ05BQUFySCxLQUFBbWlELFlBQUFuaUQsSUFBQSxZQUFBa0UsSUFBQWxDLE9BQUEsVUFBQWtDLEdBQUEsV0FBQUEsR0FBQSxhQUFBQSxJQUFrVEEsR0FBQWxFLEVBQUssTUFBQWtFLEVBQVEsUUFBQUEsR0FBQSxFQUFhLE9BQUFBLEVBQUEsTUFBaUJuRSxHQUFBLG1CQUFBQSxHQUFBOFUsRUFBQSxNQUFBeE4sU0FBQXRILEdBQ25jQSxHQUFTLFNBQUFxaUQsRUFBQWwrQyxFQUFBbUQsR0FBc0QsR0FBckMsT0FBQW5ELElBQUFxOUMsRUFBQUYsRUFBQUUsRUFBQXI5QyxJQUF3QkEsRUFBQXE5QyxFQUFLQSxFQUFBLEtBQVFyOUMsSUFBQW85QyxFQUFBcDlDLEVBQUFtRCxFQUFBeTZDLEVBQUFDLEdBQUFSLEdBQUExc0MsRUFBQSxNQUFBaXJDLEdBQUEsTUFBQXo0QyxFQUFBMDRDLEVBQUFELEdBQUEsRUFBQUMsRUFBQSxLQUFBMTRDLEVBQTZFLElBQUFnN0MsRUFBQTMrQyxLQUFBcTRCLFNBQUF2MEIsU0FBQSxJQUFBQyxNQUFBLEdBQUE2NkMsRUFBQSwyQkFBQUQsRUFBQUUsRUFBQSx3QkFBQUYsRUFBMEcsU0FBQUcsRUFBQXQrQyxHQUFlLEdBQUFBLEVBQUFvK0MsR0FBQSxPQUFBcCtDLEVBQUFvK0MsR0FBc0IsTUFBS3ArQyxFQUFBbytDLElBQU8sS0FBQXArQyxFQUFBdStDLFdBQWdDLFlBQWhDditDLElBQUF1K0MsV0FBeUQsWUFBUnYrQyxJQUFBbytDLElBQVF4OEMsS0FBQSxJQUFBNUIsRUFBQTRCLElBQUE1QixFQUFBLEtBQW1DLFNBQUF3K0MsRUFBQXgrQyxHQUF1QixRQUFSQSxJQUFBbytDLEtBQVEsSUFBQXArQyxFQUFBNEIsS0FBQSxJQUFBNUIsRUFBQTRCLElBQUEsS0FBQTVCLEVBQzFaLFNBQUF5K0MsRUFBQXorQyxHQUFlLE9BQUFBLEVBQUE0QixLQUFBLElBQUE1QixFQUFBNEIsSUFBQSxPQUFBNUIsRUFBQWcrQyxVQUEyQ3J0QyxFQUFBLE1BQVEsU0FBQSt0QyxFQUFBMStDLEdBQWUsT0FBQUEsRUFBQXErQyxJQUFBLEtBQW1CLFNBQUFNLEVBQUEzK0MsR0FBZSxHQUFBQSxJQUFBNCtDLGFBQWM1K0MsR0FBQSxJQUFBQSxFQUFBNEIsS0FBb0IsT0FBQTVCLEdBQUEsS0FBZ0IsU0FBQTYrQyxFQUFBNytDLEVBQUFtRCxFQUFBdEgsSUFBbUJzSCxFQUFBNDZDLEVBQUEvOUMsRUFBQW5FLEVBQUFpakQsZUFBQXRDLHdCQUFBcjVDLE9BQUF0SCxFQUFBMGhELG1CQUFBSixFQUFBdGhELEVBQUEwaEQsbUJBQUFwNkMsR0FBQXRILEVBQUEyaEQsbUJBQUFMLEVBQUF0aEQsRUFBQTJoRCxtQkFBQXg5QyxJQUN4TCxTQUFBKytDLEVBQUEvK0MsR0FBZSxHQUFBQSxLQUFBOCtDLGVBQUF0Qyx3QkFBQSxDQUFnRCxRQUFBcjVDLEVBQUFuRCxFQUFBZy9DLFlBQUFuakQsS0FBNkJzSCxHQUFFdEgsRUFBQXlKLEtBQUFuQyxLQUFBdzdDLEVBQUF4N0MsR0FBbUIsSUFBQUEsRUFBQXRILEVBQUFzRyxPQUFlLEVBQUFnQixLQUFNMDdDLEVBQUFoakQsRUFBQXNILEdBQUEsV0FBQW5ELEdBQXVCLElBQUFtRCxFQUFBLEVBQVFBLEVBQUF0SCxFQUFBc0csT0FBV2dCLElBQUEwN0MsRUFBQWhqRCxFQUFBc0gsR0FBQSxVQUFBbkQsSUFBMEIsU0FBQWkvQyxFQUFBai9DLEVBQUFtRCxFQUFBdEgsR0FBbUJtRSxHQUFBbkUsS0FBQWlqRCxlQUFBcEMsbUJBQUF2NUMsRUFBQTQ2QyxFQUFBLzlDLEVBQUFuRSxFQUFBaWpELGVBQUFwQyxxQkFBQTdnRCxFQUFBMGhELG1CQUFBSixFQUFBdGhELEVBQUEwaEQsbUJBQUFwNkMsR0FBQXRILEVBQUEyaEQsbUJBQUFMLEVBQUF0aEQsRUFBQTJoRCxtQkFBQXg5QyxJQUF3TCxTQUFBay9DLEVBQUFsL0MsR0FBZUEsS0FBQTgrQyxlQUFBcEMsa0JBQUF1QyxFQUFBai9DLEVBQUFnL0MsWUFBQSxLQUFBaC9DLEdBQ3BhLFNBQUFtL0MsRUFBQW4vQyxHQUFlbzlDLEVBQUFwOUMsRUFBQSsrQyxHQUFTLElBQUFLLElBQUEsb0JBQUE3L0MsZ0JBQUFrNUIsV0FBQWw1QixPQUFBazVCLFNBQUE2RSxlQUF3RixTQUFBK2hCLEVBQUFyL0MsRUFBQW1ELEdBQWlCLElBQUF0SCxLQUF3RixPQUEvRUEsRUFBQW1FLEVBQUFrQyxlQUFBaUIsRUFBQWpCLGNBQW1DckcsRUFBQSxTQUFBbUUsR0FBQSxTQUFBbUQsRUFBeUJ0SCxFQUFBLE1BQUFtRSxHQUFBLE1BQUFtRCxFQUFtQnRILEVBQVMsSUFBQXlqRCxHQUFRQyxhQUFBRixFQUFBLDRCQUFBRyxtQkFBQUgsRUFBQSxrQ0FBQUksZUFBQUosRUFBQSw4QkFBQUssY0FBQUwsRUFBQSwrQkFBbU1NLEtBQU1DLEtBQy9MLFNBQUFDLEVBQUE3L0MsR0FBZSxHQUFBMi9DLEVBQUEzL0MsR0FBQSxPQUFBMi9DLEVBQUEzL0MsR0FBc0IsSUFBQXMvQyxFQUFBdC9DLEdBQUEsT0FBQUEsRUFBbUIsSUFBQW5FLEVBQUFzSCxFQUFBbThDLEVBQUF0L0MsR0FBYyxJQUFBbkUsS0FBQXNILEVBQUEsR0FBQUEsRUFBQTlGLGVBQUF4QixTQUFBK2pELEVBQUEsT0FBQUQsRUFBQTMvQyxHQUFBbUQsRUFBQXRILEdBQTZELE9BQUFtRSxFQUF2WG8vQyxJQUFBUSxFQUFBbm5CLFNBQUE2RSxjQUFBLE9BQUFqRixNQUFBLG1CQUFBOTRCLGdCQUFBKy9DLEVBQUFDLGFBQUFPLGlCQUFBUixFQUFBRSxtQkFBQU0saUJBQUFSLEVBQUFHLGVBQUFLLFdBQUEsb0JBQUF2Z0QsZUFBQSsvQyxFQUFBSSxjQUFBSyxZQUNBLElBQUFDLEdBQUFILEVBQUEsZ0JBQUExaUIsR0FBQTBpQixFQUFBLHNCQUFBSSxHQUFBSixFQUFBLGtCQUFBSyxHQUFBTCxFQUFBLGlCQUFBTSxHQUFBLHNOQUFBbi9DLE1BQUEsS0FBQW8vQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUNBLFNBQUFDLEtBQWMsR0FBQUQsR0FBQSxPQUFBQSxHQUFnQixJQUFBdGdELEVBQUFsRSxFQUFBcUgsRUFBQWs5QyxHQUFBeGtELEVBQUFzSCxFQUFBaEIsT0FBQXZDLEVBQUEsVUFBQXdnRCxNQUFBM2pELE1BQUEyakQsR0FBQUksWUFBQW5nRCxFQUFBVCxFQUFBdUMsT0FBMEUsSUFBQW5DLEVBQUEsRUFBUUEsRUFBQW5FLEdBQUFzSCxFQUFBbkQsS0FBQUosRUFBQUksR0FBaUJBLEtBQUssSUFBQXk2QixFQUFBNStCLEVBQUFtRSxFQUFVLElBQUFsRSxFQUFBLEVBQVFBLEdBQUEyK0IsR0FBQXQzQixFQUFBdEgsRUFBQUMsS0FBQThELEVBQUFTLEVBQUF2RSxHQUFzQkEsS0FBSyxPQUFBd2tELEdBQUExZ0QsRUFBQTJELE1BQUF2RCxFQUFBLEVBQUFsRSxFQUFBLEVBQUFBLE9BQUEsR0FBb0MsU0FBQTJrRCxLQUFjLFNBQVMsU0FBQUMsS0FBYyxTQUM1UCxTQUFBcDJDLEdBQUF0SyxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQTZHLFFBQUE4RCxLQUF6RjJCLEtBQUF1OUMsZUFBQTkrQyxFQUFzQnVCLEtBQUF5OUMsWUFBQTc3QyxFQUFtQjVCLEtBQUFvL0MsWUFBQTlrRCxFQUFtQm1FLEVBQUF1QixLQUFBc0IsWUFBQSs5QyxVQUE2QjVnRCxFQUFBM0MsZUFBQXVDLE1BQUF1RCxFQUFBbkQsRUFBQUosSUFBQTJCLEtBQUEzQixHQUFBdUQsRUFBQXRILEdBQUEsV0FBQStELEVBQUEyQixLQUFBMUMsT0FBQS9DLEVBQUF5RixLQUFBM0IsR0FBQS9ELEVBQUErRCxJQUFnTyxPQUE1SDJCLEtBQUFzL0Msb0JBQUEsTUFBQWhsRCxFQUFBaWxELGlCQUFBamxELEVBQUFpbEQsa0JBQUEsSUFBQWpsRCxFQUFBdTFCLGFBQUFxdkIsR0FBQUMsR0FBK0ZuL0MsS0FBQWs4QyxxQkFBQWlELEdBQTZCbi9DLEtBRzlFLFNBQUF3L0MsR0FBQS9nRCxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQXFCLEdBQUF5RixLQUFBeS9DLFVBQUE3K0MsT0FBQSxDQUEwQixJQUFBdkMsRUFBQTJCLEtBQUF5L0MsVUFBQTE5QixNQUFnRCxPQUFyQi9oQixLQUFBNUYsS0FBQWlFLEVBQUFJLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBcUI4RCxFQUFTLFdBQUEyQixLQUFBdkIsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUF5QixTQUFBbWxELEdBQUFqaEQsR0FBZUEsYUFBQXVCLE1BQUFvUCxFQUFBLE9BQWtDM1EsRUFBQWtoRCxhQUFlLEdBQUEzL0MsS0FBQXkvQyxVQUFBNytDLFFBQUFaLEtBQUF5L0MsVUFBQTE3QyxLQUFBdEYsR0FDaGMsU0FBQW1oRCxHQUFBbmhELEdBQWVBLEVBQUFnaEQsYUFBZWhoRCxFQUFBb2hELFVBQUFMLEdBQWUvZ0QsRUFBQTI5QyxRQUFBc0QsR0FIN0Noa0QsRUFBQXFOLEdBQUFsTixXQUFlaWtELGVBQUEsV0FBMEI5L0MsS0FBQXUvQyxrQkFBQSxFQUF5QixJQUFBOWdELEVBQUF1QixLQUFBby9DLFlBQXVCM2dELE1BQUFxaEQsZUFBQXJoRCxFQUFBcWhELGlCQUFBLGtCQUFBcmhELEVBQUFveEIsY0FBQXB4QixFQUFBb3hCLGFBQUEsR0FBQTd2QixLQUFBcy9DLG1CQUFBSixLQUF5SGEsZ0JBQUEsV0FBNEIsSUFBQXRoRCxFQUFBdUIsS0FBQW8vQyxZQUF1QjNnRCxNQUFBc2hELGdCQUFBdGhELEVBQUFzaEQsa0JBQUEsa0JBQUF0aEQsRUFBQXVoRCxlQUFBdmhELEVBQUF1aEQsY0FBQSxHQUFBaGdELEtBQUFrOEMscUJBQUFnRCxLQUErSGUsUUFBQSxXQUFvQmpnRCxLQUFBbThDLGFBQUErQyxJQUFxQi9DLGFBQUFnRCxHQUFBUSxXQUFBLFdBQXVDLElBQ3BkLzlDLEVBRG9kbkQsRUFBQXVCLEtBQUFzQixZQUFBKzlDLFVBQ2xkLElBQUF6OUMsS0FBQW5ELEVBQUF1QixLQUFBNEIsR0FBQSxLQUF3QjVCLEtBQUFvL0MsWUFBQXAvQyxLQUFBeTlDLFlBQUF6OUMsS0FBQXU5QyxlQUFBLEtBQTJEdjlDLEtBQUFrOEMscUJBQUFsOEMsS0FBQXMvQyxtQkFBQUgsR0FBcURuL0MsS0FBQWk4QyxtQkFBQWo4QyxLQUFBZzhDLG1CQUFBLFFBQXdEanpDLEdBQUFzMkMsV0FBYTlpRCxLQUFBLEtBQUFlLE9BQUEsS0FBQW8rQyxjQUFBLFdBQStDLGFBQVl3RSxXQUFBLEtBQUFDLFFBQUEsS0FBQUMsV0FBQSxLQUFBQyxVQUFBLFNBQUE1aEQsR0FBb0UsT0FBQUEsRUFBQTRoRCxXQUFBQyxLQUFBOWdCLE9BQStCK2YsaUJBQUEsS0FBQWdCLFVBQUEsTUFDN1d4M0MsR0FBQXkzQyxPQUFBLFNBQUEvaEQsR0FBcUIsU0FBQW1ELEtBQWMsU0FBQXRILElBQWEsT0FBQUMsRUFBQXNILE1BQUE3QixLQUFBOEIsV0FBK0IsSUFBQXZILEVBQUF5RixLQUFXNEIsRUFBQS9GLFVBQUF0QixFQUFBc0IsVUFBd0IsSUFBQXdDLEVBQUEsSUFBQXVELEVBQTZILE9BQWpIbEcsRUFBQTJDLEVBQUEvRCxFQUFBdUIsV0FBaUJ2QixFQUFBdUIsVUFBQXdDLEVBQWMvRCxFQUFBdUIsVUFBQXlGLFlBQUFoSCxFQUEwQkEsRUFBQStrRCxVQUFBM2pELEtBQWdCbkIsRUFBQThrRCxVQUFBNWdELEdBQWdCbkUsRUFBQWttRCxPQUFBam1ELEVBQUFpbUQsT0FBa0JaLEdBQUF0bEQsR0FBTUEsR0FBVXNsRCxHQUFBNzJDLElBQy9MLElBQUEwM0MsR0FBQTEzQyxHQUFBeTNDLFFBQWlCcnpDLEtBQUEsT0FBVXV6QyxHQUFBMzNDLEdBQUF5M0MsUUFBZXJ6QyxLQUFBLE9BQVV3ekMsSUFBQSxZQUFBQyxHQUFBL0MsR0FBQSxxQkFBQTcvQyxPQUFBNmlELEdBQUEsS0FBNkRoRCxHQUFBLGlCQUFBM21CLFdBQUEycEIsR0FBQTNwQixTQUFBNHBCLGNBQzNLLElBQUFDLEdBQUFsRCxHQUFBLGNBQUE3L0MsU0FBQTZpRCxHQUFBRyxHQUFBbkQsS0FBQStDLElBQUFDLElBQUEsRUFBQUEsSUFBQSxJQUFBQSxJQUFBSSxHQUFBbGhELE9BQUFtbEMsYUFBQSxJQUFBZ2MsSUFBbUdDLGFBQWFsRyx5QkFBeUJtRyxRQUFBLGdCQUFBQyxTQUFBLHdCQUF3RDlPLGNBQUEsa0RBQWdFK08sZ0JBQWlCckcseUJBQXlCbUcsUUFBQSxtQkFBQUMsU0FBQSwyQkFBOEQ5TyxhQUFBLHVEQUFBOXlDLE1BQUEsTUFBZ0Y4aEQsa0JBQW1CdEcseUJBQXlCbUcsUUFBQSxxQkFDcmVDLFNBQUEsNkJBQXFDOU8sYUFBQSx5REFBQTl5QyxNQUFBLE1BQWtGK2hELG1CQUFvQnZHLHlCQUF5Qm1HLFFBQUEsc0JBQUFDLFNBQUEsOEJBQW9FOU8sYUFBQSwwREFBQTl5QyxNQUFBLE9BQW9GZ2lELElBQUEsRUFDNVQsU0FBQUMsR0FBQWpqRCxFQUFBbUQsR0FBaUIsT0FBQW5ELEdBQVUsdUJBQUFraUQsR0FBQS8xQyxRQUFBaEosRUFBQSsvQyxTQUE4QywyQkFBQS8vQyxFQUFBKy9DLFFBQXNDLG1EQUFzRCxrQkFBa0IsU0FBQUMsR0FBQW5qRCxHQUEwQix1QkFBWEEsSUFBQW9qRCxTQUFXLFNBQUFwakQsSUFBQTBPLEtBQUEsS0FBa0QsSUFBQTIwQyxJQUFBLEVBRW5RLElBQUFDLElBQVFoSCxXQUFBbUcsR0FBQXBHLGNBQUEsU0FBQXI4QyxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQThDLElBQUE4RCxPQUFBLEVBQWFTLE9BQUEsRUFBYSxHQUFBOGhELEdBQUFoL0MsRUFBQSxDQUFTLE9BQUFuRCxHQUFVLHVCQUFBSixFQUFBNmlELEdBQUFLLGlCQUE4QyxNQUFBMy9DLEVBQVEscUJBQUF2RCxFQUFBNmlELEdBQUFJLGVBQTBDLE1BQUExL0MsRUFBUSx3QkFBQXZELEVBQUE2aUQsR0FBQU0sa0JBQWdELE1BQUE1L0MsRUFBUXZELE9BQUEsT0FBU3lqRCxHQUFBSixHQUFBampELEVBQUFuRSxLQUFBK0QsRUFBQTZpRCxHQUFBSSxnQkFBQSxZQUFBN2lELEdBQUEsTUFBQW5FLEVBQUFxbkQsVUFBQXRqRCxFQUFBNmlELEdBQUFLLGtCQUMvRixPQUQ4TGxqRCxHQUFBMmlELElBQUEsT0FBQTFtRCxFQUFBMG5ELFNBQUFGLElBQUF6akQsSUFBQTZpRCxHQUFBSyxpQkFBQWxqRCxJQUFBNmlELEdBQUFJLGdCQUFBUSxLQUFBaGpELEVBQUFrZ0QsT0FBQUYsR0FBQSxVQUFBRCxHQUFBdGtELEdBQUFza0QsR0FBQTNqRCxNQUFBMmpELEdBQUFJLFlBQUE2QyxJQUMzVyxJQUFBempELEVBQUFvaUQsR0FBQVosVUFBQXhoRCxFQUFBdUQsRUFBQXRILEVBQUFDLEdBQUF1RSxFQUFBVCxFQUFBOE8sS0FBQXJPLEVBQUEsUUFBQUEsRUFBQThpRCxHQUFBdG5ELE1BQUErRCxFQUFBOE8sS0FBQXJPLEdBQUE4K0MsRUFBQXYvQyxHQUFBUyxFQUFBVCxHQUFBUyxFQUFBLE1BQXlGTCxFQUFBc2lELEdBSG9MLFNBQUF0aUQsRUFBQW1ELEdBQWlCLE9BQUFuRCxHQUFVLDRCQUFBbWpELEdBQUFoZ0QsR0FBbUMsMkJBQUFBLEVBQUFxZ0QsTUFBQSxNQUE0Q1IsSUFBQSxFQUFNUixJQUFVLHVCQUFBeGlELEVBQUFtRCxFQUFBdUwsUUFBQTh6QyxJQUFBUSxHQUFBLEtBQUFoakQsRUFBbUQscUJBR2pXeWpELENBQUF6akQsRUFBQW5FLEdBRnpGLFNBQUFtRSxFQUFBbUQsR0FBaUIsR0FBQWtnRCxHQUFBLHlCQUFBcmpELElBQUFtaUQsSUFBQWMsR0FBQWpqRCxFQUFBbUQsSUFBQW5ELEVBQUF1Z0QsS0FBQUQsR0FBQUQsR0FBQUQsR0FBQSxLQUFBaUQsSUFBQSxFQUFBcmpELEdBQUEsS0FBbUYsT0FBQUEsR0FBVSx3QkFBeUIsb0JBQUFtRCxFQUFBdWdELFNBQUF2Z0QsRUFBQXdnRCxRQUFBeGdELEVBQUF5Z0QsVUFBQXpnRCxFQUFBdWdELFNBQUF2Z0QsRUFBQXdnRCxPQUFBLENBQTJFLEdBQUF4Z0QsRUFBQTBnRCxNQUFBLEVBQUExZ0QsRUFBQTBnRCxLQUFBMWhELE9BQUEsT0FBQWdCLEVBQUEwZ0QsS0FBeUMsR0FBQTFnRCxFQUFBcWdELE1BQUEsT0FBQWxpRCxPQUFBbWxDLGFBQUF0akMsRUFBQXFnRCxPQUErQyxZQUFZLDRCQUFBakIsSUFBQSxPQUFBcC9DLEVBQUFvZ0QsT0FBQSxLQUFBcGdELEVBQUF1TCxLQUE2RCxxQkFFMVJvMUMsQ0FBQTlqRCxFQUFBbkUsTUFBQXNILEVBQUE4K0MsR0FBQWIsVUFBQXFCLEdBQUFDLFlBQUF2L0MsRUFBQXRILEVBQUFDLElBQUE0UyxLQUFBMU8sRUFBQW0vQyxFQUFBaDhDLE1BQUEsS0FBb0YsT0FBQTlDLEVBQUE4QyxFQUFBLE9BQUFBLEVBQUE5QyxLQUFBOEMsS0FBb0M0Z0QsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBeUIsU0FBQUMsR0FBQWxrRCxHQUFlLEdBQUFBLEVBQUE4OEMsRUFBQTk4QyxHQUFBLENBQVksbUJBQUErakQsSUFBQXB6QyxFQUFBLE9BQXVDLElBQUF4TixFQUFBMDVDLEVBQUE3OEMsRUFBQWcrQyxXQUFzQitGLEdBQUEvakQsRUFBQWcrQyxVQUFBaCtDLEVBQUFsQyxLQUFBcUYsSUFBMEIsU0FBQWdoRCxHQUFBbmtELEdBQWVna0QsR0FBQUMsTUFBQTMrQyxLQUFBdEYsR0FBQWlrRCxJQUFBamtELEdBQUFna0QsR0FBQWhrRCxFQUE2QixTQUFBb2tELEtBQWMsR0FBQUosR0FBQSxDQUFPLElBQUFoa0QsRUFBQWdrRCxHQUFBN2dELEVBQUE4Z0QsR0FBK0IsR0FBakJBLEdBQUFELEdBQUEsS0FBV0UsR0FBQWxrRCxHQUFNbUQsRUFBQSxJQUFBbkQsRUFBQSxFQUFhQSxFQUFBbUQsRUFBQWhCLE9BQVduQyxJQUFBa2tELEdBQUEvZ0QsRUFBQW5ELEtBQ3BkLFNBQUFxa0QsR0FBQXJrRCxFQUFBbUQsR0FBaUIsT0FBQW5ELEVBQUFtRCxHQUFZLFNBQUFtaEQsR0FBQXRrRCxFQUFBbUQsRUFBQXRILEdBQW1CLE9BQUFtRSxFQUFBbUQsRUFBQXRILEdBQWMsU0FBQTBvRCxNQUFlLElBQUFDLElBQUEsRUFBVSxTQUFBQyxHQUFBemtELEVBQUFtRCxHQUFpQixHQUFBcWhELEdBQUEsT0FBQXhrRCxFQUFBbUQsR0FBa0JxaEQsSUFBQSxFQUFNLElBQUksT0FBQUgsR0FBQXJrRCxFQUFBbUQsR0FBZSxRQUFRcWhELElBQUEsVUFBQVIsSUFBQSxPQUFBQyxNQUFBTSxLQUFBSCxPQUF5QyxJQUFBTSxJQUFRQyxPQUFBLEVBQUFDLE1BQUEsRUFBQUMsVUFBQSxFQUFBQyxrQkFBQSxFQUFBQyxPQUFBLEVBQUFDLE9BQUEsRUFBQTFhLFFBQUEsRUFBQTJhLFVBQUEsRUFBQUMsT0FBQSxFQUFBdFksUUFBQSxFQUFBdVksS0FBQSxFQUFBQyxNQUFBLEVBQUFDLE1BQUEsRUFBQUMsS0FBQSxFQUFBQyxNQUFBLEdBQW1KLFNBQUFDLEdBQUF4bEQsR0FBZSxJQUFBbUQsRUFBQW5ELEtBQUF5bEQsVUFBQXpsRCxFQUFBeWxELFNBQUF2akQsY0FBOEMsZ0JBQUFpQixJQUFBdWhELEdBQUExa0QsRUFBQWxDLE1BQUEsYUFBQXFGLEVBQzVaLFNBQUF1aUQsR0FBQTFsRCxHQUF5RyxPQUExRkEsSUFBQW5CLFFBQUFtQixFQUFBMmxELFlBQUFwbUQsUUFBaUNxbUQsMEJBQUE1bEQsSUFBQTRsRCx5QkFBeUQsSUFBQTVsRCxFQUFBeWMsU0FBQXpjLEVBQUF1K0MsV0FBQXYrQyxFQUFxQyxTQUFBNmxELEdBQUE3bEQsR0FBZSxJQUFBby9DLEVBQUEsU0FBeUIsSUFBQWo4QyxHQUFUbkQsRUFBQSxLQUFBQSxLQUFTeTRCLFNBQWdILE9BQTVGdDFCLE9BQUFzMUIsU0FBQTZFLGNBQUEsUUFBQXdvQixhQUFBOWxELEVBQUEsV0FBNkRtRCxFQUFBLG1CQUFBQSxFQUFBbkQsSUFBK0JtRCxFQUFTLFNBQUE0aUQsR0FBQS9sRCxHQUFlLElBQUFtRCxFQUFBbkQsRUFBQWxDLEtBQWEsT0FBQWtDLElBQUF5bEQsV0FBQSxVQUFBemxELEVBQUFrQyxnQkFBQSxhQUFBaUIsR0FBQSxVQUFBQSxHQUV2VCxTQUFBNmlELEdBQUFobUQsR0FBZUEsRUFBQWltRCxnQkFBQWptRCxFQUFBaW1ELGNBRG5DLFNBQUFqbUQsR0FBZSxJQUFBbUQsRUFBQTRpRCxHQUFBL2xELEdBQUEsa0JBQUFuRSxFQUFBSyxPQUFBc0cseUJBQUF4QyxFQUFBNkMsWUFBQXpGLFVBQUErRixHQUFBckgsRUFBQSxHQUFBa0UsRUFBQW1ELEdBQXFHLElBQUFuRCxFQUFBM0MsZUFBQThGLFNBQUEsSUFBQXRILEdBQUEsbUJBQUFBLEVBQUFRLEtBQUEsbUJBQUFSLEVBQUFvTyxJQUFBLENBQXVHLElBQUFySyxFQUFBL0QsRUFBQVEsSUFBQWdFLEVBQUF4RSxFQUFBb08sSUFBaU0sT0FBN0svTixPQUFBQyxlQUFBNkQsRUFBQW1ELEdBQTJCeUssY0FBQSxFQUFBdlIsSUFBQSxXQUErQixPQUFBdUQsRUFBQWpFLEtBQUE0RixPQUFvQjBJLElBQUEsU0FBQWpLLEdBQWlCbEUsRUFBQSxHQUFBa0UsRUFBT0ssRUFBQTFFLEtBQUE0RixLQUFBdkIsTUFBa0I5RCxPQUFBQyxlQUFBNkQsRUFBQW1ELEdBQTJCL0csV0FBQVAsRUFBQU8sY0FBaUM4cEQsU0FBQSxXQUFvQixPQUFBcHFELEdBQVNxcUQsU0FBQSxTQUFBbm1ELEdBQXNCbEUsRUFBQSxHQUFBa0UsR0FBT29tRCxhQUFBLFdBQXlCcG1ELEVBQUFpbUQsY0FDdGYsWUFBS2ptRCxFQUFBbUQsTUFBOEJrakQsQ0FBQXJtRCxJQUF5QyxTQUFBc21ELEdBQUF0bUQsR0FBZSxJQUFBQSxFQUFBLFNBQWUsSUFBQW1ELEVBQUFuRCxFQUFBaW1ELGNBQXNCLElBQUE5aUQsRUFBQSxTQUFlLElBQUF0SCxFQUFBc0gsRUFBQStpRCxXQUFtQnBxRCxFQUFBLEdBQTJELE9BQWxEa0UsSUFBQWxFLEVBQUFpcUQsR0FBQS9sRCxLQUFBdW1ELFFBQUEsZUFBQXZtRCxFQUFBdkQsUUFBOEN1RCxFQUFBbEUsS0FBSUQsSUFBQXNILEVBQUFnakQsU0FBQW5tRCxJQUFBLEdBQzdOLElBQUF3bUQsR0FBQTlNLEVBQUEwQixtREFBQXFMLEdBQUEsY0FBQXRPLEdBQUEsbUJBQUE1N0MsZUFBQW03QyxJQUFBZ1AsR0FBQXZPLEdBQUE1N0MsT0FBQW03QyxJQUFBLHVCQUFBaVAsR0FBQXhPLEdBQUE1N0MsT0FBQW03QyxJQUFBLHNCQUFBa1AsR0FBQXpPLEdBQUE1N0MsT0FBQW03QyxJQUFBLHdCQUFBbVAsR0FBQTFPLEdBQUE1N0MsT0FBQW03QyxJQUFBLDJCQUFBb1AsR0FBQTNPLEdBQUE1N0MsT0FBQW03QyxJQUFBLHdCQUFBcVAsR0FBQTVPLEdBQUE1N0MsT0FBQW03QyxJQUFBLHdCQUFBc1AsR0FBQTdPLEdBQUE1N0MsT0FBQW03QyxJQUFBLHVCQUFBdVAsR0FBQTlPLEdBQUE1N0MsT0FBQW03QyxJQUFBLDBCQUFBd1AsR0FBQS9PLEdBQUE1N0MsT0FBQW03QyxJQUFBLDJCQUFBeVAsR0FBQWhQLEdBQUE1N0MsT0FBQW03QyxJQUFBLHFCQUNBLE1BQUEwUCxHQUFBLG1CQUFBN3FELGVBQUF3TyxTQUFxRCxTQUFBczhDLEdBQUFybkQsR0FBZSxjQUFBQSxHQUFBLGlCQUFBQSxFQUFBLEtBQTBFLG1CQUE3QkEsRUFBQW9uRCxJQUFBcG5ELEVBQUFvbkQsS0FBQXBuRCxFQUFBLGVBQTZCQSxFQUFBLEtBQzlJLFNBQUFzbkQsR0FBQXRuRCxHQUFlLFNBQUFBLEVBQUEsWUFBdUIsc0JBQUFBLEVBQUEsT0FBQUEsRUFBQXl0QyxhQUFBenRDLEVBQUFqRSxNQUFBLEtBQTRELG9CQUFBaUUsRUFBQSxPQUFBQSxFQUFnQyxPQUFBQSxHQUFVLEtBQUFpbkQsR0FBQSxrQkFBMEIsS0FBQUwsR0FBQSxpQkFBeUIsS0FBQUQsR0FBQSxlQUF1QixLQUFBRyxHQUFBLGlCQUF5QixLQUFBRCxHQUFBLG1CQUEyQixLQUFBTSxHQUFBLG9CQUE0QixvQkFBQW5uRCxFQUFBLENBQXdCLE9BQUFBLEVBQUFpNUMsVUFBbUIsS0FBQStOLEdBQUEseUJBQWlDLEtBQUFELEdBQUEseUJBQWlDLEtBQUFHLEdBQUEsWUFBQWxuRCxPQUFBNDZDLFFBQUFuTixhQUFBenRDLEVBQUFqRSxNQUFBLGtCQUFBaUUsRUFBQSxpQkFBOEYsc0JBQ2pmQSxFQUFBdWlDLE9BQUF2aUMsRUFBQSxJQUFBQSxFQUFBdW5ELGFBQUF2bkQsRUFBQXduRCxhQUFBLGFBQUFGLEdBQUF0bkQsR0FBdUUsWUFBWSxTQUFBeW5ELEdBQUF6bkQsR0FBZSxJQUFBbUQsRUFBQSxHQUFTLEdBQUduRCxFQUFBLE9BQUFBLEVBQUE0QixLQUFnQixzREFBQS9GLEVBQUFtRSxFQUFBMG5ELFlBQUE1ckQsRUFBQWtFLEVBQUEybkQsYUFBQS9uRCxFQUFBMG5ELEdBQUF0bkQsRUFBQWxDLE1BQW9HdUMsRUFBQSxLQUFXeEUsSUFBQXdFLEVBQUFpbkQsR0FBQXpyRCxFQUFBaUMsT0FBa0JqQyxFQUFBK0QsRUFBSUEsRUFBQSxHQUFLOUQsRUFBQThELEVBQUEsUUFBQTlELEVBQUE4ckQsU0FBQTdsRCxRQUFBMGtELEdBQUEsUUFBQTNxRCxFQUFBK3JELFdBQUEsSUFBQXhuRCxJQUFBVCxFQUFBLGdCQUFBUyxFQUFBLEtBQXdGQSxFQUFBLGFBQUF4RSxHQUFBLFdBQUErRCxFQUErQixNQUFBSSxFQUFRLFFBQUFLLEVBQUEsR0FBYThDLEdBQUE5QyxFQUFLTCxJQUFBNCtDLGFBQVc1K0MsR0FBUyxPQUFBbUQsRUFDN2EsSUFBQTJrRCxHQUFBLDhWQUFBQyxHQUFBN3JELE9BQUFrQixVQUFBQyxlQUFBMnFELE1BQTZZQyxNQUVyTCxTQUFBN3BELEdBQUE0QixFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUE4RCxHQUFzQjJCLEtBQUEybUQsZ0JBQUEsSUFBQS9rRCxHQUFBLElBQUFBLEdBQUEsSUFBQUEsRUFBeUM1QixLQUFBNG1ELGNBQUFyc0QsRUFBcUJ5RixLQUFBNm1ELG1CQUFBeG9ELEVBQTBCMkIsS0FBQThtRCxnQkFBQXhzRCxFQUF1QjBGLEtBQUErbUQsYUFBQXRvRCxFQUFvQnVCLEtBQUF6RCxLQUFBcUYsRUFBWSxJQUFBN0UsTUFDN1gsdUlBQUEwQyxNQUFBLEtBQUFrTCxRQUFBLFNBQUFsTSxHQUFzSzFCLEdBQUEwQixHQUFBLElBQUE1QixHQUFBNEIsRUFBQSxLQUFBQSxFQUFBLFVBQTRCLHNHQUFBa00sUUFBQSxTQUFBbE0sR0FBNEgsSUFBQW1ELEVBQUFuRCxFQUFBLEdBQVcxQixHQUFBNkUsR0FBQSxJQUFBL0UsR0FBQStFLEVBQUEsS0FBQW5ELEVBQUEsWUFBK0Isb0RBQUFrTSxRQUFBLFNBQUFsTSxHQUF5RTFCLEdBQUEwQixHQUFBLElBQUE1QixHQUFBNEIsRUFBQSxLQUFBQSxFQUFBa0MsY0FBQSxTQUNqYix1RUFBQWdLLFFBQUEsU0FBQWxNLEdBQTRGMUIsR0FBQTBCLEdBQUEsSUFBQTVCLEdBQUE0QixFQUFBLEtBQUFBLEVBQUEsUUFBNEIsZ01BQUFnQixNQUFBLEtBQUFrTCxRQUFBLFNBQUFsTSxHQUErTjFCLEdBQUEwQixHQUFBLElBQUE1QixHQUFBNEIsRUFBQSxLQUFBQSxFQUFBa0MsY0FBQSxTQUEwQyx5Q0FBQWdLLFFBQUEsU0FBQWxNLEdBQThEMUIsR0FBQTBCLEdBQUEsSUFBQTVCLEdBQUE0QixFQUFBLEtBQUFBLEVBQUEsU0FDL2Isc0JBQUFrTSxRQUFBLFNBQUFsTSxHQUEyQzFCLEdBQUEwQixHQUFBLElBQUE1QixHQUFBNEIsRUFBQSxLQUFBQSxFQUFBLFNBQTRCLDZCQUFBa00sUUFBQSxTQUFBbE0sR0FBa0QxQixHQUFBMEIsR0FBQSxJQUFBNUIsR0FBQTRCLEVBQUEsS0FBQUEsRUFBQSxTQUE0QixtQkFBQWtNLFFBQUEsU0FBQWxNLEdBQXdDMUIsR0FBQTBCLEdBQUEsSUFBQTVCLEdBQUE0QixFQUFBLEtBQUFBLEVBQUFrQyxjQUFBLFFBQTBDLElBQUFxbUQsR0FBQSxnQkFBdUIsU0FBQUMsR0FBQXhvRCxHQUFlLE9BQUFBLEVBQUEsR0FBQXEyQyxjQUc3USxTQUFBb1MsR0FBQXpvRCxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQXFCLElBQUE4RCxFQUFBdEIsR0FBQWpCLGVBQUE4RixHQUFBN0UsR0FBQTZFLEdBQUEsTUFBb0MsT0FBQXZELEVBQUEsSUFBQUEsRUFBQTlCLE1BQUFoQyxJQUFBLEVBQUFxSCxFQUFBaEIsU0FBQSxNQUFBZ0IsRUFBQSxVQUFBQSxFQUFBLFlBQUFBLEVBQUEsVUFBQUEsRUFBQSxRQU56RCxTQUFBbkQsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFxQixVQUFBcUgsUUFBQSxJQUFBQSxHQUQ4RixTQUFBbkQsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFxQixVQUFBRCxHQUFBLElBQUFBLEVBQUFpQyxLQUFBLFNBQWlDLGNBQUFxRixHQUFpQixxQ0FBdUMscUJBQUFySCxJQUE2QixPQUFBRCxLQUFBcXNELGdCQUFrRSxXQUE3QmxvRCxJQUFBa0MsY0FBQXFCLE1BQUEsT0FBNkIsVUFBQXZELEdBQStCLGtCQUMxVTBvRCxDQUFBMW9ELEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBQSxTQUEwRCxHQUFBQSxFQUFBLFNBQWMsVUFBQUQsRUFBQSxPQUFBQSxFQUFBaUMsTUFBMkIsY0FBQXFGLEVBQWdCLGtCQUFBQSxFQUFvQixjQUFBa0IsTUFBQWxCLEdBQXVCLGNBQUFrQixNQUFBbEIsSUFBQSxFQUFBQSxFQUE0QixTQU1uRHdsRCxDQUFBeGxELEVBQUF0SCxFQUFBK0QsRUFBQTlELEtBQUFELEVBQUEsTUFBQUMsR0FBQSxPQUFBOEQsRUFQNUosU0FBQUksR0FBZSxRQUFBK25ELEdBQUFwc0QsS0FBQXNzRCxHQUFBam9ELEtBQTBCK25ELEdBQUFwc0QsS0FBQXFzRCxHQUFBaG9ELEtBQTBCOG5ELEdBQUE3bEQsS0FBQWpDLEdBQUFpb0QsR0FBQWpvRCxJQUFBLEdBQThCZ29ELEdBQUFob0QsSUFBQSxHQUFTLElBT2tENG9ELENBQUF6bEQsS0FBQSxPQUFBdEgsRUFBQW1FLEVBQUE2b0QsZ0JBQUExbEQsR0FBQW5ELEVBQUE4bEQsYUFBQTNpRCxFQUFBLEdBQUF0SCxJQUFBK0QsRUFBQXlvRCxnQkFBQXJvRCxFQUFBSixFQUFBMG9ELGNBQUEsT0FBQXpzRCxFQUFBLElBQUErRCxFQUFBOUIsTUFBQSxHQUFBakMsR0FBQXNILEVBQUF2RCxFQUFBdW9ELGNBQUFyc0QsRUFBQThELEVBQUF3b0QsbUJBQUEsT0FBQXZzRCxFQUFBbUUsRUFBQTZvRCxnQkFBQTFsRCxJQUFBdEgsRUFBQSxLQUFBK0QsSUFBQTlCLE9BQUEsSUFBQThCLElBQUEsSUFBQS9ELEVBQUEsTUFBQUEsRUFBQUMsRUFBQWtFLEVBQUE4b0QsZUFBQWh0RCxFQUFBcUgsRUFBQXRILEdBQUFtRSxFQUFBOGxELGFBQUEzaUQsRUFBQXRILE1BQzVKLFNBQUFrdEQsR0FBQS9vRCxHQUFlLGNBQUFBLEdBQWlCLDRFQUFBQSxFQUFtRixrQkFBa0IsU0FBQWdwRCxHQUFBaHBELEVBQUFtRCxHQUFpQixJQUFBdEgsRUFBQXNILEVBQUFvakQsUUFBZ0IsT0FBQXRwRCxLQUFXa0csR0FBSThsRCxvQkFBQSxFQUFBQyxrQkFBQSxFQUFBenNELFdBQUEsRUFBQThwRCxRQUFBLE1BQUExcUQsSUFBQW1FLEVBQUFtcEQsY0FBQUMsaUJBQ3JMLFNBQUFDLEdBQUFycEQsRUFBQW1ELEdBQWlCLElBQUF0SCxFQUFBLE1BQUFzSCxFQUFBK2xELGFBQUEsR0FBQS9sRCxFQUFBK2xELGFBQUFwdEQsRUFBQSxNQUFBcUgsRUFBQW9qRCxRQUFBcGpELEVBQUFvakQsUUFBQXBqRCxFQUFBOGxELGVBQTBGcHRELEVBQUFrdEQsR0FBQSxNQUFBNWxELEVBQUExRyxNQUFBMEcsRUFBQTFHLE1BQUFaLEdBQThCbUUsRUFBQW1wRCxlQUFpQkMsZUFBQXR0RCxFQUFBd3RELGFBQUF6dEQsRUFBQTB0RCxXQUFBLGFBQUFwbUQsRUFBQXJGLE1BQUEsVUFBQXFGLEVBQUFyRixLQUFBLE1BQUFxRixFQUFBb2pELFFBQUEsTUFBQXBqRCxFQUFBMUcsT0FBZ0gsU0FBQStzRCxHQUFBeHBELEVBQUFtRCxHQUE2QixPQUFaQSxJQUFBb2pELFVBQVlrQyxHQUFBem9ELEVBQUEsVUFBQW1ELEdBQUEsR0FDdlMsU0FBQXNtRCxHQUFBenBELEVBQUFtRCxHQUFpQnFtRCxHQUFBeHBELEVBQUFtRCxHQUFRLElBQUF0SCxFQUFBa3RELEdBQUE1bEQsRUFBQTFHLE9BQUFYLEVBQUFxSCxFQUFBckYsS0FBMkIsU0FBQWpDLEVBQUEsV0FBQUMsR0FBNEIsSUFBQUQsR0FBQSxLQUFBbUUsRUFBQXZELE9BQUF1RCxFQUFBdkQsT0FBQVosS0FBQW1FLEVBQUF2RCxNQUFBLEdBQUFaLEdBQWdEbUUsRUFBQXZELFFBQUEsR0FBQVosSUFBQW1FLEVBQUF2RCxNQUFBLEdBQUFaLFFBQW9DLGNBQUFDLEdBQUEsVUFBQUEsRUFBOEQsWUFBM0JrRSxFQUFBNm9ELGdCQUFBLFNBQWtDMWxELEVBQUE5RixlQUFBLFNBQUFxc0QsR0FBQTFwRCxFQUFBbUQsRUFBQXJGLEtBQUFqQyxHQUFBc0gsRUFBQTlGLGVBQUEsaUJBQUFxc0QsR0FBQTFwRCxFQUFBbUQsRUFBQXJGLEtBQUFpckQsR0FBQTVsRCxFQUFBK2xELGVBQTJHLE1BQUEvbEQsRUFBQW9qRCxTQUFBLE1BQUFwakQsRUFBQThsRCxpQkFBQWpwRCxFQUFBaXBELGlCQUFBOWxELEVBQUE4bEQsZ0JBQ3BWLFNBQUFVLEdBQUEzcEQsRUFBQW1ELEVBQUF0SCxHQUFtQixHQUFBc0gsRUFBQTlGLGVBQUEsVUFBQThGLEVBQUE5RixlQUFBLGlCQUFnRSxJQUFBdkIsRUFBQXFILEVBQUFyRixLQUFhLGdCQUFBaEMsR0FBQSxVQUFBQSxRQUFBLElBQUFxSCxFQUFBMUcsT0FBQSxPQUFBMEcsRUFBQTFHLE9BQUEsT0FBeUUwRyxFQUFBLEdBQUFuRCxFQUFBbXBELGNBQUFHLGFBQWtDeHRELEVBQUFrRSxFQUFBdkQsTUFBVVosR0FBQXNILElBQUFySCxJQUFBa0UsRUFBQXZELE1BQUEwRyxHQUFzQm5ELEVBQUFrcEQsYUFBQS9sRCxFQUEwQixNQUFUdEgsRUFBQW1FLEVBQUFqRSxRQUFTaUUsRUFBQWpFLEtBQUEsSUFBb0JpRSxFQUFBaXBELGdCQUFBanBELEVBQUFpcEQsZUFBbUNqcEQsRUFBQWlwRCxpQkFBQWpwRCxFQUFBbXBELGNBQUFDLGVBQWtELEtBQUF2dEQsSUFBQW1FLEVBQUFqRSxLQUFBRixHQUM5VyxTQUFBNnRELEdBQUExcEQsRUFBQW1ELEVBQUF0SCxHQUFtQixXQUFBc0gsR0FBQW5ELEVBQUE0cEQsY0FBQUMsZ0JBQUE3cEQsSUFBQSxNQUFBbkUsRUFBQW1FLEVBQUFrcEQsYUFBQSxHQUFBbHBELEVBQUFtcEQsY0FBQUcsYUFBQXRwRCxFQUFBa3BELGVBQUEsR0FBQXJ0RCxJQUFBbUUsRUFBQWtwRCxhQUFBLEdBQUFydEQsSUFQbkIsMGpDQUFBbUYsTUFBQSxLQUFBa0wsUUFBQSxTQUFBbE0sR0FBeWxDLElBQUFtRCxFQUFBbkQsRUFBQStCLFFBQUF3bUQsR0FDemxDQyxJQUFJbHFELEdBQUE2RSxHQUFBLElBQUEvRSxHQUFBK0UsRUFBQSxLQUFBbkQsRUFBQSxRQUE0QixzRkFBQWdCLE1BQUEsS0FBQWtMLFFBQUEsU0FBQWxNLEdBQXFILElBQUFtRCxFQUFBbkQsRUFBQStCLFFBQUF3bUQsR0FBQUMsSUFBdUJscUQsR0FBQTZFLEdBQUEsSUFBQS9FLEdBQUErRSxFQUFBLEtBQUFuRCxFQUFBLG1DQUFzRCxtQ0FBQWtNLFFBQUEsU0FBQWxNLEdBQXdELElBQUFtRCxFQUFBbkQsRUFBQStCLFFBQUF3bUQsR0FBQUMsSUFBdUJscUQsR0FBQTZFLEdBQUEsSUFBQS9FLEdBQUErRSxFQUFBLEtBQUFuRCxFQUFBLDBDQUE4RDFCLEdBQUF3ckQsU0FBQSxJQUFBMXJELEdBQUEsaUNBTXJNLElBQUEyckQsSUFBUUMsUUFBUXhOLHlCQUF5Qm1HLFFBQUEsV0FBQUMsU0FBQSxtQkFBOEM5TyxhQUFBLDhEQUFBOXlDLE1BQUEsT0FBeUYsU0FBQWlwRCxHQUFBanFELEVBQUFtRCxFQUFBdEgsR0FBOEUsT0FBM0RtRSxFQUFBc0ssR0FBQTgyQyxVQUFBMkksR0FBQUMsT0FBQWhxRCxFQUFBbUQsRUFBQXRILElBQStCaUMsS0FBQSxTQUFnQnFtRCxHQUFBdG9ELEdBQU1zakQsRUFBQW4vQyxHQUFNQSxFQUFTLElBQUFrcUQsR0FBQSxLQUFBQyxHQUFBLEtBQW9CLFNBQUFDLEdBQUFwcUQsR0FBZWsrQyxFQUFBbCtDLEdBQUEsR0FDcGQsU0FBQXFxRCxHQUFBcnFELEdBQTJCLEdBQUFzbUQsR0FBWjdILEVBQUF6K0MsSUFBWSxPQUFBQSxFQUFrQixTQUFBc3FELEdBQUF0cUQsRUFBQW1ELEdBQWlCLGNBQUFuRCxFQUFBLE9BQUFtRCxFQUF5QixJQUFBb25ELElBQUEsRUFBa0YsU0FBQUMsS0FBY04sUUFBQU8sWUFBQSxtQkFBQUMsSUFBQVAsR0FBQUQsR0FBQSxNQUF1RCxTQUFBUSxHQUFBMXFELEdBQWUsVUFBQUEsRUFBQXNvRCxjQUFBK0IsR0FBQUYsS0FBQTFGLEdBQUEyRixHQUFBcHFELEVBQUFpcUQsR0FBQUUsR0FBQW5xRCxFQUFBMGxELEdBQUExbEQsS0FBOEQsU0FBQTJxRCxHQUFBM3FELEVBQUFtRCxFQUFBdEgsR0FBbUIsVUFBQW1FLEdBQUF3cUQsS0FBQUwsR0FBQXR1RCxHQUFBcXVELEdBQUEvbUQsR0FBQXluRCxZQUFBLG1CQUFBRixLQUFBLFNBQUExcUQsR0FBQXdxRCxLQUFvRixTQUFBSyxHQUFBN3FELEdBQWUsdUJBQUFBLEdBQUEsVUFBQUEsR0FBQSxZQUFBQSxFQUFBLE9BQUFxcUQsR0FBQUYsSUFDamIsU0FBQVcsR0FBQTlxRCxFQUFBbUQsR0FBaUIsYUFBQW5ELEVBQUEsT0FBQXFxRCxHQUFBbG5ELEdBQTRCLFNBQUE0bkQsR0FBQS9xRCxFQUFBbUQsR0FBaUIsYUFBQW5ELEdBQUEsV0FBQUEsRUFBQSxPQUFBcXFELEdBQUFsbkQsR0FEbUNpOEMsSUFBQW1MLEdBQUExRSxHQUFBLFlBQUFwdEIsU0FBQTRwQixjQUFBLEVBQUE1cEIsU0FBQTRwQixlQUVqRyxJQUFBMkksSUFBUTFPLFdBQUF5TixHQUFBa0IsdUJBQUFWLEdBQUFsTyxjQUFBLFNBQUFyOEMsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUF3RSxJQUFBOEQsRUFBQXVELEVBQUFzN0MsRUFBQXQ3QyxHQUFBNUQsT0FBQWMsT0FBQSxFQUFBbzZCLE9BQUEsRUFBQXZsQixFQUFBdFYsRUFBQTZsRCxVQUFBN2xELEVBQUE2bEQsU0FBQXZqRCxjQUFtUCxHQUFySyxXQUFBZ1QsR0FBQSxVQUFBQSxHQUFBLFNBQUF0VixFQUFBOUIsS0FBQXVDLEVBQUFpcUQsR0FBQTlFLEdBQUE1bEQsR0FBQTJxRCxHQUFBbHFELEVBQUEwcUQsSUFBQTFxRCxFQUFBd3FELEdBQUFwd0IsRUFBQWt3QixLQUFBejFDLEVBQUF0VixFQUFBNmxELFdBQUEsVUFBQXZ3QyxFQUFBaFQsZ0JBQUEsYUFBQXRDLEVBQUE5QixNQUFBLFVBQUE4QixFQUFBOUIsUUFBQXVDLEVBQUF5cUQsSUFBcUt6cUQsUUFBQUwsRUFBQW1ELElBQUEsT0FBQThtRCxHQUFBNXBELEVBQUF4RSxFQUFBQyxHQUFrQzIrQixLQUFBejZCLEVBQUFKLEVBQUF1RCxHQUFZLFNBQUFuRCxNQUFBSixFQUFBdXBELGdCQUFBbnBELEVBQUF1cEQsWUFBQSxXQUFBM3BELEVBQUE5QixNQUFBNHJELEdBQUE5cEQsRUFBQSxTQUFBQSxFQUFBbkQsU0FBMEZ5dUQsR0FBQTVnRCxHQUFBeTNDLFFBQWN0ZCxLQUFBLEtBQUEyZSxPQUFBLE9BQXNCK0gsSUFBTUMsSUFBQSxTQUNyZkMsUUFBQSxVQUFBQyxLQUFBLFVBQUFDLE1BQUEsWUFBbUQsU0FBQUMsR0FBQXhyRCxHQUFlLElBQUFtRCxFQUFBNUIsS0FBQW8vQyxZQUF1QixPQUFBeDlDLEVBQUFzb0QsaUJBQUF0b0QsRUFBQXNvRCxpQkFBQXpyRCxRQUFBbXJELEdBQUFuckQsT0FBQW1ELEVBQUFuRCxHQUFvRSxTQUFBMHJELEtBQWMsT0FBQUYsR0FDM0ssSUFBQUcsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLElBQUEsRUFBQUMsSUFBQSxFQUFBQyxHQUFBYixHQUFBbkosUUFBd0NpSyxRQUFBLEtBQUFDLFFBQUEsS0FBQUMsUUFBQSxLQUFBQyxRQUFBLEtBQUFDLE1BQUEsS0FBQUMsTUFBQSxLQUFBM0ksUUFBQSxLQUFBNEksU0FBQSxLQUFBM0ksT0FBQSxLQUFBQyxRQUFBLEtBQUE2SCxpQkFBQUMsR0FBQWEsT0FBQSxLQUFBQyxRQUFBLEtBQUFDLGNBQUEsU0FBQXpzRCxHQUFxTSxPQUFBQSxFQUFBeXNELGdCQUFBenNELEVBQUEwc0QsY0FBQTFzRCxFQUFBMmxELFdBQUEzbEQsRUFBQTJzRCxVQUFBM3NELEVBQUEwc0QsY0FBaUZFLFVBQUEsU0FBQTVzRCxHQUF1QixpQkFBQUEsRUFBQSxPQUFBQSxFQUFBNHNELFVBQXNDLElBQUF6cEQsRUFBQXdvRCxHQUFzQixPQUFiQSxHQUFBM3JELEVBQUFnc0QsUUFBYUgsR0FBQSxjQUFBN3JELEVBQUFsQyxLQUFBa0MsRUFBQWdzRCxRQUFBN29ELEVBQUEsR0FBQTBvRCxJQUFBLE1BQXVEZ0IsVUFBQSxTQUFBN3NELEdBQXVCLGlCQUFBQSxFQUFBLE9BQUFBLEVBQUE2c0QsVUFDL2QsSUFBQTFwRCxFQUFBeW9ELEdBQXNCLE9BQWJBLEdBQUE1ckQsRUFBQWlzRCxRQUFhSCxHQUFBLGNBQUE5ckQsRUFBQWxDLEtBQUFrQyxFQUFBaXNELFFBQUE5b0QsRUFBQSxHQUFBMm9ELElBQUEsUUFBd0RnQixHQUFBZixHQUFBaEssUUFBZ0JnTCxVQUFBLEtBQUFDLE1BQUEsS0FBQUMsT0FBQSxLQUFBQyxTQUFBLEtBQUFDLG1CQUFBLEtBQUFDLE1BQUEsS0FBQUMsTUFBQSxLQUFBQyxNQUFBLEtBQUFDLFlBQUEsS0FBQUMsVUFBQSxPQUE2SUMsSUFBTUMsWUFBWWhSLGlCQUFBLGVBQUE1SSxjQUFBLHlCQUFzRTZaLFlBQWFqUixpQkFBQSxlQUFBNUksY0FBQSx5QkFBc0U4WixjQUFlbFIsaUJBQUEsaUJBQUE1SSxjQUFBLDZCQUE0RStaLGNBQWVuUixpQkFBQSxpQkFDaGdCNUksY0FBQSw4QkFBMkNnYSxJQUFLeFIsV0FBQW1SLEdBQUFwUixjQUFBLFNBQUFyOEMsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUE4QyxJQUFBOEQsRUFBQSxjQUFBSSxHQUFBLGdCQUFBQSxFQUFBSyxFQUFBLGFBQUFMLEdBQUEsZUFBQUEsRUFBNEUsR0FBQUosSUFBQS9ELEVBQUE0d0QsZUFBQTV3RCxFQUFBNndELGVBQUFyc0QsSUFBQVQsRUFBQSxZQUFrTSxHQUF2SUEsRUFBQTlELEVBQUF5RCxTQUFBekQsS0FBQThELEVBQUE5RCxFQUFBOHRELGVBQUFocUQsRUFBQW11RCxhQUFBbnVELEVBQUFvdUQsYUFBQXp1RCxPQUEwRWMsS0FBQThDLE9BQUF0SCxFQUFBNHdELGVBQUE1d0QsRUFBQTh3RCxXQUFBck8sRUFBQW43QyxHQUFBLE1BQUE5QyxFQUFBLEtBQTZEQSxJQUFBOEMsRUFBQSxZQUFxQixJQUFBczNCLE9BQUEsRUFBQXZsQixPQUFBLEVBQUF3RyxPQUFBLEVBQUFqZ0IsT0FBQSxFQUF3QyxhQUFBdUUsR0FBQSxjQUFBQSxHQUFBeTZCLEVBQUFzeEIsR0FBQTcyQyxFQUFBdTRDLEdBQUFFLFdBQUFqeUMsRUFBQSt4QyxHQUFBQyxXQUFBanlELEVBQUEsU0FDemEsZUFBQXVFLEdBQUEsZ0JBQUFBLElBQUF5NkIsRUFBQXF5QixHQUFBNTNDLEVBQUF1NEMsR0FBQUksYUFBQW55QyxFQUFBK3hDLEdBQUFHLGFBQUFueUQsRUFBQSxXQUFpRyxJQUFBRyxFQUFBLE1BQUF5RSxFQUFBVCxFQUFBNitDLEVBQUFwK0MsR0FBc0wsR0FBaEtULEVBQUEsTUFBQXVELEVBQUF2RCxFQUFBNitDLEVBQUF0N0MsSUFBa0JuRCxFQUFBeTZCLEVBQUEybUIsVUFBQWxzQyxFQUFBN1UsRUFBQXhFLEVBQUFDLElBQXVCZ0MsS0FBQXJDLEVBQUEsUUFBaUJ1RSxFQUFBbkIsT0FBQWpELEVBQVdvRSxFQUFBeXNELGNBQUE3c0QsR0FBa0IvRCxFQUFBNCtCLEVBQUEybUIsVUFBQTFsQyxFQUFBdlksRUFBQXRILEVBQUFDLElBQXVCZ0MsS0FBQXJDLEVBQUEsUUFBaUJJLEVBQUFnRCxPQUFBZSxFQUFXL0QsRUFBQTR3RCxjQUFBN3dELEVBQWtCRSxFQUFBcUgsRUFBSTlDLEdBQUF2RSxFQUFBa0UsRUFBQSxDQUF1QixJQUFSSixFQUFBOUQsRUFBSUwsRUFBQSxFQUFJZy9CLEVBQVp0M0IsRUFBQTlDLEVBQW9CbzZCLEVBQUVBLEVBQUFra0IsRUFBQWxrQixHQUFBaC9CLElBQWdCLElBQUpnL0IsRUFBQSxFQUFJL2UsRUFBQTliLEVBQVE4YixFQUFFQSxFQUFBaWpDLEVBQUFqakMsR0FBQStlLElBQVksS0FBSyxFQUFBaC9CLEVBQUFnL0IsR0FBTXQzQixFQUFBdzdDLEVBQUF4N0MsR0FBQTFILElBQWEsS0FBSyxFQUFBZy9CLEVBQUFoL0IsR0FBTW1FLEVBQUErK0MsRUFBQS8rQyxHQUFBNjZCLElBQWEsS0FBS2gvQixLQUFJLENBQUUsR0FBQTBILElBQUF2RCxHQUFBdUQsSUFBQXZELEVBQUFxdUQsVUFBQSxNQUFBanVELEVBQWtDbUQsRUFBQXc3QyxFQUFBeDdDLEdBQVF2RCxFQUFBKytDLEVBQUEvK0MsR0FBUXVELEVBQUEsVUFBT0EsRUFBQSxLQUFnQixJQUFKdkQsRUFBQXVELEVBQUlBLEtBQVM5QyxPQUFBVCxJQUMvZCxRQUQwZW5FLEVBQ3RmNEUsRUFBQTR0RCxZQUFZeHlELElBQUFtRSxJQUF5QnVELEVBQUFtQyxLQUFBakYsR0FBVUEsRUFBQXMrQyxFQUFBdCtDLEdBQVEsSUFBQUEsS0FBU3ZFLE9BQUE4RCxJQUF5QixRQUFkbkUsRUFBQUssRUFBQW15RCxZQUFjeHlELElBQUFtRSxJQUF5QlMsRUFBQWlGLEtBQUF4SixHQUFVQSxFQUFBNmlELEVBQUE3aUQsR0FBUSxJQUFBQSxFQUFBLEVBQVFBLEVBQUFxSCxFQUFBaEIsT0FBV3JHLElBQUFtakQsRUFBQTk3QyxFQUFBckgsR0FBQSxVQUFBa0UsR0FBeUIsSUFBQWxFLEVBQUF1RSxFQUFBOEIsT0FBZSxFQUFBckcsS0FBTW1qRCxFQUFBNStDLEVBQUF2RSxHQUFBLFdBQUFELEdBQXVCLE9BQUFtRSxFQUFBbkUsS0FBYXF5RCxHQUFBaHlELE9BQUFrQixVQUFBQyxlQUFvQyxTQUFBOHdELEdBQUFudUQsRUFBQW1ELEdBQWlCLE9BQUFuRCxJQUFBbUQsRUFBQSxJQUFBbkQsR0FBQSxJQUFBbUQsR0FBQSxFQUFBbkQsR0FBQSxFQUFBbUQsRUFBQW5ELE1BQUFtRCxLQUM5UixTQUFBbU4sR0FBQXRRLEVBQUFtRCxHQUFpQixHQUFBZ3JELEdBQUFudUQsRUFBQW1ELEdBQUEsU0FBb0Isb0JBQUFuRCxHQUFBLE9BQUFBLEdBQUEsaUJBQUFtRCxHQUFBLE9BQUFBLEVBQUEsU0FBeUUsSUFBQXRILEVBQUFLLE9BQUFnTSxLQUFBbEksR0FBQWxFLEVBQUFJLE9BQUFnTSxLQUFBL0UsR0FBc0MsR0FBQXRILEVBQUFzRyxTQUFBckcsRUFBQXFHLE9BQUEsU0FBZ0MsSUFBQXJHLEVBQUEsRUFBUUEsRUFBQUQsRUFBQXNHLE9BQVdyRyxJQUFBLElBQUFveUQsR0FBQXZ5RCxLQUFBd0gsRUFBQXRILEVBQUFDLE1BQUFxeUQsR0FBQW51RCxFQUFBbkUsRUFBQUMsSUFBQXFILEVBQUF0SCxFQUFBQyxLQUFBLFNBQXVELFNBQVMsU0FBQXN5RCxHQUFBcHVELEdBQWUsSUFBQW1ELEVBQUFuRCxFQUFRLEdBQUFBLEVBQUFpdUQsVUFBQSxLQUFvQjlxRCxFQUFBeTdDLFFBQVN6N0MsSUFBQXk3QyxXQUFZLENBQUssU0FBQXo3QyxFQUFBa3JELFdBQUEsU0FBZ0MsS0FBS2xyRCxFQUFBeTdDLFFBQVMsVUFBQXo3QyxJQUFBeTdDLFFBQUF5UCxXQUFBLFNBQTRDLFdBQUFsckQsRUFBQXZCLElBQUEsSUFBcUIsU0FBQTBzRCxHQUFBdHVELEdBQWUsSUFBQW91RCxHQUFBcHVELElBQUEyUSxFQUFBLE9BRTVWLFNBQUE0OUMsR0FBQXZ1RCxHQUF1QixLQUFSQSxFQUQ3SCxTQUFBQSxHQUFlLElBQUFtRCxFQUFBbkQsRUFBQWl1RCxVQUFrQixJQUFBOXFELEVBQUEsWUFBQUEsRUFBQWlyRCxHQUFBcHVELEtBQUEyUSxFQUFBLFdBQUF4TixFQUFBLEtBQUFuRCxFQUF3RCxRQUFBbkUsRUFBQW1FLEVBQUFsRSxFQUFBcUgsSUFBaUIsQ0FBRSxJQUFBdkQsRUFBQS9ELEVBQUEraUQsT0FBQXYrQyxFQUFBVCxJQUFBcXVELFVBQUEsS0FBb0MsSUFBQXJ1RCxJQUFBUyxFQUFBLE1BQWdCLEdBQUFULEVBQUE0dUQsUUFBQW51RCxFQUFBbXVELE1BQUEsQ0FBc0IsUUFBQS96QixFQUFBNzZCLEVBQUE0dUQsTUFBa0IvekIsR0FBRSxDQUFFLEdBQUFBLElBQUE1K0IsRUFBQSxPQUFBeXlELEdBQUExdUQsR0FBQUksRUFBd0IsR0FBQXk2QixJQUFBMytCLEVBQUEsT0FBQXd5RCxHQUFBMXVELEdBQUF1RCxFQUF3QnMzQixJQUFBZzBCLFFBQVk5OUMsRUFBQSxPQUFTLEdBQUE5VSxFQUFBK2lELFNBQUE5aUQsRUFBQThpRCxPQUFBL2lELEVBQUErRCxFQUFBOUQsRUFBQXVFLE1BQStCLENBQUtvNkIsR0FBQSxFQUFLLFFBQUF2bEIsRUFBQXRWLEVBQUE0dUQsTUFBa0J0NUMsR0FBRSxDQUFFLEdBQUFBLElBQUFyWixFQUFBLENBQVU0K0IsR0FBQSxFQUFLNStCLEVBQUErRCxFQUFJOUQsRUFBQXVFLEVBQUksTUFBTSxHQUFBNlUsSUFBQXBaLEVBQUEsQ0FBVTIrQixHQUFBLEVBQUszK0IsRUFBQThELEVBQUkvRCxFQUFBd0UsRUFBSSxNQUFNNlUsSUFBQXU1QyxRQUFZLElBQUFoMEIsRUFBQSxDQUFPLElBQUF2bEIsRUFBQTdVLEVBQUFtdUQsTUFBY3Q1QyxHQUFFLENBQUUsR0FBQUEsSUFBQXJaLEVBQUEsQ0FBVTQrQixHQUFBLEVBQUs1K0IsRUFBQXdFLEVBQUl2RSxFQUFBOEQsRUFBSSxNQUFNLEdBQUFzVixJQUFBcFosRUFBQSxDQUFVMitCLEdBQUEsRUFBSzMrQixFQUFBdUUsRUFBSXhFLEVBQUErRCxFQUFJLE1BQU1zVixJQUFBdTVDLFFBQVloMEIsR0FDcmY5cEIsRUFBQSxRQUFpQjlVLEVBQUFveUQsWUFBQW55RCxHQUFBNlUsRUFBQSxPQUEwRCxPQUExQixJQUFBOVUsRUFBQStGLEtBQUErTyxFQUFBLE9BQTBCOVUsRUFBQW1pRCxVQUFBdEYsVUFBQTc4QyxFQUFBbUUsRUFBQW1ELEVBQWtEdXJELENBQUExdUQsSUFBUSxZQUFrQixRQUFBbUQsRUFBQW5ELElBQWEsQ0FBRSxPQUFBbUQsRUFBQXZCLEtBQUEsSUFBQXVCLEVBQUF2QixJQUFBLE9BQUF1QixFQUFpQyxHQUFBQSxFQUFBcXJELE1BQUFyckQsRUFBQXFyRCxNQUFBNVAsT0FBQXo3QyxNQUFBcXJELFVBQXNDLENBQUssR0FBQXJyRCxJQUFBbkQsRUFBQSxNQUFlLE1BQUttRCxFQUFBc3JELFNBQVcsQ0FBRSxJQUFBdHJELEVBQUF5N0MsUUFBQXo3QyxFQUFBeTdDLFNBQUE1K0MsRUFBQSxZQUF1Q21ELElBQUF5N0MsT0FBV3o3QyxFQUFBc3JELFFBQUE3UCxPQUFBejdDLEVBQUF5N0MsT0FBMEJ6N0MsSUFBQXNyRCxTQUFhLFlBQzVXLElBQUFFLEdBQUFya0QsR0FBQXkzQyxRQUFpQjZNLGNBQUEsS0FBQUMsWUFBQSxLQUFBQyxjQUFBLE9BQXVEQyxHQUFBemtELEdBQUF5M0MsUUFBZWlOLGNBQUEsU0FBQWh2RCxHQUEwQix3QkFBQUEsSUFBQWd2RCxjQUFBenZELE9BQUF5dkQsaUJBQWdFQyxHQUFBL0QsR0FBQW5KLFFBQWdCMEssY0FBQSxPQUFxQixTQUFBeUMsR0FBQWx2RCxHQUFlLElBQUFtRCxFQUFBbkQsRUFBQWtqRCxRQUF1RixNQUF2RSxhQUFBbGpELEVBQUEsS0FBQUEsSUFBQW12RCxXQUFBLEtBQUFoc0QsSUFBQW5ELEVBQUEsSUFBQUEsRUFBQW1ELEVBQXdELEtBQUFuRCxNQUFBLElBQWUsSUFBQUEsR0FBQSxLQUFBQSxJQUFBLEVBQzVULElBQUFvdkQsSUFBUUMsSUFBQSxTQUFBQyxTQUFBLElBQUFDLEtBQUEsWUFBQUMsR0FBQSxVQUFBQyxNQUFBLGFBQUFDLEtBQUEsWUFBQUMsSUFBQSxTQUFBQyxJQUFBLEtBQUFDLEtBQUEsY0FBQUMsS0FBQSxjQUFBQyxPQUFBLGFBQUFDLGdCQUFBLGdCQUEyTUMsSUFBS0MsRUFBQSxZQUFBQyxFQUFBLE1BQUFDLEdBQUEsUUFBQUMsR0FBQSxRQUFBQyxHQUFBLFFBQUFDLEdBQUEsVUFBQUMsR0FBQSxNQUFBQyxHQUFBLFFBQUFDLEdBQUEsV0FBQUMsR0FBQSxTQUFBQyxHQUFBLElBQUFDLEdBQUEsU0FBQUMsR0FBQSxXQUFBQyxHQUFBLE1BQUFDLEdBQUEsT0FBQUMsR0FBQSxZQUFBQyxHQUFBLFVBQUFDLEdBQUEsYUFBQUMsR0FBQSxZQUFBQyxHQUFBLFNBQUFDLEdBQUEsU0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUN4TkMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsVUFBQUMsSUFBQSxhQUFBQyxJQUFBLFFBQXFIQyxHQUFBcEgsR0FBQW5KLFFBQWVobEQsSUFBQSxTQUFBaUQsR0FBZ0IsR0FBQUEsRUFBQWpELElBQUEsQ0FBVSxJQUFBb0csRUFBQWlzRCxHQUFBcHZELEVBQUFqRCxNQUFBaUQsRUFBQWpELElBQXVCLG9CQUFBb0csRUFBQSxPQUFBQSxFQUErQixtQkFBQW5ELEVBQUFsQyxLQUFBLE1BQUFrQyxFQUFBa3ZELEdBQUFsdkQsSUFBQSxRQUFBc0IsT0FBQW1sQyxhQUFBem1DLEdBQUEsWUFBQUEsRUFBQWxDLE1BQUEsVUFBQWtDLEVBQUFsQyxLQUFBbXlELEdBQUFqd0QsRUFBQWtqRCxVQUFBLG1CQUFnSmxXLFNBQUEsS0FBQTBXLFFBQUEsS0FBQTRJLFNBQUEsS0FBQTNJLE9BQUEsS0FBQUMsUUFBQSxLQUFBM1ksT0FBQSxLQUFBc1ksT0FBQSxLQUFBa0ksaUJBQUFDLEdBQUF5RCxTQUFBLFNBQUFudkQsR0FBb0ksbUJBQ3hlQSxFQUFBbEMsS0FBQW94RCxHQUFBbHZELEdBQUEsR0FBZWtqRCxRQUFBLFNBQUFsakQsR0FBcUIsa0JBQUFBLEVBQUFsQyxNQUFBLFVBQUFrQyxFQUFBbEMsS0FBQWtDLEVBQUFrakQsUUFBQSxHQUF1RE0sTUFBQSxTQUFBeGpELEdBQW1CLG1CQUFBQSxFQUFBbEMsS0FBQW94RCxHQUFBbHZELEdBQUEsWUFBQUEsRUFBQWxDLE1BQUEsVUFBQWtDLEVBQUFsQyxLQUFBa0MsRUFBQWtqRCxRQUFBLEtBQWtGcVAsR0FBQXhHLEdBQUFoSyxRQUFnQnlRLGFBQUEsT0FBa0JDLEdBQUF2SCxHQUFBbkosUUFBZ0IyUSxRQUFBLEtBQUFDLGNBQUEsS0FBQUMsZUFBQSxLQUFBalAsT0FBQSxLQUFBQyxRQUFBLEtBQUFGLFFBQUEsS0FBQTRJLFNBQUEsS0FBQWIsaUJBQUFDLEtBQTRIbUgsR0FBQXZvRCxHQUFBeTNDLFFBQWV1RyxhQUFBLEtBQUF1RyxZQUFBLEtBQUFDLGNBQUEsT0FBc0RnRSxHQUFBL0csR0FBQWhLLFFBQWdCZ1IsT0FBQSxTQUFBL3lELEdBQW1CLGlCQUFBQSxJQUFBK3lELE9BQUEsZ0JBQ3RkL3lELEtBQUFnekQsWUFBQSxHQUFtQkMsT0FBQSxTQUFBanpELEdBQW9CLGlCQUFBQSxJQUFBaXpELE9BQUEsZ0JBQUFqekQsS0FBQWt6RCxZQUFBLGVBQUFsekQsS0FBQW16RCxXQUFBLEdBQThGQyxPQUFBLEtBQUFDLFVBQUEsT0FBNEJDLEtBQUEsa0JBQUF0VCxHQUFBLGlCQUFBN2lCLEdBQUEsdUJBQUE4aUIsR0FBQSxxUkFDakssc2ZBQ0EsZ0dBQUFDLEdBQUEsMERBQUFxVCxNQUFtS0MsTUFBTyxTQUFBQyxHQUFBenpELEVBQUFtRCxHQUFpQixJQUFBdEgsRUFBQW1FLEVBQUEsR0FBa0JsRSxFQUFBLE9BQVBrRSxJQUFBLElBQU8sR0FBQXEyQyxjQUFBcjJDLEVBQUF1RCxNQUFBLElBQTJDSixHQUFHcTVDLHlCQUF5Qm1HLFFBQUE3bUQsRUFBQThtRCxTQUFBOW1ELEVBQUEsV0FBK0JnNEMsY0FBQWo0QyxHQUFBNjNELGNBQUF2d0QsR0FBbUNvd0QsR0FBQXZ6RCxHQUFBbUQsRUFBUXF3RCxHQUFBMzNELEdBQUFzSCxJQUM5Vix1ZkFDQSxnUUFBQStJLFFBQUEsU0FBQWxNLEdBQXFSeXpELEdBQUF6ekQsR0FBQSxLQUFXc3pELEdBQUFwbkQsUUFBQSxTQUFBbE0sR0FBdUJ5ekQsR0FBQXp6RCxHQUFBLEtBQ3ZULElBQUEyekQsSUFBUXJYLFdBQUFpWCxHQUFBSywrQkFBQSxTQUFBNXpELEdBQWlFLGlCQUFSQSxFQUFBd3pELEdBQUF4ekQsTUFBUSxJQUFBQSxFQUFBMHpELGVBQXdDclgsY0FBQSxTQUFBcjhDLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBaUMsSUFBQThELEVBQUE0ekQsR0FBQXh6RCxHQUFZLElBQUFKLEVBQUEsWUFBa0IsT0FBQUksR0FBVSxzQkFBQWt2RCxHQUFBcnpELEdBQUEsWUFBeUMsMEJBQUFtRSxFQUFBc3lELEdBQWlDLE1BQU0sdUJBQUF0eUQsRUFBQWl2RCxHQUE4QixNQUFNLG1CQUFBcHpELEVBQUEwd0QsT0FBQSxZQUF5Qyw2SEFBQXZzRCxFQUFBK3JELEdBQTBJLE1BQU0sa0hBQUEvckQsRUFDdmV1eUQsR0FBRyxNQUFNLGtFQUFBdnlELEVBQUF5eUQsR0FBMkUsTUFBTSxLQUFBelMsR0FBQSxLQUFBN2lCLEdBQUEsS0FBQThpQixHQUFBamdELEVBQUEydUQsR0FBNkIsTUFBTSxLQUFBek8sR0FBQWxnRCxFQUFBNnlELEdBQWEsTUFBTSxhQUFBN3lELEVBQUFrckQsR0FBbUIsTUFBTSxZQUFBbHJELEVBQUE4eUQsR0FBa0IsTUFBTSxpQ0FBQTl5RCxFQUFBK3VELEdBQXlDLE1BQU0sNEpBQUEvdUQsRUFBQThzRCxHQUF5SyxNQUFNLFFBQUE5c0QsRUFBQXNLLEdBQXlDLE9BQU42MEMsRUFBdkJoOEMsRUFBQW5ELEVBQUFvaEQsVUFBQXhoRCxFQUFBdUQsRUFBQXRILEVBQUFDLElBQTZCcUgsSUFBVTB3RCxHQUFBRixHQUFBQywrQkFDbGRFLE1BQU0sU0FBQUMsR0FBQS96RCxHQUFlLElBQUFtRCxFQUFBbkQsRUFBQWcwRCxXQUFBbjRELEVBQUFzSCxFQUF1QixHQUFHLElBQUF0SCxFQUFBLENBQU9tRSxFQUFBaTBELFVBQUEzdUQsS0FBQXpKLEdBQW9CLE1BQU0sSUFBQUMsRUFBTSxJQUFBQSxFQUFBRCxFQUFRQyxFQUFBOGlELFFBQVM5aUQsSUFBQThpRCxPQUF1RCxLQUEzQzlpRCxFQUFBLElBQUFBLEVBQUE4RixJQUFBLEtBQUE5RixFQUFBa2lELFVBQUFrVyxlQUEyQyxNQUFZbDBELEVBQUFpMEQsVUFBQTN1RCxLQUFBekosR0FBb0JBLEVBQUF5aUQsRUFBQXhpRCxTQUFRRCxHQUFTLElBQUFBLEVBQUEsRUFBUUEsRUFBQW1FLEVBQUFpMEQsVUFBQTl4RCxPQUFxQnRHLElBQUEsQ0FBS3NILEVBQUFuRCxFQUFBaTBELFVBQUFwNEQsR0FBaUIsSUFBQStELEVBQUE4bEQsR0FBQTFsRCxFQUFBMmdELGFBQXdCN2tELEVBQUFrRSxFQUFBbTBELGFBQWlCLFFBQUE5ekQsRUFBQUwsRUFBQTJnRCxZQUFBbG1CLEVBQUEsS0FBQXZsQixFQUFBLEVBQW1DQSxFQUFBa25DLEVBQUFqNkMsT0FBWStTLElBQUEsQ0FBSyxJQUFBd0csRUFBQTBnQyxFQUFBbG5DLEdBQVl3RyxRQUFBMmdDLGNBQUF2Z0QsRUFBQXFILEVBQUE5QyxFQUFBVCxNQUFBNjZCLEVBQUEwaUIsRUFBQTFpQixFQUFBL2UsSUFBNkN3aUMsRUFBQXpqQixHQUFBLElBQVUsSUFBQTI1QixJQUFBLEVBQ2xhLFNBQUE3YixHQUFBdjRDLEVBQUFtRCxHQUFnQixJQUFBQSxFQUFBLFlBQWtCLElBQUF0SCxHQUFBZzRELEdBQUE3ekQsR0FBQXEwRCxHQUFBQyxJQUFBdDNELEtBQUEsS0FBQWdELEdBQWlDbUQsRUFBQWkrQixpQkFBQXBoQyxFQUFBbkUsR0FBQSxHQUEyQixTQUFBMDRELEdBQUF2MEQsRUFBQW1ELEdBQWlCLElBQUFBLEVBQUEsWUFBa0IsSUFBQXRILEdBQUFnNEQsR0FBQTd6RCxHQUFBcTBELEdBQUFDLElBQUF0M0QsS0FBQSxLQUFBZ0QsR0FBaUNtRCxFQUFBaStCLGlCQUFBcGhDLEVBQUFuRSxHQUFBLEdBQTJCLFNBQUF3NEQsR0FBQXIwRCxFQUFBbUQsR0FBaUJtaEQsR0FBQWdRLEdBQUF0MEQsRUFBQW1ELEdBQzlNLFNBQUFteEQsR0FBQXQwRCxFQUFBbUQsR0FBaUIsR0FBQWl4RCxHQUFBLENBQU8sSUFBQXY0RCxFQUFBNnBELEdBQUF2aUQsR0FBMkUsR0FBdkQsUUFBUnRILEVBQUF5aUQsRUFBQXppRCxLQUFRLGlCQUFBQSxFQUFBK0YsS0FBQSxJQUFBd3NELEdBQUF2eUQsT0FBQSxNQUF1RGk0RCxHQUFBM3hELE9BQUEsQ0FBYyxJQUFBckcsRUFBQWc0RCxHQUFBeHdDLE1BQWV4bkIsRUFBQXE0RCxhQUFBbjBELEVBQWlCbEUsRUFBQTZrRCxZQUFBeDlDLEVBQWdCckgsRUFBQWs0RCxXQUFBbjRELEVBQWVtRSxFQUFBbEUsT0FBSWtFLEdBQVFtMEQsYUFBQW4wRCxFQUFBMmdELFlBQUF4OUMsRUFBQTZ3RCxXQUFBbjRELEVBQUFvNEQsY0FBd0QsSUFBSXhQLEdBQUFzUCxHQUFBL3pELEdBQVMsUUFBUUEsRUFBQW0wRCxhQUFBLEtBQUFuMEQsRUFBQTJnRCxZQUFBLEtBQUEzZ0QsRUFBQWcwRCxXQUFBLEtBQUFoMEQsRUFBQWkwRCxVQUFBOXhELE9BQUEsS0FBQTJ4RCxHQUFBM3hELFFBQUEyeEQsR0FBQXh1RCxLQUFBdEYsS0FBeUcsSUFBQXcwRCxNQUFTQyxHQUFBLEVBQUFDLEdBQUEsd0JBQUFsMUQsS0FBQXE0QixVQUFBdDBCLE1BQUEsR0FDM1gsU0FBQW94RCxHQUFBMzBELEdBQXFGLE9BQXRFOUQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBcUUsRUFBQTAwRCxNQUFBMTBELEVBQUEwMEQsSUFBQUQsS0FBQUQsR0FBQXgwRCxFQUFBMDBELFNBQXNFRixHQUFBeDBELEVBQUEwMEQsS0FBaUIsU0FBQUUsR0FBQTUwRCxHQUFvRSxhQUFyREEsTUFBQSxvQkFBQXk0Qix1QkFBQSxJQUFxRCxZQUFzQyxJQUFJLE9BQUF6NEIsRUFBQTZwRCxlQUFBN3BELEVBQUE2MEQsS0FBK0IsTUFBQTF4RCxHQUFTLE9BQUFuRCxFQUFBNjBELE1BQWUsU0FBQUMsR0FBQTkwRCxHQUFlLEtBQUtBLEtBQUErMEQsWUFBZ0IvMEQsSUFBQSswRCxXQUFnQixPQUFBLzBELEVBQy9ULFNBQUFnMUQsR0FBQWgxRCxFQUFBbUQsR0FBaUIsSUFBZ0JySCxFQUFoQkQsRUFBQWk1RCxHQUFBOTBELEdBQWdCLElBQUpBLEVBQUEsRUFBY25FLEdBQUUsQ0FBRSxPQUFBQSxFQUFBNGdCLFNBQUEsQ0FBNEMsR0FBekIzZ0IsRUFBQWtFLEVBQUFuRSxFQUFBMmtELFlBQUFyK0MsT0FBeUJuQyxHQUFBbUQsR0FBQXJILEdBQUFxSCxFQUFBLE9BQXFCcVosS0FBQTNnQixFQUFBdU8sT0FBQWpILEVBQUFuRCxHQUFtQkEsRUFBQWxFLEVBQUlrRSxFQUFBLENBQUcsS0FBS25FLEdBQUUsQ0FBRSxHQUFBQSxFQUFBbzVELFlBQUEsQ0FBa0JwNUQsSUFBQW81RCxZQUFnQixNQUFBajFELEVBQVFuRSxJQUFBMGlELFdBQWUxaUQsT0FBQSxFQUFTQSxFQUFBaTVELEdBQUFqNUQsSUFDck4sU0FBQXE1RCxLQUFjLFFBQUFsMUQsRUFBQVQsT0FBQTRELEVBQUF5eEQsS0FBd0J6eEQsYUFBQW5ELEVBQUFtMUQsbUJBQWlDLENBQUUsSUFBSW4xRCxFQUFBbUQsRUFBQWl5RCxnQkFBQXJILFlBQWdDLE1BQUFseUQsR0FBUyxNQUFNc0gsRUFBQXl4RCxHQUFBNTBELEVBQUF5NEIsVUFBaUIsT0FBQXQxQixFQUFTLFNBQUFreUQsR0FBQXIxRCxHQUFlLElBQUFtRCxFQUFBbkQsS0FBQXlsRCxVQUFBemxELEVBQUF5bEQsU0FBQXZqRCxjQUE4QyxPQUFBaUIsSUFBQSxVQUFBQSxJQUFBLFNBQUFuRCxFQUFBbEMsTUFBQSxXQUFBa0MsRUFBQWxDLE1BQUEsUUFBQWtDLEVBQUFsQyxNQUFBLFFBQUFrQyxFQUFBbEMsTUFBQSxhQUFBa0MsRUFBQWxDLE9BQUEsYUFBQXFGLEdBQUEsU0FBQW5ELEVBQUFzMUQsaUJBQ25OLElBQUFDLEdBQUFuVyxHQUFBLGlCQUFBM21CLFVBQUEsSUFBQUEsU0FBQTRwQixhQUFBbVQsSUFBb0VDLFFBQVFqWix5QkFBeUJtRyxRQUFBLFdBQUFDLFNBQUEsbUJBQThDOU8sYUFBQSxpRkFBQTl5QyxNQUFBLE9BQTJHMDBELEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLElBQUEsRUFDOVAsU0FBQUMsR0FBQTkxRCxFQUFBbUQsR0FBaUIsSUFBQXRILEVBQUFzSCxFQUFBNUQsU0FBQTRELElBQUFzMUIsU0FBQSxJQUFBdDFCLEVBQUFzWixTQUFBdFosSUFBQXltRCxjQUErRCxPQUFBaU0sSUFBQSxNQUFBSCxTQUFBZCxHQUFBLzRELEdBQUEsTUFBNkMsbUJBQUxBLEVBQUE2NUQsS0FBS0wsR0FBQXg1RCxNQUErQjhQLE1BQUE5UCxFQUFBazZELGVBQUFqcEQsSUFBQWpSLEVBQUFtNkQsY0FBMENuNkQsR0FBNkVvNkQsWUFBN0VwNkQsS0FBQSt0RCxlQUFBL3RELEVBQUErdEQsY0FBQW1FLGFBQUF4dUQsUUFBQTIyRCxnQkFBNkVELFdBQUFFLGFBQUF0NkQsRUFBQXM2RCxhQUFBQyxVQUFBdjZELEVBQUF1NkQsVUFBQUMsWUFBQXg2RCxFQUFBdzZELGFBQXNHVCxJQUFBdGxELEdBQUFzbEQsR0FBQS81RCxHQUFBLE1BQUErNUQsR0FBQS81RCxHQUFBbUUsRUFBQXNLLEdBQUE4MkMsVUFBQW9VLEdBQUFDLE9BQUFFLEdBQUEzMUQsRUFBQW1ELElBQUFyRixLQUFBLFNBQUFrQyxFQUFBbkIsT0FBQTYyRCxHQUFBdlcsRUFBQW4vQyxPQUN6WCxJQUFBczJELElBQVFoYSxXQUFBa1osR0FBQW5aLGNBQUEsU0FBQXI4QyxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQThDLElBQUF1RSxFQUFBVCxFQUFBOUQsRUFBQXlELFNBQUF6RCxJQUFBMjhCLFNBQUEsSUFBQTM4QixFQUFBMmdCLFNBQUEzZ0IsSUFBQTh0RCxjQUFpRSxLQUFBdnBELEdBQUFULEdBQUEsQ0FBWUksRUFBQSxDQUFHSixFQUFBKzBELEdBQUEvMEQsR0FBUVMsRUFBQXU4QyxFQUFBMlosU0FBYyxRQUFBOTdCLEVBQUEsRUFBWUEsRUFBQXA2QixFQUFBOEIsT0FBV3M0QixJQUFBLENBQUssSUFBQXZsQixFQUFBN1UsRUFBQW82QixHQUFXLElBQUE3NkIsRUFBQXZDLGVBQUE2WCxLQUFBdFYsRUFBQXNWLEdBQUEsQ0FBZ0N0VixHQUFBLEVBQUssTUFBQUksR0FBU0osR0FBQSxFQUFLUyxHQUFBVCxFQUFLLEdBQUFTLEVBQUEsWUFBa0MsT0FBakJULEVBQUF1RCxFQUFBczdDLEVBQUF0N0MsR0FBQTVELE9BQWlCUyxHQUFVLGFBQUF3bEQsR0FBQTVsRCxJQUFBLFNBQUFBLEVBQUEwMUQsbUJBQUFJLEdBQUE5MUQsRUFBQSsxRCxHQUFBeHlELEVBQUF5eUQsR0FBQSxNQUFvRSxNQUFNLFdBQUFBLEdBQUFELEdBQUFELEdBQUEsS0FBMEIsTUFBTSxnQkFBQUcsSUFBQSxFQUF1QixNQUFNLHFEQUFBQSxJQUFBLEVBQUFDLEdBQUFqNkQsRUFBQUMsR0FBc0UseUJBQUF5NUQsR0FBQSxNQUNwZixpQ0FBQU8sR0FBQWo2RCxFQUFBQyxHQUEyQyxjQUMzQyxTQUFBMDZELEdBQUF4MkQsRUFBQW1ELEdBQTJFLE9BQTFEbkQsRUFBQS9DLEdBQUsrN0MsY0FBQSxHQUFnQjcxQyxJQUFJQSxFQURpVyxTQUFBbkQsR0FBZSxJQUFBbUQsRUFBQSxHQUE2RCxPQUFwRHUyQyxFQUFBRyxTQUFBM3RDLFFBQUFsTSxFQUFBLFNBQUFBLEdBQWtDLE1BQUFBLElBQUFtRCxHQUFBbkQsS0FBa0JtRCxFQUM3YXN6RCxDQUFBdHpELEVBQUE2MUMsYUFBQWg1QyxFQUFBZzVDLFNBQUE3MUMsR0FBaUNuRCxFQUFTLFNBQUEwMkQsR0FBQTEyRCxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQWlDLEdBQVprRSxJQUFBazFDLFFBQVkveEMsRUFBQSxDQUFNQSxLQUFLLFFBQUF2RCxFQUFBLEVBQVlBLEVBQUEvRCxFQUFBc0csT0FBV3ZDLElBQUF1RCxFQUFBLElBQUF0SCxFQUFBK0QsS0FBQSxFQUFtQixJQUFBL0QsRUFBQSxFQUFRQSxFQUFBbUUsRUFBQW1DLE9BQVd0RyxJQUFBK0QsRUFBQXVELEVBQUE5RixlQUFBLElBQUEyQyxFQUFBbkUsR0FBQVksT0FBQXVELEVBQUFuRSxHQUFBODZELFdBQUEvMkQsSUFBQUksRUFBQW5FLEdBQUE4NkQsU0FBQS8yRCxNQUFBOUQsSUFBQWtFLEVBQUFuRSxHQUFBKzZELGlCQUFBLE9BQTRHLENBQXVCLElBQWxCLzZELEVBQUEsR0FBQWt0RCxHQUFBbHRELEdBQVdzSCxFQUFBLEtBQU92RCxFQUFBLEVBQVFBLEVBQUFJLEVBQUFtQyxPQUFXdkMsSUFBQSxDQUFLLEdBQUFJLEVBQUFKLEdBQUFuRCxRQUFBWixFQUFpRSxPQUE5Q21FLEVBQUFKLEdBQUErMkQsVUFBQSxPQUFpQjc2RCxJQUFBa0UsRUFBQUosR0FBQWczRCxpQkFBQSxJQUFvQyxPQUFBenpELEdBQUFuRCxFQUFBSixHQUFBcStDLFdBQUE5NkMsRUFBQW5ELEVBQUFKLElBQWtDLE9BQUF1RCxNQUFBd3pELFVBQUEsSUFDbGMsU0FBQUUsR0FBQTcyRCxFQUFBbUQsR0FBZ0UsT0FBL0MsTUFBQUEsRUFBQTJ6RCx5QkFBQW5tRCxFQUFBLE1BQStDMVQsS0FBV2tHLEdBQUkxRyxXQUFBLEVBQUF5c0Qsa0JBQUEsRUFBQWxRLFNBQUEsR0FBQWg1QyxFQUFBbXBELGNBQUFHLGVBQTRFLFNBQUF5TixHQUFBLzJELEVBQUFtRCxHQUFpQixJQUFBdEgsRUFBQXNILEVBQUExRyxNQUFjLE1BQUFaLE1BQUFzSCxFQUFBK2xELGFBQUEsT0FBQS9sRCxJQUFBNjFDLFlBQUEsTUFBQW45QyxHQUFBOFUsRUFBQSxNQUFBekosTUFBQXFSLFFBQUFwVixLQUFBLEdBQUFBLEVBQUFoQixRQUFBd08sRUFBQSxNQUFBeE4sSUFBQSxJQUFBdEgsRUFBQXNILEdBQUEsTUFBQXRILE1BQUEsS0FBcUptRSxFQUFBbXBELGVBQWlCRyxhQUFBUCxHQUFBbHRELElBQ2hXLFNBQUFtN0QsR0FBQWgzRCxFQUFBbUQsR0FBaUIsSUFBQXRILEVBQUFrdEQsR0FBQTVsRCxFQUFBMUcsT0FBa0IsTUFBQVosT0FBQSxHQUFBQSxLQUFBbUUsRUFBQXZELFFBQUF1RCxFQUFBdkQsTUFBQVosR0FBQSxNQUFBc0gsRUFBQStsRCxlQUFBbHBELEVBQUFrcEQsYUFBQXJ0RCxJQUFvRixNQUFBc0gsRUFBQStsRCxlQUFBbHBELEVBQUFrcEQsYUFBQSxHQUFBSCxHQUFBNWxELEVBQUErbEQsZUFBNkQsU0FBQStOLEdBQUFqM0QsR0FBZSxJQUFBbUQsRUFBQW5ELEVBQUF3Z0QsWUFBb0JyOUMsSUFBQW5ELEVBQUFtcEQsY0FBQUcsZUFBQXRwRCxFQUFBdkQsTUFBQTBHLEdBSDlKMjZDLEVBQUEseUlBQUE5OEMsTUFBQSxNQUErSzY3QyxFQUFBNkIsRUFBTTVCLEVBQUEwQixFQUFNekIsRUFBQTBCLEVBQU1YLEdBQTZCb1osa0JBQUF2RCxHQUFBd0Qsc0JBQUFySixHQUFBc0osa0JBQUFwTSxHQUFBcU0sa0JBQUFmLEdBQUFnQix1QkFBQWhVLEtBR2xCLElBQUFpVSxJQUFRdjNCLEtBQUEsK0JBQUF3M0IsT0FBQSxxQ0FBQUMsSUFBQSw4QkFDN1EsU0FBQUMsR0FBQTEzRCxHQUFlLE9BQUFBLEdBQVUsNkNBQThDLHNEQUF1RCw4Q0FBOEMsU0FBQTIzRCxHQUFBMzNELEVBQUFtRCxHQUFpQixhQUFBbkQsR0FBQSxpQ0FBQUEsRUFBQTAzRCxHQUFBdjBELEdBQUEsK0JBQUFuRCxHQUFBLGtCQUFBbUQsRUFBQSwrQkFBQW5ELEVBQzdMLElBQUE0M0QsUUFBQSxFQUFBQyxHQUFBLFNBQUE3M0QsR0FBNkIsMEJBQUE4M0QsYUFBQUMsd0JBQUEsU0FBQTUwRCxFQUFBdEgsRUFBQUMsRUFBQThELEdBQWtGazRELE1BQUFDLHdCQUFBLFdBQXlDLE9BQUEvM0QsRUFBQW1ELEVBQUF0SCxNQUFvQm1FLEVBQTVLLENBQStLLFNBQUFBLEVBQUFtRCxHQUFlLEdBQUFuRCxFQUFBZzRELGVBQUFULEdBQUFFLEtBQUEsY0FBQXozRCxJQUFBaTRELFVBQUE5MEQsTUFBMEQsQ0FBMEUsS0FBckV5MEQsT0FBQW4vQixTQUFBNkUsY0FBQSxRQUFxQzI2QixVQUFBLFFBQUE5MEQsRUFBQSxTQUFnQ0EsRUFBQXkwRCxHQUFBN0MsV0FBb0IvMEQsRUFBQSswRCxZQUFhLzBELEVBQUFzaEMsWUFBQXRoQyxFQUFBKzBELFlBQTZCLEtBQUs1eEQsRUFBQTR4RCxZQUFhLzBELEVBQUF1NEIsWUFBQXAxQixFQUFBNHhELGVBQ2xaLFNBQUFtRCxHQUFBbDRELEVBQUFtRCxHQUFpQixHQUFBQSxFQUFBLENBQU0sSUFBQXRILEVBQUFtRSxFQUFBKzBELFdBQW1CLEdBQUFsNUQsT0FBQW1FLEVBQUFtNEQsV0FBQSxJQUFBdDhELEVBQUE0Z0IsU0FBcUQsWUFBZDVnQixFQUFBdThELFVBQUFqMUQsR0FBc0JuRCxFQUFBd2dELFlBQUFyOUMsRUFDdkcsSUFBQWsxRCxJQUFRQyx5QkFBQSxFQUFBQyxtQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxTQUFBLEVBQUFDLGNBQUEsRUFBQUMsaUJBQUEsRUFBQUMsYUFBQSxFQUFBQyxTQUFBLEVBQUFDLE1BQUEsRUFBQUMsVUFBQSxFQUFBQyxjQUFBLEVBQUFDLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxXQUFBLEVBQUFDLFVBQUEsRUFBQUMsU0FBQSxFQUFBQyxZQUFBLEVBQUFDLGFBQUEsRUFBQUMsY0FBQSxFQUFBQyxZQUFBLEVBQUFDLGVBQUEsRUFBQUMsZ0JBQUEsRUFBQUMsaUJBQUEsRUFBQUMsWUFBQSxFQUFBQyxXQUFBLEVBQUFDLFlBQUEsRUFBQUMsU0FBQSxFQUFBQyxPQUFBLEVBQUFDLFNBQUEsRUFBQUMsU0FBQSxFQUFBQyxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsTUFBQSxFQUFBQyxhQUFBLEVBQ1JDLGNBQUEsRUFBQUMsYUFBQSxFQUFBQyxpQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxlQUFBLEVBQUFDLGFBQUEsR0FBMEhDLElBQUEseUJBQzFILFNBQUE5N0IsR0FBQWwvQixFQUFBbUQsR0FBMkIsUUFBQXRILEtBQVZtRSxJQUFBcTRCLE1BQVVsMUIsRUFBQSxHQUFBQSxFQUFBOUYsZUFBQXhCLEdBQUEsQ0FBdUMsSUFBQUMsRUFBQSxJQUFBRCxFQUFBc1EsUUFBQSxNQUEwQnZNLEVBQUEvRCxFQUFRd0UsRUFBQThDLEVBQUF0SCxHQUFXK0QsRUFBQSxNQUFBUyxHQUFBLGtCQUFBQSxHQUFBLEtBQUFBLEVBQUEsR0FBQXZFLEdBQUEsaUJBQUF1RSxHQUFBLElBQUFBLEdBQUFnNEQsR0FBQWg3RCxlQUFBdUMsSUFBQXk0RCxHQUFBejRELElBQUEsR0FBQVMsR0FBQTI1QixPQUFBMzVCLEVBQUEsS0FBMkgsVUFBQXhFLE1BQUEsWUFBNEJDLEVBQUFrRSxFQUFBaTdELFlBQUFwL0QsRUFBQStELEdBQUFJLEVBQUFuRSxHQUFBK0QsR0FEOUcxRCxPQUFBZ00sS0FBQW13RCxJQUFBbnNELFFBQUEsU0FBQWxNLEdBQW9DZzdELEdBQUE5dUQsUUFBQSxTQUFBL0ksR0FBdUJBLElBQUFuRCxFQUFBeTlCLE9BQUEsR0FBQTRZLGNBQUFyMkMsRUFBQWs3RCxVQUFBLEdBQTZDN0MsR0FBQWwxRCxHQUFBazFELEdBQUFyNEQsT0FDbUMsSUFBQW03RCxHQUFBbCtELEdBQVVtK0QsVUFBQSxJQUFjQyxNQUFBLEVBQUFDLE1BQUEsRUFBQUMsSUFBQSxFQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsSUFBQSxFQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsUUFBQSxFQUFBQyxNQUFBLEVBQUFsckQsTUFBQSxFQUFBbXJELE9BQUEsRUFBQWgrRCxRQUFBLEVBQUFpK0QsT0FBQSxFQUFBQyxLQUFBLElBQzNULFNBQUFDLEdBQUFsOEQsRUFBQW1ELEdBQWlCQSxJQUFBZzRELEdBQUFuN0QsS0FBQSxNQUFBbUQsRUFBQTYxQyxVQUFBLE1BQUE3MUMsRUFBQTJ6RCwwQkFBQW5tRCxFQUFBLE1BQUEzUSxFQUFBLFVBQUFtRCxFQUFBMnpELDBCQUFBLE1BQUEzekQsRUFBQTYxQyxVQUFBcm9DLEVBQUEsdUJBQUF4TixFQUFBMnpELHlCQUFBLFdBQUEzekQsRUFBQTJ6RCx5QkFBQW5tRCxFQUFBLGFBQUF4TixFQUFBazFCLE9BQUEsaUJBQUFsMUIsRUFBQWsxQixPQUFBMW5CLEVBQUEsVUFDakIsU0FBQXdyRCxHQUFBbjhELEVBQUFtRCxHQUFpQixRQUFBbkQsRUFBQW1NLFFBQUEsNEJBQUFoSixFQUFBb1csR0FBb0QsT0FBQXZaLEdBQVUsMEtBQWtMLGtCQUNqUSxTQUFBbzhELEdBQUFwOEQsRUFBQW1ELEdBQXFFLElBQUF0SCxFQUFBODRELEdBQXBEMzBELEVBQUEsSUFBQUEsRUFBQXljLFVBQUEsS0FBQXpjLEVBQUF5YyxTQUFBemMsSUFBQTRwRCxlQUFnRXptRCxFQUFBeTVDLEVBQUF6NUMsR0FBUSxRQUFBckgsRUFBQSxFQUFZQSxFQUFBcUgsRUFBQWhCLE9BQVdyRyxJQUFBLENBQUssSUFBQThELEVBQUF1RCxFQUFBckgsR0FBVyxJQUFBRCxFQUFBd0IsZUFBQXVDLEtBQUEvRCxFQUFBK0QsR0FBQSxDQUFnQyxPQUFBQSxHQUFVLGFBQUEyMEQsR0FBQSxTQUFBdjBELEdBQTZCLE1BQU0sdUJBQUF1MEQsR0FBQSxRQUFBdjBELEdBQXVDdTBELEdBQUEsT0FBQXYwRCxHQUFhbkUsRUFBQXdnRSxNQUFBLEVBQVV4Z0UsRUFBQXlnRSxPQUFBLEVBQVcsTUFBTSx5QkFBQXpXLEdBQUFqbUQsSUFBQTIwRCxHQUFBMzBELEVBQUFJLEdBQTBDLE1BQU0sNkNBQWdELGFBQUFtZ0QsR0FBQWgwQyxRQUFBdk0sSUFBQTI0QyxHQUFBMzRDLEVBQUFJLEdBQW1DbkUsRUFBQStELElBQUEsSUFBVSxTQUFBMjhELE1BQWUsSUFBQUMsR0FBQSxLQUFBQyxHQUFBLEtBQ3hiLFNBQUFDLEdBQUExOEQsRUFBQW1ELEdBQWlCLE9BQUFuRCxHQUFVLDZEQUFBbUQsRUFBQXc1RCxVQUE2RSxTQUFTLFNBQUFDLEdBQUE1OEQsRUFBQW1ELEdBQWlCLG1CQUFBbkQsR0FBQSxXQUFBQSxHQUFBLGFBQUFBLEdBQUEsaUJBQUFtRCxFQUFBNjFDLFVBQUEsaUJBQUE3MUMsRUFBQTYxQyxVQUFBLGlCQUFBNzFDLEVBQUEyekQseUJBQUEsT0FBQTN6RCxFQUFBMnpELHlCQUFBLE1BQUEzekQsRUFBQTJ6RCx3QkFBQStGLE9BQXNPLFNBQUFDLEdBQUE5OEQsR0FBZSxJQUFBQSxJQUFBaTFELFlBQW9CajFELEdBQUEsSUFBQUEsRUFBQXljLFVBQUEsSUFBQXpjLEVBQUF5YyxVQUFrQ3pjLElBQUFpMUQsWUFBaUIsT0FBQWoxRCxFQUM5YixTQUFBKzhELEdBQUEvOEQsR0FBZSxJQUFBQSxJQUFBKzBELFdBQW1CLzBELEdBQUEsSUFBQUEsRUFBQXljLFVBQUEsSUFBQXpjLEVBQUF5YyxVQUFrQ3pjLElBQUFpMUQsWUFBaUIsT0FBQWoxRCxFQUFTLElBQUE4UyxJQUFRLElBQUFrcUQsTUFBQUMsSUFBQSxFQUFnQixTQUFBeGtCLEdBQUF6NEMsR0FBYyxFQUFBaTlELEtBQUFqOUQsRUFBQTA0QyxRQUFBc2tCLEdBQUFDLElBQUFELEdBQUFDLElBQUEsS0FBQUEsTUFBMEMsU0FBQXJrQixHQUFBNTRDLEVBQUFtRCxHQUFxQjY1RCxLQUFMQyxJQUFLajlELEVBQUEwNEMsUUFBaUIxNEMsRUFBQTA0QyxRQUFBdjFDLEVBQVksSUFBQSs1RCxNQUFTbmdDLElBQUkyYixRQUFBd2tCLElBQVdua0IsSUFBSUwsU0FBQSxHQUFXeWtCLEdBQUFELEdBQ3ZRLFNBQUFFLEdBQUFwOUQsRUFBQW1ELEdBQWlCLElBQUF0SCxFQUFBbUUsRUFBQWxDLEtBQUF5dkMsYUFBMEIsSUFBQTF4QyxFQUFBLE9BQUFxaEUsR0FBZ0IsSUFBQXBoRSxFQUFBa0UsRUFBQWcrQyxVQUFrQixHQUFBbGlELEtBQUF1aEUsOENBQUFsNkQsRUFBQSxPQUFBckgsRUFBQXdoRSwwQ0FBMkcsSUFBUWo5RCxFQUFSVCxLQUFXLElBQUFTLEtBQUF4RSxFQUFBK0QsRUFBQVMsR0FBQThDLEVBQUE5QyxHQUFzSSxPQUFqSHZFLEtBQUFrRSxJQUFBZytDLFdBQUFxZiw0Q0FBQWw2RCxFQUFBbkQsRUFBQXM5RCwwQ0FBQTE5RCxHQUFpSEEsRUFBUyxTQUFBKzVDLEdBQUEzNUMsR0FBb0MsZUFBdEJBLElBQUFzdEMseUJBQXNCLElBQUF0dEMsRUFBNEIsU0FBQXU5RCxHQUFBdjlELEdBQWV5NEMsR0FBQU0sSUFBT04sR0FBQTFiLElBQU8sU0FBQXlnQyxHQUFBeDlELEdBQWV5NEMsR0FBQU0sSUFBT04sR0FBQTFiLElBQ3JjLFNBQUEwZ0MsR0FBQXo5RCxFQUFBbUQsRUFBQXRILEdBQW1Ca2hDLEdBQUEyYixVQUFBd2tCLElBQUF2c0QsRUFBQSxPQUErQmlvQyxHQUFBN2IsR0FBQTU1QixHQUFTeTFDLEdBQUFHLEdBQUFsOUMsR0FBUyxTQUFBNmhFLEdBQUExOUQsRUFBQW1ELEVBQUF0SCxHQUFtQixJQUFBQyxFQUFBa0UsRUFBQWcrQyxVQUF3QyxHQUF0QmgrQyxFQUFBbUQsRUFBQW1xQyxrQkFBc0IsbUJBQUF4eEMsRUFBQTZoRSxnQkFBQSxPQUFBOWhFLEVBQXdFLFFBQUErRCxLQUF0QjlELElBQUE2aEUsa0JBQXNCLzlELEtBQUFJLEdBQUEyUSxFQUFBLE1BQUEyMkMsR0FBQW5rRCxJQUFBLFVBQUF2RCxHQUF5RCxPQUFBM0MsS0FBV3BCLEVBQUFDLEdBQU0sU0FBQThoRSxHQUFBNTlELEdBQWUsSUFBQW1ELEVBQUFuRCxFQUFBZytDLFVBQThHLE9BQTVGNzZDLE9BQUEwNkQsMkNBQUFYLEdBQXFEQyxHQUFBcGdDLEdBQUEyYixRQUFhRSxHQUFBN2IsR0FBQTU1QixHQUFTeTFDLEdBQUFHLE1BQUFMLFVBQWlCLEVBQzlZLFNBQUFvbEIsR0FBQTk5RCxFQUFBbUQsRUFBQXRILEdBQW1CLElBQUFDLEVBQUFrRSxFQUFBZytDLFVBQWtCbGlELEdBQUE2VSxFQUFBLE9BQWtCOVUsR0FBQXNILEVBQUF1NkQsR0FBQTE5RCxFQUFBbUQsRUFBQWc2RCxJQUFBcmhFLEVBQUEraEUsMENBQUExNkQsRUFBQXMxQyxHQUFBTSxJQUFBTixHQUFBMWIsSUFBQTZiLEdBQUE3YixHQUFBNTVCLElBQUFzMUMsR0FBQU0sSUFBNkZILEdBQUFHLEdBQUFsOUMsR0FBUyxJQUFBa2lFLEdBQUEsS0FBQUMsR0FBQSxLQUFvQixTQUFBQyxHQUFBaitELEdBQWUsZ0JBQUFtRCxHQUFtQixJQUFJLE9BQUFuRCxFQUFBbUQsR0FBWSxNQUFBdEgsTUFFbk8sU0FBQXFpRSxHQUFBbCtELEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBcUJ5RixLQUFBSyxJQUFBNUIsRUFBV3VCLEtBQUF4RSxJQUFBbEIsRUFBVzBGLEtBQUFrdEQsUUFBQWx0RCxLQUFBaXRELE1BQUFqdEQsS0FBQXE5QyxPQUFBcjlDLEtBQUF5OEMsVUFBQXo4QyxLQUFBekQsS0FBQSxLQUFrRXlELEtBQUE2RCxNQUFBLEVBQWE3RCxLQUFBK1IsSUFBQSxLQUFjL1IsS0FBQTQ4RCxhQUFBaDdELEVBQW9CNUIsS0FBQTY4RCx1QkFBQTc4RCxLQUFBODhELGNBQUE5OEQsS0FBQSs4RCxZQUFBLzhELEtBQUFnOUQsY0FBQSxLQUF3Rmg5RCxLQUFBNUUsS0FBQWIsRUFBWXlGLEtBQUE4c0QsVUFBQSxFQUFpQjlzRCxLQUFBaTlELFdBQUFqOUQsS0FBQWs5RCxZQUFBbDlELEtBQUFtOUQsV0FBQSxLQUFzRG45RCxLQUFBbzlELG9CQUFBcDlELEtBQUFxOUQsZUFBQSxFQUErQ3I5RCxLQUFBMHNELFVBQUEsS0FDdFgsU0FBQTRRLEdBQUE3K0QsR0FBNkIsdUJBQWRBLElBQUE1QyxZQUFjLE9BQUE0QyxHQUFBLGlCQUFBQSxFQUFBcTRDLGtCQUFBLE9BQUFyNEMsRUFBQXE0QyxpQkFDN0IsU0FBQXltQixHQUFBOStELEVBQUFtRCxFQUFBdEgsR0FBbUIsSUFBQUMsRUFBQWtFLEVBQUFpdUQsVUFDUyxPQURTLE9BQUFueUQsTUFBQSxJQUFBb2lFLEdBQUFsK0QsRUFBQTRCLElBQUF1QixFQUFBbkQsRUFBQWpELElBQUFpRCxFQUFBckQsT0FBQW1CLEtBQUFrQyxFQUFBbEMsS0FBQWhDLEVBQUFraUQsVUFBQWgrQyxFQUFBZytDLFVBQUFsaUQsRUFBQW15RCxVQUFBanVELElBQUFpdUQsVUFBQW55RCxNQUFBcWlFLGFBQUFoN0QsRUFBQXJILEVBQUF1eUQsVUFBQSxFQUFBdnlELEVBQUE0aUUsV0FBQSxLQUFBNWlFLEVBQUEyaUUsWUFBQSxLQUFBM2lFLEVBQUEwaUUsV0FBQSxNQUFvTTFpRSxFQUFBNmlFLG9CQUFBMytELEVBQUEyK0Qsb0JBQTRDN2lFLEVBQUE4aUUsZUFBQXo3RCxJQUFBbkQsRUFBQW0rRCxhQUFBdGlFLEVBQUFtRSxFQUFBNCtELGVBQXVEOWlFLEVBQUEweUQsTUFBQXh1RCxFQUFBd3VELE1BQWdCMXlELEVBQUF5aUUsY0FBQXYrRCxFQUFBdStELGNBQWdDemlFLEVBQUF1aUUsY0FBQXIrRCxFQUFBcStELGNBQWdDdmlFLEVBQUF3aUUsWUFBQXQrRCxFQUFBcytELFlBQTRCeGlFLEVBQUFzaUUsdUJBQUFwK0QsRUFBQW8rRCx1QkFBa0R0aUUsRUFBQTJ5RCxRQUFBenVELEVBQUF5dUQsUUFDMWUzeUQsRUFBQXNKLE1BQUFwRixFQUFBb0YsTUFBZ0J0SixFQUFBd1gsSUFBQXRULEVBQUFzVCxJQUFZeFgsRUFDNUIsU0FBQWlqRSxHQUFBLytELEVBQUFtRCxFQUFBdEgsR0FBbUIsSUFBQUMsRUFBQWtFLEVBQUFsQyxLQUFBOEIsRUFBQUksRUFBQWpELElBQXFCaUQsSUFBQWszQixNQUFVLElBQUE3MkIsT0FBQSxFQUFhLHNCQUFBdkUsRUFBQXVFLEVBQUF3K0QsR0FBQS9pRSxHQUFBLFNBQXFDLG9CQUFBQSxFQUFBdUUsRUFBQSxPQUFnQ0wsRUFBQSxPQUFBbEUsR0FBaUIsS0FBQThxRCxHQUFBLE9BQUFvWSxHQUFBaC9ELEVBQUFnNUMsU0FBQTcxQyxFQUFBdEgsRUFBQStELEdBQW9DLEtBQUFxbkQsR0FBQTVtRCxFQUFBLEdBQWE4QyxHQUFBLEVBQUssTUFBTSxLQUFBMGpELEdBQUF4bUQsRUFBQSxHQUFhOEMsR0FBQSxFQUFLLE1BQU0sS0FBQTJqRCxHQUFBLE9BQUFockQsRUFBQSxJQUFBb2lFLEdBQUEsR0FBQWwrRCxFQUFBSixFQUFBLEVBQUF1RCxJQUFBckYsS0FBQWdwRCxHQUFBaHJELEVBQUE4aUUsZUFBQS9pRSxFQUFBQyxFQUFtRSxLQUFBcXJELEdBQUE5bUQsRUFBQSxHQUFhLE1BQU0sNEJBQUF2RSxHQUFBLE9BQUFBLEVBQUEsT0FBQUEsRUFBQW05QyxVQUE0RCxLQUFBOE4sR0FBQTFtRCxFQUFBLEdBQWEsTUFBQUwsRUFBUSxLQUFBZ25ELEdBQUEzbUQsRUFBQSxHQUFhLE1BQUFMLEVBQVEsS0FBQWtuRCxHQUFBN21ELEVBQUEsR0FBYSxNQUFBTCxFQUFRLDhCQUFBbEUsRUFBQXltQyxLQUFBLENBQXVDbGlDLEVBQUEsRUFBSSxNQUFBTCxHQUFTMlEsRUFBQSxNQUM5ZSxNQUFBN1UsYUFBQSxJQUFxRSxPQUE5Q3FILEVBQUEsSUFBQSs2RCxHQUFBNzlELEVBQUFMLEVBQUFKLEVBQUF1RCxJQUFrQnJGLEtBQUFoQyxFQUFTcUgsRUFBQXk3RCxlQUFBL2lFLEVBQW1Cc0gsRUFBUyxTQUFBNjdELEdBQUFoL0QsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUEwRCxPQUFyQ2tFLEVBQUEsSUFBQWsrRCxHQUFBLEVBQUFsK0QsRUFBQWxFLEVBQUFxSCxJQUFrQnk3RCxlQUFBL2lFLEVBQW1CbUUsRUFBUyxTQUFBaS9ELEdBQUFqL0QsRUFBQW1ELEVBQUF0SCxHQUEyRCxPQUF4Q21FLEVBQUEsSUFBQWsrRCxHQUFBLEVBQUFsK0QsRUFBQSxLQUFBbUQsSUFBcUJ5N0QsZUFBQS9pRSxFQUFtQm1FLEVBQVMsU0FBQWsvRCxHQUFBbC9ELEVBQUFtRCxFQUFBdEgsR0FBMkwsT0FBeEtzSCxFQUFBLElBQUErNkQsR0FBQSxTQUFBbCtELEVBQUFnNUMsU0FBQWg1QyxFQUFBZzVDLFlBQUFoNUMsRUFBQWpELElBQUFvRyxJQUFvRHk3RCxlQUFBL2lFLEVBQW1Cc0gsRUFBQTY2QyxXQUFha1csY0FBQWwwRCxFQUFBazBELGNBQUFpTCxnQkFBQSxLQUFBQyxlQUFBcC9ELEVBQUFvL0QsZ0JBQW9GajhELEVBQ2haLFNBQUFrOEQsR0FBQXIvRCxFQUFBbUQsR0FBaUJuRCxFQUFBcy9ELFVBQUEsRUFBYyxJQUFBempFLEVBQUFtRSxFQUFBdS9ELG9CQUE0QixJQUFBMWpFLEVBQUFtRSxFQUFBdS9ELG9CQUFBdi9ELEVBQUF3L0Qsa0JBQUFyOEQsRUFBQXRILEVBQUFzSCxFQUFBbkQsRUFBQXUvRCxvQkFBQXA4RCxFQUFBbkQsRUFBQXcvRCxrQkFBQXI4RCxJQUFBbkQsRUFBQXcvRCxrQkFBQXI4RCxHQUE2SHM4RCxHQUFBdDhELEVBQUFuRCxHQUFRLFNBQUF5L0QsR0FBQXovRCxFQUFBbUQsR0FBaUIsSUFBQXRILEVBQUFzSCxFQUFBdThELHNCQUFBNWpFLEVBQUFxSCxFQUFBdzhELG9CQUFBLy9ELEVBQUF1RCxFQUFBbzhELG9CQUFBbC9ELEVBQUE4QyxFQUFBeThELGlCQUErRyxLQUFaaGdFLEVBQUEsSUFBQUEsSUFBQVMsS0FBWSxJQUFBTCxHQUFBbEUsRUFBQWtFLEtBQUFKLEVBQUE5RCxHQUErQixLQUFKa0UsRUFBQUosSUFBSSxJQUFBL0QsS0FBQW1FLE1BQUFuRSxHQUF5QnNILEVBQUEwOEQsMkJBQUFqZ0UsRUFBK0J1RCxFQUFBeTdELGVBQUE1K0QsRUFBbUIsSUFBQTgvRCxJQUFBLEVBQzFhLFNBQUFDLEdBQUEvL0QsR0FBZSxPQUFPZ2dFLFVBQUFoZ0UsRUFBQWlnRSxZQUFBLEtBQUFDLFdBQUEsS0FBQUMsb0JBQUEsS0FBQUMsbUJBQUEsS0FBQTNCLFlBQUEsS0FBQUQsV0FBQSxLQUFBNkIsb0JBQUEsS0FBQUMsbUJBQUEsTUFBaUwsU0FBQUMsR0FBQXZnRSxHQUFlLE9BQU9nZ0UsVUFBQWhnRSxFQUFBZ2dFLFVBQUFDLFlBQUFqZ0UsRUFBQWlnRSxZQUFBQyxXQUFBbGdFLEVBQUFrZ0UsV0FBQUMsb0JBQUEsS0FBQUMsbUJBQUEsS0FBQTNCLFlBQUEsS0FBQUQsV0FBQSxLQUFBNkIsb0JBQUEsS0FBQUMsbUJBQUEsTUFDN04sU0FBQUUsR0FBQXhnRSxHQUFlLE9BQU80K0QsZUFBQTUrRCxFQUFBNEIsSUFBQSxFQUFBNitELFFBQUEsS0FBQUMsU0FBQSxLQUFBdDFELEtBQUEsS0FBQXN6RCxXQUFBLE1BQTZFLFNBQUFpQyxHQUFBM2dFLEVBQUFtRCxHQUFpQixPQUFBbkQsRUFBQWtnRSxXQUFBbGdFLEVBQUFpZ0UsWUFBQWpnRSxFQUFBa2dFLFdBQUEvOEQsR0FBQW5ELEVBQUFrZ0UsV0FBQTkwRCxLQUFBakksRUFBQW5ELEVBQUFrZ0UsV0FBQS84RCxHQUNwSCxTQUFBeTlELEdBQUE1Z0UsRUFBQW1ELEdBQWlCLElBQUF0SCxFQUFBbUUsRUFBQWl1RCxVQUFrQixVQUFBcHlELEVBQUEsQ0FBYSxJQUFBQyxFQUFBa0UsRUFBQXMrRCxZQUFvQjErRCxFQUFBLEtBQVcsT0FBQTlELE1BQUFrRSxFQUFBcytELFlBQUF5QixHQUFBLy9ELEVBQUFxK0QscUJBQWdEdmlFLEVBQUFrRSxFQUFBcytELFlBQUExK0QsRUFBQS9ELEVBQUF5aUUsWUFBQSxPQUFBeGlFLEVBQUEsT0FBQThELEdBQUE5RCxFQUFBa0UsRUFBQXMrRCxZQUFBeUIsR0FBQS8vRCxFQUFBcStELGVBQUF6K0QsRUFBQS9ELEVBQUF5aUUsWUFBQXlCLEdBQUFsa0UsRUFBQXdpRSxnQkFBQXZpRSxFQUFBa0UsRUFBQXMrRCxZQUFBaUMsR0FBQTNnRSxHQUFBLE9BQUFBLE1BQUEvRCxFQUFBeWlFLFlBQUFpQyxHQUFBemtFLElBQXlMLE9BQUE4RCxHQUFBOUQsSUFBQThELEVBQUErZ0UsR0FBQTdrRSxFQUFBcUgsR0FBQSxPQUFBckgsRUFBQW9rRSxZQUFBLE9BQUF0Z0UsRUFBQXNnRSxZQUFBUyxHQUFBN2tFLEVBQUFxSCxHQUFBdzlELEdBQUEvZ0UsRUFBQXVELEtBQUF3OUQsR0FBQTdrRSxFQUFBcUgsR0FBQXZELEVBQUFzZ0UsV0FBQS84RCxHQUN4VCxTQUFBMDlELEdBQUE3Z0UsRUFBQW1ELEdBQWlCLElBQUF0SCxFQUFBbUUsRUFBQXMrRCxZQUF5RSxRQUFyRHppRSxFQUFBLE9BQUFBLEVBQUFtRSxFQUFBcytELFlBQUF5QixHQUFBLy9ELEVBQUFxK0QsZUFBQXlDLEdBQUE5Z0UsRUFBQW5FLElBQXFEdWtFLG1CQUFBdmtFLEVBQUFza0Usb0JBQUF0a0UsRUFBQXVrRSxtQkFBQWo5RCxHQUFBdEgsRUFBQXVrRSxtQkFBQWgxRCxLQUFBakksRUFBQXRILEVBQUF1a0UsbUJBQUFqOUQsR0FBOEgsU0FBQTI5RCxHQUFBOWdFLEVBQUFtRCxHQUFpQixJQUFBdEgsRUFBQW1FLEVBQUFpdUQsVUFBdUUsT0FBckQsT0FBQXB5RCxHQUFBc0gsSUFBQXRILEVBQUF5aUUsY0FBQW43RCxFQUFBbkQsRUFBQXMrRCxZQUFBaUMsR0FBQXA5RCxJQUFxREEsRUFDaFQsU0FBQTQ5RCxHQUFBL2dFLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQThELEVBQUFTLEdBQXlCLE9BQUF4RSxFQUFBK0YsS0FBYyxnQ0FBQTVCLEVBQUFuRSxFQUFBNGtFLFNBQUF6Z0UsRUFBQXJFLEtBQUEwRSxFQUFBdkUsRUFBQThELEdBQUFJLEVBQWdFLE9BQUFBLEVBQUFxdUQsV0FBQSxLQUFBcnVELEVBQUFxdUQsVUFBQSxHQUF3QyxPQUEyRCxXQUF4Q3p1RCxFQUFBLG1CQUFuQkksRUFBQW5FLEVBQUE0a0UsU0FBbUJ6Z0UsRUFBQXJFLEtBQUEwRSxFQUFBdkUsRUFBQThELEdBQUFJLFNBQXdDLElBQUFKLEVBQUEsTUFBOEIsT0FBQTNDLEtBQVduQixFQUFBOEQsR0FBTSxPQUFBa2dFLElBQUEsRUFBYSxPQUFBaGtFLEVBQ3RRLFNBQUFrbEUsR0FBQWhoRSxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUE4RCxHQUF1QmtnRSxJQUFBLEVBQWdCLFFBQUF6L0QsR0FBVjhDLEVBQUEyOUQsR0FBQTlnRSxFQUFBbUQsSUFBVTY4RCxVQUFBdmxDLEVBQUEsS0FBQXZsQixFQUFBLEVBQUF3RyxFQUFBdlksRUFBQTg4RCxZQUFBeGtFLEVBQUE0RSxFQUFxRCxPQUFBcWIsR0FBUyxDQUFFLElBQUE5ZixFQUFBOGYsRUFBQWtqRCxlQUF1QmhqRSxFQUFBZ0UsR0FBUSxPQUFBNjZCLE1BQUEvZSxFQUFBcmIsRUFBQTVFLElBQUEsSUFBQXlaLEtBQUF0WixLQUFBc1osRUFBQXRaLEtBQXNDSCxFQUFBc2xFLEdBQUEvZ0UsRUFBQW1ELEVBQUF1WSxFQUFBamdCLEVBQUFJLEVBQUFDLEdBQUEsT0FBQTRmLEVBQUFnbEQsV0FBQTFnRSxFQUFBcXVELFdBQUEsR0FBQTN5QyxFQUFBZ2pELFdBQUEsWUFBQXY3RCxFQUFBcTdELFdBQUFyN0QsRUFBQXM3RCxZQUFBdDdELEVBQUFxN0QsV0FBQTlpRCxHQUFBdlksRUFBQXE3RCxXQUFBRSxXQUFBaGpELEVBQUF2WSxFQUFBcTdELFdBQUE5aUQsS0FBMEtBLElBQUF0USxLQUFnQixJQUFQeFAsRUFBQSxLQUFPOGYsRUFBQXZZLEVBQUFnOUQsb0JBQTRCLE9BQUF6a0QsR0FBUyxDQUFFLElBQUFoZixFQUFBZ2YsRUFBQWtqRCxlQUF1QmxpRSxFQUFBa0QsR0FBUSxPQUFBaEUsTUFBQThmLEVBQUEsT0FBQStlLElBQUFwNkIsRUFBQTVFLEtBQUEsSUFBQXlaLEtBQUF4WSxLQUFBd1ksRUFBQXhZLEtBQWtEakIsRUFBQXNsRSxHQUFBL2dFLEVBQUFtRCxFQUFBdVksRUFBQWpnQixFQUFBSSxFQUFBQyxHQUM5ZCxPQUFBNGYsRUFBQWdsRCxXQUFBMWdFLEVBQUFxdUQsV0FBQSxHQUFBM3lDLEVBQUFnakQsV0FBQSxZQUFBdjdELEVBQUFtOUQsbUJBQUFuOUQsRUFBQWs5RCxvQkFBQWw5RCxFQUFBbTlELG1CQUFBNWtELEdBQUF2WSxFQUFBbTlELG1CQUFBNUIsV0FBQWhqRCxFQUFBdlksRUFBQW05RCxtQkFBQTVrRCxLQUEyTEEsSUFBQXRRLEtBQVMsT0FBQXF2QixJQUFBdDNCLEVBQUErOEQsV0FBQSxNQUE4QixPQUFBdGtFLEVBQUF1SCxFQUFBaTlELG1CQUFBLEtBQUFwZ0UsRUFBQXF1RCxXQUFBLEdBQW1ELE9BQUE1ekIsR0FBQSxPQUFBNytCLElBQUF5RSxFQUFBNUUsR0FBMEIwSCxFQUFBNjhELFVBQUEzL0QsRUFBYzhDLEVBQUE4OEQsWUFBQXhsQyxFQUFnQnQzQixFQUFBZzlELG9CQUFBdmtFLEVBQXdCb0UsRUFBQTQrRCxlQUFBMXBELEVBQW1CbFYsRUFBQXErRCxjQUFBNWlFLEVBQ3hYLFNBQUF3bEUsR0FBQWpoRSxFQUFBbUQsRUFBQXRILEdBQW1CLE9BQUFzSCxFQUFBZzlELHNCQUFBLE9BQUFoOUQsRUFBQSs4RCxhQUFBLzhELEVBQUErOEQsV0FBQTkwRCxLQUFBakksRUFBQWc5RCxvQkFBQWg5RCxFQUFBKzhELFdBQUEvOEQsRUFBQWk5RCxvQkFBQWo5RCxFQUFBZzlELG9CQUFBaDlELEVBQUFpOUQsbUJBQUEsTUFBaUxjLEdBQUEvOUQsRUFBQXM3RCxZQUFBNWlFLEdBQW9Cc0gsRUFBQXM3RCxZQUFBdDdELEVBQUFxN0QsV0FBQSxLQUFnQzBDLEdBQUEvOUQsRUFBQWs5RCxvQkFBQXhrRSxHQUE0QnNILEVBQUFrOUQsb0JBQUFsOUQsRUFBQW05RCxtQkFBQSxLQUFnRCxTQUFBWSxHQUFBbGhFLEVBQUFtRCxHQUFpQixLQUFLLE9BQUFuRCxHQUFTLENBQUUsSUFBQW5FLEVBQUFtRSxFQUFBMGdFLFNBQWlCLFVBQUE3a0UsRUFBQSxDQUFhbUUsRUFBQTBnRSxTQUFBLEtBQWdCLElBQUE1a0UsRUFBQXFILEVBQVEsbUJBQUF0SCxHQUFBOFUsRUFBQSxNQUFBOVUsR0FBd0NBLEVBQUFGLEtBQUFHLEdBQVVrRSxJQUFBMCtELFlBQzdjLFNBQUF5QyxHQUFBbmhFLEVBQUFtRCxHQUFpQixPQUFPMUcsTUFBQXVELEVBQUFqQyxPQUFBb0YsRUFBQXVoQixNQUFBK2lDLEdBQUF0a0QsSUFBOEIsSUFBQXFNLElBQVFrcEMsUUFBQSxNQUFhMG9CLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxHQUFBLEtBQXlCLFNBQUFDLEdBQUF2aEUsRUFBQW1ELEdBQWlCLElBQUF0SCxFQUFBbUUsRUFBQWxDLEtBQUEyOEMsU0FBc0I3QixHQUFBcHBDLEdBQUEzVCxFQUFBdStDLGVBQXdCditDLEVBQUF1K0MsY0FBQWozQyxFQUFrQixTQUFBcStELEdBQUF4aEUsR0FBZSxJQUFBbUQsRUFBQXFNLEdBQUFrcEMsUUFBaUJELEdBQUFqcEMsSUFBUXhQLEVBQUFsQyxLQUFBMjhDLFNBQUFMLGNBQUFqM0MsRUFBZ0MsU0FBQXMrRCxHQUFBemhFLEdBQWVvaEUsR0FBQXBoRSxFQUFLc2hFLEdBQUFELEdBQUEsS0FBV3JoRSxFQUFBbytELHVCQUFBLEtBQzVSLFNBQUFzRCxHQUFBMWhFLEVBQUFtRCxHQUE2TixPQUE1TW0rRCxLQUFBdGhFLElBQUEsSUFBQW1ELEdBQUEsSUFBQUEsSUFBMEIsaUJBQUFBLEdBQUEsYUFBQUEsSUFBQW0rRCxHQUFBdGhFLEVBQUFtRCxFQUFBLFlBQXlEQSxHQUFHa25CLFFBQUFycUIsRUFBQTJoRSxhQUFBeCtELEVBQUFpSSxLQUFBLE1BQW9DLE9BQUFpMkQsSUFBQSxPQUFBRCxJQUFBendELEVBQUEsT0FBQXl3RCxHQUFBaEQsdUJBQUFpRCxHQUFBbCtELEdBQUFrK0QsTUFBQWoyRCxLQUFBakksR0FBa0ZuRCxFQUFBbzZDLGNBQXVCLElBQUF3bkIsTUFBU3pvQixJQUFJVCxRQUFBa3BCLElBQVdDLElBQUtucEIsUUFBQWtwQixJQUFXRSxJQUFLcHBCLFFBQUFrcEIsSUFBWSxTQUFBRyxHQUFBL2hFLEdBQXNDLE9BQXZCQSxJQUFBNGhFLElBQUFqeEQsRUFBQSxPQUF1QjNRLEVBQ25WLFNBQUFnaUUsR0FBQWhpRSxFQUFBbUQsR0FBaUJ5MUMsR0FBQWtwQixHQUFBMytELEdBQVV5MUMsR0FBQWlwQixHQUFBN2hFLEdBQVU0NEMsR0FBQU8sR0FBQXlvQixJQUFVLElBQUEvbEUsRUFBQXNILEVBQUFzWixTQUFpQixPQUFBNWdCLEdBQVUsZUFBQXNILE9BQUF3WixpQkFBQXhaLEVBQUE2MEQsYUFBQUwsR0FBQSxTQUFrRSxNQUFNLFFBQUF4MEQsRUFBQXcwRCxHQUFBeDBELEdBQUF0SCxFQUFBLElBQUFBLEVBQUFzSCxFQUFBbzdDLFdBQUFwN0MsR0FBQTYwRCxjQUFBLEtBQUFuOEQsSUFBQW9tRSxTQUE0RXhwQixHQUFBVSxJQUFPUCxHQUFBTyxHQUFBaDJDLEdBQVMsU0FBQSsrRCxHQUFBbGlFLEdBQWV5NEMsR0FBQVUsSUFBT1YsR0FBQW9wQixJQUFRcHBCLEdBQUFxcEIsSUFBUSxTQUFBSyxHQUFBbmlFLEdBQWUraEUsR0FBQUQsR0FBQXBwQixTQUFlLElBQUF2MUMsRUFBQTQrRCxHQUFBNW9CLEdBQUFULFNBQW9CNzhDLEVBQUE4N0QsR0FBQXgwRCxFQUFBbkQsRUFBQWxDLE1BQW1CcUYsSUFBQXRILElBQUErOEMsR0FBQWlwQixHQUFBN2hFLEdBQUE0NEMsR0FBQU8sR0FBQXQ5QyxJQUE0QixTQUFBdW1FLEdBQUFwaUUsR0FBZTZoRSxHQUFBbnBCLFVBQUExNEMsSUFBQXk0QyxHQUFBVSxJQUFBVixHQUFBb3BCLEtBQWlDLElBQUFRLElBQUEsSUFBQTNvQixFQUFBTSxXQUFBNUIsS0FDcmEsU0FBQWtxQixHQUFBdGlFLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBZ0RELEVBQUEsUUFBVEEsSUFBQUMsRUFBbEJxSCxFQUFBbkQsRUFBQXErRCxzQkFBMkIsSUFBQXhpRSxFQUFBc0gsRUFBQWxHLEtBQTZCa0csRUFBQXRILEdBQU1tRSxFQUFBcStELGNBQUF4aUUsRUFBa0MsUUFBaEJDLEVBQUFrRSxFQUFBcytELGNBQWdCLElBQUF0K0QsRUFBQTQrRCxpQkFBQTlpRSxFQUFBa2tFLFVBQUFua0UsR0FDckgsSUFBQTBtRSxJQUFReHFCLFVBQUEsU0FBQS8zQyxHQUFzQixTQUFBQSxJQUFBd2lFLHNCQUFBLElBQUFwVSxHQUFBcHVELElBQTZDazRDLGdCQUFBLFNBQUFsNEMsRUFBQW1ELEVBQUF0SCxHQUFpQ21FLElBQUF3aUUsb0JBQXdCLElBQUExbUUsRUFBQTJtRSxLQUFxQjdpRSxFQUFBNGdFLEdBQVYxa0UsRUFBQTRtRSxHQUFBNW1FLEVBQUFrRSxJQUFzQkosRUFBQTZnRSxRQUFBdDlELE9BQVksSUFBQXRILEdBQUEsT0FBQUEsSUFBQStELEVBQUE4Z0UsU0FBQTdrRSxHQUFxQytrRSxHQUFBNWdFLEVBQUFKLEdBQVEraUUsR0FBQTNpRSxFQUFBbEUsSUFBUW04QyxvQkFBQSxTQUFBajRDLEVBQUFtRCxFQUFBdEgsR0FBcUNtRSxJQUFBd2lFLG9CQUF3QixJQUFBMW1FLEVBQUEybUUsS0FBcUI3aUUsRUFBQTRnRSxHQUFWMWtFLEVBQUE0bUUsR0FBQTVtRSxFQUFBa0UsSUFBc0JKLEVBQUFnQyxJQUFBLEVBQVFoQyxFQUFBNmdFLFFBQUF0OUQsT0FBWSxJQUFBdEgsR0FBQSxPQUFBQSxJQUFBK0QsRUFBQThnRSxTQUFBN2tFLEdBQXFDK2tFLEdBQUE1Z0UsRUFBQUosR0FBUStpRSxHQUFBM2lFLEVBQUFsRSxJQUFRazhDLG1CQUFBLFNBQUFoNEMsRUFBQW1ELEdBQWtDbkQsSUFBQXdpRSxvQkFBd0IsSUFBQTNtRSxFQUFBNG1FLEtBQXFCM21FLEVBQUEwa0UsR0FBVjNrRSxFQUFBNm1FLEdBQUE3bUUsRUFBQW1FLElBQXNCbEUsRUFBQThGLElBQUEsT0FBUSxJQUNoZnVCLEdBQUEsT0FBQUEsSUFBQXJILEVBQUE0a0UsU0FBQXY5RCxHQUE0Qnk5RCxHQUFBNWdFLEVBQUFsRSxHQUFRNm1FLEdBQUEzaUUsRUFBQW5FLEtBQVUsU0FBQSttRSxHQUFBNWlFLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQThELEVBQUFTLEVBQUFvNkIsR0FBeUMseUJBQWR6NkIsSUFBQWcrQyxXQUFjNmtCLHNCQUFBN2lFLEVBQUE2aUUsc0JBQUEvbUUsRUFBQXVFLEVBQUFvNkIsSUFBQXQzQixFQUFBL0YsWUFBQStGLEVBQUEvRixVQUFBbzdDLHdCQUFBbG9DLEdBQUF6VSxFQUFBQyxLQUFBd1UsR0FBQTFRLEVBQUFTLElBQXFKLFNBQUF5aUUsR0FBQTlpRSxFQUFBbUQsRUFBQXRILEVBQUFDLEdBQXFCa0UsRUFBQW1ELEVBQUFnc0MsTUFBVSxtQkFBQWhzQyxFQUFBNC9ELDJCQUFBNS9ELEVBQUE0L0QsMEJBQUFsbkUsRUFBQUMsR0FBa0YsbUJBQUFxSCxFQUFBNi9ELGtDQUFBNy9ELEVBQUE2L0QsaUNBQUFubkUsRUFBQUMsR0FBZ0dxSCxFQUFBZ3NDLFFBQUFudkMsR0FBQXVpRSxHQUFBdHFCLG9CQUFBOTBDLElBQUFnc0MsTUFBQSxNQUM3YixTQUFBOHpCLEdBQUFqakUsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFxQixJQUFBOEQsRUFBQUksRUFBQWcrQyxVQUFBMzlDLEVBQUFzNUMsR0FBQXgyQyxHQUFBZzZELEdBQUFwZ0MsR0FBQTJiLFFBQXNDOTRDLEVBQUFzM0IsTUFBQXI3QixFQUFVK0QsRUFBQXV2QyxNQUFBbnZDLEVBQUFxK0QsY0FBd0J6K0QsRUFBQXc0QyxLQUFBaXFCLEdBQVV6aUUsRUFBQXlxQixRQUFBK3lDLEdBQUFwOUQsRUFBQUssR0FBa0MsUUFBaEJBLEVBQUFMLEVBQUFzK0QsZUFBZ0IwQyxHQUFBaGhFLEVBQUFLLEVBQUF4RSxFQUFBK0QsRUFBQTlELEdBQUE4RCxFQUFBdXZDLE1BQUFudkMsRUFBQXErRCxlQUErRSxtQkFBN0JoK0QsRUFBQThDLEVBQUF3cUMsNEJBQTZCMjBCLEdBQUF0aUUsRUFBQW1ELEVBQUE5QyxFQUFBeEUsR0FBQStELEVBQUF1dkMsTUFBQW52QyxFQUFBcStELGVBQTZELG1CQUFBbDdELEVBQUF3cUMsMEJBQUEsbUJBQUEvdEMsRUFBQXNqRSx5QkFBQSxtQkFBQXRqRSxFQUFBdWpFLDJCQUFBLG1CQUFBdmpFLEVBQUF3akUscUJBQUFqZ0UsRUFBQXZELEVBQUF1dkMsTUFBQSxtQkFBQXZ2QyxFQUFBd2pFLG9CQUNyUnhqRSxFQUFBd2pFLHFCQUFBLG1CQUFBeGpFLEVBQUF1akUsMkJBQUF2akUsRUFBQXVqRSw0QkFBQWhnRSxJQUFBdkQsRUFBQXV2QyxPQUFBb3pCLEdBQUF0cUIsb0JBQUFyNEMsSUFBQXV2QyxNQUFBLGNBQUE5dUMsRUFBQUwsRUFBQXMrRCxlQUFBMEMsR0FBQWhoRSxFQUFBSyxFQUFBeEUsRUFBQStELEVBQUE5RCxHQUFBOEQsRUFBQXV2QyxNQUFBbnZDLEVBQUFxK0QsZ0JBQTZOLG1CQUFBeitELEVBQUF5akUsb0JBQUFyakUsRUFBQXF1RCxXQUFBLEdBQTBELElBQUFpVixHQUFBcDhELE1BQUFxUixRQUN2UixTQUFBZ3JELEdBQUF2akUsRUFBQW1ELEVBQUF0SCxHQUEyQixXQUFSbUUsRUFBQW5FLEVBQUF5WCxNQUFRLG1CQUFBdFQsR0FBQSxpQkFBQUEsRUFBQSxDQUF5RCxHQUFBbkUsRUFBQXE5QyxPQUFBLENBQXdCLElBQUFwOUMsT0FBQSxHQUFYRCxJQUFBcTlDLFVBQXdCLElBQUFyOUMsRUFBQStGLEtBQUEsSUFBQS9GLEVBQUErRixLQUFBK08sRUFBQSxPQUFBN1UsRUFBQUQsRUFBQW1pRCxXQUF3RGxpRCxHQUFBNlUsRUFBQSxNQUFBM1EsR0FBb0IsSUFBQUosRUFBQSxHQUFBSSxFQUFXLGNBQUFtRCxHQUFBLE9BQUFBLEVBQUFtUSxLQUFBLG1CQUFBblEsRUFBQW1RLEtBQUFuUSxFQUFBbVEsSUFBQWt3RCxhQUFBNWpFLEVBQUF1RCxFQUFBbVEsTUFBd0ZuUSxFQUFBLFNBQUFuRCxHQUFjLElBQUFtRCxFQUFBckgsRUFBQXM4QyxLQUFhajFDLElBQUFrL0QsS0FBQWwvRCxFQUFBckgsRUFBQXM4QyxTQUFzQixPQUFBcDRDLFNBQUFtRCxFQUFBdkQsR0FBQXVELEVBQUF2RCxHQUFBSSxJQUE2QndqRSxXQUFBNWpFLEVBQWV1RCxHQUFTLGlCQUFBbkQsR0FBQTJRLEVBQUEsT0FBb0M5VSxFQUFBcTlDLFFBQUF2b0MsRUFBQSxNQUFBM1EsR0FBMkIsT0FBQUEsRUFDN2MsU0FBQXlqRSxHQUFBempFLEVBQUFtRCxHQUFpQixhQUFBbkQsRUFBQWxDLE1BQUE2UyxFQUFBLHlCQUFBelUsT0FBQWtCLFVBQUFrRyxTQUFBM0gsS0FBQXdILEdBQUEscUJBQXFHakgsT0FBQWdNLEtBQUEvRSxHQUFBOUIsS0FBQSxVQUE4QjhCLEVBQUEsSUFDcEosU0FBQXVnRSxHQUFBMWpFLEdBQWUsU0FBQW1ELElBQUF0SCxHQUFnQixHQUFBbUUsRUFBQSxDQUFNLElBQUFsRSxFQUFBcUgsRUFBQXE3RCxXQUFtQixPQUFBMWlFLEtBQUE0aUUsV0FBQTdpRSxFQUFBc0gsRUFBQXE3RCxXQUFBM2lFLEdBQUFzSCxFQUFBczdELFlBQUF0N0QsRUFBQXE3RCxXQUFBM2lFLEVBQXNFQSxFQUFBNmlFLFdBQUEsS0FBa0I3aUUsRUFBQXd5RCxVQUFBLEdBQWUsU0FBQXh5RCxJQUFBQyxHQUFnQixJQUFBa0UsRUFBQSxZQUFrQixLQUFLLE9BQUFsRSxHQUFTcUgsRUFBQXRILEVBQUFDLE9BQUEyeUQsUUFBb0IsWUFBWSxTQUFBM3lELEVBQUFrRSxFQUFBbUQsR0FBZ0IsSUFBQW5ELEVBQUEsSUFBQTBQLElBQWMsT0FBQXZNLEdBQVMsT0FBQUEsRUFBQXBHLElBQUFpRCxFQUFBaUssSUFBQTlHLEVBQUFwRyxJQUFBb0csR0FBQW5ELEVBQUFpSyxJQUFBOUcsRUFBQWlDLE1BQUFqQyxPQUFBc3JELFFBQTBELE9BQUF6dUQsRUFBUyxTQUFBSixFQUFBSSxFQUFBbUQsRUFBQXRILEdBQXVELE9BQXJDbUUsRUFBQTgrRCxHQUFBOStELEVBQUFtRCxFQUFBdEgsSUFBWXVKLE1BQUEsRUFBVXBGLEVBQUF5dUQsUUFBQSxLQUFlenVELEVBQVMsU0FBQUssRUFBQThDLEVBQUF0SCxFQUFBQyxHQUE0QixPQUFWcUgsRUFBQWlDLE1BQUF0SixFQUFVa0UsRUFBNkIsUUFBZGxFLEVBQUFxSCxFQUFBOHFELFlBQWNueUQsSUFBQXNKLE9BQUF2SixHQUFBc0gsRUFBQWtyRCxVQUNsZCxFQUFBeHlELEdBQUFDLEdBQU9xSCxFQUFBa3JELFVBQUEsRUFBY3h5RCxHQURnYUEsRUFDdlosU0FBQTQrQixFQUFBdDNCLEdBQXFELE9BQXZDbkQsR0FBQSxPQUFBbUQsRUFBQThxRCxZQUFBOXFELEVBQUFrckQsVUFBQSxHQUF1Q2xyRCxFQUFTLFNBQUErUixFQUFBbFYsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFvQixjQUFBcUgsR0FBQSxJQUFBQSxFQUFBdkIsTUFBQXVCLEVBQUE4N0QsR0FBQXBqRSxFQUFBbUUsRUFBQXJELEtBQUFiLElBQUE4aUQsT0FBQTUrQyxFQUFBbUQsS0FBNERBLEVBQUF2RCxFQUFBdUQsRUFBQXRILEVBQUFDLElBQVc4aUQsT0FBQTUrQyxFQUFXbUQsR0FBUyxTQUFBdVksRUFBQTFiLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBb0IsY0FBQXFILEtBQUFyRixPQUFBakMsRUFBQWlDLE9BQUFoQyxFQUFBOEQsRUFBQXVELEVBQUF0SCxFQUFBcTdCLE1BQUFwN0IsSUFBQXdYLElBQUFpd0QsR0FBQXZqRSxFQUFBbUQsRUFBQXRILEdBQUFDLEVBQUE4aUQsT0FBQTUrQyxFQUFBbEUsS0FBa0ZBLEVBQUFpakUsR0FBQWxqRSxFQUFBbUUsRUFBQXJELEtBQUFiLElBQWlCd1gsSUFBQWl3RCxHQUFBdmpFLEVBQUFtRCxFQUFBdEgsR0FBZ0JDLEVBQUE4aUQsT0FBQTUrQyxFQUFXbEUsR0FBUyxTQUFBTCxFQUFBdUUsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFvQixjQUFBcUgsR0FBQSxJQUFBQSxFQUFBdkIsS0FBQXVCLEVBQUE2NkMsVUFBQWtXLGdCQUFBcjRELEVBQUFxNEQsZUFBQS93RCxFQUFBNjZDLFVBQUFvaEIsaUJBQUF2akUsRUFBQXVqRSxpQkFBQWo4RCxFQUMxWCs3RCxHQUFBcmpFLEVBQUFtRSxFQUFBckQsS0FBQWIsSUFBQThpRCxPQUFBNStDLEVBQUFtRCxLQUE0QkEsRUFBQXZELEVBQUF1RCxFQUFBdEgsRUFBQW05QyxhQUFBbDlDLElBQXdCOGlELE9BQUE1K0MsRUFBV21ELEdBQVMsU0FBQXZILEVBQUFvRSxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUF1RSxHQUFzQixjQUFBOEMsR0FBQSxJQUFBQSxFQUFBdkIsTUFBQXVCLEVBQUE2N0QsR0FBQW5qRSxFQUFBbUUsRUFBQXJELEtBQUFiLEVBQUF1RSxJQUFBdStDLE9BQUE1K0MsRUFBQW1ELEtBQThEQSxFQUFBdkQsRUFBQXVELEVBQUF0SCxFQUFBQyxJQUFXOGlELE9BQUE1K0MsRUFBV21ELEdBQVMsU0FBQXpHLEVBQUFzRCxFQUFBbUQsRUFBQXRILEdBQWtCLG9CQUFBc0gsR0FBQSxpQkFBQUEsRUFBQSxPQUFBQSxFQUFBODdELEdBQUEsR0FBQTk3RCxFQUFBbkQsRUFBQXJELEtBQUFkLElBQUEraUQsT0FBQTUrQyxFQUFBbUQsRUFBb0Ysb0JBQUFBLEdBQUEsT0FBQUEsRUFBQSxDQUFrQyxPQUFBQSxFQUFBODFDLFVBQW1CLEtBQUF5TixHQUFBLE9BQUE3cUQsRUFBQWtqRSxHQUFBNTdELEVBQUFuRCxFQUFBckQsS0FBQWQsSUFBQXlYLElBQUFpd0QsR0FBQXZqRSxFQUFBLEtBQUFtRCxHQUFBdEgsRUFBQStpRCxPQUFBNStDLEVBQUFuRSxFQUFnRSxLQUFBOHFELEdBQUEsT0FBQXhqRCxFQUFBKzdELEdBQUEvN0QsRUFBQW5ELEVBQUFyRCxLQUFBZCxJQUFBK2lELE9BQUE1K0MsRUFBQW1ELEVBQTZDLEdBQUFtZ0UsR0FBQW5nRSxJQUFBa2tELEdBQUFsa0QsR0FBQSxPQUFBQSxFQUFBNjdELEdBQUE3N0QsRUFBQW5ELEVBQUFyRCxLQUFBZCxFQUFBLE9BQUEraUQsT0FDbmM1K0MsRUFBQW1ELEVBQUlzZ0UsR0FBQXpqRSxFQUFBbUQsR0FBUSxZQUFZLFNBQUFzZixFQUFBemlCLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBb0IsSUFBQThELEVBQUEsT0FBQXVELElBQUFwRyxJQUFBLEtBQTBCLG9CQUFBbEIsR0FBQSxpQkFBQUEsRUFBQSxjQUFBK0QsRUFBQSxLQUFBc1YsRUFBQWxWLEVBQUFtRCxFQUFBLEdBQUF0SCxFQUFBQyxHQUErRSxvQkFBQUQsR0FBQSxPQUFBQSxFQUFBLENBQWtDLE9BQUFBLEVBQUFvOUMsVUFBbUIsS0FBQXlOLEdBQUEsT0FBQTdxRCxFQUFBa0IsTUFBQTZDLEVBQUEvRCxFQUFBaUMsT0FBQThvRCxHQUFBaHJELEVBQUFvRSxFQUFBbUQsRUFBQXRILEVBQUFxN0IsTUFBQThoQixTQUFBbDlDLEVBQUE4RCxHQUFBOGIsRUFBQTFiLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBQSxLQUFpRixLQUFBNnFELEdBQUEsT0FBQTlxRCxFQUFBa0IsTUFBQTZDLEVBQUFuRSxFQUFBdUUsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFBLEtBQXlDLEdBQUF3bkUsR0FBQXpuRSxJQUFBd3JELEdBQUF4ckQsR0FBQSxjQUFBK0QsRUFBQSxLQUFBaEUsRUFBQW9FLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQSxNQUFxRDJuRSxHQUFBempFLEVBQUFuRSxHQUFRLFlBQVksU0FBQWk4QyxFQUFBOTNDLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQThELEdBQXNCLG9CQUFBOUQsR0FBQSxpQkFBQUEsRUFBQSxPQUFBb1osRUFBQS9SLEVBQUFuRCxJQUFBM0QsSUFBQVIsSUFBQSxRQUFBQyxFQUFBOEQsR0FDbmEsb0JBQUE5RCxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQW05QyxVQUFtQixLQUFBeU4sR0FBQSxPQUFBMW1ELElBQUEzRCxJQUFBLE9BQUFQLEVBQUFpQixJQUFBbEIsRUFBQUMsRUFBQWlCLE1BQUEsS0FBQWpCLEVBQUFnQyxPQUFBOG9ELEdBQUFockQsRUFBQXVILEVBQUFuRCxFQUFBbEUsRUFBQW83QixNQUFBOGhCLFNBQUFwNUMsRUFBQTlELEVBQUFpQixLQUFBMmUsRUFBQXZZLEVBQUFuRCxFQUFBbEUsRUFBQThELEdBQTBHLEtBQUErbUQsR0FBQSxPQUFBbHJELEVBQUEwSCxFQUFBbkQsSUFBQTNELElBQUEsT0FBQVAsRUFBQWlCLElBQUFsQixFQUFBQyxFQUFBaUIsTUFBQSxLQUFBakIsRUFBQThELEdBQThELEdBQUEwakUsR0FBQXhuRSxJQUFBdXJELEdBQUF2ckQsR0FBQSxPQUFBRixFQUFBdUgsRUFBQW5ELElBQUEzRCxJQUFBUixJQUFBLEtBQUFDLEVBQUE4RCxFQUFBLE1BQXdENmpFLEdBQUF0Z0UsRUFBQXJILEdBQVEsWUFBWSxTQUFBKzdDLEVBQUFqNEMsRUFBQTY2QixFQUFBL2UsRUFBQXhHLEdBQW9CLFFBQUF6WixFQUFBLEtBQUFhLEVBQUEsS0FBQWdCLEVBQUFtOUIsRUFBQTcrQixFQUFBNitCLEVBQUEsRUFBQWtkLEVBQUEsS0FBdUMsT0FBQXI2QyxHQUFBMUIsRUFBQThmLEVBQUF2WixPQUFxQnZHLElBQUEsQ0FBSzBCLEVBQUE4SCxNQUFBeEosR0FBQSs3QyxFQUFBcjZDLElBQUEsTUFBQXE2QyxFQUFBcjZDLEVBQUFteEQsUUFBbUMsSUFBQTkvQyxFQUFBOFQsRUFBQTdpQixFQUFBdEMsRUFBQW9lLEVBQUE5ZixHQUFBc1osR0FBb0IsVUFBQXZHLEVBQUEsQ0FBYSxPQUFBclIsTUFBQXE2QyxHQUFnQixNQUFNMzNDLEdBQUExQyxHQUFBLE9BQUFxUixFQUFBcy9DLFdBQUE5cUQsRUFBQXZELEVBQ3hkdEMsR0FBR205QixFQUFBcDZCLEVBQUFzTyxFQUFBOHJCLEVBQUE3K0IsR0FBVyxPQUFBVSxFQUFBYixFQUFBa1QsRUFBQXJTLEVBQUFteUQsUUFBQTkvQyxFQUF5QnJTLEVBQUFxUyxFQUFJclIsRUFBQXE2QyxFQUFJLEdBQUEvN0MsSUFBQThmLEVBQUF2WixPQUFBLE9BQUF0RyxFQUFBK0QsRUFBQXRDLEdBQUE3QixFQUFnQyxVQUFBNkIsRUFBQSxDQUFhLEtBQUsxQixFQUFBOGYsRUFBQXZaLE9BQVd2RyxLQUFBMEIsRUFBQVosRUFBQWtELEVBQUE4YixFQUFBOWYsR0FBQXNaLE1BQUF1bEIsRUFBQXA2QixFQUFBL0MsRUFBQW05QixFQUFBNytCLEdBQUEsT0FBQVUsRUFBQWIsRUFBQTZCLEVBQUFoQixFQUFBbXlELFFBQUFueEQsRUFBQWhCLEVBQUFnQixHQUE2RCxPQUFBN0IsRUFBUyxJQUFBNkIsRUFBQXhCLEVBQUE4RCxFQUFBdEMsR0FBYTFCLEVBQUE4ZixFQUFBdlosT0FBV3ZHLEtBQUErN0MsRUFBQUcsRUFBQXg2QyxFQUFBc0MsRUFBQWhFLEVBQUE4ZixFQUFBOWYsR0FBQXNaLE1BQUFsVixHQUFBLE9BQUEyM0MsRUFBQXNXLFdBQUEzd0QsRUFBQW9zQyxPQUFBLE9BQUFpTyxFQUFBNTZDLElBQUFuQixFQUFBKzdDLEVBQUE1NkMsS0FBQTA5QixFQUFBcDZCLEVBQUFzM0MsRUFBQWxkLEVBQUE3K0IsR0FBQSxPQUFBVSxFQUFBYixFQUFBazhDLEVBQUFyN0MsRUFBQW15RCxRQUFBOVcsRUFBQXI3QyxFQUFBcTdDLEdBQWdLLE9BQXpDMzNDLEdBQUExQyxFQUFBNE8sUUFBQSxTQUFBbE0sR0FBeUIsT0FBQW1ELEVBQUF2RCxFQUFBSSxLQUFnQnZFLEVBQVMsU0FBQW04QyxFQUFBaDRDLEVBQUE2NkIsRUFBQS9lLEVBQUF4RyxHQUFvQixJQUFBelosRUFBQTRyRCxHQUFBM3JDLEdBQVksbUJBQUFqZ0IsR0FBQWtWLEVBQUEsT0FBa0QsT0FBWitLLEVBQUFqZ0IsRUFBQUUsS0FBQStmLEtBQVkvSyxFQUFBLE9BQXdCLFFBQUEvVSxFQUFBSCxFQUFBLEtBQUE2QixFQUFBbTlCLEVBQUFuK0IsRUFBQW0rQixFQUM3ZCxFQUFBa2QsRUFBQSxLQUFBaHBDLEVBQUErTSxFQUFBdFEsT0FBb0IsT0FBQTlOLElBQUFxUixFQUFBdEQsS0FBa0IvTyxJQUFBcVMsRUFBQStNLEVBQUF0USxPQUFBLENBQWdCOU4sRUFBQThILE1BQUE5SSxHQUFBcTdDLEVBQUFyNkMsSUFBQSxNQUFBcTZDLEVBQUFyNkMsRUFBQW14RCxRQUFtQyxJQUFBN1csRUFBQW4xQixFQUFBN2lCLEVBQUF0QyxFQUFBcVIsRUFBQWxTLE1BQUF5WSxHQUF1QixVQUFBMGlDLEVBQUEsQ0FBYXQ2QyxNQUFBcTZDLEdBQVMsTUFBTTMzQyxHQUFBMUMsR0FBQSxPQUFBczZDLEVBQUFxVyxXQUFBOXFELEVBQUF2RCxFQUFBdEMsR0FBaUNtOUIsRUFBQXA2QixFQUFBdTNDLEVBQUFuZCxFQUFBbitCLEdBQVcsT0FBQVYsRUFBQUgsRUFBQW04QyxFQUFBaDhDLEVBQUE2eUQsUUFBQTdXLEVBQXlCaDhDLEVBQUFnOEMsRUFBSXQ2QyxFQUFBcTZDLEVBQUksR0FBQWhwQyxFQUFBdEQsS0FBQSxPQUFBeFAsRUFBQStELEVBQUF0QyxHQUFBN0IsRUFBMEIsVUFBQTZCLEVBQUEsQ0FBYSxNQUFLcVIsRUFBQXRELEtBQVEvTyxJQUFBcVMsRUFBQStNLEVBQUF0USxPQUFBLFFBQUF1RCxFQUFBalMsRUFBQWtELEVBQUErTyxFQUFBbFMsTUFBQXlZLE1BQUF1bEIsRUFBQXA2QixFQUFBc08sRUFBQThyQixFQUFBbitCLEdBQUEsT0FBQVYsRUFBQUgsRUFBQWtULEVBQUEvUyxFQUFBNnlELFFBQUE5L0MsRUFBQS9TLEVBQUErUyxHQUFvRixPQUFBbFQsRUFBUyxJQUFBNkIsRUFBQXhCLEVBQUE4RCxFQUFBdEMsSUFBYXFSLEVBQUF0RCxLQUFRL08sSUFBQXFTLEVBQUErTSxFQUFBdFEsT0FBQSxRQUFBdUQsRUFBQW1wQyxFQUFBeDZDLEVBQUFzQyxFQUFBdEQsRUFBQXFTLEVBQUFsUyxNQUFBeVksTUFBQWxWLEdBQUEsT0FBQTJPLEVBQUFzL0MsV0FBQTN3RCxFQUFBb3NDLE9BQUEsT0FBQS82QixFQUFBNVIsSUFBQVQsRUFBQXFTLEVBQUE1UixLQUFBMDlCLEVBQUFwNkIsRUFBQXNPLEVBQUE4ckIsRUFBQW4rQixHQUFBLE9BQy9YVixFQUFBSCxFQUFBa1QsRUFBQS9TLEVBQUE2eUQsUUFBQTkvQyxFQUFBL1MsRUFBQStTLEdBQWdFLE9BQXpDM08sR0FBQTFDLEVBQUE0TyxRQUFBLFNBQUFsTSxHQUF5QixPQUFBbUQsRUFBQXZELEVBQUFJLEtBQWdCdkUsRUFBUyxnQkFBQXVFLEVBQUFsRSxFQUFBdUUsRUFBQXFiLEdBQXlCLElBQUF4RyxFQUFBLGlCQUFBN1UsR0FBQSxPQUFBQSxLQUFBdkMsT0FBQThvRCxJQUFBLE9BQUF2bUQsRUFBQXRELElBQStEbVksSUFBQTdVLElBQUE2MkIsTUFBQThoQixVQUF3QixJQUFBdjlDLEVBQUEsaUJBQUE0RSxHQUFBLE9BQUFBLEVBQW9DLEdBQUE1RSxFQUFBLE9BQUE0RSxFQUFBNDRDLFVBQXdCLEtBQUF5TixHQUFBMW1ELEVBQUEsQ0FBbUIsSUFBUnZFLEVBQUE0RSxFQUFBdEQsSUFBUW1ZLEVBQUFwWixFQUFRLE9BQUFvWixHQUFTLENBQUUsR0FBQUEsRUFBQW5ZLE1BQUF0QixFQUFBLFFBQUF5WixFQUFBdFQsSUFBQXZCLEVBQUF2QyxPQUFBOG9ELEdBQUExeEMsRUFBQXBYLE9BQUF1QyxFQUFBdkMsS0FBQSxDQUF1RGpDLEVBQUFtRSxFQUFBa1YsRUFBQXU1QyxVQUFlM3lELEVBQUE4RCxFQUFBc1YsRUFBQTdVLEVBQUF2QyxPQUFBOG9ELEdBQUF2bUQsRUFBQTYyQixNQUFBOGhCLFNBQUEzNEMsRUFBQTYyQixNQUFBeGIsSUFBOENwSSxJQUFBaXdELEdBQUF2akUsRUFBQWtWLEVBQUE3VSxHQUFnQnZFLEVBQUE4aUQsT0FBQTUrQyxFQUFXQSxFQUFBbEUsRUFBSSxNQUFBa0UsRUFBYW5FLEVBQUFtRSxFQUFBa1YsR0FBTyxNQUFNL1IsRUFBQW5ELEVBQUFrVixHQUFZQSxJQUFBdTVDLFFBQVlwdUQsRUFBQXZDLE9BQUE4b0QsS0FBQTlxRCxFQUFBa2pFLEdBQUEzK0QsRUFBQTYyQixNQUFBOGhCLFNBQ2hlaDVDLEVBQUFyRCxLQUFBK2UsRUFBQXJiLEVBQUF0RCxNQUFBNmhELE9BQUE1K0MsSUFBQWxFLEtBQUE0ZixFQUFBcWpELEdBQUExK0QsRUFBQUwsRUFBQXJELEtBQUErZSxJQUFBcEksSUFBQWl3RCxHQUFBdmpFLEVBQUFsRSxFQUFBdUUsR0FBQXFiLEVBQUFrakMsT0FBQTUrQyxJQUFBMGIsR0FBa0YsT0FBQStlLEVBQUF6NkIsR0FBWSxLQUFBMm1ELEdBQUEzbUQsRUFBQSxDQUFXLElBQUFrVixFQUFBN1UsRUFBQXRELElBQVksT0FBQWpCLEdBQVMsQ0FBRSxHQUFBQSxFQUFBaUIsTUFBQW1ZLEVBQUEsUUFBQXBaLEVBQUE4RixLQUFBOUYsRUFBQWtpRCxVQUFBa1csZ0JBQUE3ekQsRUFBQTZ6RCxlQUFBcDRELEVBQUFraUQsVUFBQW9oQixpQkFBQS8rRCxFQUFBKytELGVBQUEsQ0FBdUh2akUsRUFBQW1FLEVBQUFsRSxFQUFBMnlELFVBQWUzeUQsRUFBQThELEVBQUE5RCxFQUFBdUUsRUFBQTI0QyxhQUFBdDlCLElBQXdCa2pDLE9BQUE1K0MsRUFBV0EsRUFBQWxFLEVBQUksTUFBQWtFLEVBQWFuRSxFQUFBbUUsRUFBQWxFLEdBQU8sTUFBTXFILEVBQUFuRCxFQUFBbEUsR0FBWUEsSUFBQTJ5RCxTQUFZM3lELEVBQUFvakUsR0FBQTcrRCxFQUFBTCxFQUFBckQsS0FBQStlLElBQWlCa2pDLE9BQUE1K0MsRUFBV0EsRUFBQWxFLEVBQUksT0FBQTIrQixFQUFBejZCLEdBQVksb0JBQUFLLEdBQUEsaUJBQUFBLEVBQUEsT0FBQUEsRUFBQSxHQUFBQSxFQUFBLE9BQUF2RSxHQUFBLElBQUFBLEVBQUE4RixLQUFBL0YsRUFBQW1FLEVBQUFsRSxFQUFBMnlELFVBQUEzeUQsRUFBQThELEVBQUE5RCxFQUFBdUUsRUFBQXFiLElBQUFrakMsT0FDM1k1K0MsSUFBQWxFLElBQUFELEVBQUFtRSxFQUFBbEUsTUFBQW1qRSxHQUFBNStELEVBQUFMLEVBQUFyRCxLQUFBK2UsSUFBQWtqQyxPQUFBNStDLElBQUFsRSxHQUFBMitCLEVBQUF6NkIsR0FBcUQsR0FBQXNqRSxHQUFBampFLEdBQUEsT0FBQXczQyxFQUFBNzNDLEVBQUFsRSxFQUFBdUUsRUFBQXFiLEdBQTJCLEdBQUEyckMsR0FBQWhuRCxHQUFBLE9BQUF1M0MsRUFBQTUzQyxFQUFBbEUsRUFBQXVFLEVBQUFxYixHQUFzQyxHQUFYamdCLEdBQUFnb0UsR0FBQXpqRSxFQUFBSyxRQUFXLElBQUFBLElBQUE2VSxFQUFBLE9BQUFsVixFQUFBNEIsS0FBNEMscUJBQUErTyxFQUFBLE9BQUErSyxFQUFBMWIsRUFBQWxDLE1BQUEydkMsYUFBQS94QixFQUFBM2YsTUFBQSxhQUEwRSxPQUFBRixFQUFBbUUsRUFBQWxFLElBQWUsSUFBQTZuRSxHQUFBRCxJQUFBLEdBQUFFLEdBQUFGLElBQUEsR0FBQUcsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLElBQUEsRUFBOEMsU0FBQUMsR0FBQWhrRSxFQUFBbUQsR0FBaUIsSUFBQXRILEVBQUEsSUFBQXFpRSxHQUFBLGVBQTRCcmlFLEVBQUFpQyxLQUFBLFVBQWlCakMsRUFBQW1pRCxVQUFBNzZDLEVBQWN0SCxFQUFBK2lELE9BQUE1K0MsRUFBV25FLEVBQUF3eUQsVUFBQSxFQUFjLE9BQUFydUQsRUFBQXcrRCxZQUFBeCtELEVBQUF3K0QsV0FBQUUsV0FBQTdpRSxFQUFBbUUsRUFBQXcrRCxXQUFBM2lFLEdBQUFtRSxFQUFBeStELFlBQUF6K0QsRUFBQXcrRCxXQUFBM2lFLEVBQzlZLFNBQUFvb0UsR0FBQWprRSxFQUFBbUQsR0FBaUIsT0FBQW5ELEVBQUE0QixLQUFjLFdBQUEvRixFQUFBbUUsRUFBQWxDLEtBQXdGLGVBQXBFcUYsRUFBQSxJQUFBQSxFQUFBc1osVUFBQTVnQixFQUFBcUcsZ0JBQUFpQixFQUFBc2lELFNBQUF2akQsY0FBQSxLQUFBaUIsS0FBb0VuRCxFQUFBZytDLFVBQUE3NkMsR0FBQSxHQUFzQyxzQkFBQUEsRUFBQSxLQUFBbkQsRUFBQW0rRCxjQUFBLElBQUFoN0QsRUFBQXNaLFNBQUEsS0FBQXRaLEtBQUFuRCxFQUFBZytDLFVBQUE3NkMsR0FBQSxHQUEwRixrQkFBa0IsU0FBQStnRSxHQUFBbGtFLEdBQWUsR0FBQStqRSxHQUFBLENBQU8sSUFBQTVnRSxFQUFBMmdFLEdBQVMsR0FBQTNnRSxFQUFBLENBQU0sSUFBQXRILEVBQUFzSCxFQUFRLElBQUE4Z0UsR0FBQWprRSxFQUFBbUQsR0FBQSxDQUFxQixLQUFSQSxFQUFBMjVELEdBQUFqaEUsTUFBUW9vRSxHQUFBamtFLEVBQUFtRCxHQUEyQyxPQUExQm5ELEVBQUFxdUQsV0FBQSxFQUFlMFYsSUFBQSxPQUFNRixHQUFBN2pFLEdBQVlna0UsR0FBQUgsR0FBQWhvRSxHQUFTZ29FLEdBQUE3akUsRUFBSzhqRSxHQUFBL0csR0FBQTU1RCxRQUFTbkQsRUFBQXF1RCxXQUFBLEVBQUEwVixJQUFBLEVBQUFGLEdBQUE3akUsR0FDcFosU0FBQW1rRSxHQUFBbmtFLEdBQWUsSUFBQUEsSUFBQTQrQyxPQUFlLE9BQUE1K0MsR0FBQSxJQUFBQSxFQUFBNEIsS0FBQSxJQUFBNUIsRUFBQTRCLEtBQStCNUIsSUFBQTQrQyxPQUFZaWxCLEdBQUE3akUsRUFBSyxTQUFBb2tFLEdBQUFwa0UsR0FBZSxHQUFBQSxJQUFBNmpFLEdBQUEsU0FBbUIsSUFBQUUsR0FBQSxPQUFBSSxHQUFBbmtFLEdBQUErakUsSUFBQSxLQUE2QixJQUFBNWdFLEVBQUFuRCxFQUFBbEMsS0FBYSxPQUFBa0MsRUFBQTRCLEtBQUEsU0FBQXVCLEdBQUEsU0FBQUEsSUFBQXk1RCxHQUFBejVELEVBQUFuRCxFQUFBdStELGVBQUEsSUFBQXA3RCxFQUFBMmdFLEdBQXNFM2dFLEdBQUU2Z0UsR0FBQWhrRSxFQUFBbUQsS0FBQTI1RCxHQUFBMzVELEdBQWtELE9BQWpDZ2hFLEdBQUFua0UsR0FBTThqRSxHQUFBRCxHQUFBL0csR0FBQTk4RCxFQUFBZytDLFdBQUEsTUFBMkIsRUFBUyxTQUFBcW1CLEtBQWNQLEdBQUFELEdBQUEsS0FBV0UsSUFBQSxFQUM0RCxJQUFBTyxHQUFBOWQsR0FBQW5MLGtCQUE0QixTQUFBLzZDLEdBQUFOLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBb0JxSCxFQUFBcXJELE1BQUEsT0FBQXh1RCxFQUFBNGpFLEdBQUF6Z0UsRUFBQSxLQUFBdEgsRUFBQUMsR0FBQTZuRSxHQUFBeGdFLEVBQUFuRCxFQUFBd3VELE1BQUEzeUQsRUFBQUMsR0FDbGEsU0FBQXlvRSxHQUFBdmtFLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQThELEdBQXVCL0QsSUFBQSsrQyxPQUFXLElBQUF2NkMsRUFBQThDLEVBQUFtUSxJQUFZLE9BQUF5bEMsR0FBQUwsU0FBQXYxQyxFQUFBbzdELGdCQUFBemlFLEdBQUF1RSxLQUFBLE9BQUFMLElBQUFzVCxJQUFBLE9BQXdGaFQsR0FBQU4sRUFBQW1ELEVBQVR0SCxJQUFBQyxFQUFBdUUsR0FBU1QsR0FBV3VELEVBQUFvN0QsY0FBQXppRSxFQUFrQnFILEVBQUFxckQsT0FBckhnVyxHQUFBeGtFLEVBQUFtRCxFQUFBdkQsR0FBb0ksU0FBQTZrRSxHQUFBemtFLEVBQUFtRCxHQUFpQixJQUFBdEgsRUFBQXNILEVBQUFtUSxLQUFZLE9BQUF0VCxHQUFBLE9BQUFuRSxHQUFBLE9BQUFtRSxLQUFBc1QsTUFBQXpYLEtBQUFzSCxFQUFBa3JELFdBQUEsS0FBNEQsU0FBQXFXLEdBQUExa0UsRUFBQW1ELEVBQUF0SCxFQUFBQyxFQUFBOEQsR0FBdUIsSUFBQVMsRUFBQXM1QyxHQUFBOTlDLEdBQUFzaEUsR0FBQXBnQyxHQUFBMmIsUUFBK0YsT0FBdkVyNEMsRUFBQSs4RCxHQUFBajZELEVBQUE5QyxHQUFVb2hFLEdBQUF0K0QsR0FBUXRILElBQUFDLEVBQUF1RSxHQUFTOEMsRUFBQWtyRCxXQUFBLEVBQWUvdEQsR0FBQU4sRUFBQW1ELEVBQUF0SCxFQUFBK0QsR0FBV3VELEVBQUFvN0QsY0FBQXppRSxFQUFrQnFILEVBQUFxckQsTUFDalksU0FBQW1XLEdBQUEza0UsRUFBQW1ELEVBQUF0SCxFQUFBQyxFQUFBOEQsR0FBdUIsR0FBQSs1QyxHQUFBOTlDLEdBQUEsQ0FBUyxJQUFBd0UsR0FBQSxFQUFTdTlELEdBQUF6NkQsUUFBTTlDLEdBQUEsRUFBa0IsR0FBUm9oRSxHQUFBdCtELEdBQVEsT0FBQW5ELEVBQUEsVUFBQW1ELEVBQUE2NkMsVUFBQSxDQUFtQyxJQUFBdmpCLEVBQUFrZixHQUFBOTlDLEdBQUFzaEUsR0FBQXBnQyxHQUFBMmIsUUFBQXhqQyxFQUFBclosRUFBQTB4QyxhQUFBN3hCLEVBQUEsT0FBQXhHLFFBQUEsSUFBQUEsRUFBK0V6WixFQUFBLElBQUFJLEVBQUFDLEVBQWZvWixFQUFBd0csRUFBQTBoRCxHQUFBajZELEVBQUFzM0IsR0FBQXlpQyxJQUFnQy81RCxFQUFBazdELGNBQUEsT0FBQTVpRSxFQUFBMHpDLFlBQUEsSUFBQTF6QyxFQUFBMHpDLE1BQUExekMsRUFBQTB6QyxNQUFBLEtBQThEMXpDLEVBQUF1aUIsUUFBQXVrRCxHQUFhcC9ELEVBQUE2NkMsVUFBQXZpRCxFQUFjQSxFQUFBK21FLG9CQUFBci9ELEVBQXdCdVksT0FBQXZZLEVBQUE2NkMsV0FBQXFmLDRDQUFBNWlDLEVBQUEvZSxFQUFBNGhELDBDQUFBcG9ELEdBQWlIK3RELEdBQUE5L0QsRUFBQXRILEVBQUFDLEVBQUE4RCxHQUFZOUQsR0FBQSxNQUFLLENBQUsyK0IsRUFBQXQzQixFQUFBNjZDLFVBQWM5b0MsRUFBQS9SLEVBQUFvN0QsY0FBa0I5akMsRUFBQXZELE1BQUFoaUIsRUFBVSxJQUFBdFosRUFBQTYrQixFQUFBcFEsUUFDbGQzTyxFQUFBMGhELEdBQUFqNkQsRUFBcEJ1WSxFQUFBaStCLEdBQUE5OUMsR0FBQXNoRSxHQUFBcGdDLEdBQUEyYixTQUE4QixJQUFBaDhDLEVBQUFiLEVBQUE4eEMsMEJBQWlDbHlDLEVBQUEsbUJBQUFpQixHQUFBLG1CQUFBKzlCLEVBQUF5b0MsMEJBQUEsbUJBQUF6b0MsRUFBQXVvQyxrQ0FBQSxtQkFBQXZvQyxFQUFBc29DLDRCQUFBN3RELElBQUFwWixHQUFBRixJQUFBOGYsSUFBQW9uRCxHQUFBMy9ELEVBQUFzM0IsRUFBQTMrQixFQUFBNGYsR0FBK01va0QsSUFBQSxFQUFNLElBQUFyOUMsRUFBQXRmLEVBQUFrN0QsY0FBc0J6aUUsRUFBQTYrQixFQUFBMFUsTUFBQTFzQixFQUFZLElBQUFxMUIsRUFBQTMwQyxFQUFBbTdELFlBQW9CLE9BQUF4bUIsSUFBQWtwQixHQUFBNzlELEVBQUEyMEMsRUFBQWg4QyxFQUFBMitCLEVBQUE3NkIsR0FBQWhFLEVBQUF1SCxFQUFBazdELGVBQTRDbnBELElBQUFwWixHQUFBMm1CLElBQUE3bUIsR0FBQW05QyxHQUFBTCxTQUFBb25CLElBQUEsbUJBQUFwakUsSUFBQTRsRSxHQUFBbi9ELEVBQUF0SCxFQUFBYSxFQUFBWixHQUFBRixFQUFBdUgsRUFBQWs3RCxnQkFBQW5wRCxFQUFBNHFELElBQUE4QyxHQUFBei9ELEVBQUF0SCxFQUFBcVosRUFBQXBaLEVBQUEybUIsRUFBQTdtQixFQUFBOGYsS0FBQWpnQixHQUFBLG1CQUN0WGcvQixFQUFBMG9DLDJCQUFBLG1CQUFBMW9DLEVBQUEyb0MscUJBQUEsbUJBQUEzb0MsRUFBQTJvQyxvQkFBQTNvQyxFQUFBMm9DLHFCQUFBLG1CQUFBM29DLEVBQUEwb0MsMkJBQUExb0MsRUFBQTBvQyw2QkFBQSxtQkFBQTFvQyxFQUFBNG9DLG9CQUFBbGdFLEVBQUFrckQsV0FBQSx3QkFBQTV6QixFQUFBNG9DLG9CQUFBbGdFLEVBQUFrckQsV0FBQSxHQUFBbHJELEVBQUFvN0QsY0FBQXppRSxFQUFBcUgsRUFBQWs3RCxjQUFBemlFLEdBQUE2K0IsRUFBQXZELE1BQUFwN0IsRUFBQTIrQixFQUFBMFUsTUFBQXZ6QyxFQUFBNitCLEVBQUFwUSxRQUFBM08sRUFBQTVmLEVBQUFvWixJQUFBLG1CQUFBdWxCLEVBQUE0b0Msb0JBQUFsZ0UsRUFBQWtyRCxXQUFBLEdBQUF2eUQsR0FBQSxRQUFpZTIrQixFQUFBdDNCLEVBQUE2NkMsVUFBQTlvQyxFQUNqZS9SLEVBQUFvN0QsY0FBQTlqQyxFQUFBdkQsTUFBQWhpQixFQUFBdFosRUFBQTYrQixFQUFBcFEsUUFBQTNPLEVBQUEwaEQsR0FBQWo2RCxFQUFBdVksRUFBQWkrQixHQUFBOTlDLEdBQUFzaEUsR0FBQXBnQyxHQUFBMmIsVUFBQWo5QyxFQUFBLG1CQUFBaUIsRUFBQWIsRUFBQTh4QywyQkFBQSxtQkFBQWxULEVBQUF5b0MsMEJBQUEsbUJBQUF6b0MsRUFBQXVvQyxrQ0FBQSxtQkFBQXZvQyxFQUFBc29DLDRCQUFBN3RELElBQUFwWixHQUFBRixJQUFBOGYsSUFBQW9uRCxHQUFBMy9ELEVBQUFzM0IsRUFBQTMrQixFQUFBNGYsR0FBQW9rRCxJQUFBLEVBQUFsa0UsRUFBQXVILEVBQUFrN0QsY0FBQTU3QyxFQUFBZ1ksRUFBQTBVLE1BQUF2ekMsRUFBQSxRQUFBazhDLEVBQUEzMEMsRUFBQW03RCxlQUFBMEMsR0FBQTc5RCxFQUFBMjBDLEVBQUFoOEMsRUFBQTIrQixFQUFBNzZCLEdBQUE2aUIsRUFBQXRmLEVBQUFrN0QsZUFBQW5wRCxJQUFBcFosR0FBQUYsSUFBQTZtQixHQUFBczJCLEdBQUFMLFNBQUFvbkIsSUFBQSxtQkFBQXBqRSxJQUFBNGxFLEdBQUFuL0QsRUFBQXRILEVBQUFhLEVBQUFaLEdBQUEybUIsRUFBQXRmLEVBQUFrN0QsZ0JBQUEzaEUsRUFBQW9qRSxJQUFBOEMsR0FBQXovRCxFQUFBdEgsRUFBQXFaLEVBQUFwWixFQUNBRixFQUFBNm1CLEVBQUEvRyxLQUFBamdCLEdBQUEsbUJBQUFnL0IsRUFBQW1xQyw0QkFBQSxtQkFBQW5xQyxFQUFBb3FDLHNCQUFBLG1CQUFBcHFDLEVBQUFvcUMscUJBQUFwcUMsRUFBQW9xQyxvQkFBQS9vRSxFQUFBMm1CLEVBQUEvRyxHQUFBLG1CQUFBK2UsRUFBQW1xQyw0QkFBQW5xQyxFQUFBbXFDLDJCQUFBOW9FLEVBQUEybUIsRUFBQS9HLElBQUEsbUJBQUErZSxFQUFBcXFDLHFCQUFBM2hFLEVBQUFrckQsV0FBQSxzQkFBQTV6QixFQUFBeW9DLDBCQUFBLy9ELEVBQUFrckQsV0FBQSwwQkFBQTV6QixFQUFBcXFDLG9CQUFBNXZELElBQUFsVixFQUFBdStELGVBQUEzaUUsSUFBQW9FLEVBQUFxK0QsZ0JBQUFsN0QsRUFBQWtyRCxXQUFBLHNCQUNBNXpCLEVBQUF5b0MseUJBQUFodUQsSUFBQWxWLEVBQUF1K0QsZUFBQTNpRSxJQUFBb0UsRUFBQXErRCxnQkFBQWw3RCxFQUFBa3JELFdBQUEsS0FBQWxyRCxFQUFBbzdELGNBQUF6aUUsRUFBQXFILEVBQUFrN0QsY0FBQTU3QyxHQUFBZ1ksRUFBQXZELE1BQUFwN0IsRUFBQTIrQixFQUFBMFUsTUFBQTFzQixFQUFBZ1ksRUFBQXBRLFFBQUEzTyxFQUFBNWYsRUFBQVksSUFBQSxtQkFBQSs5QixFQUFBcXFDLG9CQUFBNXZELElBQUFsVixFQUFBdStELGVBQUEzaUUsSUFBQW9FLEVBQUFxK0QsZ0JBQUFsN0QsRUFBQWtyRCxXQUFBLHNCQUFBNXpCLEVBQUF5b0MseUJBQUFodUQsSUFBQWxWLEVBQUF1K0QsZUFBQTNpRSxJQUFBb0UsRUFBQXErRCxnQkFBQWw3RCxFQUFBa3JELFdBQUEsS0FBQXZ5RCxHQUFBLEdBQWlZLE9BQUFpcEUsR0FBQS9rRSxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUF1RSxFQUFBVCxHQUNqWSxTQUFBbWxFLEdBQUEva0UsRUFBQW1ELEVBQUF0SCxFQUFBQyxFQUFBOEQsRUFBQVMsR0FBeUJva0UsR0FBQXprRSxFQUFBbUQsR0FBUSxJQUFBczNCLEVBQUEsT0FBQXQzQixFQUFBa3JELFdBQTJCLElBQUF2eUQsSUFBQTIrQixFQUFBLE9BQUE3NkIsR0FBQWsrRCxHQUFBMzZELEVBQUF0SCxHQUFBLEdBQUEyb0UsR0FBQXhrRSxFQUFBbUQsRUFBQTlDLEdBQXlDdkUsRUFBQXFILEVBQUE2NkMsVUFBY3NtQixHQUFBNXJCLFFBQUF2MUMsRUFBYSxJQUFBK1IsRUFBQXVsQixFQUFBLEtBQUEzK0IsRUFBQTgrQyxTQUEwSixPQUFsSXozQyxFQUFBa3JELFdBQUEsRUFBZSxPQUFBcnVELEdBQUF5NkIsSUFBQW42QixHQUFBTixFQUFBbUQsRUFBQSxLQUFBOUMsR0FBQThDLEVBQUFxckQsTUFBQSxNQUEwQ2x1RCxHQUFBTixFQUFBbUQsRUFBQStSLEVBQUE3VSxHQUFXOEMsRUFBQWs3RCxjQUFBdmlFLEVBQUFxekMsTUFBd0Joc0MsRUFBQW83RCxjQUFBemlFLEVBQUFvN0IsTUFBd0J0M0IsR0FBQWsrRCxHQUFBMzZELEVBQUF0SCxHQUFBLEdBQWNzSCxFQUFBcXJELE1BQWUsU0FBQXdXLEdBQUFobEUsR0FBZSxJQUFBbUQsRUFBQW5ELEVBQUFnK0MsVUFBa0I3NkMsRUFBQThoRSxlQUFBeEgsR0FBQXo5RCxFQUFBbUQsRUFBQThoRSxlQUFBOWhFLEVBQUE4aEUsaUJBQUE5aEUsRUFBQWtuQixTQUFBbG5CLEVBQUFrbkIsU0FBQW96QyxHQUFBejlELEVBQUFtRCxFQUFBa25CLFNBQUEsR0FBbUcyM0MsR0FBQWhpRSxFQUFBbUQsRUFBQSt3RCxlQUM3YSxTQUFBZ1IsR0FBQWxsRSxFQUFBbUQsR0FBaUIsR0FBQW5ELEtBQUF3dEMsYUFBaUQsUUFBQTN4QyxLQUEzQnNILEVBQUFsRyxLQUFNa0csR0FBSW5ELElBQUF3dEMsa0JBQWlCLElBQUFycUMsRUFBQXRILEtBQUFzSCxFQUFBdEgsR0FBQW1FLEVBQUFuRSxJQUEwQyxPQUFBc0gsRUFHNUcsU0FBQXFoRSxHQUFBeGtFLEVBQUFtRCxFQUFBdEgsR0FBbUIsT0FBQW1FLElBQUFtRCxFQUFBaTdELHVCQUFBcCtELEVBQUFvK0Qsd0JBQThELElBQUF0aUUsRUFBQXFILEVBQUF3N0Qsb0JBQTRCLE9BQUE3aUUsS0FBQUQsRUFBQSxZQUFzRSxHQUE1QyxPQUFBbUUsR0FBQW1ELEVBQUFxckQsUUFBQXh1RCxFQUFBd3VELE9BQUE3OUMsRUFBQSxPQUE0QyxPQUFBeE4sRUFBQXFyRCxNQUFBLENBQStFLElBQWxEM3lELEVBQUFpakUsR0FBVjkrRCxFQUFBbUQsRUFBQXFyRCxNQUFVeHVELEVBQUFtK0QsYUFBQW4rRCxFQUFBNCtELGdCQUF3Q3o3RCxFQUFBcXJELE1BQUEzeUQsRUFBVUEsRUFBQStpRCxPQUFBejdDLEVBQWUsT0FBQW5ELEVBQUF5dUQsU0FBaUJ6dUQsSUFBQXl1RCxTQUFBNXlELElBQUE0eUQsUUFBQXFRLEdBQUE5K0QsSUFBQW0rRCxhQUFBbitELEVBQUE0K0QsaUJBQUFoZ0IsT0FBQXo3QyxFQUEwRXRILEVBQUE0eUQsUUFBQSxLQUFlLE9BQUF0ckQsRUFBQXFyRCxNQUMzWCxTQUFBMlcsR0FBQW5sRSxFQUFBbUQsRUFBQXRILEdBQW1CLElBQUFDLEVBQUFxSCxFQUFBeTdELGVBQXVCLElBQUE3bEIsR0FBQUwsVUFBQSxJQUFBNThDLEtBQUFELEdBQUEsQ0FBNkIsT0FBQXNILEVBQUF2QixLQUFjLE9BQUFvakUsR0FBQTdoRSxHQUFha2hFLEtBQUssTUFBTSxPQUFBbEMsR0FBQWgvRCxHQUFhLE1BQU0sT0FBQXcyQyxHQUFBeDJDLEVBQUFyRixPQUFBOC9ELEdBQUF6NkQsR0FBd0IsTUFBTSxPQUFBdzJDLEdBQUF4MkMsRUFBQXJGLEtBQUEwcEQsZUFBQW9XLEdBQUF6NkQsR0FBcUMsTUFBTSxPQUFBNitELEdBQUE3K0QsSUFBQTY2QyxVQUFBa1csZUFBdUMsTUFBTSxRQUFBcU4sR0FBQXArRCxJQUFBbzdELGNBQUE5aEUsT0FBb0MsT0FBQStuRSxHQUFBeGtFLEVBQUFtRCxFQUFBdEgsR0FBb0MsT0FBbkJzSCxFQUFBeTdELGVBQUEsRUFBbUJ6N0QsRUFBQXZCLEtBQWMsY0FINVUsU0FBQTVCLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBcUIsT0FBQWtFLEdBQUEyUSxFQUFBLE9BQXlCLElBQUEvUSxFQUFBdUQsRUFBQWc3RCxhQUFxQixvQkFBQXRpRSxHQUFBLE9BQUFBLEdBQUEsbUJBQUFBLEVBQUEwbUMsS0FBQSxDQUFzRSxJQUFBbGlDLEVBQVJ4RSxFQVZqSSxTQUFBbUUsR0FBZSxPQUFBQSxFQUFBdW5ELGNBQXVCLGNBQUF2bkQsRUFBQXduRCxhQUE2QixhQUFBeG5ELEVBQUF3bkQsYUFBNEIsYUFBQXhuRCxFQUFlLGNBQUFBLEVBQUF1bkQsYUFBQSxFQUFBdm5ELEVBQUF1aUMsS0FBQSxTQUFBcC9CLEdBQWtELE9BQUFuRCxFQUFBdW5ELGFBQUEsQ0FBd0MsR0FBakJ2bkQsRUFBQXVuRCxhQUFBLEVBQWlCLGlCQUFBcGtELEdBQUEsT0FBQUEsRUFBQSxDQUFrQyxJQUFBdEgsRUFBQXNILEVBQUF5ekIsUUFBZ0J6ekIsT0FBQSxJQUFBdEgsR0FBQSxPQUFBQSxJQUFBc0gsRUFBMkJuRCxFQUFBd25ELGFBQUFya0QsSUFBa0IsU0FBQUEsR0FBYSxJQUFBbkQsRUFBQXVuRCxlQUFBdm5ELEVBQUF1bkQsYUFBQSxFQUFBdm5ELEVBQUF3bkQsYUFBQXJrRCxLQUF3RG5ELEdBVTNPb2xFLENBQUF2cEUsR0FBZ0J3RSxFQUFBLG1CQUFBQSxFQUFBdytELEdBQUF4K0QsR0FBQSxhQUFBQSxHQUFBLE9BQUFBLEtBQUE0NEMsU0FBQSxLQUF3RTU0QyxFQUFBOEMsRUFBQXZCLElBQUF2QixFQUFVLElBQUFvNkIsRUFBQXlxQyxHQUFBcnBFLEVBQUErRCxHQUFjLE9BQUFTLEdBQVUsY0FBQXFrRSxHQUFBMWtFLEVBQUFtRCxFQUFBdEgsRUFBQTQrQixFQUFBMytCLEdBQTRCLGNBQUE2b0UsR0FBQTNrRSxFQUFBbUQsRUFBQXRILEVBQUE0K0IsRUFBQTMrQixHQUE0QixlQUFBeW9FLEdBQUF2a0UsRUFBQW1ELEVBQUF0SCxFQUFBNCtCLEVBQUEzK0IsR0FBNkIsUUFBQTZVLEVBQUEsTUFBQTlVLElBQXNFLEdBQWxEd0UsRUFBQSs4RCxHQUFBajZELEVBQUE0NUIsR0FBQTJiLFNBQWtCK29CLEdBQUF0K0QsR0FBUTlDLEVBQUF4RSxFQUFBK0QsRUFBQVMsR0FBUzhDLEVBQUFrckQsV0FBQSxFQUFlLGlCQUFBaHVELEdBQUEsT0FBQUEsR0FBQSxtQkFBQUEsRUFBQXU2QyxhQUFBLElBQUF2NkMsRUFBQTQ0QyxTQUFBLENBQXFGOTFDLEVBQUF2QixJQUFBLEVBQVErM0MsR0FBQTk5QyxJQUNuZjQrQixHQUFBLEVBQUFtakMsR0FBQXo2RCxJQUFBczNCLEdBQUEsRUFBa0J0M0IsRUFBQWs3RCxjQUFBLE9BQUFoK0QsRUFBQTh1QyxZQUFBLElBQUE5dUMsRUFBQTh1QyxNQUFBOXVDLEVBQUE4dUMsTUFBQSxLQUE4RCxJQUFBajZCLEVBQUFyWixFQUFBOHhDLHlCQUFtSSxNQUFsRyxtQkFBQXo0QixHQUFBb3RELEdBQUFuL0QsRUFBQXRILEVBQUFxWixFQUFBdFYsR0FBbUNTLEVBQUEyZCxRQUFBdWtELEdBQWFwL0QsRUFBQTY2QyxVQUFBMzlDLEVBQWNBLEVBQUFtaUUsb0JBQUFyL0QsRUFBd0I4L0QsR0FBQTkvRCxFQUFBdEgsRUFBQStELEVBQUE5RCxHQUFZaXBFLEdBQUEva0UsRUFBQW1ELEVBQUF0SCxHQUFBLEVBQUE0K0IsRUFBQTMrQixHQUE2RCxPQUFyQ3FILEVBQUF2QixJQUFBLEVBQVF0QixHQUFBTixFQUFBbUQsRUFBQTlDLEVBQUF2RSxHQUFXcUgsRUFBQW83RCxjQUFBMytELEVBQWtCdUQsRUFBQXFyRCxNQUU0RDZXLENBQUFybEUsRUFBQW1ELElBQUFyRixLQUFBakMsR0FBK0IsY0FBQTZvRSxHQUFBMWtFLEVBQUFtRCxJQUFBckYsS0FBQXFGLEVBQUFnN0QsYUFBQXRpRSxHQUE4QyxXQUFBK0QsRUFBQXVELEVBQUFyRixLQUFBMHBELGFBQTBGLE9BQXhDeG5ELEVBQUEwa0UsR0FBQTFrRSxFQUFBbUQsRUFBQXZELEVBQUFzbEUsR0FBQXRsRSxFQUFqQjlELEVBQUFxSCxFQUFBZzdELGNBQWlCdGlFLEdBQXNCc0gsRUFBQW83RCxjQUFBemlFLEVBQWtCa0UsRUFDbmYsY0FBQTJrRSxHQUFBM2tFLEVBQUFtRCxJQUFBckYsS0FBQXFGLEVBQUFnN0QsYUFBQXRpRSxHQUE4QyxjQUFBbUUsRUFBQTJrRSxHQUFBM2tFLEVBQUFtRCxFQUFBdkQsRUFBQXVELEVBQUFyRixLQUFBMHBELGFBQUEwZCxHQUFBdGxFLEVBQUE5RCxFQUFBcUgsRUFBQWc3RCxjQUFBdGlFLEdBQUFzSCxFQUFBbzdELGNBQUF6aUUsRUFBQWtFLEVBQStGLE9BQXNXLE9BQXRXZ2xFLEdBQUE3aEUsR0FBNkIsUUFBaEJySCxFQUFBcUgsRUFBQW03RCxjQUFnQjN0RCxFQUFBLE9BQTJDL1EsRUFBQSxRQUFsQkEsRUFBQXVELEVBQUFrN0QsZUFBa0J6K0QsRUFBQWlyQyxRQUFBLEtBQTBCbTJCLEdBQUE3OUQsRUFBQXJILEVBQUFxSCxFQUFBZzdELGFBQUEsS0FBQXRpRSxJQUE4QkMsRUFBQXFILEVBQUFrN0QsY0FBQXh6QixXQUEwQmpyQyxHQUFBeWtFLEtBQUFsaEUsRUFBQXFoRSxHQUFBeGtFLEVBQUFtRCxFQUFBdEgsS0FBK0IrRCxFQUFBdUQsRUFBQTY2QyxXQUFjcCtDLEdBQUEsT0FBQUksR0FBQSxPQUFBQSxFQUFBd3VELFFBQUE1dUQsRUFBQTBsRSxXQUFBeEIsR0FBQS9HLEdBQUE1NUQsRUFBQTY2QyxVQUFBa1csZUFBQTJQLEdBQUExZ0UsRUFBQXZELEVBQUFta0UsSUFBQSxHQUF5Rm5rRSxHQUFBdUQsRUFBQWtyRCxXQUFBLEVBQUFsckQsRUFBQXFyRCxNQUFBb1YsR0FBQXpnRSxFQUFBLEtBQUFySCxFQUFBRCxLQUFBeUUsR0FBQU4sRUFBQW1ELEVBQUFySCxFQUFBRCxHQUFBd29FLE1BQTREbGhFLElBQUFxckQsT0FBVXJyRCxFQUNuZixPQUFBZy9ELEdBQUFoL0QsR0FBYSxPQUFBbkQsR0FBQWtrRSxHQUFBL2dFLEdBQWdCckgsRUFBQXFILEVBQUFyRixLQUFTOEIsRUFBQXVELEVBQUFnN0QsYUFBaUIsSUFBQTk5RCxFQUFBLE9BQUFMLElBQUF1K0QsY0FBQSxLQUFBOWpDLEVBQUE3NkIsRUFBQW81QyxTQUFnUCxPQUEvTDRqQixHQUFBOWdFLEVBQUE4RCxHQUFBNjZCLEVBQUEsWUFBQXA2QixHQUFBdThELEdBQUE5Z0UsRUFBQXVFLEtBQUE4QyxFQUFBa3JELFdBQUEsSUFBb0RvVyxHQUFBemtFLEVBQUFtRCxHQUFRLGFBQUF0SCxHQUFBLEVBQUFzSCxFQUFBeEcsTUFBQWlELEVBQUEybEUsUUFBQXBpRSxFQUFBeTdELGVBQUEsV0FBQXo3RCxFQUFBbzdELGNBQUEzK0QsRUFBQXVELEVBQUEsT0FBQTdDLEdBQUFOLEVBQUFtRCxFQUFBczNCLEVBQUE1K0IsR0FBQXNILEVBQUFvN0QsY0FBQTMrRCxFQUFBdUQsSUFBQXFyRCxPQUFtSXJyRCxFQUFTLHFCQUFBbkQsR0FBQWtrRSxHQUFBL2dFLEtBQUFvN0QsY0FBQXA3RCxFQUFBZzdELGFBQUEsS0FBa0Usb0JBQW9CLGNBQUE2RCxHQUFBNytELElBQUE2NkMsVUFBQWtXLGVBQUFwNEQsRUFBQXFILEVBQUFnN0QsYUFBQSxPQUFBbitELEVBQUFtRCxFQUFBcXJELE1BQUFtVixHQUFBeGdFLEVBQUEsS0FBQXJILEVBQUFELEdBQUF5RSxHQUFBTixFQUFBbUQsRUFBQXJILEVBQUFELEdBQUFzSCxFQUFBbzdELGNBQ3RZemlFLEVBQUFxSCxFQUFBcXJELE1BQVUsZUFBQStWLEdBQUF2a0UsRUFBQW1ELElBQUFyRixLQUFBcUYsRUFBQWc3RCxhQUFBdGlFLEdBQStDLGVBQUFtRSxFQUFBdWtFLEdBQUF2a0UsRUFBQW1ELEVBQUF2RCxFQUFBdUQsRUFBQXJGLEtBQUEwcEQsYUFBQTBkLEdBQUF0bEUsRUFBQTlELEVBQUFxSCxFQUFBZzdELGNBQUF0aUUsR0FBQXNILEVBQUFvN0QsY0FBQXppRSxFQUFBa0UsRUFBZ0csY0FBQU0sR0FBQU4sRUFBQW1ELEVBQUFySCxFQUFBcUgsRUFBQWc3RCxhQUFBdGlFLEdBQUFzSCxFQUFBbzdELGNBQUF6aUUsRUFBQXFILEVBQUFxckQsTUFBb0UsZUFBQWx1RCxHQUFBTixFQUFBbUQsRUFBQXJILEVBQUFxSCxFQUFBZzdELGFBQUFubEIsU0FBQW45QyxHQUFBc0gsRUFBQW83RCxjQUFBemlFLEVBQUFxSCxFQUFBcXJELE1BQThFLGVBQUFsdUQsR0FBQU4sRUFBQW1ELEdBQUFySCxFQUFBcUgsRUFBQWc3RCxjQUFBbmxCLFNBQUFuOUMsR0FBQXNILEVBQUFvN0QsY0FBQXppRSxFQUFBcUgsRUFBQXFyRCxNQUE4RSxRQUFBeHVELEVBQUEsQ0FBb0csR0FBekZsRSxFQUFBcUgsRUFBQXJGLEtBQUEyOEMsU0FBa0I3NkMsRUFBQXVELEVBQUFnN0QsYUFBaUIxakMsRUFBQXQzQixFQUFBbzdELGNBQWtCbCtELEVBQUFULEVBQUFuRCxNQUFVMEcsRUFBQW83RCxjQUFBMytELEVBQWtCMmhFLEdBQUFwK0QsRUFBQTlDLEdBQVEsT0FBQW82QixFQUFBLENBQWEsSUFBQXZsQixFQUFBdWxCLEVBQUFoK0IsTUFDdFcsUUFBcEk0RCxFQUFBNlUsSUFBQTdVLElBQUEsSUFBQTZVLEdBQUEsRUFBQUEsR0FBQSxFQUFBN1UsSUFBQTZVLE1BQUE3VSxLQUFBLHdCQUFBdkUsRUFBQXErQyxzQkFBQXIrQyxFQUFBcStDLHNCQUFBamxDLEVBQUE3VSxHQUFBLGNBQThJLEdBQUFvNkIsRUFBQXVlLFdBQUFwNUMsRUFBQW81QyxXQUFBRCxHQUFBTCxRQUFBLENBQXdDdjFDLEVBQUFxaEUsR0FBQXhrRSxFQUFBbUQsRUFBQXRILEdBQVksTUFBQW1FLFFBQVMsWUFBQXk2QixFQUFBdDNCLEVBQUFxckQsU0FBQS96QixFQUFBbWtCLE9BQUF6N0MsR0FBMEMsT0FBQXMzQixHQUFTLENBQTZCLFdBQTNCdmxCLEVBQUF1bEIsRUFBQTJqQyx3QkFBd0MsR0FBRyxHQUFBbHBELEVBQUFtVixVQUFBdnVCLEdBQUEsSUFBQW9aLEVBQUF5c0QsYUFBQXRoRSxHQUFBLENBQTBDLE9BQUFvNkIsRUFBQTc0QixLQUFBLElBQUE2NEIsRUFBQTc0QixJQUFBLENBQXlCLElBQUE4WixFQUFBOGtELEdBQUEza0UsR0FBWTZmLEVBQUE5WixJQUFBLEVBQVFnL0QsR0FBQW5tQyxFQUFBL2UsSUFBUSxJQUFBK2UsRUFBQW1rQyxnQkFBQW5rQyxFQUFBbWtDLGVBQUEvaUUsS0FBQTQrQixFQUFBbWtDLGVBQUEvaUUsR0FBNkUsUUFBZDZmLEVBQUErZSxFQUFBd3pCLGFBQWMsSUFBQXZ5QyxFQUFBa2pELGdCQUN2ZGxqRCxFQUFBa2pELGVBQUEvaUUsS0FBQTZmLEVBQUFrakQsZUFBQS9pRSxHQUEwQyxRQUFBSixFQUFBZy9CLEVBQUFta0IsT0FBbUIsT0FBQW5qRCxHQUFTLENBQWdCLEdBQWRpZ0IsRUFBQWpnQixFQUFBd3lELFVBQWMsSUFBQXh5RCxFQUFBa2pFLHFCQUFBbGpFLEVBQUFrakUsb0JBQUE5aUUsRUFBQUosRUFBQWtqRSxvQkFBQTlpRSxFQUFBLE9BQUE2ZixJQUFBLElBQUFBLEVBQUFpakQscUJBQUFqakQsRUFBQWlqRCxvQkFBQTlpRSxLQUFBNmYsRUFBQWlqRCxvQkFBQTlpRSxPQUF3SyxXQUFBNmYsS0FBQSxJQUFBQSxFQUFBaWpELHFCQUFBampELEVBQUFpakQsb0JBQUE5aUUsR0FBK0YsTUFBL0Y2ZixFQUFBaWpELG9CQUFBOWlFLEVBQTBHSixJQUFBbWpELFFBQVlsakMsRUFBQStlLEVBQUErekIsTUFBVXQ1QyxJQUFBOUosV0FBUyxPQUFBOEosUUFBZ0J3RyxFQUFBLEtBQUErZSxFQUFBNzRCLEtBQUE2NEIsRUFBQTM4QixPQUFBcUYsRUFBQXJGLEtBQUEsS0FBQTI4QixFQUFBK3pCLE1BQXVELFVBQUE5eUMsSUFBQWtqQyxPQUFBbmtCLE9BQXVCLElBQUEvZSxFQUFBK2UsRUFBYSxPQUNsZi9lLEdBQUUsQ0FBRSxHQUFBQSxJQUFBdlksRUFBQSxDQUFVdVksRUFBQSxLQUFPLE1BQWtCLFdBQVorZSxFQUFBL2UsRUFBQSt5QyxTQUFZLENBQWFoMEIsRUFBQW1rQixPQUFBbGpDLEVBQUFrakMsT0FBa0JsakMsRUFBQStlLEVBQUksTUFBTS9lLElBQUFrakMsT0FBV25rQixFQUFBL2UsR0FBS3BiLEdBQUFOLEVBQUFtRCxFQUFBdkQsRUFBQW81QyxTQUFBbjlDLEdBQW9Cc0gsSUFBQXFyRCxNQUFVLE9BQUFyckQsRUFBUyxlQUFBOUMsRUFBQThDLEVBQUFyRixLQUFBOEIsR0FBQTlELEVBQUFxSCxFQUFBZzdELGNBQUFubEIsU0FBQXlvQixHQUFBdCtELEdBQUF2RCxJQUFBUyxFQUFBcWhFLEdBQUFyaEUsRUFBQXZFLEVBQUEwcEUsd0JBQUFyaUUsRUFBQWtyRCxXQUFBLEVBQUEvdEQsR0FBQU4sRUFBQW1ELEVBQUF2RCxFQUFBL0QsR0FBQXNILEVBQUFvN0QsY0FBQXppRSxFQUFBcUgsRUFBQXFyRCxNQUF5SixRQUFBNzlDLEVBQUEsUUFBa0IsU0FBQTgwRCxHQUFBemxFLEdBQWVBLEVBQUFxdUQsV0FBQSxFQUFlLElBQUFxWCxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsUUFBQSxFQUNoVixTQUFBQyxHQUFBN2xFLEVBQUFtRCxHQUFpQixJQUFBdEgsRUFBQXNILEVBQUFwRixPQUFBakMsRUFBQXFILEVBQUF1aEIsTUFBeUIsT0FBQTVvQixHQUFBLE9BQUFELElBQUFDLEVBQUEyckQsR0FBQTVyRCxJQUE4QixPQUFBQSxHQUFBeXJELEdBQUF6ckQsRUFBQWlDLE1BQXFCcUYsSUFBQTFHLE1BQVUsT0FBQXVELEdBQUEsSUFBQUEsRUFBQTRCLEtBQUEwbEQsR0FBQXRuRCxFQUFBbEMsTUFBZ0MsSUFBSXN2QyxRQUFBeHBDLE1BQUFULEdBQWlCLE1BQUF2RCxHQUFTMmhDLFdBQUEsV0FBc0IsTUFBQTNoQyxLQUFZLFNBQUFrbUUsR0FBQTlsRSxHQUFlLElBQUFtRCxFQUFBbkQsRUFBQXNULElBQVksVUFBQW5RLEVBQUEsc0JBQUFBLEVBQUEsSUFBeUNBLEVBQUEsTUFBUSxNQUFBdEgsR0FBU2txRSxHQUFBL2xFLEVBQUFuRSxRQUFRc0gsRUFBQXUxQyxRQUFBLEtBQ3BTLFNBQUFzdEIsR0FBQWhtRSxHQUE2QyxPQUE5QixtQkFBQWcrRCxPQUFBaCtELEdBQThCQSxFQUFBNEIsS0FBYyxjQUFBa2tFLEdBQUE5bEUsR0FBb0IsSUFBQW1ELEVBQUFuRCxFQUFBZytDLFVBQWtCLHNCQUFBNzZDLEVBQUE4aUUscUJBQUEsSUFBa0Q5aUUsRUFBQSt6QixNQUFBbDNCLEVBQUF1K0QsY0FBQXA3RCxFQUFBZ3NDLE1BQUFudkMsRUFBQXErRCxjQUFBbDdELEVBQUE4aUUsdUJBQXlFLE1BQUFwcUUsR0FBU2txRSxHQUFBL2xFLEVBQUFuRSxHQUFRLE1BQU0sT0FBQWlxRSxHQUFBOWxFLEdBQWEsTUFBTSxPQUFBa21FLEdBQUFsbUUsSUFBYyxTQUFBbW1FLEdBQUFubUUsR0FBZSxXQUFBQSxFQUFBNEIsS0FBQSxJQUFBNUIsRUFBQTRCLEtBQUEsSUFBQTVCLEVBQUE0QixJQUNuUyxTQUFBd2tFLEdBQUFwbUUsR0FBZUEsRUFBQSxDQUFHLFFBQUFtRCxFQUFBbkQsRUFBQTQrQyxPQUFtQixPQUFBejdDLEdBQVMsQ0FBRSxHQUFBZ2pFLEdBQUFoakUsR0FBQSxDQUFVLElBQUF0SCxFQUFBc0gsRUFBUSxNQUFBbkQsRUFBUW1ELElBQUF5N0MsT0FBV2p1QyxFQUFBLE9BQVM5VSxPQUFBLEVBQVMsSUFBQUMsRUFBQXFILE9BQUEsRUFBZSxPQUFBdEgsRUFBQStGLEtBQWMsT0FBQXVCLEVBQUF0SCxFQUFBbWlELFVBQXFCbGlELEdBQUEsRUFBSyxNQUFNLE9BQThDLE9BQUFxSCxFQUFBdEgsRUFBQW1pRCxVQUFBa1csY0FBbUNwNEQsR0FBQSxFQUFLLE1BQU0sUUFBQTZVLEVBQUEsT0FBaUIsR0FBQTlVLEVBQUF3eUQsWUFBQTZKLEdBQUEvMEQsRUFBQSxJQUFBdEgsRUFBQXd5RCxZQUFBLElBQTRDcnVELEVBQUFtRCxFQUFBLElBQUF0SCxFQUFBbUUsSUFBYSxDQUFFLEtBQUssT0FBQW5FLEVBQUE0eUQsU0FBaUIsQ0FBRSxVQUFBNXlELEVBQUEraUQsUUFBQXVuQixHQUFBdHFFLEVBQUEraUQsUUFBQSxDQUFrQy9pRCxFQUFBLEtBQU8sTUFBQW1FLEVBQVFuRSxJQUFBK2lELE9BQXFDLElBQTFCL2lELEVBQUE0eUQsUUFBQTdQLE9BQUEvaUQsRUFBQStpRCxPQUEwQi9pRCxJQUFBNHlELFFBQWdCLElBQUE1eUQsRUFBQStGLEtBQUEsSUFBQS9GLEVBQUErRixLQUFxQixDQUFFLEtBQUEvRixFQUFBd3lELFVBQUEsU0FBQWxyRCxFQUNqZSxVQUFBdEgsRUFBQTJ5RCxPQUFBLElBQUEzeUQsRUFBQStGLElBQUEsU0FBQXVCLEVBQXdDdEgsRUFBQTJ5RCxNQUFBNVAsT0FBQS9pRCxNQUFBMnlELE1BQWdDLE9BQUEzeUQsRUFBQXd5RCxXQUFBLENBQXFCeHlELElBQUFtaUQsVUFBYyxNQUFBaCtDLEdBQVMsUUFBQUosRUFBQUksSUFBYSxDQUFFLE9BQUFKLEVBQUFnQyxLQUFBLElBQUFoQyxFQUFBZ0MsSUFBQSxHQUFBL0YsRUFBQSxHQUFBQyxFQUFBLENBQW1DLElBQUF1RSxFQUFBOEMsRUFBQXMzQixFQUFBNzZCLEVBQUFvK0MsVUFBQTlvQyxFQUFBclosRUFBMEIsSUFBQXdFLEVBQUFvYyxTQUFBcGMsRUFBQWsrQyxXQUFBOG5CLGFBQUE1ckMsRUFBQXZsQixHQUFBN1UsRUFBQWdtRSxhQUFBNXJDLEVBQUF2bEIsUUFBa0UvUixFQUFBa2pFLGFBQUF6bUUsRUFBQW8rQyxVQUFBbmlELFFBQW1DQyxHQUFBdUUsRUFBQThDLEVBQUFzM0IsRUFBQTc2QixFQUFBbytDLFVBQUEsSUFBQTM5QyxFQUFBb2MsVUFBQXZILEVBQUE3VSxFQUFBaytDLFlBQUE4bkIsYUFBQTVyQyxFQUFBcDZCLElBQUE2VSxFQUFBN1UsR0FBQWs0QixZQUFBa0MsR0FBQSxPQUFBdmxCLEVBQUFveEQsVUFBQXB4RCxFQUFBb3hELFFBQUEvSixLQUFBcDVELEVBQUFvMUIsWUFBQTM0QixFQUFBbytDLGdCQUFrSyxPQUFBcCtDLEVBQUFnQyxLQUFBLE9BQUFoQyxFQUFBNHVELE1BQUEsQ0FBbUM1dUQsRUFBQTR1RCxNQUFBNVAsT0FDMWVoL0MsRUFBRUEsSUFBQTR1RCxNQUFVLFNBQVMsR0FBQTV1RCxJQUFBSSxFQUFBLE1BQWUsS0FBSyxPQUFBSixFQUFBNnVELFNBQWlCLENBQUUsVUFBQTd1RCxFQUFBZy9DLFFBQUFoL0MsRUFBQWcvQyxTQUFBNStDLEVBQUEsT0FBd0NKLElBQUFnL0MsT0FBV2gvQyxFQUFBNnVELFFBQUE3UCxPQUFBaC9DLEVBQUFnL0MsT0FBMEJoL0MsSUFBQTZ1RCxTQUN6SSxTQUFBeVgsR0FBQWxtRSxHQUFlLFFBQUFtRCxFQUFBbkQsRUFBQW5FLEdBQUEsRUFBQUMsT0FBQSxFQUFBOEQsT0FBQSxJQUFvQyxDQUFFLElBQUEvRCxFQUFBLENBQU9BLEVBQUFzSCxFQUFBeTdDLE9BQVc1K0MsRUFBQSxPQUFRLENBQTJCLE9BQXpCLE9BQUFuRSxHQUFBOFUsRUFBQSxPQUF5QjlVLEVBQUErRixLQUFjLE9BQUE5RixFQUFBRCxFQUFBbWlELFVBQXFCcCtDLEdBQUEsRUFBSyxNQUFBSSxFQUFRLE9BQWdELE9BQUFsRSxFQUFBRCxFQUFBbWlELFVBQUFrVyxjQUFtQ3QwRCxHQUFBLEVBQUssTUFBQUksRUFBUW5FLElBQUEraUQsT0FBVy9pRCxHQUFBLEVBQUssT0FBQXNILEVBQUF2QixLQUFBLElBQUF1QixFQUFBdkIsSUFBQSxDQUF5QjVCLEVBQUEsUUFBQUssRUFBQThDLEVBQUFzM0IsRUFBQXA2QixJQUFtQixHQUFBMmxFLEdBQUF2ckMsR0FBQSxPQUFBQSxFQUFBK3pCLE9BQUEsSUFBQS96QixFQUFBNzRCLElBQUE2NEIsRUFBQSt6QixNQUFBNVAsT0FBQW5rQixNQUFBK3pCLFVBQStELENBQUssR0FBQS96QixJQUFBcDZCLEVBQUEsTUFBZSxLQUFLLE9BQUFvNkIsRUFBQWcwQixTQUFpQixDQUFFLFVBQUFoMEIsRUFBQW1rQixRQUFBbmtCLEVBQUFta0IsU0FBQXYrQyxFQUFBLE1BQUFMLEVBQXlDeTZCLElBQUFta0IsT0FBV25rQixFQUFBZzBCLFFBQUE3UCxPQUFBbmtCLEVBQUFta0IsT0FBMEJua0IsSUFBQWcwQixRQUFZN3VELEdBQzNmUyxFQUFBdkUsRUFBQTIrQixFQUFBdDNCLEVBQUE2NkMsVUFBQSxJQUFBMzlDLEVBQUFvYyxTQUFBcGMsRUFBQWsrQyxXQUFBamQsWUFBQTdHLEdBQUFwNkIsRUFBQWloQyxZQUFBN0csSUFBQTMrQixFQUFBd2xDLFlBQUFuK0IsRUFBQTY2QyxnQkFBMkcsT0FBQTc2QyxFQUFBdkIsS0FBQTlGLEVBQUFxSCxFQUFBNjZDLFVBQUFrVyxjQUFBdDBELEdBQUEsR0FBQW9tRSxHQUFBN2lFLEdBQUEsT0FBQUEsRUFBQXFyRCxNQUFBLENBQTJFcnJELEVBQUFxckQsTUFBQTVQLE9BQUF6N0MsRUFBaUJBLElBQUFxckQsTUFBVSxTQUFTLEdBQUFyckQsSUFBQW5ELEVBQUEsTUFBZSxLQUFLLE9BQUFtRCxFQUFBc3JELFNBQWlCLENBQUUsVUFBQXRyRCxFQUFBeTdDLFFBQUF6N0MsRUFBQXk3QyxTQUFBNStDLEVBQUEsT0FBbUQsS0FBWG1ELElBQUF5N0MsUUFBV2g5QyxNQUFBL0YsR0FBQSxHQUFrQnNILEVBQUFzckQsUUFBQTdQLE9BQUF6N0MsRUFBQXk3QyxPQUEwQno3QyxJQUFBc3JELFNBQ2hXLFNBQUE4WCxHQUFBdm1FLEVBQUFtRCxHQUFpQixPQUFBQSxFQUFBdkIsS0FBYyxvQkFBb0IsV0FBQS9GLEVBQUFzSCxFQUFBNjZDLFVBQXlCLFNBQUFuaUQsRUFBQSxDQUFZLElBQUFDLEVBQUFxSCxFQUFBbzdELGNBQUEzK0QsRUFBQSxPQUFBSSxJQUFBdStELGNBQUF6aUUsRUFBbURrRSxFQUFBbUQsRUFBQXJGLEtBQVMsSUFBQXVDLEVBQUE4QyxFQUFBbTdELFlBQXVDLEdBQW5CbjdELEVBQUFtN0QsWUFBQSxLQUFtQixPQUFBaitELEVBQUEsQ0FBNEYsSUFBL0V4RSxFQUFBd2lELEdBQUF2aUQsRUFBUSxVQUFBa0UsR0FBQSxVQUFBbEUsRUFBQWdDLE1BQUEsTUFBQWhDLEVBQUFDLE1BQUF5dEQsR0FBQTN0RCxFQUFBQyxHQUFxRHFnRSxHQUFBbjhELEVBQUFKLEdBQVF1RCxFQUFBZzVELEdBQUFuOEQsRUFBQWxFLEdBQVU4RCxFQUFBLEVBQVFBLEVBQUFTLEVBQUE4QixPQUFXdkMsR0FBQSxHQUFNLElBQUE2NkIsRUFBQXA2QixFQUFBVCxHQUFBc1YsRUFBQTdVLEVBQUFULEVBQUEsR0FBb0IsVUFBQTY2QixFQUFBeUUsR0FBQXJqQyxFQUFBcVosR0FBQSw0QkFBQXVsQixFQUFBbzlCLEdBQUFoOEQsRUFBQXFaLEdBQUEsYUFBQXVsQixFQUFBeTlCLEdBQUFyOEQsRUFBQXFaLEdBQUF1ekMsR0FBQTVzRCxFQUFBNCtCLEVBQUF2bEIsRUFBQS9SLEdBQTZGLE9BQUFuRCxHQUFVLFlBQUF5cEQsR0FBQTV0RCxFQUFBQyxHQUFxQixNQUFNLGVBQUFrN0QsR0FBQW43RCxFQUFBQyxHQUF3QixNQUFNLGFBQUFrRSxFQUFBbkUsRUFBQXN0RCxjQUFBcWQsWUFDcGUzcUUsRUFBQXN0RCxjQUFBcWQsY0FBQTFxRSxFQUFBMnFFLFNBQUEsT0FBQXBtRSxFQUFBdkUsRUFBQVcsT0FBQWk2RCxHQUFBNzZELElBQUFDLEVBQUEycUUsU0FBQXBtRSxHQUFBLEdBQUFMLE1BQUFsRSxFQUFBMnFFLFdBQUEsTUFBQTNxRSxFQUFBb3RELGFBQUF3TixHQUFBNzZELElBQUFDLEVBQUEycUUsU0FBQTNxRSxFQUFBb3RELGNBQUEsR0FBQXdOLEdBQUE3NkQsSUFBQUMsRUFBQTJxRSxTQUFBM3FFLEVBQUEycUUsWUFBQSxVQUEwTSxNQUFNLGNBQUF0akUsRUFBQTY2QyxXQUFBcnRDLEVBQUEsT0FBMEN4TixFQUFBNjZDLFVBQUFvYSxVQUFBajFELEVBQUFvN0QsY0FBc0MsTUFBTSxPQUFhLFFBQWMsY0FBYyxRQUFBNXRELEVBQUEsUUFBa0IsU0FBQSsxRCxHQUFBMW1FLEVBQUFtRCxFQUFBdEgsSUFBbUJBLEVBQUEya0UsR0FBQTNrRSxJQUFRK0YsSUFBQSxFQUFRL0YsRUFBQTRrRSxTQUFXNTFCLFFBQUEsTUFBYyxJQUFBL3VDLEVBQUFxSCxFQUFBMUcsTUFBbUQsT0FBckNaLEVBQUE2a0UsU0FBQSxXQUFzQmlHLEdBQUE3cUUsR0FBTStwRSxHQUFBN2xFLEVBQUFtRCxJQUFTdEgsRUFDaGQsU0FBQStxRSxHQUFBNW1FLEVBQUFtRCxFQUFBdEgsSUFBbUJBLEVBQUEya0UsR0FBQTNrRSxJQUFRK0YsSUFBQSxFQUFRLElBQUE5RixFQUFBa0UsRUFBQWcrQyxVQUFpTyxPQUEvTSxPQUFBbGlELEdBQUEsbUJBQUFBLEVBQUErcUUsb0JBQUFockUsRUFBQTZrRSxTQUFBLFdBQTBFLE9BQUFvRyxNQUFBLElBQUFoMEQsS0FBQXZSLE9BQUF1bEUsR0FBQTk0QyxJQUFBenNCLE1BQTBDLElBQUExRixFQUFBc0gsRUFBQTFHLE1BQUFYLEVBQUFxSCxFQUFBdWhCLE1BQXdCbWhELEdBQUE3bEUsRUFBQW1ELEdBQVE1QixLQUFBc2xFLGtCQUFBaHJFLEdBQTBCa3JFLGVBQUEsT0FBQWpyRSxJQUFBLE9BQWlDRCxFQUNwUSxTQUFBbXJFLEdBQUFobkUsR0FBZSxPQUFBQSxFQUFBNEIsS0FBYyxPQUFBKzNDLEdBQUEzNUMsRUFBQWxDLE9BQUF5L0QsS0FBd0IsSUFBQXA2RCxFQUFBbkQsRUFBQXF1RCxVQUFrQixZQUFBbHJELEdBQUFuRCxFQUFBcXVELFdBQUEsS0FBQWxyRCxFQUFBLEdBQUFuRCxHQUFBLEtBQThDLGNBQUEyNUMsR0FBQTM1QyxFQUFBbEMsS0FBQTBwRCxlQUFBK1YsS0FBQSxNQUFBcDZELEVBQUFuRCxFQUFBcXVELFlBQUFydUQsRUFBQXF1RCxXQUFBLEtBQUFsckQsRUFBQSxHQUFBbkQsR0FBQSxLQUFpRyxjQUFBa2lFLEtBQUExRSxLQUFBLFFBQUFyNkQsRUFBQW5ELEVBQUFxdUQsYUFBQTE5QyxFQUFBLE9BQUEzUSxFQUFBcXVELFdBQUEsS0FBQWxyRCxFQUFBLEdBQUFuRCxFQUE0RixjQUFBb2lFLEdBQUFwaUUsR0FBQSxLQUF5QixxQkFBQW1ELEVBQUFuRCxFQUFBcXVELFlBQUFydUQsRUFBQXF1RCxXQUFBLEtBQUFsckQsRUFBQSxHQUFBbkQsR0FBQSxLQUFvRSxjQUFBa2lFLEtBQUEsS0FBeUIsZUFBQVYsR0FBQXhoRSxHQUFBLEtBQTBCLHFCQVhoRjBsRSxHQUFBLGFBQWdCQyxHQUFBLFNBQUEzbEUsRUFBQW1ELEVBQUF0SCxJQUFtQnNILEVBQUFtN0QsWUFBQXppRSxJQUFBNHBFLEdBQUF0aUUsSUFBMEJ5aUUsR0FBQSxTQUFBNWxFLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBcUJELElBQUFDLEdBQUEycEUsR0FBQXRpRSxJQVlwYyxJQUFBOGpFLElBQVF2c0IsWUFBQWduQixJQUFld0YsR0FBQTFnQixHQUFBbkwsa0JBQUE4ckIsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLElBQUEsRUFBQTNvRSxHQUFBLEtBQUE0b0UsR0FBQSxLQUFBbHVCLEdBQUEsRUFBQW11QixJQUFBLEVBQUFwb0UsR0FBQSxLQUFBcW9FLElBQUEsRUFBQVYsR0FBQSxLQUF1RixTQUFBVyxLQUFjLFVBQUEvb0UsR0FBQSxRQUFBc0IsRUFBQXRCLEdBQUFrZ0QsT0FBK0IsT0FBQTUrQyxHQUFTLENBQUUsSUFBQW1ELEVBQUFuRCxFQUFRLE9BQUFtRCxFQUFBdkIsS0FBYyxXQUFBL0YsRUFBQXNILEVBQUFyRixLQUFBd3ZDLGtCQUFzQyxPQUFBenhDLFFBQUEsSUFBQUEsR0FBQTBoRSxLQUE0QixNQUFNLE9BQStDLFFBQS9DMWhFLEVBQUFzSCxFQUFBckYsS0FBQTBwRCxhQUFBbGEseUJBQStDLElBQUF6eEMsR0FBQTBoRSxLQUE0QixNQUFNLE9BQUEyRSxLQUFhMUUsS0FBTSxNQUFNLE9BQUE0RSxHQUFBai9ELEdBQWEsTUFBTSxPQUFBKytELEtBQWEsTUFBTSxRQUFBVixHQUFBcitELEdBQWNuRCxJQUFBNCtDLE9BQVcwb0IsR0FBQSxLQUFRbHVCLEdBQUEsRUFBSW11QixJQUFBLEVBQU03b0UsR0FBQSxLQUMvYixTQUFBZ3BFLEdBQUExbkUsR0FBZSxPQUFNLENBQUUsSUFBQW1ELEVBQUFuRCxFQUFBaXVELFVBQUFweUQsRUFBQW1FLEVBQUE0K0MsT0FBQTlpRCxFQUFBa0UsRUFBQXl1RCxRQUF5QyxXQUFBenVELEVBQUFxdUQsV0FBQSxDQUEwQixJQUFBenVELEVBQUF1RCxFQUFZOUMsR0FBSjhDLEVBQUFuRCxHQUFJbStELGFBQXFCLE9BQUFoN0QsRUFBQXZCLEtBQWMsb0JBQW9CLE9BQUErM0MsR0FBQXgyQyxFQUFBckYsT0FBQXkvRCxLQUF3QixNQUFNLE9BQUE1akIsR0FBQXgyQyxFQUFBckYsS0FBQTBwRCxlQUFBK1YsS0FBcUMsTUFBTSxPQUFBMkUsS0FBYTFFLE1BQU1uOUQsRUFBQThDLEVBQUE2NkMsV0FBY2luQixpQkFBQTVrRSxFQUFBZ3FCLFFBQUFocUIsRUFBQTRrRSxlQUFBNWtFLEVBQUE0a0UsZUFBQSxNQUFxRSxPQUFBcmxFLEdBQUEsT0FBQUEsRUFBQTR1RCxRQUFBNFYsR0FBQWpoRSxLQUFBa3JELFlBQUEsR0FBa0RxWCxHQUFBdmlFLEdBQU0sTUFBTSxPQUFBaS9ELEdBQUFqL0QsR0FBYSxJQUFBczNCLEVBQUFzbkMsR0FBQUQsR0FBQXBwQixTQUFBeGpDLEVBQUEvUixFQUFBckYsS0FBOEIsVUFBQThCLEdBQUEsTUFBQXVELEVBQUE2NkMsVUFBQSxDQUFnQyxJQUFBdGlDLEVBQUE5YixFQUFBMitELGNBQXNCLEdBQUE3aUQsSUFBQXJiLEVBQUEsQ0FBVSxJQUFBNUUsRUFDcmYwSCxFQUFBNjZDLFVBQUFwaUQsRUFBQW1tRSxHQUFBNW9CLEdBQUFULFNBQUFoOEMsRUFBQWpCLEVBQUFnbkIsRUFBQXZOLEVBQW9DNGlDLEVBQUFwOEIsRUFBUW04QixFQUFBeDNDLEVBQVE1RSxFQUFBZy9CLEVBQUksSUFBQW1kLEVBQUEsS0FBVyxPQUFBbjFCLEdBQVUsWUFBQXExQixFQUFBa1IsR0FBQXRzRCxFQUFBbzdDLEdBQXVCRCxFQUFBbVIsR0FBQXRzRCxFQUFBbTdDLEdBQVVELEtBQUssTUFBTSxhQUFBRSxFQUFBMGUsR0FBQTk1RCxFQUFBbzdDLEdBQXdCRCxFQUFBMmUsR0FBQTk1RCxFQUFBbTdDLEdBQVVELEtBQUssTUFBTSxhQUFBRSxFQUFBNzZDLEtBQW9CNjZDLEdBQUlyN0MsV0FBQSxJQUFlbzdDLEVBQUE1NkMsS0FBTTQ2QyxHQUFJcDdDLFdBQUEsSUFBZW03QyxLQUFLLE1BQU0sZUFBQUUsRUFBQStlLEdBQUFuNkQsRUFBQW83QyxHQUEwQkQsRUFBQWdmLEdBQUFuNkQsRUFBQW03QyxHQUFVRCxLQUFLLE1BQU0sMkJBQUFFLEVBQUE2dkIsU0FBQSxtQkFBQTl2QixFQUFBOHZCLFVBQUFqckUsRUFBQTRwRSxRQUFBL0osSUFBcUZMLEdBQUF6NUMsRUFBQW8xQixHQUFRcDFCLEVBQUEvbEIsT0FBQSxFQUFXLElBQUFpUyxFQUFBLEtBQVcsSUFBQWpTLEtBQUFvN0MsRUFBQSxJQUFBRCxFQUFBeDZDLGVBQUFYLElBQUFvN0MsRUFBQXo2QyxlQUFBWCxJQUFBLE1BQUFvN0MsRUFBQXA3QyxHQUFBLGFBQUFBLEVBQUEsQ0FBb0YsSUFBQUosRUFBQXc3QyxFQUFBcDdDLEdBQVcsSUFBQStsQixLQUFBbm1CLElBQUFlLGVBQUFvbEIsS0FDbGY5VCxVQUFTQSxFQUFBOFQsR0FBQSxRQUFXLDRCQUFBL2xCLEdBQUEsYUFBQUEsR0FBQSxtQ0FBQUEsR0FBQSw2QkFBQUEsR0FBQSxjQUFBQSxJQUFBaWdELEVBQUF0L0MsZUFBQVgsR0FBQWs3QyxvQkFBQXR5QyxLQUFBNUksRUFBQSxPQUFrTSxJQUFBQSxLQUFBbTdDLEVBQUEsQ0FBWSxJQUFBdjZDLEVBQUF1NkMsRUFBQW43QyxHQUFpQyxHQUF0QkosRUFBQSxNQUFBdzdDLElBQUFwN0MsUUFBQSxFQUFzQm03QyxFQUFBeDZDLGVBQUFYLElBQUFZLElBQUFoQixJQUFBLE1BQUFnQixHQUFBLE1BQUFoQixHQUFBLGFBQUFJLEVBQUEsR0FBQUosRUFBQSxDQUF1RSxJQUFBbW1CLEtBQUFubUIsS0FBQWUsZUFBQW9sQixJQUFBbmxCLEtBQUFELGVBQUFvbEIsS0FBQTlULFVBQWtFQSxFQUFBOFQsR0FBQSxJQUFXLElBQUFBLEtBQUFubEIsSUFBQUQsZUFBQW9sQixJQUFBbm1CLEVBQUFtbUIsS0FBQW5sQixFQUFBbWxCLEtBQUE5VCxVQUFzREEsRUFBQThULEdBQUFubEIsRUFBQW1sQixTQUFhOVQsSUFBQWlwQyxZQUFBdHlDLEtBQUE1SSxFQUMxZGlTLE1BQUFyUixNQUFRLDRCQUFBWixHQUFBWSxNQUFBdS9ELFlBQUEsRUFBQXZnRSxNQUFBdWdFLFlBQUEsUUFBQXYvRCxHQUFBaEIsSUFBQWdCLElBQUFzNkMsU0FBQXR5QyxLQUFBNUksRUFBQSxHQUFBWSxJQUFBLGFBQUFaLEVBQUFKLElBQUFnQixHQUFBLGlCQUFBQSxHQUFBLGlCQUFBQSxJQUFBczZDLFNBQUF0eUMsS0FBQTVJLEVBQUEsR0FBQVksR0FBQSxtQ0FBQVosR0FBQSw2QkFBQUEsSUFBQWlnRCxFQUFBdC9DLGVBQUFYLElBQUEsTUFBQVksR0FBQTgrRCxHQUFBM2dFLEVBQUFpQixHQUFBazdDLEdBQUF0N0MsSUFBQWdCLElBQUFzNkMsaUJBQUF0eUMsS0FBQTVJLEVBQUFZLElBQStWcVIsSUFBQWlwQyxTQUFBdHlDLEtBQUEsUUFBQXFKLEdBQTZCZzNELEdBQUEvbEUsRUFBQXVELEVBQUF5MEMsRUFBQTFpQyxFQUFBd0csRUFBQXJiLEVBQUFvNkIsRUFBQTcrQixHQUFvQmdFLEVBQUEwVCxNQUFBblEsRUFBQW1RLE1BQUFuUSxFQUFBa3JELFdBQUEsVUFBa0MsR0FBQWh1RCxFQUFBLENBQTJCLEdBQWhCdTNDLEVBQUFtcUIsR0FBQTVvQixHQUFBVCxTQUFnQjByQixHQUFBamhFLEdBQUEsQ0FDbGEsT0FEZ2IxSCxHQUFKNEUsRUFBQThDLEdBQUk2NkMsVUFBY3ArQyxFQUFBUyxFQUFBdkMsS0FDamY0ZCxFQUFBcmIsRUFBQWsrRCxjQUFrQjNpRSxFQUFBNitCLEVBQUloL0IsRUFBQTJpRCxHQUFBLzlDLEVBQVE1RSxFQUFBNGlELEdBQUEzaUMsRUFBUXhHLE9BQUEsRUFBU3VsQixFQUFBaC9CLEVBQUltRSxHQUFVLDBCQUFBMjRDLEdBQUEsT0FBQTlkLEdBQXdDLE1BQU0sNEJBQUFoL0IsRUFBQSxFQUFrQ0EsRUFBQTBrRCxHQUFBaCtDLE9BQVkxRyxJQUFBODhDLEdBQUE0SCxHQUFBMWtELEdBQUFnL0IsR0FBZSxNQUFNLGFBQUE4ZCxHQUFBLFFBQUE5ZCxHQUEyQixNQUFNLGlDQUFBOGQsR0FBQSxRQUFBOWQsR0FBaUQ4ZCxHQUFBLE9BQUE5ZCxHQUFZLE1BQU0sV0FBQThkLEdBQUEsUUFBQTlkLEdBQXlCOGQsR0FBQSxTQUFBOWQsR0FBYyxNQUFNLGNBQUE4ZCxHQUFBLFNBQUE5ZCxHQUE2QixNQUFNLFlBQUE0dUIsR0FBQTV1QixFQUFBL2UsR0FBcUI2OEIsR0FBQSxVQUFBOWQsR0FBZTJoQyxHQUFBeGdFLEVBQUEsWUFBaUIsTUFBTSxhQUFBNitCLEVBQUEwdUIsZUFBK0JxZCxjQUFBOXFELEVBQUErcUQsVUFBMEJsdUIsR0FBQSxVQUFBOWQsR0FBZTJoQyxHQUFBeGdFLEVBQUEsWUFDcmUsTUFBTSxlQUFBbTdELEdBQUF0OEIsRUFBQS9lLEdBQUE2OEIsR0FBQSxVQUFBOWQsR0FBQTJoQyxHQUFBeGdFLEVBQUEsWUFBdUUsSUFBQXNaLEtBQWZnbkQsR0FBQXQ4RCxFQUFBOGIsR0FBUWpnQixFQUFBLEtBQU9pZ0IsSUFBQXJlLGVBQUE2WCxLQUFBMGlDLEVBQUFsOEIsRUFBQXhHLEdBQUEsYUFBQUEsRUFBQSxpQkFBQTBpQyxFQUFBbmQsRUFBQStsQixjQUFBNUksSUFBQW44QyxHQUFBLFdBQUFtOEMsSUFBQSxpQkFBQUEsR0FBQW5kLEVBQUErbEIsY0FBQSxHQUFBNUksSUFBQW44QyxHQUFBLGNBQUFtOEMsSUFBQStFLEVBQUF0L0MsZUFBQTZYLElBQUEsTUFBQTBpQyxHQUFBd2tCLEdBQUF4Z0UsRUFBQXNaLElBQTBOLE9BQUF0VixHQUFVLFlBQUFvbUQsR0FBQXZyQixHQUFtQmt2QixHQUFBbHZCLEVBQUEvZSxHQUFBLEdBQVcsTUFBTSxlQUFBc3FDLEdBQUF2ckIsR0FBc0J3OEIsR0FBQXg4QixHQUFRLE1BQU0sZ0NBQWtDLDJCQUFBL2UsRUFBQWlzRCxVQUFBbHRDLEVBQUE2ckMsUUFBQS9KLElBQXNEcm5ELEVBQUF6WixFQUFJNEUsRUFBQWkrRCxZQUFBcHBELEdBQWdCN1UsRUFBQSxPQUFBNlUsSUFDcmV1d0QsR0FBQXRpRSxPQUFTLENBQUt1WSxFQUFBdlksRUFBSXZELEVBQUFzVixFQUFJdFosRUFBQXlFLEVBQUk1RSxFQUFBLElBQUFnL0IsRUFBQWhlLFNBQUFnZSxJQUFBbXZCLGNBQW1DaFMsSUFBQTJmLEdBQUF2M0IsT0FBQTRYLEVBQUE4ZixHQUFBOTNELElBQXVCZzRDLElBQUEyZixHQUFBdjNCLEtBQUEsV0FBQXBnQyxNQUFBbkUsRUFBQTZoQyxjQUFBLFFBQUEyNkIsVUFBQSxxQkFBQXg4RCxFQUFBbUUsRUFBQTBoQyxZQUFBMWhDLEVBQUFtMUQsYUFBQSxpQkFBQW41RCxFQUFBMmQsR0FBQTlkLElBQUE2aEMsY0FBQTE5QixHQUFpSzJaLEdBQUEzZCxFQUFBMmQsTUFBUTlkLElBQUE2aEMsY0FBQTE5QixHQUFBLFdBQUFBLEdBQUFoRSxFQUFBNnFFLFdBQUFockUsRUFBQWdyRSxVQUFBLElBQUFockUsSUFBQW1zRSxnQkFBQWh3QixFQUFBaDRDLElBQTRGQSxFQUFBbkUsR0FBSTJpRCxHQUFBMWlDLEVBQVE5YixFQUFBeStDLEdBQUFoK0MsRUFBUUwsRUFBQSxJQUFBMGIsRUFBQTliLEVBQUFoRSxFQUFBdUgsRUFBQTFILEVBQUFHLEVBQUE0eUQsTUFBd0IsT0FBQS95RCxHQUFTLENBQUUsT0FBQUEsRUFBQW1HLEtBQUEsSUFBQW5HLEVBQUFtRyxJQUFBOFosRUFBQTZjLFlBQUE5OEIsRUFBQXVpRCxnQkFBbUQsT0FBQXZpRCxFQUFBbUcsS0FBQSxPQUFBbkcsRUFBQSt5RCxNQUFBLENBQW1DL3lELEVBQUEreUQsTUFBQTVQLE9BQ3RlbmpELEVBQUVBLElBQUEreUQsTUFBVSxTQUFTLEdBQUEveUQsSUFBQUcsRUFBQSxNQUFlLEtBQUssT0FBQUgsRUFBQWd6RCxTQUFpQixDQUFFLFVBQUFoekQsRUFBQW1qRCxRQUFBbmpELEVBQUFtakQsU0FBQWhqRCxFQUFBLE1BQUFvRSxFQUF5Q3ZFLElBQUFtakQsT0FBV25qRCxFQUFBZ3pELFFBQUE3UCxPQUFBbmpELEVBQUFtakQsT0FBMEJuakQsSUFBQWd6RCxRQUFzQyxPQUExQjd5RCxFQUFBZ0UsRUFBWWxELEVBQUErOUIsRUFBSTlyQixFQUFBd3RELEdBQVoxZ0UsRUFBQXlaLEVBQUl3RyxFQUFBcmIsR0FBa0I1RSxHQUFVLDBCQUFBODhDLEdBQUEsT0FBQTM4QyxHQUF3QzYrQixFQUFBL2UsRUFBSSxNQUFNLDRCQUFBK2UsRUFBQSxFQUFrQ0EsRUFBQTBsQixHQUFBaCtDLE9BQVlzNEIsSUFBQThkLEdBQUE0SCxHQUFBMWxCLEdBQUE3K0IsR0FBZTYrQixFQUFBL2UsRUFBSSxNQUFNLGFBQUE2OEIsR0FBQSxRQUFBMzhDLEdBQTJCNitCLEVBQUEvZSxFQUFJLE1BQU0saUNBQUE2OEIsR0FBQSxRQUFBMzhDLEdBQWlEMjhDLEdBQUEsT0FBQTM4QyxHQUFZNitCLEVBQUEvZSxFQUFJLE1BQU0sV0FBQTY4QixHQUFBLFFBQUEzOEMsR0FBeUIyOEMsR0FBQSxTQUFBMzhDLEdBQWM2K0IsRUFBQS9lLEVBQUksTUFBTSxjQUFBNjhCLEdBQUEsU0FBQTM4QyxHQUE2QjYrQixFQUFBL2UsRUFBSSxNQUNqZixZQUFBMnRDLEdBQUF6dEQsRUFBQThmLEdBQXFCK2UsRUFBQXV1QixHQUFBcHRELEVBQUE4ZixHQUFVNjhCLEdBQUEsVUFBQTM4QyxHQUFld2dFLEdBQUExL0QsRUFBQSxZQUFpQixNQUFNLGFBQUErOUIsRUFBQSs3QixHQUFBNTZELEVBQUE4ZixHQUF3QixNQUFNLGFBQUE5ZixFQUFBdXRELGVBQStCcWQsY0FBQTlxRCxFQUFBK3FELFVBQTBCaHNDLEVBQUF4OUIsS0FBTXllLEdBQUlqZixXQUFBLElBQWU4N0MsR0FBQSxVQUFBMzhDLEdBQWV3Z0UsR0FBQTEvRCxFQUFBLFlBQWlCLE1BQU0sZUFBQXE2RCxHQUFBbjdELEVBQUE4ZixHQUF3QitlLEVBQUFvOEIsR0FBQWo3RCxFQUFBOGYsR0FBVTY4QixHQUFBLFVBQUEzOEMsR0FBZXdnRSxHQUFBMS9ELEVBQUEsWUFBaUIsTUFBTSxRQUFBKzlCLEVBQUEvZSxFQUF5QyxJQUFBazhCLEtBQTdCc2tCLEdBQUF6Z0UsRUFBQWcvQixHQUFRbWQsT0FBQSxFQUFTRSxFQUFBcjhDLEVBQUlvOEMsRUFBQWo4QyxFQUFJNm1CLEVBQUFnWSxFQUFJaFksRUFBQXBsQixlQUFBdTZDLEtBQUF0N0MsRUFBQW1tQixFQUFBbTFCLEdBQUEsVUFBQUEsRUFBQTFZLEdBQUEyWSxFQUFBdjdDLEdBQUEsNEJBQUFzN0MsRUFBQSxPQUFBdDdDLE1BQUF1Z0UsWUFBQSxJQUFBaEYsR0FBQWhnQixFQUFBdjdDLEdBQUEsYUFBQXM3QyxFQUFBLGlCQUFBdDdDLEdBQUEsYUFDNVV3N0MsR0FBQSxLQUFBeDdDLElBQUE0N0QsR0FBQXJnQixFQUFBdjdDLEdBQUEsaUJBQUFBLEdBQUE0N0QsR0FBQXJnQixFQUFBLEdBQUF2N0MsR0FBQSxtQ0FBQXM3QyxHQUFBLDZCQUFBQSxHQUFBLGNBQUFBLElBQUErRSxFQUFBdC9DLGVBQUF1NkMsR0FBQSxNQUFBdDdDLEdBQUE4L0QsR0FBQTEvRCxFQUFBazdDLEdBQUEsTUFBQXQ3QyxHQUFBbXNELEdBQUE1USxFQUFBRCxFQUFBdDdDLEVBQUFxUyxLQUF5TSxPQUFBbFQsR0FBVSxZQUFBdXFELEdBQUFwcUQsR0FBbUIrdEQsR0FBQS90RCxFQUFBOGYsR0FBQSxHQUFXLE1BQU0sZUFBQXNxQyxHQUFBcHFELEdBQXNCcTdELEdBQUFyN0QsR0FBUSxNQUFNLG1CQUFBOGYsRUFBQWpmLE9BQUFiLEVBQUFrcUQsYUFBQSxXQUFBaUQsR0FBQXJ0QyxFQUFBamYsUUFBb0UsTUFBTSxjQUFBZytCLEVBQUE3K0IsR0FBa0I2cUUsV0FBQS9xRCxFQUFBK3FELFNBQWtDLE9BQVY3cUUsRUFBQThmLEVBQUFqZixPQUFVaTZELEdBQUFqOEIsSUFBQS9lLEVBQUErcUQsU0FBQTdxRSxHQUFBLFNBQUE4ZixFQUFBd3RDLGNBQUF3TixHQUFBajhCLElBQUEvZSxFQUFBK3FELFNBQUEvcUQsRUFBQXd0QyxjQUFBLEdBQTJGLE1BQ3BmLDJCQUFBenVCLEVBQUFrdEMsVUFBQS9yRSxFQUFBMHFFLFFBQUEvSixLQUFzRGw4RCxFQUFBcThELEdBQUF4bkQsRUFBQTdVLEtBQUFvbEUsR0FBQXRpRSxHQUFtQkEsRUFBQTY2QyxVQUFBcCtDLEVBQWMsT0FBQXVELEVBQUFtUSxNQUFBblEsRUFBQWtyRCxXQUFBLFVBQWlDLE9BQUFsckQsRUFBQTY2QyxXQUFBcnRDLEVBQUEsT0FBd0MsTUFBTSxPQUFBL1EsR0FBQSxNQUFBdUQsRUFBQTY2QyxVQUFBNG5CLEdBQUFobUUsRUFBQXVELEVBQUF2RCxFQUFBMitELGNBQUFsK0QsSUFBQSxpQkFBQUEsSUFBQSxPQUFBOEMsRUFBQTY2QyxXQUFBcnRDLEVBQUEsUUFBQThwQixFQUFBc25DLEdBQUFELEdBQUFwcEIsU0FBQXFwQixHQUFBNW9CLEdBQUFULFNBQUEwckIsR0FBQWpoRSxJQUFBK1IsR0FBQTdVLEVBQUE4QyxHQUFBNjZDLFVBQUF2akIsRUFBQXA2QixFQUFBaytELGNBQUFycEQsRUFBQWtwQyxHQUFBLzlDLEtBQUE2VSxFQUFBa2pELFlBQUEzOUIsSUFBQWdyQyxHQUFBdGlFLEtBQUErUixFQUFBL1IsR0FBQTlDLEdBQUEsSUFBQW82QixFQUFBaGUsU0FBQWdlLElBQUFtdkIsZUFBQW5uQixlQUFBcGlDLElBQUErOUMsR0FBQWxwQyxFQUFBL1IsRUFBQTY2QyxVQUFBMzlDLElBQW1ULE1BQU0sZ0JBQy9kLFFBQWMsT0FBYSxRQUFjLGNBQWMsT0FBQTZoRSxLQUFhd0QsR0FBQXZpRSxHQUFNLE1BQU0sUUFBQXErRCxHQUFBcitELEdBQWMsTUFBTSxjQUFjLE9BQUF3TixFQUFBLE9BQWdCLFFBQUFBLEVBQUEsT0FBOEIsR0FBYnhOLEVBQUF6RSxHQUFBLEtBQVMyQixFQUFBTCxFQUFJLGFBQUFvNUMsSUFBQSxhQUFBLzRDLEVBQUFzK0Qsb0JBQUEsQ0FBMkQsSUFBSnpwRCxFQUFBLEVBQUl1bEIsRUFBQXA2QixFQUFBbXVELE1BQWMsT0FBQS96QixHQUFXNzZCLEVBQUE2NkIsRUFBQW1rQyxlQUFtQmxqRCxFQUFBK2UsRUFBQWtrQyxxQkFBd0IsSUFBQXpwRCxHQUFBLElBQUF0VixLQUFBc1YsT0FBQXRWLElBQXlCLElBQUFzVixHQUFBLElBQUF3RyxLQUFBeEcsT0FBQXdHLEdBQXlCK2UsSUFBQWcwQixRQUFZcHVELEVBQUFzK0Qsb0JBQUF6cEQsRUFBd0IsVUFBQS9SLEVBQUEsT0FBQUEsRUFBcUIsT0FBQXRILEdBQUEsUUFBQUEsRUFBQXd5RCxhQUFBLE9BQUF4eUQsRUFBQTRpRSxjQUFBNWlFLEVBQUE0aUUsWUFBQXorRCxFQUFBeStELGFBQUEsT0FBQXorRCxFQUFBdytELGFBQzFZLE9BQUEzaUUsRUFBQTJpRSxhQUFBM2lFLEVBQUEyaUUsV0FBQUUsV0FBQTErRCxFQUFBeStELGFBQUE1aUUsRUFBQTJpRSxXQUFBeCtELEVBQUF3K0QsWUFBQSxFQUFBeCtELEVBQUFxdUQsWUFBQSxPQUFBeHlELEVBQUEyaUUsV0FBQTNpRSxFQUFBMmlFLFdBQUFFLFdBQUExK0QsRUFBQW5FLEVBQUE0aUUsWUFBQXorRCxFQUFBbkUsRUFBQTJpRSxXQUFBeCtELFFBQXdMLENBQWUsV0FBVkEsRUFBQWduRSxHQUFBaG5FLElBQVUsT0FBQUEsRUFBQXF1RCxXQUFBLElBQUFydUQsRUFBc0MsT0FBQW5FLE1BQUE0aUUsWUFBQTVpRSxFQUFBMmlFLFdBQUEsS0FBQTNpRSxFQUFBd3lELFdBQUEsS0FBNkQsVUFBQXZ5RCxFQUFBLE9BQUFBLEVBQXFCLFVBQUFELEVBQWdCLE1BQWhCbUUsRUFBQW5FLEVBQTJCLFlBQVksU0FBQWdzRSxHQUFBN25FLEdBQWUsSUFBQW1ELEVBQUFnaUUsR0FBQW5sRSxFQUFBaXVELFVBQUFqdUQsRUFBQW81QyxJQUE4RCxPQUFwQyxPQUFBajJDLE1BQUF1a0UsR0FBQTFuRSxJQUFvQmtuRSxHQUFBeHVCLFFBQUEsS0FBZ0J2MUMsRUFDbmIsU0FBQTJrRSxHQUFBOW5FLEVBQUFtRCxFQUFBdEgsR0FBbUJ3ckUsSUFBQTEyRCxFQUFBLE9BQW1CMDJELElBQUEsRUFBTUgsR0FBQXZ1QixrQkFBQXN1QixHQUF3QixJQUFBbnJFLEVBQUFrRSxFQUFBNi9ELDJCQUFtQy9qRSxJQUFBczlDLElBQUFwNUMsSUFBQXNuRSxJQUFBLE9BQUE1b0UsS0FBQStvRSxLQUFBcnVCLEdBQUF0OUMsRUFBQTRDLEdBQUFvZ0UsSUFBQXdJLEdBQUF0bkUsR0FBQTA0QyxRQUFBLEtBQUFVLElBQUFwNUMsRUFBQStuRSw0QkFBQSxHQUEwRyxJQUFULElBQUFub0UsR0FBQSxJQUFTLENBQUcsSUFBSSxHQUFBdUQsRUFBQSxLQUFVLE9BQUF6RSxLQUFBc3BFLE1BQWdCdHBFLEdBQUFtcEUsR0FBQW5wRSxTQUFTLEtBQVUsT0FBQUEsSUFBU0EsR0FBQW1wRSxHQUFBbnBFLElBQVMsTUFBQWhDLEdBQVMsVUFBQWdDLEdBQUFrQixHQUFBLEVBQUErbUUsR0FBQWpxRSxPQUF1QixDQUFLLE9BQUFnQyxJQUFBaVMsRUFBQSxPQUF5QixJQUFBdFEsRUFBQTNCLEdBQUErN0IsRUFBQXA2QixFQUFBdStDLE9BQW1CLFVBQUFua0IsRUFBdUIsQ0FBS3o2QixFQUFBLENBQUcsSUFBQWtWLEVBQUF1bEIsRUFBQS9lLEVBQUFyYixFQUFBNUUsRUFBQWlCLEVBQWdCKzlCLEVBQUEyZSxHQUFJMTlCLEVBQUEyeUMsV0FBQSxJQUFpQjN5QyxFQUFBK2lELFlBQUEvaUQsRUFBQThpRCxXQUFBLEtBQWdDK0ksSUFBQSxFQUFNOXJFLEVBQUEwbEUsR0FBQTFsRSxFQUFBaWdCLEdBQVUsR0FBRyxPQUFBeEcsRUFBQXRULEtBQWMsT0FBQXNULEVBQUFtNUMsV0FDN2UsS0FBS241QyxFQUFBMHBELGVBQUFua0MsRUFBK0JvbUMsR0FBQTNyRCxFQUFadWxCLEVBQUFpc0MsR0FBQXh4RCxFQUFBelosRUFBQWcvQixJQUFvQixNQUFBejZCLEVBQVEsY0FBQTBiLEVBQUFqZ0IsRUFBa0IsSUFBQUcsRUFBQXNaLEVBQUE4b0MsVUFBa0IsVUFBQTlvQyxFQUFBbTVDLFlBQUEsT0FBQXp5RCxHQUFBLG1CQUFBQSxFQUFBaXJFLG9CQUFBLE9BQUFDLFFBQUFsbUUsSUFBQWhGLElBQUEsQ0FBcUdzWixFQUFBbTVDLFdBQUEsS0FBa0JuNUMsRUFBQTBwRCxlQUFBbmtDLEVBQStCb21DLEdBQUEzckQsRUFBWnVsQixFQUFBbXNDLEdBQUExeEQsRUFBQXdHLEVBQUErZSxJQUFvQixNQUFBejZCLEdBQVNrVixJQUFBMHBDLGFBQVcsT0FBQTFwQyxHQUFnQnhXLEdBQUFncEUsR0FBQXJuRSxHQUFRLFNBRHNFVCxHQUFBLEVBQUErbUUsR0FBQWpxRSxJQUMzRCxNQUF3RCxHQUF6QzJxRSxJQUFBLEVBQU0vRixHQUFBRCxHQUFBRCxHQUFBOEYsR0FBQXZ1QixrQkFBQSxLQUFtQy80QyxFQUFBMG5FLEdBQUEsS0FBQXRuRSxFQUFBaW9FLGFBQUEsVUFBaUMsVUFBQXZwRSxHQUFBc0IsRUFBQWlvRSxhQUFBLFNBQXFDLENBQTRELEdBQWpDLFFBQXRCOWtFLEVBQUFuRCxFQUFBMDRDLFFBQUF1VixZQUFzQnQ5QyxFQUFBLE9BQXlCMjJELEdBQUEsS0FBUUMsR0FBQSxDQUMxYixHQURpYzNuRSxFQUFBSSxFQUFBdy9ELGtCQUM5ZW4vRCxFQUFBTCxFQUFBMi9ELG9CQUF3QmxsQyxFQUFBejZCLEVBQUE0L0QsaUJBQXFCLElBQUFoZ0UsS0FBQTlELEdBQUEsSUFBQXVFLEtBQUF2RSxHQUFBLElBQUEyK0IsS0FBQTMrQixFQUFvYyxPQUE3WmtFLEVBQUFzL0QsVUFBQSxFQUFtQyxLQUFyQnpqRSxFQUFBbUUsRUFBQTQvRCxtQkFBcUIvakUsR0FBQUMsSUFBQWtFLEVBQUE0L0QsaUJBQUEsR0FBb0MvakUsRUFBQW1FLEVBQUF1L0Qsb0JBQXdCcDhELEVBQUFuRCxFQUFBdy9ELGtCQUFzQjNqRSxJQUFBQyxFQUFBa0UsRUFBQXUvRCxvQkFBQXA4RCxJQUFBckgsRUFBQWtFLEVBQUF3L0Qsa0JBQUEsRUFBQXI4RCxNQUFBckgsSUFBQWtFLEVBQUF3L0Qsa0JBQUEzakUsR0FBeUZBLEVBQUFtRSxFQUFBMC9ELHNCQUEwQnY4RCxFQUFBbkQsRUFBQTIvRCxvQkFBd0IsSUFBQTlqRSxFQUFBbUUsRUFBQTAvRCxzQkFBQTEvRCxFQUFBMi9ELG9CQUFBN2pFLEVBQUFELEVBQUFDLEVBQUFrRSxFQUFBMC9ELHNCQUFBNWpFLEVBQUFxSCxFQUFBckgsSUFBQWtFLEVBQUEyL0Qsb0JBQUE3akUsR0FBbUgyakUsR0FBQTNqRSxFQUFBa0UsUUFBUUEsRUFBQTQrRCxlQUFBNStELEVBQUE0K0QsZ0JBQXlDLElBQUE1K0QsRUFBQXMvRCxXQUN4ZnpqRSxFQUF5RixPQUFyRm1FLEVBQUFzL0QsVUFBQSxFQUFjdC9ELEVBQUE2L0QsMkJBQUEvakUsRUFBK0JBLEVBQUFrRSxFQUFBNCtELGVBQUEsT0FBcUI1K0QsRUFBQTQrRCxlQUFBOWlFLEdBQTJCa0UsRUFBQStuRSw0QkFBQWpzRSxFQUFnQ2tFLEVBQUFpb0UsYUFBQTlrRSxHQUNqSSxTQUFBNGlFLEdBQUEvbEUsRUFBQW1ELEdBQWlCLElBQUF0SCxFQUFNbUUsRUFBQSxDQUEyQixJQUF4QnFuRSxLQUFBRyxJQUFBNzJELEVBQUEsT0FBd0I5VSxFQUFBbUUsRUFBQTQrQyxPQUFlLE9BQUEvaUQsR0FBUyxDQUFFLE9BQUFBLEVBQUErRixLQUFjLGtCQUFBOUYsRUFBQUQsRUFBQW1pRCxVQUFnQyxzQkFBQW5pRCxFQUFBaUMsS0FBQW9xRSwwQkFBQSxtQkFBQXBzRSxFQUFBK3FFLG9CQUFBLE9BQUFDLFFBQUFsbUUsSUFBQTlFLElBQUEsQ0FBZ0o4a0UsR0FBQS9rRSxFQUFabUUsRUFBQTRtRSxHQUFBL3FFLEVBQVZtRSxFQUFBbWhFLEdBQUFoK0QsRUFBQW5ELEdBQVUsSUFBb0IyaUUsR0FBQTltRSxFQUFBLEdBQVFBLE9BQUEsRUFBUyxNQUFBbUUsRUFBUSxNQUFNLE9BQTZCNGdFLEdBQUEva0UsRUFBWm1FLEVBQUEwbUUsR0FBQTdxRSxFQUFqQm1FLEVBQUFtaEUsR0FBQWgrRCxFQUFBbkQsR0FBaUIsSUFBb0IyaUUsR0FBQTltRSxFQUFBLEdBQVFBLE9BQUEsRUFBUyxNQUFBbUUsRUFBUW5FLElBQUEraUQsT0FBVyxJQUFBNStDLEVBQUE0QixNQUFBZy9ELEdBQUE1Z0UsRUFBQW5FLEVBQUE2cUUsR0FBQTFtRSxFQUFBbkUsRUFBQXNsRSxHQUFBaCtELEVBQUFuRCxHQUFBLElBQUEyaUUsR0FBQTNpRSxFQUFBLElBQW1EbkUsT0FBQSxFQUFTLE9BQUFBLEVBQ3RiLFNBQUE2bUUsR0FBQTFpRSxFQUFBbUQsR0FBb0ssT0FBbkosSUFBQWlrRSxHQUFBcG5FLEVBQUFvbkUsR0FBQUMsR0FBQXJuRSxFQUFBd25FLEdBQUEsRUFBQXB1QixHQUFBLEVBQUFqMkMsRUFBQXhHLE1BQUFxRCxFQUFBbW9FLEdBQUEsVUFBQW5vRSxFQUFBLHVCQUFBQSxFQUFBLHFCQUFBc25FLElBQUF0bkUsSUFBQW81QyxLQUFBcDVDLEdBQUEsSUFBQUEsRUFBQSxFQUF3SG1vRSxLQUFBLElBQUFDLElBQUFwb0UsRUFBQW9vRSxTQUFBcG9FLEdBQTJCQSxFQUNwSyxTQUFBMmlFLEdBQUEzaUUsRUFBQW1ELEdBQWlCbkQsRUFBQSxFQUFHLElBQUFBLEVBQUE0K0QsZ0JBQUE1K0QsRUFBQTQrRCxlQUFBejdELEtBQUFuRCxFQUFBNCtELGVBQUF6N0QsR0FBK0QsSUFBQXRILEVBQUFtRSxFQUFBaXVELFVBQWtCLE9BQUFweUQsSUFBQSxJQUFBQSxFQUFBK2lFLGdCQUFBL2lFLEVBQUEraUUsZUFBQXo3RCxLQUFBdEgsRUFBQStpRSxlQUFBejdELEdBQTJFLElBQUFySCxFQUFBa0UsRUFBQTQrQyxPQUFlLFVBQUE5aUQsR0FBQSxJQUFBa0UsRUFBQTRCLElBQUE1QixJQUFBZytDLGNBQXFDLENBQUssS0FBSyxPQUFBbGlELEdBQVMsQ0FBd0wsR0FBdExELEVBQUFDLEVBQUFteUQsV0FBYyxJQUFBbnlELEVBQUE2aUUscUJBQUE3aUUsRUFBQTZpRSxvQkFBQXg3RCxLQUFBckgsRUFBQTZpRSxvQkFBQXg3RCxHQUE4RSxPQUFBdEgsSUFBQSxJQUFBQSxFQUFBOGlFLHFCQUFBOWlFLEVBQUE4aUUsb0JBQUF4N0QsS0FBQXRILEVBQUE4aUUsb0JBQUF4N0QsR0FBMEYsT0FBQXJILEVBQUE4aUQsUUFBQSxJQUFBOWlELEVBQUE4RixJQUFBLENBQStCNUIsRUFBQWxFLEVBQUFraUQsVUFBYyxNQUFBaCtDLEVBQVFsRSxJQUFBOGlELE9BQVc1K0MsRUFBQSxNQUFRLE9BQ3ZmQSxLQUFHcW5FLElBQUEsSUFBQWp1QixJQUFBajJDLEVBQUFpMkMsSUFBQXF1QixLQUFzQnBJLEdBQUFyL0QsRUFBQW1ELEdBQVFra0UsS0FBQUcsSUFBQUYsS0FBQXRuRSxJQUFvQm1ELEVBQUFuRCxFQUFJQSxJQUFBNCtELGVBQW1CLE9BQUF6N0QsRUFBQWtsRSxtQkFBQWxsRSxFQUFBeTdELGVBQUE1K0QsRUFBQSxPQUFBczZCLElBQUFyN0IsR0FBQXE3QixHQUFBbjNCLElBQUFrbEUsa0JBQUFsbEUsSUFBQW0zQixNQUFBK3RDLGtCQUFBbGxFLEdBQUFrbEUsa0JBQUFwcEUsS0FBd0ksS0FBQXBELEVBQUFzSCxFQUFBeTdELGlCQUFBNStELEVBQUFuRSxLQUFBc0gsRUFBQXk3RCxlQUFBNStELEdBQXlEeTVDLEtBQUF2NkMsR0FBQW9wRSxLQUFBaHRCLEdBQUFuNEMsRUFBQW80QyxHQUFBLEVBQUFndEIsR0FBQXBsRSxFQUFBLFdBQUFuRCxFQUFBd29FLEdBQUEsUUFBQUMsR0FBQXRsRSxFQUFBbkQsS0FBeUQwb0UsR0FBQUMsS0FBQUQsR0FBQSxFQUFBLzNELEVBQUEsU0FBd0IsU0FBQWk0RCxHQUFBNW9FLEVBQUFtRCxFQUFBdEgsRUFBQUMsRUFBQThELEdBQXVCLElBQUFTLEVBQUErbUUsR0FBU0EsR0FBQSxFQUFLLElBQUksT0FBQXBuRSxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUE4RCxHQUFrQixRQUFRd25FLEdBQUEvbUUsR0FDamEsSUFBQXBCLEdBQUEsS0FBQXE3QixHQUFBLEtBQUF1dUMsR0FBQSxFQUFBQyxRQUFBLEVBQUFydkIsSUFBQSxFQUFBNkIsR0FBQSxLQUFBQyxHQUFBLEVBQUE2c0IsR0FBQSxFQUFBVyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsR0FBQSxLQUFBQyxHQUFBLEtBQUFocUUsSUFBQSxFQUFBb3BFLElBQUEsRUFBQUgsSUFBQSxFQUFBZ0IsR0FBQSxLQUFBQyxHQUFBNXRCLEVBQUE2dEIsZUFBQUMsR0FBQSxHQUFBRixHQUFBLE1BQUFHLEdBQUFELEdBQUFYLEdBQUEsR0FBQUQsR0FBQSxFQUFBYyxHQUFBLEtBQUFDLEdBQUEsRUFBNkssU0FBQUMsS0FBY0osR0FBQSxJQUFBOXRCLEVBQUE2dEIsZUFBQUQsSUFBQSxNQUFtQyxTQUFBWCxHQUFBem9FLEVBQUFtRCxHQUFpQixPQUFBMGxFLEdBQUEsQ0FBVyxHQUFBMWxFLEVBQUEwbEUsR0FBQSxPQUFlLE9BQUFDLElBQUF0dEIsRUFBQW11Qiw2QkFBQWIsSUFBK0NELEdBQUExbEUsRUFBS25ELEVBQUF3N0MsRUFBQTZ0QixlQUFBRCxHQUF1Qk4sR0FBQXR0QixFQUFBb3VCLHNCQUFBQyxJQUFnQ0MsUUFBQSxJQUFBM21FLEVBQUEsR0FBQW5ELElBQXFCLFNBQUF5aUUsS0FBYyxPQUFBaHBCLEdBQUE4dkIsSUFBZVEsS0FBSyxJQUFBeHVCLElBQUEsYUFBQUEsS0FBQW11QixLQUFBSCxHQUFBRCxJQUFvQ0MsSUFDL2MsU0FBQVEsS0FBYyxJQUFBL3BFLEVBQUEsRUFBQW1ELEVBQUEsS0FBZSxVQUFBbTNCLEdBQUEsUUFBQXorQixFQUFBeStCLEdBQUF4K0IsRUFBQW1ELEdBQTRCLE9BQUFuRCxHQUFTLENBQUUsSUFBQThELEVBQUE5RCxFQUFBOGlFLGVBQXVCLE9BQUFoL0QsRUFBQSxDQUE2QyxJQUFuQyxPQUFBL0QsR0FBQSxPQUFBeStCLEtBQUEzcEIsRUFBQSxPQUFtQzdVLE1BQUF1c0Usa0JBQUEsQ0FBNEJwcEUsR0FBQXE3QixHQUFBeCtCLEVBQUF1c0Usa0JBQUEsS0FBNkIsTUFBTSxHQUFBdnNFLElBQUFtRCxNQUFBVyxFQUFBOUQsRUFBQXVzRSxrQkFBQS90QyxHQUFBK3RDLGtCQUFBem9FLEVBQUE5RCxFQUFBdXNFLGtCQUFBLFNBQXFGLElBQUF2c0UsSUFBQXcrQixHQUFBLEVBQWVBLEdBQUF6K0IsR0FBSXdzRSxrQkFBQXBwRSxHQUFzQm5ELEVBQUF1c0Usa0JBQUEsS0FBeUIsTUFBTXhzRSxFQUFBd3NFLGtCQUFBdnNFLEVBQUF1c0Usa0JBQUF2c0UsRUFBQXVzRSxrQkFBQSxLQUFzRXZzRSxFQUFBRCxFQUFBd3NFLHNCQUFzQixDQUEyQixJQUF0QixJQUFBcm9FLEdBQUFKLEVBQUFJLE9BQUFKLEVBQUF1RCxFQUFBckgsR0FBc0JBLElBQUF3K0IsR0FBQSxNQUFlLE9BQUF0NkIsRUFBQSxNQUMxZW5FLEVBQUFDLEVBQUlBLElBQUF1c0UsbUJBQXVCL3NCLEdBQUFuNEMsRUFBSW80QyxHQUFBdjdDLEVBQUksU0FBQTZwRSxHQUFBN3BFLEdBQWUsR0FBQUEsRUFBQWdxRSxZQUFBLE9BQUEvcUUsR0FBQSxDQUEyQnlxRSxLQUFLLElBQUF2bUUsRUFBQWxFLEdBQVEsR0FBRyxJQUFBcEQsRUFBQXNILEVBQUF5N0QsZUFBdUIsSUFBQS9pRSxHQUFBeXRFLElBQUF6dEUsSUFBQXNILEVBQUEwOEQsMkJBQUF5SixJQUFnRG5tRSxJQUFBa2xFLHdCQUFzQmxsRSxJQUFBbEUsSUFBYXVwRSxHQUFBLEVBQUF4b0UsR0FDdk0sU0FBQXdvRSxHQUFBeG9FLEVBQUFtRCxHQUEyQixHQUFWK2xFLEdBQUEvbEUsRUFBSzRtRSxLQUFLLE9BQUFiLEdBQUEsSUFBQVEsS0FBQUgsR0FBQUQsR0FBNEIsT0FBQWh1QixJQUFBLElBQUFDLEtBQUEsSUFBQXY3QyxNQUFBdTdDLE9BQUF3dEIsSUFBQU8sSUFBQS90QixLQUE2Q2d0QixHQUFBanRCLEdBQUFDLEdBQUErdEIsSUFBQS90QixJQUFBd3VCLEtBQUFMLEtBQUFILEdBQUFELFFBQStCLEtBQVUsT0FBQWh1QixJQUFBLElBQUFDLEtBQUEsSUFBQXY3QyxNQUFBdTdDLEtBQStCZ3RCLEdBQUFqdEIsR0FBQUMsSUFBQSxHQUFBd3VCLEtBQXFGLEdBQXBFLE9BQUFiLEtBQUFMLEdBQUEsRUFBQUMsR0FBQSxNQUEwQixJQUFBdnRCLElBQUFrdEIsR0FBQW50QixHQUFBQyxJQUFlMnRCLEdBQUEsS0FBUUgsSUFBQSxFQUFNTCxHQUFBLEVBQUtjLEdBQUEsS0FBUSxPQUFBTCxHQUFBLElBQUFucEUsRUFBQW1wRSxNQUFBLEtBQUFobUUsRUFBQSxFQUFrQ0EsRUFBQW5ELEVBQUFtQyxPQUFXZ0IsSUFBQSxDQUFLLElBQUF0SCxFQUFBbUUsRUFBQW1ELEdBQVcsSUFBSXRILEVBQUFvdUUsY0FBZ0IsTUFBQW51RSxHQUFTa3RFLFNBQUEsRUFBQUMsR0FBQW50RSxJQUFrQixHQUFBa3RFLEdBQUEsTUFBQWhwRSxFQUFBaXBFLE1BQUEsS0FBQUQsSUFBQSxFQUFBaHBFLEVBQzdXLFNBQUF1b0UsR0FBQXZvRSxFQUFBbUQsRUFBQXRILEdBQTBDLEdBQXZCNDlDLElBQUE5b0MsRUFBQSxPQUFrQjhvQyxJQUFBLEVBQUssT0FBQXl2QixJQUFBcnRFLEVBQUEsQ0FBaUIsSUFBQUMsRUFBQWtFLEVBQUFpb0UsYUFBcUIsT0FBQW5zRSxFQUFBb3VFLEdBQUFscUUsRUFBQWxFLEVBQUFxSCxJQUFBbkQsRUFBQWlvRSxhQUFBLEtBQUFILEdBQUE5bkUsR0FBQSxFQUFBbkUsR0FBQSxRQUFBQyxFQUFBa0UsRUFBQWlvRSxlQUFBaUMsR0FBQWxxRSxFQUFBbEUsRUFBQXFILFNBQXlGLFFBQUFySCxFQUFBa0UsRUFBQWlvRSxjQUFBaUMsR0FBQWxxRSxFQUFBbEUsRUFBQXFILElBQUFuRCxFQUFBaW9FLGFBQUEsS0FBQUgsR0FBQTluRSxHQUFBLEVBQUFuRSxHQUFBLFFBQUFDLEVBQUFrRSxFQUFBaW9FLGdCQUFBRCxLQUFBaG9FLEVBQUFpb0UsYUFBQW5zRSxFQUFBb3VFLEdBQUFscUUsRUFBQWxFLEVBQUFxSCxLQUF1SXMyQyxJQUFBLEVBQ2hULFNBQUF5d0IsR0FBQWxxRSxFQUFBbUQsRUFBQXRILEdBQW1CLElBQUFDLEVBQUFrRSxFQUFBbXFFLFdBQW1CLFVBQUFydUUsS0FBQXN1RSxpQkFBQXZ1RSxJQUFBLE9BQUFzdEUsT0FBQXJ0RSxHQUFBcXRFLEdBQUE3akUsS0FBQXhKLEtBQUF1dUUsUUFBK0csT0FBcENycUUsRUFBQWlvRSxhQUFBOWtFLE9BQWlCbkQsRUFBQTQrRCxlQUFBLEdBQTBCNStELEVBQUFpb0UsYUFBQSxLQUFvQmpvRSxJQUFBd3BFLEdBQUFkLE1BQUFjLEdBQUF4cEUsRUFBQTBvRSxHQUFBLEdBQXdCbEIsR0FBQUgsSUFBQSxFQUFTcm5FLEVBQUEwNEMsVUFBQXYxQyxHQUFBd04sRUFBQSxPQUE4RCxLQUFoQzlVLEVBQUFtRSxFQUFBK25FLDhCQUFnQ3AzRCxFQUFBLE9BQXNCM1EsRUFBQStuRSw0QkFBQSxFQUFnQ2pzRSxFQUFBcUgsRUFBQXk3RCxlQUFtQixJQUFBaC9ELEVBQUF1RCxFQUFBdzdELG9CQUMySCxHQUQvRjdpRSxFQUFBLElBQUFBLEdBQUEsSUFBQThELEtBQUE5RCxFQUFBOEQsRUFBQTlELEVBQXdCa0UsRUFBQXMvRCxVQUFBLEVBQWMsSUFBQXhqRSxHQUFBa0UsRUFBQXUvRCxvQkFBQSxFQUFBdi9ELEVBQUF3L0Qsa0JBQUEsRUFBQXgvRCxFQUFBMC9ELHNCQUFBLEVBQUExL0QsRUFBQTIvRCxvQkFDMVosRUFBQTMvRCxFQUFBNC9ELGlCQUFBLFNBQUFoZ0UsRUFBQUksRUFBQXcvRCxxQkFBQTUvRCxFQUFBOUQsRUFBQWtFLEVBQUF1L0Qsb0JBQUF2L0QsRUFBQXcvRCxrQkFBQSxFQUFBeC9ELEVBQUF1L0Qsb0JBQUF6akUsSUFBQWtFLEVBQUF1L0Qsb0JBQUF2L0QsRUFBQXcvRCxvQkFBQSxLQUFBNS9ELEVBQUFJLEVBQUEwL0QsdUJBQUFMLEdBQUFyL0QsRUFBQWxFLEtBQUFrRSxFQUFBMi9ELHFCQUFBMy9ELEVBQUEwL0Qsc0JBQUEsRUFBQTEvRCxFQUFBMi9ELG9CQUFBLEVBQUEzL0QsRUFBQTQvRCxpQkFBQSxFQUFBUCxHQUFBci9ELEVBQUFsRSxNQUFBOEQsR0FBQXkvRCxHQUFBci9ELEVBQUFsRSxJQUE0VTJqRSxHQUFBLEVBQUF6L0QsR0FBUWtuRSxHQUFBeHVCLFFBQUEsS0FBZ0IsRUFBQXYxQyxFQUFBa3JELFVBQUEsT0FBQWxyRCxFQUFBcTdELFlBQUFyN0QsRUFBQXE3RCxXQUFBRSxXQUFBdjdELEVBQUFySCxFQUFBcUgsRUFBQXM3RCxhQUFBM2lFLEVBQUFxSCxFQUFBckgsRUFBQXFILEVBQUFzN0QsWUFBa0dqQyxHQUFBcEksR0FBYWlCLEdBQVB6MUQsRUFBQXMxRCxNQUFPLENBQVUsc0JBQUF0MUQsRUFBQSxJQUFBUyxHQUM1ZHNMLE1BQUEvTCxFQUFBbTJELGVBQUFqcEQsSUFBQWxOLEVBQUFvMkQsbUJBQTJDaDJELEVBQUEsQ0FBcUQsSUFBQXk2QixHQUE3Q3A2QixLQUFBVCxFQUFBZ3FELGdCQUFBdnBELEVBQUEwdEQsYUFBQXh1RCxRQUE2QzIyRCxjQUFBNzFELEVBQUE2MUQsZUFBdUMsR0FBQXo3QixHQUFBLElBQUFBLEVBQUE2dkMsV0FBQSxDQUF3QmpxRSxFQUFBbzZCLEVBQUF3N0IsV0FBZSxJQUFBL2dELEVBQUF1bEIsRUFBQTA3QixhQUFBejZDLEVBQUErZSxFQUFBMjdCLFVBQW1DMzdCLElBQUE0N0IsWUFBZ0IsSUFBSWgyRCxFQUFBb2MsU0FBQWYsRUFBQWUsU0FBc0IsTUFBQTh0RCxHQUFVbHFFLEVBQUEsS0FBTyxNQUFBTCxFQUFRLElBQUF2RSxFQUFBLEVBQUFHLEdBQUEsRUFBQWMsR0FBQSxFQUFBK2xCLEVBQUEsRUFBQXExQixFQUFBLEVBQUFELEVBQUFqNEMsRUFBQWc0QyxFQUFBLEtBQXFDejBDLEVBQUEsT0FBUSxDQUFFLFFBQUF3TCxFQUFha3BDLElBQUF4M0MsR0FBQSxJQUFBNlUsR0FBQSxJQUFBMmlDLEVBQUFwN0IsV0FBQTdnQixFQUFBSCxFQUFBeVosR0FBc0MyaUMsSUFBQW44QixHQUFBLElBQUErZSxHQUFBLElBQUFvZCxFQUFBcDdCLFdBQUEvZixFQUFBakIsRUFBQWcvQixHQUFzQyxJQUFBb2QsRUFBQXA3QixXQUFBaGhCLEdBQUFvOEMsRUFBQXVnQixVQUFBajJELFFBQXdDLFFBQUF3TSxFQUFBa3BDLEVBQUFrZCxhQUFpQ25kLEVBQUFDLEVBQUlBLEVBQUFscEMsRUFBSSxPQUFNLENBQUUsR0FBQWtwQyxJQUN0Zmo0QyxFQUFBLE1BQUF1RCxFQUFzRCxHQUE1Q3kwQyxJQUFBdjNDLEtBQUFvaUIsSUFBQXZOLElBQUF0WixFQUFBSCxHQUFzQm04QyxJQUFBbDhCLEtBQUFvOEIsSUFBQXJkLElBQUEvOUIsRUFBQWpCLEdBQXNCLFFBQUFrVCxFQUFBa3BDLEVBQUFvZCxhQUFBLE1BQXNDcmQsR0FBSkMsRUFBQUQsR0FBSTJHLFdBQWUxRyxFQUFBbHBDLEVBQUl0TyxHQUFBLElBQUF6RSxJQUFBLElBQUFjLEVBQUEsTUFBdUJpUCxNQUFBL1AsRUFBQWtSLElBQUFwUSxRQUFlMkQsRUFBQSxLQUFZQSxNQUFNc0wsTUFBQSxFQUFBbUIsSUFBQSxRQUFlek0sRUFBQSxLQUFzRCxJQUExQ284RCxJQUFJK04sWUFBQTVxRSxFQUFBNnFFLGVBQUFwcUUsR0FBZ0MrekQsSUFBQSxFQUFNajFELEdBQUFyRCxFQUFRLE9BQUFxRCxJQUFTLENBQUVTLEdBQUEsRUFBS1MsT0FBQSxFQUFTLElBQUksS0FBSyxPQUFBbEIsSUFBUyxDQUFFLE9BQUFBLEdBQUFrdkQsVUFBQSxDQUFvQixJQUFBL3hELEVBQUE2QyxHQUFBOHVELFVBQWtCanVELEVBQUEsT0FBQWtWLEVBQUEvVixHQUFBK1YsRUFBQXRULEtBQW9CLHFCQUFBc1QsRUFBQW01QyxXQUFBLE9BQUEveEQsRUFBQSxDQUE0QyxJQUFBZ0IsRUFBQWhCLEVBQUFpaUUsY0FBQTNpQyxFQUFBdC9CLEVBQUEraEUsY0FBQTcvRCxFQUFBMFcsRUFBQThvQyxVQUFzRHgvQyxFQUFBMDRCLE1BQUFoaUIsRUFBQXFwRCxjQUF3Qi8vRCxFQUFBMndDLE1BQUFqNkIsRUFBQW1wRCxjQUF3QixJQUFBcU0sRUFBQWxzRSxFQUFBMGtFLHdCQUFBNWxFLEVBQzdlcytCLEdBQUdwOUIsRUFBQW1zRSxvQ0FBQUQsRUFBeUMsTUFBQTFxRSxFQUFRLGtDQUFBQSxFQUFvQyxRQUFBMlEsRUFBQSxRQUFrQnhSLE1BQUF1L0QsWUFBZ0IsTUFBQTZMLEdBQVUzcUUsR0FBQSxFQUFBUyxFQUFBa3FFLEVBQVUzcUUsSUFBQSxPQUFBVCxJQUFBd1IsRUFBQSxPQUFBbzFELEdBQUE1bUUsR0FBQWtCLEdBQUEsT0FBQWxCLFdBQUF1L0QsYUFBaUUsSUFBQXYvRCxHQUFBckQsRUFBUSxPQUFBcUQsSUFBUyxDQUFFN0MsR0FBQSxFQUFLZ0IsT0FBQSxFQUFTLElBQUksS0FBSyxPQUFBNkIsSUFBUyxDQUFFLElBQUErOUIsRUFBQS85QixHQUFBa3ZELFVBQTJDLEdBQXpCLEdBQUFueEIsR0FBQWc3QixHQUFBLzRELEdBQUE2K0MsVUFBQSxJQUF5QixJQUFBOWdCLEVBQUEsQ0FBVSxJQUFBdCtCLEVBQUFPLEdBQUE4dUQsVUFBa0IsVUFBQXJ2RCxFQUFBLENBQWEsSUFBQSs0QyxFQUFBLzRDLEVBQUEwVSxJQUFZLE9BQUFxa0MsSUFBQSxtQkFBQUEsSUFBQSxNQUFBQSxFQUFBZSxRQUFBLE9BQTBELFVBQUF4YixHQUFhLE9BQUFrcEMsR0FBQWpuRSxJQUFhQSxHQUFBa3ZELFlBQUEsRUFBZ0IsTUFBTSxPQUFBK1gsR0FBQWpuRSxJQUFhQSxHQUFBa3ZELFlBQUEsRUFBZ0JrWSxHQUFBcG5FLEdBQUE4dUQsVUFDM2U5dUQsSUFBRyxNQUFNLE9BQUFvbkUsR0FBQXBuRSxHQUFBOHVELFVBQUE5dUQsSUFBeUIsTUFBTSxPQUFBK21FLEdBQUF0cUMsRUFBQXo4QixJQUFBeThCLEVBQUFnakIsT0FBQSxLQUFBaGpCLEVBQUE0eUIsTUFBQSxLQUFBNXlCLEVBQUFxeUIsWUFBQXJ5QixFQUFBcXlCLFVBQUFPLE1BQUEsS0FBQTV5QixFQUFBcXlCLFVBQUFyUCxPQUFBLE1BQTBHei9DLE1BQUF1L0QsWUFBZ0IsTUFBQTZMLEdBQVVqdUUsR0FBQSxFQUFBZ0IsRUFBQWl0RSxFQUFVanVFLElBQUEsT0FBQTZDLElBQUF3UixFQUFBLE9BQUFvMUQsR0FBQTVtRSxHQUFBN0IsR0FBQSxPQUFBNkIsV0FBQXUvRCxhQUFnSCxHQUEvQy9tQixFQUFBOGtCLEdBQUs3OUQsRUFBQXMyRCxLQUFPaDRCLEVBQUF5YSxFQUFBNnlCLFlBQWdCbHRFLEVBQUFxNkMsRUFBQTh5QixlQUFtQjdyRSxJQUFBcytCLFFBQUEwc0IsZUE1SHhFLFNBQUFnaEIsRUFBQTVxRSxFQUFBbUQsR0FBaUIsU0FBQW5ELElBQUFtRCxLQUFBbkQsSUFBQW1ELEtBQUFuRCxHQUFBLElBQUFBLEVBQUF5YyxZQUFBdFosR0FBQSxJQUFBQSxFQUFBc1osU0FBQW11RCxFQUFBNXFFLEVBQUFtRCxFQUFBbzdDLFlBQUEsYUFBQXYrQyxJQUFBdzFCLFNBQUFyeUIsS0FBQW5ELEVBQUE2cUUsNEJBQUEsR0FBQTdxRSxFQUFBNnFFLHdCQUFBMW5FLE1BNEh1RHluRSxDQUFBMXRDLEVBQUEwc0IsY0FBQWp0QyxnQkFBQXVnQixHQUFBLENBQXFFLE9BQUE1L0IsR0FBQSszRCxHQUFBbjRCLEtBQUF0K0IsRUFBQXRCLEVBQUFxTyxXQUFBLEtBQUFnc0MsRUFBQXI2QyxFQUFBd1AsT0FBQTZxQyxFQUFBLzRDLEdBQUEsbUJBQUFzK0IsS0FBQTY0QixlQUFBbjNELEVBQUFzK0IsRUFBQTg0QixhQUFBeDJELEtBQUFpQixJQUFBazNDLEVBQUF6YSxFQUFBemdDLE1BQUEwRixVQUMzV3ZELElBQUF0QyxFQUFBNGdDLEVBQUEwc0IsZUFBQW54QixVQUFBbjhCLEVBQUF5eEQsWUFBQXh1RCxRQUFBMjJELGVBQUF0NkIsRUFBQXNCLEVBQUFzakIsWUFBQXIrQyxPQUFBdzFDLEVBQUFuNEMsS0FBQWlCLElBQUFuRCxFQUFBcU8sTUFBQWl3QixHQUFBdCtCLE9BQUEsSUFBQUEsRUFBQXdQLElBQUE2cUMsRUFBQW40QyxLQUFBaUIsSUFBQW5ELEVBQUF3UCxJQUFBOHVCLElBQUFoOUIsRUFBQW1qRCxRQUFBcEssRUFBQXI2QyxJQUFBcytCLEVBQUF0K0IsSUFBQXE2QyxJQUFBL2IsS0FBQW81QixHQUFBOTNCLEVBQUF5YSxHQUFBbjVDLEVBQUF3MkQsR0FBQTkzQixFQUFBNS9CLEdBQUFzK0IsR0FBQXA5QixJQUFBLElBQUFJLEVBQUEwckUsWUFBQTFyRSxFQUFBcTNELGFBQUFyNkIsRUFBQXBmLE1BQUE1ZCxFQUFBdTNELGVBQUF2NkIsRUFBQXh4QixRQUFBeEwsRUFBQXczRCxZQUFBNTNELEVBQUFnZSxNQUFBNWQsRUFBQXkzRCxjQUFBNzNELEVBQUE0TCxXQUFBOU4sSUFBQXd1RSxlQUFBQyxTQUFBbnZDLEVBQUFwZixLQUFBb2YsRUFBQXh4QixRQUFBeEwsRUFBQW9zRSxrQkFBQXJ6QixFQUFBcjZDLEdBQUFzQixFQUFBcXNFLFNBQUEzdUUsR0FBQXNDLEVBQUFtakQsT0FBQXZqRCxFQUFBZ2UsS0FBQWhlLEVBQUE0TCxVQUFBOU4sRUFBQTR1RSxPQUFBMXNFLEVBQUFnZSxLQUFBaGUsRUFBQTRMLFFBQUF4TCxFQUFBcXNFLFNBQUEzdUUsT0FBcWVzQyxLQUFLLElBQUErNEMsRUFBQXphLEVBQVF5YSxJQUFBNEcsWUFBZSxJQUNqZ0I1RyxFQUFBbDdCLFVBQUE3ZCxFQUFBMEcsTUFBb0J1bEMsUUFBQThNLEVBQUF4d0IsS0FBQXd3QixFQUFBd3pCLFdBQUFDLElBQUF6ekIsRUFBQTB6QixZQUFxRixJQUF2QyxtQkFBQW51QyxFQUFBby9CLE9BQUFwL0IsRUFBQW8vQixRQUF1Q3AvQixFQUFBLEVBQVFBLEVBQUF0K0IsRUFBQXVELE9BQVcrNkIsS0FBQXlhLEVBQUEvNEMsRUFBQXMrQixJQUFBMk4sUUFBQXNnQyxXQUFBeHpCLEVBQUF4d0IsS0FBQXd3QixFQUFBOU0sUUFBQXdnQyxVQUFBMXpCLEVBQUF5ekIsSUFBcUcsSUFBcEMzTyxHQUFBLEtBQVFySSxLQUFBb0ksR0FBUUEsR0FBQSxLQUFReDhELEVBQUEwNEMsUUFBQXYxQyxFQUFZaEUsR0FBQXJELEVBQVEsT0FBQXFELElBQVMsQ0FBRXJELEdBQUEsRUFBS29oQyxPQUFBLEVBQVMsSUFBSSxJQUFBdCtCLEVBQUEvQyxFQUFRLE9BQUFzRCxJQUFTLENBQUUsSUFBQW1zRSxFQUFBbnNFLEdBQUFrdkQsVUFBbUIsTUFBQWlkLEVBQUEsQ0FBVSxJQUFBQyxFQUFBcHNFLEdBQUE4dUQsVUFBMkIsT0FBSjN4RCxFQUFBc0MsR0FBSis0QyxFQUFBeDRDLElBQVF5QyxLQUFjLGtCQUFBZzRDLEVBQUFqQyxFQUFBcUcsVUFBZ0MsS0FBQXJHLEVBQUEwVyxVQUFBLFVBQUFrZCxFQUFBM3hCLEVBQUExaUIsTUFBQXlnQixFQUFBNG1CLGNBQUEza0IsRUFBQXpLLE1BQUF3SSxFQUFBMG1CLGNBQUF6a0IsRUFBQXlwQix3QkFBb0csQ0FBSyxJQUFBbUksRUFBQUQsRUFBQWhOLGNBQ3hla04sRUFBQUYsRUFBQWxOLGNBQW9CemtCLEVBQUExaUIsTUFBQXlnQixFQUFBNG1CLGNBQXdCM2tCLEVBQUF6SyxNQUFBd0ksRUFBQTBtQixjQUF3QnprQixFQUFBa3JCLG1CQUFBMEcsRUFBQUMsRUFBQTd4QixFQUFBK3dCLHFDQUFrRSxJQUFBZSxFQUFBL3pCLEVBQUEybUIsWUFBcUIsT0FBQW9OLElBQUE5eEIsRUFBQTFpQixNQUFBeWdCLEVBQUE0bUIsY0FBQTNrQixFQUFBekssTUFBQXdJLEVBQUEwbUIsY0FBQTRDLEdBQUF0cEIsRUFBQSt6QixFQUFBOXhCLElBQTBFLE1BQU0sV0FBQSt4QixFQUFBaDBCLEVBQUEybUIsWUFBNEIsVUFBQXFOLEVBQUEsQ0FBcUIsR0FBUHJ1RSxFQUFBLEtBQU8sT0FBQXE2QyxFQUFBNlcsTUFBQSxPQUFBN1csRUFBQTZXLE1BQUE1c0QsS0FBc0MsT0FBQXRFLEVBQUFxNkMsRUFBQTZXLE1BQUF4USxVQUEyQixNQUFNLGNBQUExZ0QsRUFBQXE2QyxFQUFBNlcsTUFBQXhRLFVBQWtDaWpCLEdBQUF0cEIsRUFBQWcwQixFQUFBcnVFLEdBQWEsTUFBTSxXQUFBc3VFLEVBQUFqMEIsRUFBQXFHLFVBQTBCLE9BQUF1dEIsR0FBQSxFQUFBNXpCLEVBQUEwVyxXQUFBcU8sR0FBQS9rQixFQUFBNzVDLEtBQUE2NUMsRUFBQTRtQixnQkFBQXFOLEVBQUF0UCxRQUFpRSxNQUNuZixPQUFhLE9BQWEsUUFBYyxjQUFjLFFBQUEzckQsRUFBQSxRQUFrQixPQUFBMjZELEVBQUEsQ0FBVyxJQUFBTyxFQUFBMXNFLEdBQUFtVSxJQUFhLFVBQUF1NEQsRUFBQSxDQUFjLElBQUFDLEVBQUEzc0UsR0FBQTYrQyxVQUFtQixPQUFBNytDLEdBQUF5QyxLQUFjLFdBQUFtcUUsRUFBQUQsRUFBaUIsTUFBTSxRQUFBQyxFQUFBRCxFQUFjLG1CQUFBRCxJQUFBRSxHQUFBRixFQUFBbnpCLFFBQUFxekIsR0FBNkMsSUFBQUMsRUFBQTdzRSxHQUFBdS9ELFdBQW9Cdi9ELEdBQUF1L0QsV0FBQSxLQUFrQnYvRCxHQUFBNnNFLEdBQU0sTUFBQXpCLEdBQVV6dUUsR0FBQSxFQUFBb2hDLEVBQUFxdEMsRUFBVXp1RSxJQUFBLE9BQUFxRCxJQUFBd1IsRUFBQSxPQUFBbzFELEdBQUE1bUUsR0FBQSs5QixHQUFBLE9BQUEvOUIsV0FBQXUvRCxhQUFpRTJJLEdBQUFHLElBQUEsRUFBUyxtQkFBQXpKLE9BQUE1NkQsRUFBQTY2QyxXQUF3Q3N0QixFQUFBbm9FLEVBQUF5N0QsZUFBb0J6N0QsSUFBQXc3RCxvQkFBbUQsS0FBM0J4N0QsRUFBQSxJQUFBbW9FLEdBQUEsSUFBQW5vRSxLQUFBbW9FLEVBQUFub0UsRUFBQW1vRSxLQUEyQnhFLEdBQUEsTUFBaUI5bUUsRUFBQTQrRCxlQUMzZXo3RCxFQUFFbkQsRUFBQWlvRSxhQUFBLEtBQW9CLFNBQUFELEtBQWMsUUFBQWUsTUFBQSxPQUFBRyxPQUFBK0MsZ0JBQUF4QyxNQUFBVixJQUFBLEdBQXVELFNBQUFwQyxHQUFBM21FLEdBQWUsT0FBQXM3QyxJQUFBM3FDLEVBQUEsT0FBeUIycUMsR0FBQXNqQixlQUFBLEVBQW1Cb0ssU0FBQSxFQUFBQyxHQUFBanBFLEdBQWlCLFNBQUFrc0UsR0FBQWxzRSxFQUFBbUQsR0FBaUIsSUFBQXRILEVBQUFxRCxHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBYyxFQUFBbUQsR0FBWSxTQUFRakUsR0FBQXJELElBQUE0OUMsSUFBQSt1QixHQUFBLFNBQXNCLFNBQUEyRCxHQUFBbnNFLEVBQUFtRCxHQUFpQixHQUFBakUsS0FBQW9wRSxHQUFBLENBQVdBLElBQUEsRUFBTSxJQUFJLE9BQUF0b0UsRUFBQW1ELEdBQVksUUFBUW1sRSxJQUFBLEdBQU8sT0FBQXRvRSxFQUFBbUQsR0FBWSxTQUFBaXBFLEdBQUFwc0UsRUFBQW1ELEVBQUF0SCxHQUFtQixHQUFBc3NFLEdBQUEsT0FBQW5vRSxFQUFBbUQsRUFBQXRILEdBQW9CcUQsSUFBQXU2QyxJQUFBLElBQUEydUIsS0FBQUksR0FBQUosR0FBQSxNQUFBQSxHQUFBLEdBQWlDLElBQUF0c0UsRUFBQXFzRSxHQUFBdm9FLEVBQUFWLEdBQWFBLEdBQUFpcEUsSUFBQSxFQUFRLElBQUksT0FBQW5vRSxFQUFBbUQsRUFBQXRILEdBQWMsUUFBUXNzRSxHQUFBcnNFLEdBQUFvRCxHQUFBVSxJQUFBNjVDLElBQUErdUIsR0FBQSxTQUV6YSxTQUFBNkQsR0FBQXJzRSxFQUFBbUQsRUFBQXRILEVBQUFDLEVBQUE4RCxHQUF1QixJQUFBUyxFQUFBOEMsRUFBQXUxQyxRQUF1SyxPQUF2Sjc4QyxFQURyRCxTQUFBbUUsR0FBZSxJQUFBQSxFQUFBLE9BQUFrOUQsR0FBZ0JsOUQsSUFBQXdpRSxvQkFBd0J4aUUsRUFBQSxFQUFHLElBQUFvdUQsR0FBQXB1RCxJQUFBLElBQUFBLEVBQUE0QixLQUFBLElBQUE1QixFQUFBNEIsTUFBQStPLEVBQUEsT0FBZ0QsSUFBQXhOLEVBQUFuRCxFQUFRLEdBQUcsT0FBQW1ELEVBQUF2QixLQUFjLE9BQUF1QixJQUFBNjZDLFVBQUEzekIsUUFBNkIsTUFBQXJxQixFQUFRLFVBQUEyNUMsR0FBQXgyQyxFQUFBckYsTUFBQSxDQUFxQnFGLElBQUE2NkMsVUFBQTZmLDBDQUF3RCxNQUFBNzlELEVBQVEsTUFBTSxVQUFBMjVDLEdBQUF4MkMsRUFBQXJGLEtBQUEwcEQsY0FBQSxDQUFrQ3JrRCxJQUFBNjZDLFVBQUE2ZiwwQ0FBd0QsTUFBQTc5RCxHQUFTbUQsSUFBQXk3QyxhQUFXLE9BQUF6N0MsR0FBZ0J3TixFQUFBLE9BQVN4TixPQUFBLEVBQVMsT0FBQW5ELEVBQUE0QixJQUFBLENBQWMsSUFBQS9GLEVBQUFtRSxFQUFBbEMsS0FBYSxHQUFBNjdDLEdBQUE5OUMsR0FBQSxPQUFBNmhFLEdBQUExOUQsRUFBQW5FLEVBQUFzSCxRQUF5QixPQUFBbkQsRUFBQTRCLEtBQUErM0MsR0FBQTk5QyxFQUFBbUUsRUFBQWxDLEtBQUEwcEQsY0FBQSxPQUFBa1csR0FBQTE5RCxFQUN2Y25FLEVBQUFzSCxHQUFLLE9BQUFBLEVBQWdEbXBFLENBQUF6d0UsR0FBUSxPQUFBc0gsRUFBQWtuQixRQUFBbG5CLEVBQUFrbkIsUUFBQXh1QixFQUFBc0gsRUFBQThoRSxlQUFBcHBFLEVBQWdEc0gsRUFBQXZELEdBQUlBLEVBQUE0Z0UsR0FBQTFrRSxJQUFRMmtFLFNBQVc1MUIsUUFBQTdxQyxHQUErQixRQUFwQm1ELE9BQUEsSUFBQUEsRUFBQSxLQUFBQSxLQUFvQnZELEVBQUE4Z0UsU0FBQXY5RCxHQUF5Qnk5RCxHQUFBdmdFLEVBQUFULEdBQVEraUUsR0FBQXRpRSxFQUFBdkUsR0FBUUEsRUFBUyxTQUFBeXdFLEdBQUF2c0UsRUFBQW1ELEVBQUF0SCxFQUFBQyxHQUFxQixJQUFBOEQsRUFBQXVELEVBQUF1MUMsUUFBaUMsT0FBQTJ6QixHQUFBcnNFLEVBQUFtRCxFQUFBdEgsRUFBVitELEVBQUE4aUUsR0FBdkJELEtBQXVCN2lFLEdBQVU5RCxHQUFxQixTQUFBMHdFLEdBQUF4c0UsR0FBMkIsS0FBWkEsSUFBQTA0QyxTQUFZOFYsTUFBQSxZQUF3QixPQUFBeHVELEVBQUF3dUQsTUFBQTVzRCxLQUFvQixPQUFnQyxlQUFBNUIsRUFBQXd1RCxNQUFBeFEsV0FHdlksU0FBQXl1QixHQUFBenNFLEdBQWUsSUFBQW1ELEVBQUEsVUFBQXMvRCxLQUFBLGNBQW1DdC9ELEdBQUFna0UsS0FBQWhrRSxFQUFBZ2tFLEdBQUEsR0FBZ0I1bEUsS0FBQTZvRSxnQkFBQWpELEdBQUFoa0UsRUFBMEI1QixLQUFBaWMsTUFBQXhkLEVBQWF1QixLQUFBbXJFLFdBQUFuckUsS0FBQW9yRSxNQUFBLEtBQWdDcHJFLEtBQUFxckUsYUFBQXJyRSxLQUFBc3JFLGNBQUEsRUFBdUN0ckUsS0FBQXVyRSxVQUFBLEtBQW9CdnJFLEtBQUE4b0UsUUFBQSxFQUdvQyxTQUFBMEMsS0FBY3hyRSxLQUFBbXJFLFdBQUEsS0FBcUJuckUsS0FBQXlyRSxZQUFBLEVBQW1CenJFLEtBQUEwckUsVUFBQTFyRSxLQUFBMHJFLFVBQUFqd0UsS0FBQXVFLE1BRTlSLFNBQUEyckUsR0FBQWx0RSxFQUFBbUQsRUFBQXRILEdBQStDbUUsR0FBRzA0QyxRQUEvQnYxQyxFQUFBLElBQUErNkQsR0FBQSxZQUFBLzZELEVBQUEsS0FBK0Ird0QsY0FBQWwwRCxFQUFBbS9ELGdCQUFBLEtBQUFJLG9CQUFBLEVBQUFDLGtCQUFBLEVBQUFFLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLGlCQUFBLEVBQUFOLFVBQUEsRUFBQXlJLDRCQUFBLEVBQUFFLGFBQUEsS0FBQWtGLGVBQUEsRUFBQTlpRCxRQUFBLEtBQUE0NkMsZUFBQSxLQUFBSyxRQUFBenBFLEVBQUFna0UsMkJBQUEsRUFBQWpCLGVBQUEsRUFBQXVMLFdBQUEsS0FBQTlCLGtCQUFBLE1BQXdXOW1FLEtBQUE2ckUsY0FBQWpxRSxFQUFBNjZDLFVBQUFoK0MsRUFFM0osU0FBQXF0RSxHQUFBcnRFLEdBQWUsU0FBQUEsR0FBQSxJQUFBQSxFQUFBeWMsVUFBQSxJQUFBemMsRUFBQXljLFVBQUEsS0FBQXpjLEVBQUF5YyxXQUFBLElBQUF6YyxFQUFBeWMsVUFBQSxpQ0FBQXpjLEVBQUFvNEQsWUFFOVEsU0FBQWtWLEdBQUF0dEUsRUFBQW1ELEVBQUF0SCxFQUFBQyxFQUFBOEQsR0FBdUJ5dEUsR0FBQXh4RSxJQUFBOFUsRUFBQSxPQUFzQixJQUFBdFEsRUFBQXhFLEVBQUEweEUsb0JBQTRCLEdBQUFsdEUsRUFBQSxDQUFNLHNCQUFBVCxFQUFBLENBQTBCLElBQUE2NkIsRUFBQTc2QixFQUFRQSxFQUFBLFdBQWEsSUFBQUksRUFBQXdzRSxHQUFBbnNFLEVBQUErc0UsZUFBMEIzeUMsRUFBQTkrQixLQUFBcUUsSUFBVyxNQUFBQSxFQUFBSyxFQUFBbXRFLGtDQUFBeHRFLEVBQUFtRCxFQUFBdkQsR0FBQVMsRUFBQXU2QyxPQUFBejNDLEVBQUF2RCxPQUFpRSxDQUFxQyxHQUFoQ1MsRUFBQXhFLEVBQUEweEUsb0JBRHpPLFNBQUF2dEUsRUFBQW1ELEdBQXdJLEdBQXZIQSxZQUFBbkQsRUFBQSxJQUFBQSxFQUFBeWMsU0FBQXpjLEVBQUEyYyxnQkFBQTNjLEVBQUErMEQsV0FBQSxXQUFBNXhELEVBQUFzWixXQUFBdFosRUFBQXNxRSxhQUFBLHFCQUF1SHRxRSxFQUFBLFFBQUF0SCxFQUFnQkEsRUFBQW1FLEVBQUFtNEQsV0FBY240RCxFQUFBc2hDLFlBQUF6bEMsR0FBa0IsV0FBQXF4RSxHQUFBbHRFLEdBQUEsRUFBQW1ELEdBQ2lEdXFFLENBQUE3eEUsRUFBQUMsR0FBZ0MsbUJBQUE4RCxFQUFBLENBQTBCLElBQUFzVixFQUFBdFYsRUFBUUEsRUFBQSxXQUFhLElBQUFJLEVBQUF3c0UsR0FBQW5zRSxFQUFBK3NFLGVBQTBCbDRELEVBQUF2WixLQUFBcUUsSUFBV21zRSxHQUFBLFdBQWMsTUFBQW5zRSxFQUFBSyxFQUFBbXRFLGtDQUFBeHRFLEVBQUFtRCxFQUFBdkQsR0FBQVMsRUFBQXU2QyxPQUFBejNDLEVBQUF2RCxLQUFtRSxPQUFBNHNFLEdBQUFuc0UsRUFBQStzRSxlQUM5YSxTQUFBTyxHQUFBM3RFLEVBQUFtRCxHQUFpQixJQUFBdEgsRUFBQSxFQUFBd0gsVUFBQWxCLGFBQUEsSUFBQWtCLFVBQUEsR0FBQUEsVUFBQSxRQUF3RixPQUF0QmdxRSxHQUFBbHFFLElBQUF3TixFQUFBLE9BWm5GLFNBQUEzUSxFQUFBbUQsRUFBQXRILEdBQW1CLElBQUFDLEVBQUEsRUFBQXVILFVBQUFsQixhQUFBLElBQUFrQixVQUFBLEdBQUFBLFVBQUEsUUFBa0UsT0FBTzQxQyxTQUFBME4sR0FBQTVwRCxJQUFBLE1BQUFqQixFQUFBLFFBQUFBLEVBQUFrOUMsU0FBQWg1QyxFQUFBazBELGNBQUEvd0QsRUFBQWk4RCxlQUFBdmpFLEdBWWEreEUsQ0FBQTV0RSxFQUFBbUQsRUFBQSxLQUFBdEgsR0FYekdrb0QsR0FBQSxTQUFBL2pELEVBQUFtRCxFQUFBdEgsR0FBbUIsT0FBQXNILEdBQVUsWUFBOEIsR0FBOUJzbUQsR0FBQXpwRCxFQUFBbkUsR0FBcUJzSCxFQUFBdEgsRUFBQUUsS0FBUyxVQUFBRixFQUFBaUMsTUFBQSxNQUFBcUYsRUFBQSxDQUE4QixJQUFBdEgsRUFBQW1FLEVBQVFuRSxFQUFBMGlELFlBQWExaUQsSUFBQTBpRCxXQUEyRixJQUEzRTFpRCxJQUFBZ3lFLGlCQUFBLGNBQUFqNEMsS0FBQUMsVUFBQSxHQUFBMXlCLEdBQUEsbUJBQTJFQSxFQUFBLEVBQVFBLEVBQUF0SCxFQUFBc0csT0FBV2dCLElBQUEsQ0FBSyxJQUFBckgsRUFBQUQsRUFBQXNILEdBQVcsR0FBQXJILElBQUFrRSxHQUFBbEUsRUFBQWd5RSxPQUFBOXRFLEVBQUE4dEUsS0FBQSxDQUEyQixJQUFBbHVFLEVBQUE4K0MsRUFBQTVpRCxHQUFZOEQsR0FBQStRLEVBQUEsTUFBaUIyMUMsR0FBQXhxRCxHQUFNMnRELEdBQUEzdEQsRUFBQThELEtBQVUsTUFBTSxlQUFBbzNELEdBQUFoM0QsRUFBQW5FLEdBQXdCLE1BQU0sb0JBQUFzSCxFQUFBdEgsRUFBQVksUUFBQWk2RCxHQUFBMTJELElBQUFuRSxFQUFBNHFFLFNBQUF0akUsR0FBQSxLQUNySXNwRSxHQUFBcnZFLFVBQUF3OUMsT0FBQSxTQUFBNTZDLEdBQWdDdUIsS0FBQThvRSxRQUFBMTVELEVBQUEsT0FBNEJwUCxLQUFBcXJFLGNBQUEsRUFBcUJyckUsS0FBQXVyRSxVQUFBOXNFLEVBQWlCLElBQUFtRCxFQUFBNUIsS0FBQWljLE1BQUE0dkQsY0FBQXZ4RSxFQUFBMEYsS0FBQTZvRSxnQkFBQXR1RSxFQUFBLElBQUFpeEUsR0FBMEYsT0FBM0JWLEdBQUFyc0UsRUFBQW1ELEVBQUEsS0FBQXRILEVBQUFDLEVBQUFteEUsV0FBMkJueEUsR0FDL1kyd0UsR0FBQXJ2RSxVQUFBbWxDLEtBQUEsU0FBQXZpQyxHQUE4QixHQUFBdUIsS0FBQXNyRSxhQUFBN3NFLFFBQXlCLENBQUssSUFBQW1ELEVBQUE1QixLQUFBbXJFLFdBQXNCLE9BQUF2cEUsTUFBQTVCLEtBQUFtckUsZUFBaUN2cEUsRUFBQW1DLEtBQUF0RixLQUNuSHlzRSxHQUFBcnZFLFVBQUEyd0UsT0FBQSxXQUErQixJQUFBL3RFLEVBQUF1QixLQUFBaWMsTUFBQTR2RCxjQUFBanFFLEVBQUFuRCxFQUFBbXFFLFdBQW9GLEdBQXRDNW9FLEtBQUE4b0UsUUFBQSxPQUFBbG5FLEdBQUF3TixFQUFBLE9BQXNDcFAsS0FBQXFyRSxhQUFBLENBQXNCLElBQUEvd0UsRUFBQTBGLEtBQUE2b0UsZ0JBQTJCLEdBQUFqbkUsSUFBQTVCLEtBQUEsQ0FBYUEsS0FBQXFyRSxlQUFBL3dFLEVBQUEwRixLQUFBNm9FLGdCQUFBam5FLEVBQUFpbkUsZ0JBQUE3b0UsS0FBQXE1QyxPQUFBcjVDLEtBQUF1ckUsWUFBMEYsUUFBQWh4RSxFQUFBLEtBQUE4RCxFQUFBdUQsRUFBbUJ2RCxJQUFBMkIsTUFBU3pGLEVBQUE4RCxNQUFBK3NFLE1BQWUsT0FBQTd3RSxHQUFBNlUsRUFBQSxPQUF5QjdVLEVBQUE2d0UsTUFBQS9zRSxFQUFBK3NFLE1BQWdCcHJFLEtBQUFvckUsTUFBQXhwRSxFQUFhbkQsRUFBQW1xRSxXQUFBNW9FLEtBQWtCQSxLQUFBOG9FLFFBQUEsRUFBZWxuRSxFQUFBdEgsRUFBSTQ5QyxJQUFBOW9DLEVBQUEsT0FBa0IycUMsR0FBQXQ3QyxFQUFJdTdDLEdBQUFwNEMsRUFBSW9sRSxHQUFBdm9FLEVBQUFtRCxHQUFBLEdBQVdxbEUsR0FBQSxRQUFXcmxFLEVBQUE1QixLQUFBb3JFLE1BQWFwckUsS0FBQW9yRSxNQUFBLEtBQWlDLFFBQWpCeHBFLEVBQUFuRCxFQUFBbXFFLFdBQUFobkUsSUFDOWRBLEVBQUF5cEUsY0FBQXpwRSxFQUFBeTNDLE9BQUF6M0MsRUFBQTJwRSxnQkFBeUN2ckUsS0FBQW9yRSxNQUFBLEtBQUFwckUsS0FBQThvRSxRQUFBLEdBQXFDb0MsR0FBQXJ2RSxVQUFBNnNFLFlBQUEsV0FBb0MsSUFBQTFvRSxLQUFBc3JFLGFBQUEsQ0FBdUJ0ckUsS0FBQXNyRSxjQUFBLEVBQXFCLElBQUE3c0UsRUFBQXVCLEtBQUFtckUsV0FBc0IsVUFBQTFzRSxFQUFBLFFBQUFtRCxFQUFBLEVBQXdCQSxFQUFBbkQsRUFBQW1DLE9BQVdnQixLQUFBLEVBQUFuRCxFQUFBbUQsUUFBZ0g0cEUsR0FBQTN2RSxVQUFBbWxDLEtBQUEsU0FBQXZpQyxHQUE4QixHQUFBdUIsS0FBQXlyRSxXQUFBaHRFLFFBQXVCLENBQUssSUFBQW1ELEVBQUE1QixLQUFBbXJFLFdBQXNCLE9BQUF2cEUsTUFBQTVCLEtBQUFtckUsZUFBaUN2cEUsRUFBQW1DLEtBQUF0RixLQUN4YitzRSxHQUFBM3ZFLFVBQUE2dkUsVUFBQSxXQUFrQyxJQUFBMXJFLEtBQUF5ckUsV0FBQSxDQUFxQnpyRSxLQUFBeXJFLFlBQUEsRUFBbUIsSUFBQWh0RSxFQUFBdUIsS0FBQW1yRSxXQUFzQixVQUFBMXNFLEVBQUEsUUFBQW1ELEVBQUEsRUFBd0JBLEVBQUFuRCxFQUFBbUMsT0FBV2dCLElBQUEsQ0FBSyxJQUFBdEgsRUFBQW1FLEVBQUFtRCxHQUFXLG1CQUFBdEgsR0FBQThVLEVBQUEsTUFBQTlVLEdBQXdDQSxPQUUzTHF4RSxHQUFBOXZFLFVBQUF3OUMsT0FBQSxTQUFBNTZDLEVBQUFtRCxHQUFrQyxJQUFBdEgsRUFBQTBGLEtBQUE2ckUsY0FBQXR4RSxFQUFBLElBQUFpeEUsR0FBbUcsT0FBN0MsUUFBcEI1cEUsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CckgsRUFBQXltQyxLQUFBcC9CLEdBQW9Cb3BFLEdBQUF2c0UsRUFBQW5FLEVBQUEsS0FBQUMsRUFBQW14RSxXQUF5Qm54RSxHQUFVb3hFLEdBQUE5dkUsVUFBQTR3RSxRQUFBLFNBQUFodUUsR0FBaUMsSUFBQW1ELEVBQUE1QixLQUFBNnJFLGNBQUF2eEUsRUFBQSxJQUFBa3hFLEdBQXNHLE9BQWhELFFBQXBCL3NFLE9BQUEsSUFBQUEsRUFBQSxLQUFBQSxJQUFvQm5FLEVBQUEwbUMsS0FBQXZpQyxHQUFvQnVzRSxHQUFBLEtBQUFwcEUsRUFBQSxLQUFBdEgsRUFBQW94RSxXQUE0QnB4RSxHQUFVcXhFLEdBQUE5dkUsVUFBQW93RSxrQ0FBQSxTQUFBeHRFLEVBQUFtRCxFQUFBdEgsR0FBK0QsSUFBQUMsRUFBQXlGLEtBQUE2ckUsY0FBQXh0RSxFQUFBLElBQUFtdEUsR0FBZ0csT0FBMUMsUUFBcEJseEUsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CK0QsRUFBQTJpQyxLQUFBMW1DLEdBQW9CMHdFLEdBQUFwcEUsRUFBQXJILEVBQUFrRSxFQUFBSixFQUFBcXRFLFdBQXNCcnRFLEdBQy9ic3RFLEdBQUE5dkUsVUFBQTZ3RSxZQUFBLFdBQW9DLElBQUFqdUUsRUFBQSxJQUFBeXNFLEdBQUFsckUsTUFBQTRCLEVBQUFuRCxFQUFBb3FFLGdCQUFBdnVFLEVBQUEwRixLQUFBNnJFLGNBQUF0eEUsRUFBQUQsRUFBQXN1RSxXQUEyRSxVQUFBcnVFLEVBQUFELEVBQUFzdUUsV0FBQW5xRSxJQUFBMnNFLE1BQUEsU0FBd0MsQ0FBSyxJQUFBOXdFLEVBQUEsS0FBVyxPQUFBQyxLQUFBc3VFLGlCQUFBam5FLEdBQStCdEgsRUFBQUMsTUFBQTZ3RSxNQUFlM3NFLEVBQUEyc0UsTUFBQTd3RSxFQUFVLE9BQUFELE1BQUE4d0UsTUFBQTNzRSxHQUFzQixPQUFBQSxHQUFzSnFrRCxHQUFBNm5CLEdBQU01bkIsR0FBQThuQixHQUFNN25CLEdBQUEsV0FBYzlLLElBQUEsSUFBQTJ1QixLQUFBSSxHQUFBSixHQUFBLE1BQUFBLEdBQUEsSUFJcmEsSUFBQThGLElBQVFDLGFBQUFSLEdBQUFTLFlBQUEsU0FBQXB1RSxHQUF3QyxTQUFBQSxFQUFBLFlBQXVCLE9BQUFBLEVBQUF5YyxTQUFBLE9BQUF6YyxFQUEyQixJQUFBbUQsRUFBQW5ELEVBQUF3aUUsb0JBQTRJLFlBQWhILElBQUFyL0QsSUFBQSxtQkFBQW5ELEVBQUE0NkMsT0FBQWpxQyxFQUFBLE9BQUFBLEVBQUEsTUFBQXpVLE9BQUFnTSxLQUFBbEksS0FBb0ZBLEVBQUEsUUFBUkEsRUFBQXV1RCxHQUFBcHJELElBQVEsS0FBQW5ELEVBQUFnK0MsV0FBcUNzbkIsUUFBQSxTQUFBdGxFLEVBQUFtRCxFQUFBdEgsR0FBeUIsT0FBQXl4RSxHQUFBLEtBQUF0dEUsRUFBQW1ELEdBQUEsRUFBQXRILElBQXlCKytDLE9BQUEsU0FBQTU2QyxFQUFBbUQsRUFBQXRILEdBQXdCLE9BQUF5eEUsR0FBQSxLQUFBdHRFLEVBQUFtRCxHQUFBLEVBQUF0SCxJQUF5Qnd5RSxvQ0FBQSxTQUFBcnVFLEVBQUFtRCxFQUFBdEgsRUFBQUMsR0FBOEcsT0FBdkQsTUFBQWtFLFFBQUEsSUFBQUEsRUFBQXdpRSxzQkFBQTd4RCxFQUFBLE1BQXVEMjhELEdBQUF0dEUsRUFBQW1ELEVBQUF0SCxHQUFBLEVBQUFDLElBQXNCd3lFLHVCQUFBLFNBQUF0dUUsR0FDL2MsT0FEbWZxdEUsR0FBQXJ0RSxJQUNsZ0IyUSxFQUFBLFFBQWUzUSxFQUFBdXRFLHNCQUFBcEIsR0FBQSxXQUE0Q21CLEdBQUEsVUFBQXR0RSxHQUFBLGFBQTZCQSxFQUFBdXRFLG9CQUFBLFVBQTZCLElBQVNnQixzQkFBQSxXQUFrQyxPQUFBWixHQUFBdnFFLFdBQUEsRUFBQUMsWUFBa0NtckUsd0JBQUF0QyxHQUFBdUMsNEJBQUFyQyxHQUFBc0MsVUFBQSxTQUFBMXVFLEVBQUFtRCxHQUFtRnMyQyxJQUFBOW9DLEVBQUEsT0FBa0IsSUFBQTlVLEVBQUFxRCxHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBMHBFLEdBQUE1b0UsRUFBQW1ELEdBQWUsUUFBUWpFLEdBQUFyRCxFQUFBMnNFLEdBQUEsVUFBZ0JtRyx5QkFBQSxTQUFBM3VFLEdBQXNDLElBQUFtRCxFQUFBakUsR0FBUUEsSUFBQSxFQUFLLElBQUkwcEUsR0FBQTVvRSxHQUFNLFNBQVFkLEdBQUFpRSxJQUFBczJDLElBQUErdUIsR0FBQSxVQUFzQnB0QixvREFBcUR3ekIsUUFBQXB3QixFQUMvZUMsRUFBQUMsRUFBQW5DLEVBQUE0QyxFQUFBLFNBQUFuL0MsR0FBd0JvOUMsRUFBQXA5QyxFQUFBay9DLElBQVNpRixHQUFBQyxHQUFBa1EsR0FBQXBXLElBQWMyd0Isb0JBQUEsU0FBQTd1RSxFQUFBbUQsR0FBeUQsT0FBdEJrcUUsR0FBQXJ0RSxJQUFBMlEsRUFBQSxPQUFzQixJQUFBdThELEdBQUFsdEUsR0FBQSxRQUFBbUQsSUFBQSxJQUFBQSxFQUFBbWlFLFlBQThDLFNBQUF0bEUsR0FBYSxJQUFBbUQsRUFBQW5ELEVBQUE4dUUseUJBNUhuSyxTQUFBOXVFLEdBQWUsdUJBQUFtdEMsK0JBQUEsU0FBZ0UsSUFBQWhxQyxFQUFBZ3FDLCtCQUFxQyxHQUFBaHFDLEVBQUE0ckUsYUFBQTVyRSxFQUFBNnJFLGNBQUEsU0FBMkMsSUFBSSxJQUFBbnpFLEVBQUFzSCxFQUFBOHJFLE9BQUFqdkUsR0FBa0IrOUQsR0FBQUUsR0FBQSxTQUFBaitELEdBQWtCLE9BQUFtRCxFQUFBK3JFLGtCQUFBcnpFLEVBQUFtRSxLQUFrQ2crRCxHQUFBQyxHQUFBLFNBQUFqK0QsR0FBa0IsT0FBQW1ELEVBQUFnc0UscUJBQUF0ekUsRUFBQW1FLEtBQXFDLE1BQUFsRSxNQTRIN0ZzekUsQ0FBQW55RSxLQUFjK0MsR0FBSXF2RSx3QkFBQSxTQUFBcnZFLEdBQTRDLGVBQVJBLEVBQUF1dUQsR0FBQXZ1RCxJQUFRLEtBQUFBLEVBQUFnK0MsV0FBaUM4d0Isd0JBQUEsU0FBQTl1RSxHQUFxQyxPQUFBbUQsSUFBQW5ELEdBQUEsU0FBakwsRUFBMk04dUUsd0JBQUF4d0IsRUFBQWd4QixXQUFBLEVBQUF4c0UsUUFBQSxTQUFBeXNFLG9CQUFBLGNBQTJGLElBQUFDLElBQVE1NEMsUUFBQXMzQyxJQUFXdUIsR0FBQUQsSUFBQXRCLElBQUFzQixHQUMvY2owRSxFQUFBRCxRQUFBbTBFLEdBQUE3NEMsU0FBQTY0QyxpQ0N4T0FsMEUsRUFBQUQsUUFBbUJGLEVBQVE7Ozs7Ozs7O0dDTWRjLE9BQUFDLGVBQUFiLEVBQUEsY0FBNENtQixPQUFBLElBQVcsSUFBQVgsSUFBQSxvQkFBQXlELGdCQUFBazVCLFdBQUFsNUIsT0FBQWs1QixTQUFBNkUsZUFBQWo5QixFQUFBd2hELEtBQUFwbkIsRUFBQSxtQkFBQThHLDJCQUFBLEVBQUE3bEIsRUFBQSxtQkFBQWcwRCwrQkFBQSxFQUFBajBFLEVBQUEsbUJBQUFrMEUsaURBQUEsRUFBQS96RSxFQUFBLG1CQUFBZzBFLCtDQUFBLEVBQUEzeUUsRUFBQSxpQkFBQTR5RSxhQUFBLG1CQUFBQSxZQUFBOXVDLElBQ3hDLEdBQTVCemxDLEVBQUErdEUsa0JBQUEsRUFBNEJwc0UsRUFBQSxDQUFNLElBQUFLLEVBQUF1eUUsWUFBa0J2MEUsRUFBQSt0RSxhQUFBLFdBQWdDLE9BQUEvckUsRUFBQXlqQyxZQUFnQnpsQyxFQUFBK3RFLGFBQUEsV0FBcUMsT0FBQWhwRSxFQUFBMGdDLE9BQ3pJLEdBRHlKemxDLEVBQUFzdUUsMkJBQUEsRUFBcUN0dUUsRUFBQXF1RSxrQ0FBQSxFQUM5TDd0RSxFQUFBLENBQU0sSUFBQTY3QyxFQUFBLEtBQUFyN0MsRUFBQSxLQUFBSSxHQUFBLEVBQUFrN0MsR0FBQSxFQUFBanBDLEdBQUEsRUFBQWdDLE9BQUEsRUFBQThSLE9BQUEsRUFBQW8xQixFQUFBLFNBQUE3M0MsR0FBaUUyUSxFQUFBbFYsRUFBQSxTQUFBMEgsR0FBZ0J1WSxFQUFBK0csR0FBS3ppQixFQUFBbUQsS0FBT3NmLEVBQUFnWSxFQUFBLFdBQWU3K0IsRUFBQStVLEdBQUszUSxFQUFBMUUsRUFBQSt0RSxpQkFBMEIsTUFBTXZ4QixFQUFBLEVBQUE1YSxFQUFBLEdBQUF0K0IsRUFBQSxHQUFBMEwsR0FBa0IwL0QsWUFBQSxFQUFBaUMsY0FBQSxXQUF1QyxJQUFBanNFLEVBQUE4M0MsRUFBQXg4QyxFQUFBK3RFLGVBQStCLFNBQUFycEUsSUFBQSxJQUFnQm00QyxFQUFBLFNBQUFuNEMsRUFBQW1ELEdBQWlCLElBQUF0SCxFQUFBbUUsRUFBQTh2RSxrQkFBQWx3RSxHQUFBLEVBQStCLElBQUkvRCxFQUFBc0gsR0FBQXZELEdBQUEsRUFBVSxRQUFRdEUsRUFBQXF1RSw2QkFBQTNwRSxHQUFBSixJQUFBZzRDLEdBQUEsRUFBQXI0QyxPQUFBNGhDLFlBQUF2RixFQUFBLFFBQTZFQSxFQUFBLHVCQUFBcDhCLEtBQUFxNEIsU0FBQXYwQixTQUFBLElBQUFDLE1BQUEsR0FBOERoRSxPQUFBNmhDLGlCQUFBLG1CQUFBcGhDLEdBQThDLEdBQUFBLEVBQUFqQyxTQUM5ZndCLFFBQUFTLEVBQUEwTyxPQUFBa3RCLElBQUFnYyxHQUFBLFNBQUFELEdBQUEsQ0FBcUMsVUFBQUEsRUFBQSxDQUFhLElBQUF4MEMsRUFBQTdILEVBQUErdEUsZUFBNkIsVUFBQTNzRSxLQUFBeUcsR0FBQSxDQUFtQm5ELEdBQUEsRUFBSyxRQUFBbkUsS0FBQStELEVBQUErM0MsRUFBaUIsT0FBQS8zQyxHQUFTLENBQUUsSUFBQXNWLEVBQUF0VixFQUFBbXdFLGFBQW9CLElBQUE3NkQsTUFBQS9SLEVBQUF0SCxFQUFBeUosS0FBQTFGLElBQUEsSUFBQXNWLEtBQUEsSUFBQWxWLEdBQUFrVixFQUFBbFYsT0FBQWtWLEdBQW9EdFYsSUFBQXdMLEtBQVMsS0FBQXZQLEVBQUFzRyxPQUFBLElBQUFtSSxFQUFBMC9ELFlBQUEsRUFBQTdtRSxFQUFBLEVBQUF2RCxFQUFBL0QsRUFBQXNHLE9BQWlEZ0IsRUFBQXZELEVBQUl1RCxJQUFBZzFDLEVBQUF0OEMsRUFBQXNILEdBQUFtSCxHQUFjNU4sRUFBQXNELEdBQUssSUFBQUEsRUFBQTFFLEVBQUErdEUsZUFBNkIsRUFBQXZ4QixFQUFBOTNDLEdBQUEsT0FBQTIzQyxHQUFnQjMzQyxFQUFBMjNDLEVBQUFydEMsRUFBQTAvRCxZQUFBLEVBQUE3eEIsRUFBQW40QyxFQUFBc0ssR0FBQXRLLEVBQUExRSxFQUFBK3RFLGVBQXFELE9BQUExeEIsR0FBQWhwQyxPQUFBLEVBQUFrcEMsRUFBQXo1QyxPQUEwQixHQUFLLElBQUFBLEVBQUEsU0FBQTRCLEdBQWtCMk8sR0FBQSxFQUFLLElBQUF4TCxFQUFBbkQsRUFBQTgzQyxFQUFBbDVDLEVBQVl1RSxFQUFBdkUsR0FBQXMrQixFQUFBdCtCLEdBQUEsRUFBQXVFLE1BQUEsR0FBQXZFLEVBQUF1RSxFQUFBKzVCLElBQUEvNUIsR0FBQSs1QixFQUFBLzVCLEVBQW9DMjBDLEVBQUE5M0MsRUFBQXBCLEVBQU1nNUMsT0FBQSxFQUFBcjRDLE9BQUE0aEMsWUFBQXZGLEVBQzFlLE9BQU90Z0MsRUFBQXN1RSxzQkFBQSxTQUFBNXBFLEVBQUFtRCxHQUE0QyxJQUFBdEgsR0FBQSxFQUEyTyxPQUFsTyxNQUFBc0gsR0FBQSxpQkFBQUEsRUFBQTJtRSxVQUFBanVFLEVBQUFQLEVBQUErdEUsZUFBQWxtRSxFQUFBMm1FLFdBQTJFLElBQUFwdEUsSUFBQSxJQUFBYixLQUFBYSxPQUFBYixHQUEyQm1FLEdBQUc4dkUsa0JBQUE5dkUsRUFBQSt2RSxZQUFBbDBFLEVBQUEwbEIsS0FBQSxLQUFBblcsS0FBQSxNQUF1RCxPQUFBdXNDLElBQUEzM0MsRUFBQSxRQUFBbUQsRUFBQW5ELEVBQUF1aEIsS0FBQWpsQixLQUFBNkcsRUFBQWlJLEtBQUFwTCxHQUErQzFELEVBQUEwRCxFQUFJMk8sT0FBQSxFQUFBa3BDLEVBQUF6NUMsSUFBZTRCLEdBQVUxRSxFQUFBcXVFLDZCQUFBLFNBQUEzcEUsR0FBaUQsVUFBQUEsRUFBQXVoQixNQUFBbzJCLElBQUEzM0MsRUFBQSxDQUF5QixJQUFBbUQsRUFBQW5ELEVBQUFvTCxLQUFBdlAsRUFBQW1FLEVBQUF1aEIsS0FBc0J2aEIsRUFBQW9MLEtBQUEsS0FBWXBMLEVBQUF1aEIsS0FBQSxLQUFZLE9BQUFwZSxFQUFBLE9BQUF0SCxLQUFBdVAsS0FBQWpJLElBQUFvZSxLQUFBMWxCLElBQUFzSCxFQUFBb2UsS0FBQSxLQUFBbzJCLEVBQUF4MEMsR0FBQSxPQUFBdEgsS0FBQXVQLEtBQUEsS0FBQTlPLEVBQUFULEdBQUFTLEVBQ2hhcTdDLEVBQUEsV0FBUyxDQUFLLElBQUFyNUMsRUFBQSxJQUFBb1IsSUFBY3BVLEVBQUFzdUUsc0JBQUEsU0FBQTVwRSxHQUEwQyxJQUFBbUQsR0FBTzJzRSxrQkFBQTl2RSxFQUFBK3ZFLFlBQUEsRUFBQTNrRSxLQUFBLEtBQUFtVyxLQUFBLE1BQXNEMWxCLEVBQUE0K0IsRUFBQSxXQUFnQno2QixHQUFHaXNFLGNBQUEsV0FBeUIsT0FBQTd4RCxLQUFnQjR2RCxZQUFBLE1BQThCLE9BQVgxckUsRUFBQTJMLElBQUFqSyxFQUFBbkUsR0FBV3NILEdBQVU3SCxFQUFBcXVFLDZCQUFBLFNBQUEzcEUsR0FBaUQsSUFBQW1ELEVBQUE3RSxFQUFBakMsSUFBQTJELEVBQUE4dkUsbUJBQWlDeHhFLEVBQUFvckMsT0FBQTFwQyxHQUFZMGIsRUFBQXZZLG9DQ2RyVSxTQUFBM0YsR0FRQSxHQU5BcEMsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUm9DLEVBQUF3eUUsZUFDQSxVQUFBbnNFLE1BQUEsa0RBRUFyRyxFQUFBd3lFLGdCQUFBLEVBRUEsSUFBQUMsRUFBQSxpQkFDQSxTQUFBQyxFQUFBNXZFLEVBQUF2RCxFQUFBTixHQUNBNkQsRUFBQXZELElBQUFiLE9BQUErekUsR0FBQTN2RSxFQUFBdkQsR0FDQThRLFVBQUEsRUFDQUQsY0FBQSxFQUNBblIsVUFJQXl6RSxFQUFBNXVFLE9BQUFsRSxVQUFBLGFBQUEreUUsVUFDQUQsRUFBQTV1RSxPQUFBbEUsVUFBQSxjQUFBZ3pFLFFBRUEsZ01BQUFwdkUsTUFBQSxLQUFBa0wsUUFBQSxTQUFBblAsTUFDQUEsSUFBQW16RSxFQUFBaHBFLE1BQUFuSyxFQUFBaUMsU0FBQXJELEtBQUFxQixRQUFBRCwyQ0MxQkEzQixFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEs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Z0IsS0FDdEN2QyxFQUFBejdGLEVBQUFzOUIsY0FBQzgvRCxJQUFNMVAsT0FBQSxFQUFNdmhELEtBQUssVUFBVTZ3RCxVQUFXaUIsZURjaENoTSxFQUFBLFdFckJuQi8xRixPQUFBNmpHLEVBQUEsT0FBQTdqRyxDQUNJdS9GLEVBQUF6N0YsRUFBQXM5QixjQUFDd2lFLEdBQUQsTUFDQXJuRSxTQUFTdW5FLGVBQWUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0NDgpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjcnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjcnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbC5JbW11dGFibGUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0Jzt2YXIgU0xJQ0UkMCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhjdG9yLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIHtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEtleWVkSXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0tleWVkKHZhbHVlKSA/IHZhbHVlIDogS2V5ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh2YWx1ZSkgPyB2YWx1ZSA6IEluZGV4ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKFNldEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2V0SXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0l0ZXJhYmxlKHZhbHVlKSAmJiAhaXNBc3NvY2lhdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IFNldFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cblxuICBmdW5jdGlvbiBpc0l0ZXJhYmxlKG1heWJlSXRlcmFibGUpIHtcbiAgICByZXR1cm4gISEobWF5YmVJdGVyYWJsZSAmJiBtYXliZUl0ZXJhYmxlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0tleWVkKG1heWJlS2V5ZWQpIHtcbiAgICByZXR1cm4gISEobWF5YmVLZXllZCAmJiBtYXliZUtleWVkW0lTX0tFWUVEX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0luZGV4ZWQobWF5YmVJbmRleGVkKSB7XG4gICAgcmV0dXJuICEhKG1heWJlSW5kZXhlZCAmJiBtYXliZUluZGV4ZWRbSVNfSU5ERVhFRF9TRU5USU5FTF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBc3NvY2lhdGl2ZShtYXliZUFzc29jaWF0aXZlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQobWF5YmVBc3NvY2lhdGl2ZSkgfHwgaXNJbmRleGVkKG1heWJlQXNzb2NpYXRpdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPcmRlcmVkKG1heWJlT3JkZXJlZCkge1xuICAgIHJldHVybiAhIShtYXliZU9yZGVyZWQgJiYgbWF5YmVPcmRlcmVkW0lTX09SREVSRURfU0VOVElORUxdKTtcbiAgfVxuXG4gIEl0ZXJhYmxlLmlzSXRlcmFibGUgPSBpc0l0ZXJhYmxlO1xuICBJdGVyYWJsZS5pc0tleWVkID0gaXNLZXllZDtcbiAgSXRlcmFibGUuaXNJbmRleGVkID0gaXNJbmRleGVkO1xuICBJdGVyYWJsZS5pc0Fzc29jaWF0aXZlID0gaXNBc3NvY2lhdGl2ZTtcbiAgSXRlcmFibGUuaXNPcmRlcmVkID0gaXNPcmRlcmVkO1xuXG4gIEl0ZXJhYmxlLktleWVkID0gS2V5ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuSW5kZXhlZCA9IEluZGV4ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuU2V0ID0gU2V0SXRlcmFibGU7XG5cblxuICB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuICB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuICB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcbiAgdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cbiAgLy8gVXNlZCBmb3Igc2V0dGluZyBwcm90b3R5cGUgbWV0aG9kcyB0aGF0IElFOCBjaG9rZXMgb24uXG4gIHZhciBERUxFVEUgPSAnZGVsZXRlJztcblxuICAvLyBDb25zdGFudHMgZGVzY3JpYmluZyB0aGUgc2l6ZSBvZiB0cmllIG5vZGVzLlxuICB2YXIgU0hJRlQgPSA1OyAvLyBSZXN1bHRlZCBpbiBiZXN0IHBlcmZvcm1hbmNlIGFmdGVyIF9fX19fXz9cbiAgdmFyIFNJWkUgPSAxIDw8IFNISUZUO1xuICB2YXIgTUFTSyA9IFNJWkUgLSAxO1xuXG4gIC8vIEEgY29uc2lzdGVudCBzaGFyZWQgdmFsdWUgcmVwcmVzZW50aW5nIFwibm90IHNldFwiIHdoaWNoIGVxdWFscyBub3RoaW5nIG90aGVyXG4gIC8vIHRoYW4gaXRzZWxmLCBhbmQgbm90aGluZyB0aGF0IGNvdWxkIGJlIHByb3ZpZGVkIGV4dGVybmFsbHkuXG4gIHZhciBOT1RfU0VUID0ge307XG5cbiAgLy8gQm9vbGVhbiByZWZlcmVuY2VzLCBSb3VnaCBlcXVpdmFsZW50IG9mIGBib29sICZgLlxuICB2YXIgQ0hBTkdFX0xFTkdUSCA9IHsgdmFsdWU6IGZhbHNlIH07XG4gIHZhciBESURfQUxURVIgPSB7IHZhbHVlOiBmYWxzZSB9O1xuXG4gIGZ1bmN0aW9uIE1ha2VSZWYocmVmKSB7XG4gICAgcmVmLnZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIHJlZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNldFJlZihyZWYpIHtcbiAgICByZWYgJiYgKHJlZi52YWx1ZSA9IHRydWUpO1xuICB9XG5cbiAgLy8gQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgcmVwcmVzZW50aW5nIGFuIFwib3duZXJcIiBmb3IgdHJhbnNpZW50IHdyaXRlc1xuICAvLyB0byB0cmllcy4gVGhlIHJldHVybiB2YWx1ZSB3aWxsIG9ubHkgZXZlciBlcXVhbCBpdHNlbGYsIGFuZCB3aWxsIG5vdCBlcXVhbFxuICAvLyB0aGUgcmV0dXJuIG9mIGFueSBzdWJzZXF1ZW50IGNhbGwgb2YgdGhpcyBmdW5jdGlvbi5cbiAgZnVuY3Rpb24gT3duZXJJRCgpIHt9XG5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vY29weS1hcnJheS1pbmxpbmVcbiAgZnVuY3Rpb24gYXJyQ29weShhcnIsIG9mZnNldCkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1heCgwLCBhcnIubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgICB2YXIgbmV3QXJyID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbjsgaWkrKykge1xuICAgICAgbmV3QXJyW2lpXSA9IGFycltpaSArIG9mZnNldF07XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnI7XG4gIH1cblxuICBmdW5jdGlvbiBlbnN1cmVTaXplKGl0ZXIpIHtcbiAgICBpZiAoaXRlci5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGl0ZXIuc2l6ZSA9IGl0ZXIuX19pdGVyYXRlKHJldHVyblRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlci5zaXplO1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcEluZGV4KGl0ZXIsIGluZGV4KSB7XG4gICAgLy8gVGhpcyBpbXBsZW1lbnRzIFwiaXMgYXJyYXkgaW5kZXhcIiB3aGljaCB0aGUgRUNNQVN0cmluZyBzcGVjIGRlZmluZXMgYXM6XG4gICAgLy9cbiAgICAvLyAgICAgQSBTdHJpbmcgcHJvcGVydHkgbmFtZSBQIGlzIGFuIGFycmF5IGluZGV4IGlmIGFuZCBvbmx5IGlmXG4gICAgLy8gICAgIFRvU3RyaW5nKFRvVWludDMyKFApKSBpcyBlcXVhbCB0byBQIGFuZCBUb1VpbnQzMihQKSBpcyBub3QgZXF1YWxcbiAgICAvLyAgICAgdG8gMl4zMuKIkjEuXG4gICAgLy9cbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYXJyYXktZXhvdGljLW9iamVjdHNcbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFyIHVpbnQzMkluZGV4ID0gaW5kZXggPj4+IDA7IC8vIE4gPj4+IDAgaXMgc2hvcnRoYW5kIGZvciBUb1VpbnQzMlxuICAgICAgaWYgKCcnICsgdWludDMySW5kZXggIT09IGluZGV4IHx8IHVpbnQzMkluZGV4ID09PSA0Mjk0OTY3Mjk1KSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgICBpbmRleCA9IHVpbnQzMkluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXggPCAwID8gZW5zdXJlU2l6ZShpdGVyKSArIGluZGV4IDogaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIChiZWdpbiA9PT0gMCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGJlZ2luIDw9IC1zaXplKSkgJiZcbiAgICAgIChlbmQgPT09IHVuZGVmaW5lZCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA+PSBzaXplKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGJlZ2luLCBzaXplLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIHJlc29sdmVJbmRleChlbmQsIHNpemUsIHNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUluZGV4KGluZGV4LCBzaXplLCBkZWZhdWx0SW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCA/XG4gICAgICBkZWZhdWx0SW5kZXggOlxuICAgICAgaW5kZXggPCAwID9cbiAgICAgICAgTWF0aC5tYXgoMCwgc2l6ZSArIGluZGV4KSA6XG4gICAgICAgIHNpemUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgaW5kZXggOlxuICAgICAgICAgIE1hdGgubWluKHNpemUsIGluZGV4KTtcbiAgfVxuXG4gIC8qIGdsb2JhbCBTeW1ib2wgKi9cblxuICB2YXIgSVRFUkFURV9LRVlTID0gMDtcbiAgdmFyIElURVJBVEVfVkFMVUVTID0gMTtcbiAgdmFyIElURVJBVEVfRU5UUklFUyA9IDI7XG5cbiAgdmFyIFJFQUxfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcblxuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gUkVBTF9JVEVSQVRPUl9TWU1CT0wgfHwgRkFVWF9JVEVSQVRPUl9TWU1CT0w7XG5cblxuICBmdW5jdGlvbiBJdGVyYXRvcihuZXh0KSB7XG4gICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIH1cblxuICAgIEl0ZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbSXRlcmF0b3JdJztcbiAgICB9O1xuXG5cbiAgSXRlcmF0b3IuS0VZUyA9IElURVJBVEVfS0VZUztcbiAgSXRlcmF0b3IuVkFMVUVTID0gSVRFUkFURV9WQUxVRVM7XG4gIEl0ZXJhdG9yLkVOVFJJRVMgPSBJVEVSQVRFX0VOVFJJRVM7XG5cbiAgSXRlcmF0b3IucHJvdG90eXBlLmluc3BlY3QgPVxuICBJdGVyYXRvci5wcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRvU3RyaW5nKCk7IH1cbiAgSXRlcmF0b3IucHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICBmdW5jdGlvbiBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIGl0ZXJhdG9yUmVzdWx0KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZSA9PT0gMCA/IGsgOiB0eXBlID09PSAxID8gdiA6IFtrLCB2XTtcbiAgICBpdGVyYXRvclJlc3VsdCA/IChpdGVyYXRvclJlc3VsdC52YWx1ZSA9IHZhbHVlKSA6IChpdGVyYXRvclJlc3VsdCA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSwgZG9uZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYXRvckRvbmUoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzSXRlcmF0b3IobWF5YmVJdGVyYWJsZSkge1xuICAgIHJldHVybiAhIWdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0l0ZXJhdG9yKG1heWJlSXRlcmF0b3IpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvciAmJiB0eXBlb2YgbWF5YmVJdGVyYXRvci5uZXh0ID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpO1xuICAgIHJldHVybiBpdGVyYXRvckZuICYmIGl0ZXJhdG9yRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKGl0ZXJhYmxlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBpdGVyYWJsZSAmJiAoXG4gICAgICAoUkVBTF9JVEVSQVRPUl9TWU1CT0wgJiYgaXRlcmFibGVbUkVBTF9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgICAgaXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdXG4gICAgKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvckZuO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2VxLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2VxKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG4gICAgICAgIGlzSXRlcmFibGUodmFsdWUpID8gdmFsdWUudG9TZXEoKSA6IHNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLnRvU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX2NhY2hlICYmIHRoaXMuX19pdGVyYXRlVW5jYWNoZWQpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB0aGlzLmVudHJ5U2VxKCkudG9BcnJheSgpO1xuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLl9jYWNoZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRlVW5jYWNoZWQoZm4sIHJldmVyc2UpXG5cbiAgICBTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0ZSh0aGlzLCBmbiwgcmV2ZXJzZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIC8vIGFic3RyYWN0IF9faXRlcmF0b3JVbmNhY2hlZCh0eXBlLCByZXZlcnNlKVxuXG4gICAgU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHNlcUl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UsIHRydWUpO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEtleWVkU2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIEtleWVkU2VxKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgIGVtcHR5U2VxdWVuY2UoKS50b0tleWVkU2VxKCkgOlxuICAgICAgICBpc0l0ZXJhYmxlKHZhbHVlKSA/XG4gICAgICAgICAgKGlzS2V5ZWQodmFsdWUpID8gdmFsdWUudG9TZXEoKSA6IHZhbHVlLmZyb21FbnRyeVNlcSgpKSA6XG4gICAgICAgICAga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIEtleWVkU2VxLnByb3RvdHlwZS50b0tleWVkU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJbmRleGVkU2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcbiAgICAgICAgIWlzSXRlcmFibGUodmFsdWUpID8gaW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSkgOlxuICAgICAgICBpc0tleWVkKHZhbHVlKSA/IHZhbHVlLmVudHJ5U2VxKCkgOiB2YWx1ZS50b0luZGV4ZWRTZXEoKTtcbiAgICB9XG5cbiAgICBJbmRleGVkU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIEluZGV4ZWRTZXEoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9JbmRleGVkU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NlcSBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIEluZGV4ZWRTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSwgZmFsc2UpO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKFNldFNlcSwgU2VxKTtcbiAgICBmdW5jdGlvbiBTZXRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuICAgICAgICAhaXNJdGVyYWJsZSh2YWx1ZSkgPyBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSA6XG4gICAgICAgIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUuZW50cnlTZXEoKSA6IHZhbHVlXG4gICAgICApLnRvU2V0U2VxKCk7XG4gICAgfVxuXG4gICAgU2V0U2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIFNldFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXRTZXEucHJvdG90eXBlLnRvU2V0U2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5cblxuICBTZXEuaXNTZXEgPSBpc1NlcTtcbiAgU2VxLktleWVkID0gS2V5ZWRTZXE7XG4gIFNlcS5TZXQgPSBTZXRTZXE7XG4gIFNlcS5JbmRleGVkID0gSW5kZXhlZFNlcTtcblxuICB2YXIgSVNfU0VRX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU0VRX19AQCc7XG5cbiAgU2VxLnByb3RvdHlwZVtJU19TRVFfU0VOVElORUxdID0gdHJ1ZTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoQXJyYXlTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEFycmF5U2VxKGFycmF5KSB7XG4gICAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuICAgICAgdGhpcy5zaXplID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cblxuICAgIEFycmF5U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl9hcnJheVt3cmFwSW5kZXgodGhpcywgaW5kZXgpXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaWksIGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpKysgOiBpaSsrXSl9XG4gICAgICApO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKE9iamVjdFNlcSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIE9iamVjdFNlcShvYmplY3QpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgIHRoaXMuX29iamVjdCA9IG9iamVjdDtcbiAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgdGhpcy5zaXplID0ga2V5cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgT2JqZWN0U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSk7XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG4gICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4ob2JqZWN0W2tleV0sIGtleSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBPYmplY3RTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICAgICAgdmFyIG1heEluZGV4ID0ga2V5cy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcbiAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gIE9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cbiAgY3JlYXRlQ2xhc3MoSXRlcmFibGVTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEl0ZXJhYmxlU2VxKGl0ZXJhYmxlKSB7XG4gICAgICB0aGlzLl9pdGVyYWJsZSA9IGl0ZXJhYmxlO1xuICAgICAgdGhpcy5zaXplID0gaXRlcmFibGUubGVuZ3RoIHx8IGl0ZXJhYmxlLnNpemU7XG4gICAgfVxuXG4gICAgSXRlcmFibGVTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXMuX2l0ZXJhYmxlO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBJdGVyYWJsZVNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICBpZiAoIWlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJdGVyYXRvclNlcSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gSXRlcmF0b3JTZXEoaXRlcmF0b3IpIHtcbiAgICAgIHRoaXMuX2l0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICB0aGlzLl9pdGVyYXRvckNhY2hlID0gW107XG4gICAgfVxuXG4gICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5faXRlcmF0b3JDYWNoZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlIChpdGVyYXRpb25zIDwgY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmbihjYWNoZVtpdGVyYXRpb25zXSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0ZXA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciB2YWwgPSBzdGVwLnZhbHVlO1xuICAgICAgICBjYWNoZVtpdGVyYXRpb25zXSA9IHZhbDtcbiAgICAgICAgaWYgKGZuKHZhbCwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIEl0ZXJhdG9yU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICAgIHZhciBjYWNoZSA9IHRoaXMuX2l0ZXJhdG9yQ2FjaGU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPj0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhY2hlW2l0ZXJhdGlvbnNdID0gc3RlcC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zLCBjYWNoZVtpdGVyYXRpb25zKytdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG5cbiAgLy8gIyBwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXG4gIGZ1bmN0aW9uIGlzU2VxKG1heWJlU2VxKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU2VxICYmIG1heWJlU2VxW0lTX1NFUV9TRU5USU5FTF0pO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFUTtcblxuICBmdW5jdGlvbiBlbXB0eVNlcXVlbmNlKCkge1xuICAgIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID1cbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkuZnJvbUVudHJ5U2VxKCkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gbmV3IE9iamVjdFNlcSh2YWx1ZSkgOlxuICAgICAgdW5kZWZpbmVkO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIFtrLCB2XSBlbnRyaWVzLCAnK1xuICAgICAgICAnb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgdmFsdWVzOiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB8fFxuICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgbmV3IE9iamVjdFNlcSh2YWx1ZSkpO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlcywgb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgaXNBcnJheUxpa2UodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKSA6XG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VxSXRlcmF0ZShzZXEsIGZuLCByZXZlcnNlLCB1c2VLZXlzKSB7XG4gICAgdmFyIGNhY2hlID0gc2VxLl9jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IGNhY2hlLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGNhY2hlW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4oZW50cnlbMV0sIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpLCBzZXEpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBpaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpaTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcS5fX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFJdGVyYXRvcihzZXEsIHR5cGUsIHJldmVyc2UsIHVzZUtleXMpIHtcbiAgICB2YXIgY2FjaGUgPSBzZXEuX2NhY2hlO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICAgIHJldHVybiBpaSsrID4gbWF4SW5kZXggP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpIC0gMSwgZW50cnlbMV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZXEuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTKGpzb24sIGNvbnZlcnRlcikge1xuICAgIHJldHVybiBjb252ZXJ0ZXIgP1xuICAgICAgZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sICcnLCB7Jyc6IGpzb259KSA6XG4gICAgICBmcm9tSlNEZWZhdWx0KGpzb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sIGtleSwgcGFyZW50SlNPTikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG4gICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBJbmRleGVkU2VxKGpzb24pLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBmcm9tSlNXaXRoKGNvbnZlcnRlciwgdiwgaywganNvbil9KSk7XG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqKGpzb24pKSB7XG4gICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBLZXllZFNlcShqc29uKS5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIHYsIGssIGpzb24pfSkpO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyb21KU0RlZmF1bHQoanNvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG4gICAgICByZXR1cm4gSW5kZXhlZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9MaXN0KCk7XG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqKGpzb24pKSB7XG4gICAgICByZXR1cm4gS2V5ZWRTZXEoanNvbikubWFwKGZyb21KU0RlZmF1bHQpLnRvTWFwKCk7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQbGFpbk9iaih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiAodmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuICAgKiBhbmQgU2V0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXAjS2V5X2VxdWFsaXR5KVxuICAgKlxuICAgKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAgICogdmFsdWUsIHdoaWNoIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhbGdvcml0aG0gZGVzY3JpYmVkIGJ5XG4gICAqIFtgT2JqZWN0LmlzYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzKS5cbiAgICpcbiAgICogVGhpcyBpcyBleHRlbmRlZCBmdXJ0aGVyIHRvIGFsbG93IE9iamVjdHMgdG8gZGVzY3JpYmUgdGhlIHZhbHVlcyB0aGV5XG4gICAqIHJlcHJlc2VudCwgYnkgd2F5IG9mIGB2YWx1ZU9mYCBvciBgZXF1YWxzYCAoYW5kIGBoYXNoQ29kZWApLlxuICAgKlxuICAgKiBOb3RlOiBiZWNhdXNlIG9mIHRoaXMgZXh0ZW5zaW9uLCB0aGUga2V5IGVxdWFsaXR5IG9mIEltbXV0YWJsZS5NYXAgYW5kIHRoZVxuICAgKiB2YWx1ZSBlcXVhbGl0eSBvZiBJbW11dGFibGUuU2V0IHdpbGwgZGlmZmVyIGZyb20gRVM2IE1hcCBhbmQgU2V0LlxuICAgKlxuICAgKiAjIyMgRGVmaW5pbmcgY3VzdG9tIHZhbHVlc1xuICAgKlxuICAgKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuICAgKiBgdmFsdWVPZmAuIEZvciBleGFtcGxlLCBgRGF0ZWAgcmVwcmVzZW50cyBhIHZhbHVlIGJ5IHJldHVybmluZyBhIHVuaXhcbiAgICogdGltZXN0YW1wIGZvciBgdmFsdWVPZmA6XG4gICAqXG4gICAqICAgICB2YXIgZGF0ZTEgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTsgLy8gRnJpIEZlYiAxMyAyMDA5IC4uLlxuICAgKiAgICAgdmFyIGRhdGUyID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7XG4gICAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcbiAgICogICAgIGFzc2VydCggZGF0ZTEgIT09IGRhdGUyICk7XG4gICAqICAgICBhc3NlcnQoIEltbXV0YWJsZS5pcyggZGF0ZTEsIGRhdGUyICkgKTtcbiAgICpcbiAgICogTm90ZTogb3ZlcnJpZGluZyBgdmFsdWVPZmAgbWF5IGhhdmUgb3RoZXIgaW1wbGljYXRpb25zIGlmIHlvdSB1c2UgdGhpcyBvYmplY3RcbiAgICogd2hlcmUgSmF2YVNjcmlwdCBleHBlY3RzIGEgcHJpbWl0aXZlLCBzdWNoIGFzIGltcGxpY2l0IHN0cmluZyBjb2VyY2lvbi5cbiAgICpcbiAgICogRm9yIG1vcmUgY29tcGxleCB0eXBlcywgZXNwZWNpYWxseSBjb2xsZWN0aW9ucywgaW1wbGVtZW50aW5nIGB2YWx1ZU9mYCBtYXlcbiAgICogbm90IGJlIHBlcmZvcm1hbnQuIEFuIGFsdGVybmF0aXZlIGlzIHRvIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICogYGVxdWFsc2AgdGFrZXMgYW5vdGhlciBvYmplY3QsIHByZXN1bWFibHkgb2Ygc2ltaWxhciB0eXBlLCBhbmQgcmV0dXJucyB0cnVlXG4gICAqIGlmIHRoZSBpdCBpcyBlcXVhbC4gRXF1YWxpdHkgaXMgc3ltbWV0cmljYWwsIHNvIHRoZSBzYW1lIHJlc3VsdCBzaG91bGQgYmVcbiAgICogcmV0dXJuZWQgaWYgdGhpcyBhbmQgdGhlIGFyZ3VtZW50IGFyZSBmbGlwcGVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0KCBhLmVxdWFscyhiKSA9PT0gYi5lcXVhbHMoYSkgKTtcbiAgICpcbiAgICogYGhhc2hDb2RlYCByZXR1cm5zIGEgMzJiaXQgaW50ZWdlciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgd2hpY2ggd2lsbFxuICAgKiBiZSB1c2VkIHRvIGRldGVybWluZSBob3cgdG8gc3RvcmUgdGhlIHZhbHVlIG9iamVjdCBpbiBhIE1hcCBvciBTZXQuIFlvdSBtdXN0XG4gICAqIHByb3ZpZGUgYm90aCBvciBuZWl0aGVyIG1ldGhvZHMsIG9uZSBtdXN0IG5vdCBleGlzdCB3aXRob3V0IHRoZSBvdGhlci5cbiAgICpcbiAgICogQWxzbywgYW4gaW1wb3J0YW50IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZXNlIG1ldGhvZHMgbXVzdCBiZSB1cGhlbGQ6IGlmIHR3b1xuICAgKiB2YWx1ZXMgYXJlIGVxdWFsLCB0aGV5ICptdXN0KiByZXR1cm4gdGhlIHNhbWUgaGFzaENvZGUuIElmIHRoZSB2YWx1ZXMgYXJlIG5vdFxuICAgKiBlcXVhbCwgdGhleSBtaWdodCBoYXZlIHRoZSBzYW1lIGhhc2hDb2RlOyB0aGlzIGlzIGNhbGxlZCBhIGhhc2ggY29sbGlzaW9uLFxuICAgKiBhbmQgd2hpbGUgdW5kZXNpcmFibGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0IGlzIGFjY2VwdGFibGUuXG4gICAqXG4gICAqICAgICBpZiAoYS5lcXVhbHMoYikpIHtcbiAgICogICAgICAgYXNzZXJ0KCBhLmhhc2hDb2RlKCkgPT09IGIuaGFzaENvZGUoKSApO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiBBbGwgSW1tdXRhYmxlIGNvbGxlY3Rpb25zIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIGlzKHZhbHVlQSwgdmFsdWVCKSB7XG4gICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlQi52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZUEgPSB2YWx1ZUEudmFsdWVPZigpO1xuICAgICAgdmFsdWVCID0gdmFsdWVCLnZhbHVlT2YoKTtcbiAgICAgIGlmICh2YWx1ZUEgPT09IHZhbHVlQiB8fCAodmFsdWVBICE9PSB2YWx1ZUEgJiYgdmFsdWVCICE9PSB2YWx1ZUIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZUEgfHwgIXZhbHVlQikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWVCLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB2YWx1ZUEuZXF1YWxzKHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhaXNJdGVyYWJsZShiKSB8fFxuICAgICAgYS5zaXplICE9PSB1bmRlZmluZWQgJiYgYi5zaXplICE9PSB1bmRlZmluZWQgJiYgYS5zaXplICE9PSBiLnNpemUgfHxcbiAgICAgIGEuX19oYXNoICE9PSB1bmRlZmluZWQgJiYgYi5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBhLl9faGFzaCAhPT0gYi5fX2hhc2ggfHxcbiAgICAgIGlzS2V5ZWQoYSkgIT09IGlzS2V5ZWQoYikgfHxcbiAgICAgIGlzSW5kZXhlZChhKSAhPT0gaXNJbmRleGVkKGIpIHx8XG4gICAgICBpc09yZGVyZWQoYSkgIT09IGlzT3JkZXJlZChiKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChhLnNpemUgPT09IDAgJiYgYi5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbm90QXNzb2NpYXRpdmUgPSAhaXNBc3NvY2lhdGl2ZShhKTtcblxuICAgIGlmIChpc09yZGVyZWQoYSkpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gYS5lbnRyaWVzKCk7XG4gICAgICByZXR1cm4gYi5ldmVyeShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzLm5leHQoKS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGlzKGVudHJ5WzFdLCB2KSAmJiAobm90QXNzb2NpYXRpdmUgfHwgaXMoZW50cnlbMF0sIGspKTtcbiAgICAgIH0pICYmIGVudHJpZXMubmV4dCgpLmRvbmU7XG4gICAgfVxuXG4gICAgdmFyIGZsaXBwZWQgPSBmYWxzZTtcblxuICAgIGlmIChhLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGIuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYS5jYWNoZVJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGEuY2FjaGVSZXN1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxpcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBfID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSBfO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhbGxFcXVhbCA9IHRydWU7XG4gICAgdmFyIGJTaXplID0gYi5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGlmIChub3RBc3NvY2lhdGl2ZSA/ICFhLmhhcyh2KSA6XG4gICAgICAgICAgZmxpcHBlZCA/ICFpcyh2LCBhLmdldChrLCBOT1RfU0VUKSkgOiAhaXMoYS5nZXQoaywgTk9UX1NFVCksIHYpKSB7XG4gICAgICAgIGFsbEVxdWFsID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhbGxFcXVhbCAmJiBhLnNpemUgPT09IGJTaXplO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmVwZWF0LCBJbmRleGVkU2VxKTtcblxuICAgIGZ1bmN0aW9uIFJlcGVhdCh2YWx1ZSwgdGltZXMpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXBlYXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVwZWF0KHZhbHVlLCB0aW1lcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zaXplID0gdGltZXMgPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogTWF0aC5tYXgoMCwgdGltZXMpO1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBpZiAoRU1QVFlfUkVQRUFUKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JFUEVBVDtcbiAgICAgICAgfVxuICAgICAgICBFTVBUWV9SRVBFQVQgPSB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIFJlcGVhdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSZXBlYXQgW10nO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdSZXBlYXQgWyAnICsgdGhpcy5fdmFsdWUgKyAnICcgKyB0aGlzLnNpemUgKyAnIHRpbWVzIF0nO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/IHRoaXMuX3ZhbHVlIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpID8gdGhpcyA6XG4gICAgICAgIG5ldyBSZXBlYXQodGhpcy5fdmFsdWUsIHJlc29sdmVFbmQoZW5kLCBzaXplKSAtIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSkpO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHRoaXMuc2l6ZTsgaWkrKykge1xuICAgICAgICBpZiAoZm4odGhpcy5fdmFsdWUsIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaWk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPCB0aGlzJDAuc2l6ZSA/IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdGhpcyQwLl92YWx1ZSkgOiBpdGVyYXRvckRvbmUoKX1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJlcGVhdCA/XG4gICAgICAgIGlzKHRoaXMuX3ZhbHVlLCBvdGhlci5fdmFsdWUpIDpcbiAgICAgICAgZGVlcEVxdWFsKG90aGVyKTtcbiAgICB9O1xuXG5cbiAgdmFyIEVNUFRZX1JFUEVBVDtcblxuICBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBlcnJvcikge1xuICAgIGlmICghY29uZGl0aW9uKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmFuZ2UsIEluZGV4ZWRTZXEpO1xuXG4gICAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApO1xuICAgICAgfVxuICAgICAgaW52YXJpYW50KHN0ZXAgIT09IDAsICdDYW5ub3Qgc3RlcCBhIFJhbmdlIGJ5IDAnKTtcbiAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG4gICAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgc3RlcCA9IC1zdGVwO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChlbmQgLSBzdGFydCkgLyBzdGVwIC0gMSkgKyAxKTtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JBTkdFO1xuICAgICAgICB9XG4gICAgICAgIEVNUFRZX1JBTkdFID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSYW5nZSBbXSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1JhbmdlIFsgJyArXG4gICAgICAgIHRoaXMuX3N0YXJ0ICsgJy4uLicgKyB0aGlzLl9lbmQgK1xuICAgICAgICAodGhpcy5fc3RlcCAhPT0gMSA/ICcgYnkgJyArIHRoaXMuX3N0ZXAgOiAnJykgK1xuICAgICAgJyBdJztcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/XG4gICAgICAgIHRoaXMuX3N0YXJ0ICsgd3JhcEluZGV4KHRoaXMsIGluZGV4KSAqIHRoaXMuX3N0ZXAgOlxuICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHZhciBwb3NzaWJsZUluZGV4ID0gKHNlYXJjaFZhbHVlIC0gdGhpcy5fc3RhcnQpIC8gdGhpcy5fc3RlcDtcbiAgICAgIHJldHVybiBwb3NzaWJsZUluZGV4ID49IDAgJiZcbiAgICAgICAgcG9zc2libGVJbmRleCA8IHRoaXMuc2l6ZSAmJlxuICAgICAgICBwb3NzaWJsZUluZGV4ID09PSBNYXRoLmZsb29yKHBvc3NpYmxlSW5kZXgpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCB0aGlzLnNpemUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgYmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIHRoaXMuc2l6ZSk7XG4gICAgICBlbmQgPSByZXNvbHZlRW5kKGVuZCwgdGhpcy5zaXplKTtcbiAgICAgIGlmIChlbmQgPD0gYmVnaW4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZSgwLCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy5nZXQoYmVnaW4sIHRoaXMuX2VuZCksIHRoaXMuZ2V0KGVuZCwgdGhpcy5fZW5kKSwgdGhpcy5fc3RlcCk7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHZhciBvZmZzZXRWYWx1ZSA9IHNlYXJjaFZhbHVlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICBpZiAob2Zmc2V0VmFsdWUgJSB0aGlzLl9zdGVwID09PSAwKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG9mZnNldFZhbHVlIC8gdGhpcy5fc3RlcDtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLnNpemUpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzZWFyY2hWYWx1ZSk7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5zaXplIC0gMTtcbiAgICAgIHZhciBzdGVwID0gdGhpcy5fc3RlcDtcbiAgICAgIHZhciB2YWx1ZSA9IHJldmVyc2UgPyB0aGlzLl9zdGFydCArIG1heEluZGV4ICogc3RlcCA6IHRoaXMuX3N0YXJ0O1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgICBpZiAoZm4odmFsdWUsIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlICs9IHJldmVyc2UgPyAtc3RlcCA6IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gaWk7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5zaXplIC0gMTtcbiAgICAgIHZhciBzdGVwID0gdGhpcy5fc3RlcDtcbiAgICAgIHZhciB2YWx1ZSA9IHJldmVyc2UgPyB0aGlzLl9zdGFydCArIG1heEluZGV4ICogc3RlcCA6IHRoaXMuX3N0YXJ0O1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgdiA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgICAgICByZXR1cm4gaWkgPiBtYXhJbmRleCA/IGl0ZXJhdG9yRG9uZSgpIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpaSsrLCB2KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJhbmdlID9cbiAgICAgICAgdGhpcy5fc3RhcnQgPT09IG90aGVyLl9zdGFydCAmJlxuICAgICAgICB0aGlzLl9lbmQgPT09IG90aGVyLl9lbmQgJiZcbiAgICAgICAgdGhpcy5fc3RlcCA9PT0gb3RoZXIuX3N0ZXAgOlxuICAgICAgICBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuICAgIH07XG5cblxuICB2YXIgRU1QVFlfUkFOR0U7XG5cbiAgY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbiwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0Fic3RyYWN0Jyk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBLZXllZENvbGxlY3Rpb24oKSB7fVxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBJbmRleGVkQ29sbGVjdGlvbigpIHt9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0Q29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gU2V0Q29sbGVjdGlvbigpIHt9XG5cblxuICBDb2xsZWN0aW9uLktleWVkID0gS2V5ZWRDb2xsZWN0aW9uO1xuICBDb2xsZWN0aW9uLkluZGV4ZWQgPSBJbmRleGVkQ29sbGVjdGlvbjtcbiAgQ29sbGVjdGlvbi5TZXQgPSBTZXRDb2xsZWN0aW9uO1xuXG4gIHZhciBpbXVsID1cbiAgICB0eXBlb2YgTWF0aC5pbXVsID09PSAnZnVuY3Rpb24nICYmIE1hdGguaW11bCgweGZmZmZmZmZmLCAyKSA9PT0gLTIgP1xuICAgIE1hdGguaW11bCA6XG4gICAgZnVuY3Rpb24gaW11bChhLCBiKSB7XG4gICAgICBhID0gYSB8IDA7IC8vIGludFxuICAgICAgYiA9IGIgfCAwOyAvLyBpbnRcbiAgICAgIHZhciBjID0gYSAmIDB4ZmZmZjtcbiAgICAgIHZhciBkID0gYiAmIDB4ZmZmZjtcbiAgICAgIC8vIFNoaWZ0IGJ5IDAgZml4ZXMgdGhlIHNpZ24gb24gdGhlIGhpZ2ggcGFydC5cbiAgICAgIHJldHVybiAoYyAqIGQpICsgKCgoKGEgPj4+IDE2KSAqIGQgKyBjICogKGIgPj4+IDE2KSkgPDwgMTYpID4+PiAwKSB8IDA7IC8vIGludFxuICAgIH07XG5cbiAgLy8gdjggaGFzIGFuIG9wdGltaXphdGlvbiBmb3Igc3RvcmluZyAzMS1iaXQgc2lnbmVkIG51bWJlcnMuXG4gIC8vIFZhbHVlcyB3aGljaCBoYXZlIGVpdGhlciAwMCBvciAxMSBhcyB0aGUgaGlnaCBvcmRlciBiaXRzIHF1YWxpZnkuXG4gIC8vIFRoaXMgZnVuY3Rpb24gZHJvcHMgdGhlIGhpZ2hlc3Qgb3JkZXIgYml0IGluIGEgc2lnbmVkIG51bWJlciwgbWFpbnRhaW5pbmdcbiAgLy8gdGhlIHNpZ24gYml0LlxuICBmdW5jdGlvbiBzbWkoaTMyKSB7XG4gICAgcmV0dXJuICgoaTMyID4+PiAxKSAmIDB4NDAwMDAwMDApIHwgKGkzMiAmIDB4QkZGRkZGRkYpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzaChvKSB7XG4gICAgaWYgKG8gPT09IGZhbHNlIHx8IG8gPT09IG51bGwgfHwgbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG8gPSBvLnZhbHVlT2YoKTtcbiAgICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG8gPT09IHRydWUpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvO1xuICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKG8gIT09IG8gfHwgbyA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICB2YXIgaCA9IG8gfCAwO1xuICAgICAgaWYgKGggIT09IG8pIHtcbiAgICAgICAgaCBePSBvICogMHhGRkZGRkZGRjtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvID4gMHhGRkZGRkZGRikge1xuICAgICAgICBvIC89IDB4RkZGRkZGRkY7XG4gICAgICAgIGggXj0gbztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbWkoaCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG8ubGVuZ3RoID4gU1RSSU5HX0hBU0hfQ0FDSEVfTUlOX1NUUkxFTiA/IGNhY2hlZEhhc2hTdHJpbmcobykgOiBoYXNoU3RyaW5nKG8pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG8uaGFzaENvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBvLmhhc2hDb2RlKCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGhhc2hKU09iaihvKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvLnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaGFzaFN0cmluZyhvLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIHR5cGUgJyArIHR5cGUgKyAnIGNhbm5vdCBiZSBoYXNoZWQuJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjYWNoZWRIYXNoU3RyaW5nKHN0cmluZykge1xuICAgIHZhciBoYXNoID0gc3RyaW5nSGFzaENhY2hlW3N0cmluZ107XG4gICAgaWYgKGhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzaCA9IGhhc2hTdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChTVFJJTkdfSEFTSF9DQUNIRV9TSVpFID09PSBTVFJJTkdfSEFTSF9DQUNIRV9NQVhfU0laRSkge1xuICAgICAgICBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFID0gMDtcbiAgICAgICAgc3RyaW5nSGFzaENhY2hlID0ge307XG4gICAgICB9XG4gICAgICBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFKys7XG4gICAgICBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXSA9IGhhc2g7XG4gICAgfVxuICAgIHJldHVybiBoYXNoO1xuICB9XG5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vaGFzaGluZy1zdHJpbmdzXG4gIGZ1bmN0aW9uIGhhc2hTdHJpbmcoc3RyaW5nKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgaGFzaCBmcm9tIEpWTVxuICAgIC8vIFRoZSBoYXNoIGNvZGUgZm9yIGEgc3RyaW5nIGlzIGNvbXB1dGVkIGFzXG4gICAgLy8gc1swXSAqIDMxIF4gKG4gLSAxKSArIHNbMV0gKiAzMSBeIChuIC0gMikgKyAuLi4gKyBzW24gLSAxXSxcbiAgICAvLyB3aGVyZSBzW2ldIGlzIHRoZSBpdGggY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcgYW5kIG4gaXMgdGhlIGxlbmd0aCBvZlxuICAgIC8vIHRoZSBzdHJpbmcuIFdlIFwibW9kXCIgdGhlIHJlc3VsdCB0byBtYWtlIGl0IGJldHdlZW4gMCAoaW5jbHVzaXZlKSBhbmQgMl4zMVxuICAgIC8vIChleGNsdXNpdmUpIGJ5IGRyb3BwaW5nIGhpZ2ggYml0cy5cbiAgICB2YXIgaGFzaCA9IDA7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHN0cmluZy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIGhhc2ggPSAzMSAqIGhhc2ggKyBzdHJpbmcuY2hhckNvZGVBdChpaSkgfCAwO1xuICAgIH1cbiAgICByZXR1cm4gc21pKGhhc2gpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzaEpTT2JqKG9iaikge1xuICAgIHZhciBoYXNoO1xuICAgIGlmICh1c2luZ1dlYWtNYXApIHtcbiAgICAgIGhhc2ggPSB3ZWFrTWFwLmdldChvYmopO1xuICAgICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNoID0gb2JqW1VJRF9IQVNIX0tFWV07XG4gICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuXG4gICAgaWYgKCFjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgaGFzaCA9IG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSAmJiBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXTtcbiAgICAgIGlmIChoYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICB9XG5cbiAgICAgIGhhc2ggPSBnZXRJRU5vZGVIYXNoKG9iaik7XG4gICAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc2ggPSArK29iakhhc2hVSUQ7XG4gICAgaWYgKG9iakhhc2hVSUQgJiAweDQwMDAwMDAwKSB7XG4gICAgICBvYmpIYXNoVUlEID0gMDtcbiAgICB9XG5cbiAgICBpZiAodXNpbmdXZWFrTWFwKSB7XG4gICAgICB3ZWFrTWFwLnNldChvYmosIGhhc2gpO1xuICAgIH0gZWxzZSBpZiAoaXNFeHRlbnNpYmxlICE9PSB1bmRlZmluZWQgJiYgaXNFeHRlbnNpYmxlKG9iaikgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1leHRlbnNpYmxlIG9iamVjdHMgYXJlIG5vdCBhbGxvd2VkIGFzIGtleXMuJyk7XG4gICAgfSBlbHNlIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgVUlEX0hBU0hfS0VZLCB7XG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICdjb25maWd1cmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3dyaXRhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGhhc2hcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAob2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9PT0gb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSkge1xuICAgICAgLy8gU2luY2Ugd2UgY2FuJ3QgZGVmaW5lIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIG9iamVjdFxuICAgICAgLy8gd2UnbGwgaGlqYWNrIG9uZSBvZiB0aGUgbGVzcy11c2VkIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgdG9cbiAgICAgIC8vIHNhdmUgb3VyIGhhc2ggb24gaXQuIFNpbmNlIHRoaXMgaXMgYSBmdW5jdGlvbiBpdCB3aWxsIG5vdCBzaG93IHVwIGluXG4gICAgICAvLyBgSlNPTi5zdHJpbmdpZnlgIHdoaWNoIGlzIHdoYXQgd2Ugd2FudC5cbiAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXSA9IGhhc2g7XG4gICAgfSBlbHNlIGlmIChvYmoubm9kZVR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSBjb3VsZG4ndCBnZXQgdGhlIElFIGB1bmlxdWVJRGAgdG8gdXNlIGFzIGEgaGFzaFxuICAgICAgLy8gYW5kIHdlIGNvdWxkbid0IHVzZSBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IHRvIGV4cGxvaXQgdGhlXG4gICAgICAvLyBkb250RW51bSBidWcgc28gd2Ugc2ltcGx5IGFkZCB0aGUgYFVJRF9IQVNIX0tFWWAgb24gdGhlIG5vZGVcbiAgICAgIC8vIGl0c2VsZi5cbiAgICAgIG9ialtVSURfSEFTSF9LRVldID0gaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gc2V0IGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gb2JqZWN0LicpO1xuICAgIH1cblxuICAgIHJldHVybiBoYXNoO1xuICB9XG5cbiAgLy8gR2V0IHJlZmVyZW5jZXMgdG8gRVM1IG9iamVjdCBtZXRob2RzLlxuICB2YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuICAvLyBUcnVlIGlmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB3b3JrcyBhcyBleHBlY3RlZC4gSUU4IGZhaWxzIHRoaXMgdGVzdC5cbiAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdAJywge30pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSgpKTtcblxuICAvLyBJRSBoYXMgYSBgdW5pcXVlSURgIHByb3BlcnR5IG9uIERPTSBub2Rlcy4gV2UgY2FuIGNvbnN0cnVjdCB0aGUgaGFzaCBmcm9tIGl0XG4gIC8vIGFuZCBhdm9pZCBtZW1vcnkgbGVha3MgZnJvbSB0aGUgSUUgY2xvbmVOb2RlIGJ1Zy5cbiAgZnVuY3Rpb24gZ2V0SUVOb2RlSGFzaChub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA+IDApIHtcbiAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIDE6IC8vIEVsZW1lbnRcbiAgICAgICAgICByZXR1cm4gbm9kZS51bmlxdWVJRDtcbiAgICAgICAgY2FzZSA5OiAvLyBEb2N1bWVudFxuICAgICAgICAgIHJldHVybiBub2RlLmRvY3VtZW50RWxlbWVudCAmJiBub2RlLmRvY3VtZW50RWxlbWVudC51bmlxdWVJRDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJZiBwb3NzaWJsZSwgdXNlIGEgV2Vha01hcC5cbiAgdmFyIHVzaW5nV2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nO1xuICB2YXIgd2Vha01hcDtcbiAgaWYgKHVzaW5nV2Vha01hcCkge1xuICAgIHdlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIG9iakhhc2hVSUQgPSAwO1xuXG4gIHZhciBVSURfSEFTSF9LRVkgPSAnX19pbW11dGFibGVoYXNoX18nO1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFVJRF9IQVNIX0tFWSA9IFN5bWJvbChVSURfSEFTSF9LRVkpO1xuICB9XG5cbiAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4gPSAxNjtcbiAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFID0gMjU1O1xuICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9IDA7XG4gIHZhciBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcblxuICBmdW5jdGlvbiBhc3NlcnROb3RJbmZpbml0ZShzaXplKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgc2l6ZSAhPT0gSW5maW5pdHksXG4gICAgICAnQ2Fubm90IHBlcmZvcm0gdGhpcyBhY3Rpb24gd2l0aCBhbiBpbmZpbml0ZSBzaXplLidcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTWFwLCBLZXllZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE1hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eU1hcCgpIDpcbiAgICAgICAgaXNNYXAodmFsdWUpICYmICFpc09yZGVyZWQodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obWFwICkge1xuICAgICAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwLnNldChrLCB2KX0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBNYXAub2YgPSBmdW5jdGlvbigpIHt2YXIga2V5VmFsdWVzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICByZXR1cm4gZW1wdHlNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKG1hcCApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlWYWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICBpZiAoaSArIDEgPj0ga2V5VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHZhbHVlIGZvciBrZXk6ICcgKyBrZXlWYWx1ZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXAuc2V0KGtleVZhbHVlc1tpXSwga2V5VmFsdWVzW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdNYXAgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdCA/XG4gICAgICAgIHRoaXMuX3Jvb3QuZ2V0KDAsIHVuZGVmaW5lZCwgaywgbm90U2V0VmFsdWUpIDpcbiAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIHJldHVybiB1cGRhdGVNYXAodGhpcywgaywgdik7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc2V0SW4gPSBmdW5jdGlvbihrZXlQYXRoLCB2KSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBOT1RfU0VULCBmdW5jdGlvbigpICB7cmV0dXJuIHZ9KTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdXBkYXRlTWFwKHRoaXMsIGssIE5PVF9TRVQpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmRlbGV0ZUluID0gZnVuY3Rpb24oa2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgZnVuY3Rpb24oKSAge3JldHVybiBOT1RfU0VUfSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cbiAgICAgICAgayh0aGlzKSA6XG4gICAgICAgIHRoaXMudXBkYXRlSW4oW2tdLCBub3RTZXRWYWx1ZSwgdXBkYXRlcik7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUudXBkYXRlSW4gPSBmdW5jdGlvbihrZXlQYXRoLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICAgICAgaWYgKCF1cGRhdGVyKSB7XG4gICAgICAgIHVwZGF0ZXIgPSBub3RTZXRWYWx1ZTtcbiAgICAgICAgbm90U2V0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgdXBkYXRlZFZhbHVlID0gdXBkYXRlSW5EZWVwTWFwKFxuICAgICAgICB0aGlzLFxuICAgICAgICBmb3JjZUl0ZXJhdG9yKGtleVBhdGgpLFxuICAgICAgICBub3RTZXRWYWx1ZSxcbiAgICAgICAgdXBkYXRlclxuICAgICAgKTtcbiAgICAgIHJldHVybiB1cGRhdGVkVmFsdWUgPT09IE5PVF9TRVQgPyB1bmRlZmluZWQgOiB1cGRhdGVkVmFsdWU7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5TWFwKCk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIG1lcmdlciwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlSW4gPSBmdW5jdGlvbihrZXlQYXRoKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihcbiAgICAgICAga2V5UGF0aCxcbiAgICAgICAgZW1wdHlNYXAoKSxcbiAgICAgICAgZnVuY3Rpb24obSApIHtyZXR1cm4gdHlwZW9mIG0ubWVyZ2UgPT09ICdmdW5jdGlvbicgP1xuICAgICAgICAgIG0ubWVyZ2UuYXBwbHkobSwgaXRlcnMpIDpcbiAgICAgICAgICBpdGVyc1tpdGVycy5sZW5ndGggLSAxXX1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCBkZWVwTWVyZ2VyLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIGRlZXBNZXJnZXJXaXRoKG1lcmdlciksIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZURlZXBJbiA9IGZ1bmN0aW9uKGtleVBhdGgpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKFxuICAgICAgICBrZXlQYXRoLFxuICAgICAgICBlbXB0eU1hcCgpLFxuICAgICAgICBmdW5jdGlvbihtICkge3JldHVybiB0eXBlb2YgbS5tZXJnZURlZXAgPT09ICdmdW5jdGlvbicgP1xuICAgICAgICAgIG0ubWVyZ2VEZWVwLmFwcGx5KG0sIGl0ZXJzKSA6XG4gICAgICAgICAgaXRlcnNbaXRlcnMubGVuZ3RoIC0gMV19XG4gICAgICApO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICAvLyBMYXRlIGJpbmRpbmdcbiAgICAgIHJldHVybiBPcmRlcmVkTWFwKHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5zb3J0QnkgPSBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTXV0YWJpbGl0eVxuXG4gICAgTWFwLnByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgIHZhciBtdXRhYmxlID0gdGhpcy5hc011dGFibGUoKTtcbiAgICAgIGZuKG11dGFibGUpO1xuICAgICAgcmV0dXJuIG11dGFibGUud2FzQWx0ZXJlZCgpID8gbXV0YWJsZS5fX2Vuc3VyZU93bmVyKHRoaXMuX19vd25lcklEKSA6IHRoaXM7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuYXNNdXRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX293bmVySUQgPyB0aGlzIDogdGhpcy5fX2Vuc3VyZU93bmVyKG5ldyBPd25lcklEKCkpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmFzSW1tdXRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2Vuc3VyZU93bmVyKCk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19hbHRlcmVkO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QuaXRlcmF0ZShmdW5jdGlvbihlbnRyeSApIHtcbiAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICByZXR1cm4gZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDApO1xuICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZU1hcCh0aGlzLnNpemUsIHRoaXMuX3Jvb3QsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNNYXAobWF5YmVNYXApIHtcbiAgICByZXR1cm4gISEobWF5YmVNYXAgJiYgbWF5YmVNYXBbSVNfTUFQX1NFTlRJTkVMXSk7XG4gIH1cblxuICBNYXAuaXNNYXAgPSBpc01hcDtcblxuICB2YXIgSVNfTUFQX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTUFQX19AQCc7XG5cbiAgdmFyIE1hcFByb3RvdHlwZSA9IE1hcC5wcm90b3R5cGU7XG4gIE1hcFByb3RvdHlwZVtJU19NQVBfU0VOVElORUxdID0gdHJ1ZTtcbiAgTWFwUHJvdG90eXBlW0RFTEVURV0gPSBNYXBQcm90b3R5cGUucmVtb3ZlO1xuICBNYXBQcm90b3R5cGUucmVtb3ZlSW4gPSBNYXBQcm90b3R5cGUuZGVsZXRlSW47XG5cblxuICAvLyAjcHJhZ21hIFRyaWUgTm9kZXNcblxuXG5cbiAgICBmdW5jdGlvbiBBcnJheU1hcE5vZGUob3duZXJJRCwgZW50cmllcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuZW50cmllcyA9IGVudHJpZXM7XG4gICAgfVxuXG4gICAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgICBmb3IgKHZhciBpaSA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpaSA8IGxlbjsgaWkrKykge1xuICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lpXVswXSkpIHtcbiAgICAgICAgICByZXR1cm4gZW50cmllc1tpaV1bMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG5cbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgdmFyIGlkeCA9IDA7XG4gICAgICBmb3IgKHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBleGlzdHMgPSBpZHggPCBsZW47XG5cbiAgICAgIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICAgIChyZW1vdmVkIHx8ICFleGlzdHMpICYmIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblxuICAgICAgaWYgKHJlbW92ZWQgJiYgZW50cmllcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKCFleGlzdHMgJiYgIXJlbW92ZWQgJiYgZW50cmllcy5sZW5ndGggPj0gTUFYX0FSUkFZX01BUF9TSVpFKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVOb2Rlcyhvd25lcklELCBlbnRyaWVzLCBrZXksIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgICAgIHZhciBuZXdFbnRyaWVzID0gaXNFZGl0YWJsZSA/IGVudHJpZXMgOiBhcnJDb3B5KGVudHJpZXMpO1xuXG4gICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICAgICAgaWR4ID09PSBsZW4gLSAxID8gbmV3RW50cmllcy5wb3AoKSA6IChuZXdFbnRyaWVzW2lkeF0gPSBuZXdFbnRyaWVzLnBvcCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdFbnRyaWVzW2lkeF0gPSBba2V5LCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0VudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFZGl0YWJsZSkge1xuICAgICAgICB0aGlzLmVudHJpZXMgPSBuZXdFbnRyaWVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBBcnJheU1hcE5vZGUob3duZXJJRCwgbmV3RW50cmllcyk7XG4gICAgfTtcblxuXG5cblxuICAgIGZ1bmN0aW9uIEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgbm9kZXMpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmJpdG1hcCA9IGJpdG1hcDtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBCaXRtYXBJbmRleGVkTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cbiAgICAgIHZhciBiaXQgPSAoMSA8PCAoKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0spKTtcbiAgICAgIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcbiAgICAgIHJldHVybiAoYml0bWFwICYgYml0KSA9PT0gMCA/IG5vdFNldFZhbHVlIDpcbiAgICAgICAgdGhpcy5ub2Rlc1twb3BDb3VudChiaXRtYXAgJiAoYml0IC0gMSkpXS5nZXQoc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSk7XG4gICAgfTtcblxuICAgIEJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cbiAgICAgIHZhciBrZXlIYXNoRnJhZyA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIGJpdCA9IDEgPDwga2V5SGFzaEZyYWc7XG4gICAgICB2YXIgYml0bWFwID0gdGhpcy5iaXRtYXA7XG4gICAgICB2YXIgZXhpc3RzID0gKGJpdG1hcCAmIGJpdCkgIT09IDA7XG5cbiAgICAgIGlmICghZXhpc3RzICYmIHZhbHVlID09PSBOT1RfU0VUKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWR4ID0gcG9wQ291bnQoYml0bWFwICYgKGJpdCAtIDEpKTtcbiAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gICAgICB2YXIgbm9kZSA9IGV4aXN0cyA/IG5vZGVzW2lkeF0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuXG4gICAgICBpZiAobmV3Tm9kZSA9PT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKCFleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPj0gTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUpIHtcbiAgICAgICAgcmV0dXJuIGV4cGFuZE5vZGVzKG93bmVySUQsIG5vZGVzLCBiaXRtYXAsIGtleUhhc2hGcmFnLCBuZXdOb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4aXN0cyAmJiAhbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPT09IDIgJiYgaXNMZWFmTm9kZShub2Rlc1tpZHggXiAxXSkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVzW2lkeCBeIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhpc3RzICYmIG5ld05vZGUgJiYgbm9kZXMubGVuZ3RoID09PSAxICYmIGlzTGVhZk5vZGUobmV3Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gICAgICB2YXIgbmV3Qml0bWFwID0gZXhpc3RzID8gbmV3Tm9kZSA/IGJpdG1hcCA6IGJpdG1hcCBeIGJpdCA6IGJpdG1hcCB8IGJpdDtcbiAgICAgIHZhciBuZXdOb2RlcyA9IGV4aXN0cyA/IG5ld05vZGUgP1xuICAgICAgICBzZXRJbihub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKSA6XG4gICAgICAgIHNwbGljZU91dChub2RlcywgaWR4LCBpc0VkaXRhYmxlKSA6XG4gICAgICAgIHNwbGljZUluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpO1xuXG4gICAgICBpZiAoaXNFZGl0YWJsZSkge1xuICAgICAgICB0aGlzLmJpdG1hcCA9IG5ld0JpdG1hcDtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCBuZXdCaXRtYXAsIG5ld05vZGVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gSGFzaEFycmF5TWFwTm9kZShvd25lcklELCBjb3VudCwgbm9kZXMpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cbiAgICAgIHZhciBpZHggPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcbiAgICAgIHZhciBub2RlID0gdGhpcy5ub2Rlc1tpZHhdO1xuICAgICAgcmV0dXJuIG5vZGUgPyBub2RlLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cbiAgICAgIHZhciBpZHggPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcbiAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG4gICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpZHhdO1xuXG4gICAgICBpZiAocmVtb3ZlZCAmJiAhbm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld05vZGUgPSB1cGRhdGVOb2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKTtcbiAgICAgIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Q291bnQgPSB0aGlzLmNvdW50O1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIG5ld0NvdW50Kys7XG4gICAgICB9IGVsc2UgaWYgKCFuZXdOb2RlKSB7XG4gICAgICAgIG5ld0NvdW50LS07XG4gICAgICAgIGlmIChuZXdDb3VudCA8IE1JTl9IQVNIX0FSUkFZX01BUF9TSVpFKSB7XG4gICAgICAgICAgcmV0dXJuIHBhY2tOb2Rlcyhvd25lcklELCBub2RlcywgbmV3Q291bnQsIGlkeCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgICAgIHZhciBuZXdOb2RlcyA9IHNldEluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpO1xuXG4gICAgICBpZiAoaXNFZGl0YWJsZSkge1xuICAgICAgICB0aGlzLmNvdW50ID0gbmV3Q291bnQ7XG4gICAgICAgIHRoaXMubm9kZXMgPSBuZXdOb2RlcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSGFzaEFycmF5TWFwTm9kZShvd25lcklELCBuZXdDb3VudCwgbmV3Tm9kZXMpO1xuICAgIH07XG5cblxuXG5cbiAgICBmdW5jdGlvbiBIYXNoQ29sbGlzaW9uTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyaWVzKSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcbiAgICAgIHRoaXMuZW50cmllcyA9IGVudHJpZXM7XG4gICAgfVxuXG4gICAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICAgIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWldWzBdKSkge1xuICAgICAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG5cbiAgICAgIGlmIChrZXlIYXNoICE9PSB0aGlzLmtleUhhc2gpIHtcbiAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICAgIHJldHVybiBtZXJnZUludG9Ob2RlKHRoaXMsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICAgIHZhciBpZHggPSAwO1xuICAgICAgZm9yICh2YXIgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpZHhdWzBdKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZXhpc3RzID0gaWR4IDwgbGVuO1xuXG4gICAgICBpZiAoZXhpc3RzID8gZW50cmllc1tpZHhdWzFdID09PSB2YWx1ZSA6IHJlbW92ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgICAocmVtb3ZlZCB8fCAhZXhpc3RzKSAmJiBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cbiAgICAgIGlmIChyZW1vdmVkICYmIGxlbiA9PT0gMikge1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlTm9kZShvd25lcklELCB0aGlzLmtleUhhc2gsIGVudHJpZXNbaWR4IF4gMV0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld0VudHJpZXMgPSBpc0VkaXRhYmxlID8gZW50cmllcyA6IGFyckNvcHkoZW50cmllcyk7XG5cbiAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICBpZHggPT09IGxlbiAtIDEgPyBuZXdFbnRyaWVzLnBvcCgpIDogKG5ld0VudHJpZXNbaWR4XSA9IG5ld0VudHJpZXMucG9wKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ld0VudHJpZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgbmV3RW50cmllcyk7XG4gICAgfTtcblxuXG5cblxuICAgIGZ1bmN0aW9uIFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMua2V5SGFzaCA9IGtleUhhc2g7XG4gICAgICB0aGlzLmVudHJ5ID0gZW50cnk7XG4gICAgfVxuXG4gICAgVmFsdWVOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGlzKGtleSwgdGhpcy5lbnRyeVswXSkgPyB0aGlzLmVudHJ5WzFdIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFZhbHVlTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuICAgICAgdmFyIGtleU1hdGNoID0gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKTtcbiAgICAgIGlmIChrZXlNYXRjaCA/IHZhbHVlID09PSB0aGlzLmVudHJ5WzFdIDogcmVtb3ZlZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcblxuICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgICAgICByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoa2V5TWF0Y2gpIHtcbiAgICAgICAgaWYgKG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEKSB7XG4gICAgICAgICAgdGhpcy5lbnRyeVsxXSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGhhc2goa2V5KSwgW2tleSwgdmFsdWVdKTtcbiAgICB9O1xuXG5cblxuICAvLyAjcHJhZ21hIEl0ZXJhdG9yc1xuXG4gIEFycmF5TWFwTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9XG4gIEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgZm9yICh2YXIgaWkgPSAwLCBtYXhJbmRleCA9IGVudHJpZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgIGlmIChmbihlbnRyaWVzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5pdGVyYXRlID1cbiAgSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gICAgZm9yICh2YXIgaWkgPSAwLCBtYXhJbmRleCA9IG5vZGVzLmxlbmd0aCAtIDE7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZS5pdGVyYXRlKGZuLCByZXZlcnNlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFZhbHVlTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIHJldHVybiBmbih0aGlzLmVudHJ5KTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKE1hcEl0ZXJhdG9yLCBJdGVyYXRvcik7XG5cbiAgICBmdW5jdGlvbiBNYXBJdGVyYXRvcihtYXAsIHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgdGhpcy5fcmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgICB0aGlzLl9zdGFjayA9IG1hcC5fcm9vdCAmJiBtYXBJdGVyYXRvckZyYW1lKG1hcC5fcm9vdCk7XG4gICAgfVxuXG4gICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0eXBlID0gdGhpcy5fdHlwZTtcbiAgICAgIHZhciBzdGFjayA9IHRoaXMuX3N0YWNrO1xuICAgICAgd2hpbGUgKHN0YWNrKSB7XG4gICAgICAgIHZhciBub2RlID0gc3RhY2subm9kZTtcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhY2suaW5kZXgrKztcbiAgICAgICAgdmFyIG1heEluZGV4O1xuICAgICAgICBpZiAobm9kZS5lbnRyeSkge1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgbm9kZS5lbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuZW50cmllcykge1xuICAgICAgICAgIG1heEluZGV4ID0gbm9kZS5lbnRyaWVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgaWYgKGluZGV4IDw9IG1heEluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJpZXNbdGhpcy5fcmV2ZXJzZSA/IG1heEluZGV4IC0gaW5kZXggOiBpbmRleF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXhJbmRleCA9IG5vZGUubm9kZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzdWJOb2RlID0gbm9kZS5ub2Rlc1t0aGlzLl9yZXZlcnNlID8gbWF4SW5kZXggLSBpbmRleCA6IGluZGV4XTtcbiAgICAgICAgICAgIGlmIChzdWJOb2RlKSB7XG4gICAgICAgICAgICAgIGlmIChzdWJOb2RlLmVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgc3ViTm9kZS5lbnRyeSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RhY2sgPSB0aGlzLl9zdGFjayA9IG1hcEl0ZXJhdG9yRnJhbWUoc3ViTm9kZSwgc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YWNrID0gdGhpcy5fc3RhY2sgPSB0aGlzLl9zdGFjay5fX3ByZXY7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgZW50cnkpIHtcbiAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFwSXRlcmF0b3JGcmFtZShub2RlLCBwcmV2KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGU6IG5vZGUsXG4gICAgICBpbmRleDogMCxcbiAgICAgIF9fcHJldjogcHJldlxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlTWFwKHNpemUsIHJvb3QsIG93bmVySUQsIGhhc2gpIHtcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShNYXBQcm90b3R5cGUpO1xuICAgIG1hcC5zaXplID0gc2l6ZTtcbiAgICBtYXAuX3Jvb3QgPSByb290O1xuICAgIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIG1hcC5fX2hhc2ggPSBoYXNoO1xuICAgIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgdmFyIEVNUFRZX01BUDtcbiAgZnVuY3Rpb24gZW1wdHlNYXAoKSB7XG4gICAgcmV0dXJuIEVNUFRZX01BUCB8fCAoRU1QVFlfTUFQID0gbWFrZU1hcCgwKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNYXAobWFwLCBrLCB2KSB7XG4gICAgdmFyIG5ld1Jvb3Q7XG4gICAgdmFyIG5ld1NpemU7XG4gICAgaWYgKCFtYXAuX3Jvb3QpIHtcbiAgICAgIGlmICh2ID09PSBOT1RfU0VUKSB7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgICB9XG4gICAgICBuZXdTaXplID0gMTtcbiAgICAgIG5ld1Jvb3QgPSBuZXcgQXJyYXlNYXBOb2RlKG1hcC5fX293bmVySUQsIFtbaywgdl1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRpZENoYW5nZVNpemUgPSBNYWtlUmVmKENIQU5HRV9MRU5HVEgpO1xuICAgICAgdmFyIGRpZEFsdGVyID0gTWFrZVJlZihESURfQUxURVIpO1xuICAgICAgbmV3Um9vdCA9IHVwZGF0ZU5vZGUobWFwLl9yb290LCBtYXAuX19vd25lcklELCAwLCB1bmRlZmluZWQsIGssIHYsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKTtcbiAgICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH1cbiAgICAgIG5ld1NpemUgPSBtYXAuc2l6ZSArIChkaWRDaGFuZ2VTaXplLnZhbHVlID8gdiA9PT0gTk9UX1NFVCA/IC0xIDogMSA6IDApO1xuICAgIH1cbiAgICBpZiAobWFwLl9fb3duZXJJRCkge1xuICAgICAgbWFwLnNpemUgPSBuZXdTaXplO1xuICAgICAgbWFwLl9yb290ID0gbmV3Um9vdDtcbiAgICAgIG1hcC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICBtYXAuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIHJldHVybiBuZXdSb290ID8gbWFrZU1hcChuZXdTaXplLCBuZXdSb290KSA6IGVtcHR5TWFwKCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVOb2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgaWYgKHZhbHVlID09PSBOT1RfU0VUKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlLnVwZGF0ZShvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNMZWFmTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuY29uc3RydWN0b3IgPT09IFZhbHVlTm9kZSB8fCBub2RlLmNvbnN0cnVjdG9yID09PSBIYXNoQ29sbGlzaW9uTm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b05vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGVudHJ5KSB7XG4gICAgaWYgKG5vZGUua2V5SGFzaCA9PT0ga2V5SGFzaCkge1xuICAgICAgcmV0dXJuIG5ldyBIYXNoQ29sbGlzaW9uTm9kZShvd25lcklELCBrZXlIYXNoLCBbbm9kZS5lbnRyeSwgZW50cnldKTtcbiAgICB9XG5cbiAgICB2YXIgaWR4MSA9IChzaGlmdCA9PT0gMCA/IG5vZGUua2V5SGFzaCA6IG5vZGUua2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcbiAgICB2YXIgaWR4MiA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuXG4gICAgdmFyIG5ld05vZGU7XG4gICAgdmFyIG5vZGVzID0gaWR4MSA9PT0gaWR4MiA/XG4gICAgICBbbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBlbnRyeSldIDpcbiAgICAgICgobmV3Tm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgZW50cnkpKSwgaWR4MSA8IGlkeDIgPyBbbm9kZSwgbmV3Tm9kZV0gOiBbbmV3Tm9kZSwgbm9kZV0pO1xuXG4gICAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCAoMSA8PCBpZHgxKSB8ICgxIDw8IGlkeDIpLCBub2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVOb2Rlcyhvd25lcklELCBlbnRyaWVzLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFvd25lcklEKSB7XG4gICAgICBvd25lcklEID0gbmV3IE93bmVySUQoKTtcbiAgICB9XG4gICAgdmFyIG5vZGUgPSBuZXcgVmFsdWVOb2RlKG93bmVySUQsIGhhc2goa2V5KSwgW2tleSwgdmFsdWVdKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgZW50cmllcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaWldO1xuICAgICAgbm9kZSA9IG5vZGUudXBkYXRlKG93bmVySUQsIDAsIHVuZGVmaW5lZCwgZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBwYWNrTm9kZXMob3duZXJJRCwgbm9kZXMsIGNvdW50LCBleGNsdWRpbmcpIHtcbiAgICB2YXIgYml0bWFwID0gMDtcbiAgICB2YXIgcGFja2VkSUkgPSAwO1xuICAgIHZhciBwYWNrZWROb2RlcyA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaWkgPSAwLCBiaXQgPSAxLCBsZW4gPSBub2Rlcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrLCBiaXQgPDw9IDEpIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaWldO1xuICAgICAgaWYgKG5vZGUgIT09IHVuZGVmaW5lZCAmJiBpaSAhPT0gZXhjbHVkaW5nKSB7XG4gICAgICAgIGJpdG1hcCB8PSBiaXQ7XG4gICAgICAgIHBhY2tlZE5vZGVzW3BhY2tlZElJKytdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCBiaXRtYXAsIHBhY2tlZE5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cGFuZE5vZGVzKG93bmVySUQsIG5vZGVzLCBiaXRtYXAsIGluY2x1ZGluZywgbm9kZSkge1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGV4cGFuZGVkTm9kZXMgPSBuZXcgQXJyYXkoU0laRSk7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBiaXRtYXAgIT09IDA7IGlpKyssIGJpdG1hcCA+Pj49IDEpIHtcbiAgICAgIGV4cGFuZGVkTm9kZXNbaWldID0gYml0bWFwICYgMSA/IG5vZGVzW2NvdW50KytdIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBleHBhbmRlZE5vZGVzW2luY2x1ZGluZ10gPSBub2RlO1xuICAgIHJldHVybiBuZXcgSGFzaEFycmF5TWFwTm9kZShvd25lcklELCBjb3VudCArIDEsIGV4cGFuZGVkTm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvTWFwV2l0aChtYXAsIG1lcmdlciwgaXRlcmFibGVzKSB7XG4gICAgdmFyIGl0ZXJzID0gW107XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJhYmxlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlc1tpaV07XG4gICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgaWYgKCFpc0l0ZXJhYmxlKHZhbHVlKSkge1xuICAgICAgICBpdGVyID0gaXRlci5tYXAoZnVuY3Rpb24odiApIHtyZXR1cm4gZnJvbUpTKHYpfSk7XG4gICAgICB9XG4gICAgICBpdGVycy5wdXNoKGl0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgobWFwLCBtZXJnZXIsIGl0ZXJzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBNZXJnZXIoZXhpc3RpbmcsIHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gZXhpc3RpbmcgJiYgZXhpc3RpbmcubWVyZ2VEZWVwICYmIGlzSXRlcmFibGUodmFsdWUpID9cbiAgICAgIGV4aXN0aW5nLm1lcmdlRGVlcCh2YWx1ZSkgOlxuICAgICAgaXMoZXhpc3RpbmcsIHZhbHVlKSA/IGV4aXN0aW5nIDogdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWVwTWVyZ2VyV2l0aChtZXJnZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXhpc3RpbmcsIHZhbHVlLCBrZXkpICB7XG4gICAgICBpZiAoZXhpc3RpbmcgJiYgZXhpc3RpbmcubWVyZ2VEZWVwV2l0aCAmJiBpc0l0ZXJhYmxlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmcubWVyZ2VEZWVwV2l0aChtZXJnZXIsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXh0VmFsdWUgPSBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlLCBrZXkpO1xuICAgICAgcmV0dXJuIGlzKGV4aXN0aW5nLCBuZXh0VmFsdWUpID8gZXhpc3RpbmcgOiBuZXh0VmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b0NvbGxlY3Rpb25XaXRoKGNvbGxlY3Rpb24sIG1lcmdlciwgaXRlcnMpIHtcbiAgICBpdGVycyA9IGl0ZXJzLmZpbHRlcihmdW5jdGlvbih4ICkge3JldHVybiB4LnNpemUgIT09IDB9KTtcbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKGNvbGxlY3Rpb24uc2l6ZSA9PT0gMCAmJiAhY29sbGVjdGlvbi5fX293bmVySUQgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbi5jb25zdHJ1Y3RvcihpdGVyc1swXSk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oY29sbGVjdGlvbiApIHtcbiAgICAgIHZhciBtZXJnZUludG9NYXAgPSBtZXJnZXIgP1xuICAgICAgICBmdW5jdGlvbih2YWx1ZSwga2V5KSAge1xuICAgICAgICAgIGNvbGxlY3Rpb24udXBkYXRlKGtleSwgTk9UX1NFVCwgZnVuY3Rpb24oZXhpc3RpbmcgKVxuICAgICAgICAgICAge3JldHVybiBleGlzdGluZyA9PT0gTk9UX1NFVCA/IHZhbHVlIDogbWVyZ2VyKGV4aXN0aW5nLCB2YWx1ZSwga2V5KX1cbiAgICAgICAgICApO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24odmFsdWUsIGtleSkgIHtcbiAgICAgICAgICBjb2xsZWN0aW9uLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICBpdGVyc1tpaV0uZm9yRWFjaChtZXJnZUludG9NYXApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlSW5EZWVwTWFwKGV4aXN0aW5nLCBrZXlQYXRoSXRlciwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgICB2YXIgaXNOb3RTZXQgPSBleGlzdGluZyA9PT0gTk9UX1NFVDtcbiAgICB2YXIgc3RlcCA9IGtleVBhdGhJdGVyLm5leHQoKTtcbiAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IGlzTm90U2V0ID8gbm90U2V0VmFsdWUgOiBleGlzdGluZztcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHVwZGF0ZXIoZXhpc3RpbmdWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3VmFsdWUgPT09IGV4aXN0aW5nVmFsdWUgPyBleGlzdGluZyA6IG5ld1ZhbHVlO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBpc05vdFNldCB8fCAoZXhpc3RpbmcgJiYgZXhpc3Rpbmcuc2V0KSxcbiAgICAgICdpbnZhbGlkIGtleVBhdGgnXG4gICAgKTtcbiAgICB2YXIga2V5ID0gc3RlcC52YWx1ZTtcbiAgICB2YXIgbmV4dEV4aXN0aW5nID0gaXNOb3RTZXQgPyBOT1RfU0VUIDogZXhpc3RpbmcuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgdmFyIG5leHRVcGRhdGVkID0gdXBkYXRlSW5EZWVwTWFwKFxuICAgICAgbmV4dEV4aXN0aW5nLFxuICAgICAga2V5UGF0aEl0ZXIsXG4gICAgICBub3RTZXRWYWx1ZSxcbiAgICAgIHVwZGF0ZXJcbiAgICApO1xuICAgIHJldHVybiBuZXh0VXBkYXRlZCA9PT0gbmV4dEV4aXN0aW5nID8gZXhpc3RpbmcgOlxuICAgICAgbmV4dFVwZGF0ZWQgPT09IE5PVF9TRVQgPyBleGlzdGluZy5yZW1vdmUoa2V5KSA6XG4gICAgICAoaXNOb3RTZXQgPyBlbXB0eU1hcCgpIDogZXhpc3RpbmcpLnNldChrZXksIG5leHRVcGRhdGVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcENvdW50KHgpIHtcbiAgICB4ID0geCAtICgoeCA+PiAxKSAmIDB4NTU1NTU1NTUpO1xuICAgIHggPSAoeCAmIDB4MzMzMzMzMzMpICsgKCh4ID4+IDIpICYgMHgzMzMzMzMzMyk7XG4gICAgeCA9ICh4ICsgKHggPj4gNCkpICYgMHgwZjBmMGYwZjtcbiAgICB4ID0geCArICh4ID4+IDgpO1xuICAgIHggPSB4ICsgKHggPj4gMTYpO1xuICAgIHJldHVybiB4ICYgMHg3ZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluKGFycmF5LCBpZHgsIHZhbCwgY2FuRWRpdCkge1xuICAgIHZhciBuZXdBcnJheSA9IGNhbkVkaXQgPyBhcnJheSA6IGFyckNvcHkoYXJyYXkpO1xuICAgIG5ld0FycmF5W2lkeF0gPSB2YWw7XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gc3BsaWNlSW4oYXJyYXksIGlkeCwgdmFsLCBjYW5FZGl0KSB7XG4gICAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCArIDE7XG4gICAgaWYgKGNhbkVkaXQgJiYgaWR4ICsgMSA9PT0gbmV3TGVuKSB7XG4gICAgICBhcnJheVtpZHhdID0gdmFsO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgICB2YXIgbmV3QXJyYXkgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgICB2YXIgYWZ0ZXIgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcbiAgICAgIGlmIChpaSA9PT0gaWR4KSB7XG4gICAgICAgIG5ld0FycmF5W2lpXSA9IHZhbDtcbiAgICAgICAgYWZ0ZXIgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpY2VPdXQoYXJyYXksIGlkeCwgY2FuRWRpdCkge1xuICAgIHZhciBuZXdMZW4gPSBhcnJheS5sZW5ndGggLSAxO1xuICAgIGlmIChjYW5FZGl0ICYmIGlkeCA9PT0gbmV3TGVuKSB7XG4gICAgICBhcnJheS5wb3AoKTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgdmFyIG5ld0FycmF5ID0gbmV3IEFycmF5KG5ld0xlbik7XG4gICAgdmFyIGFmdGVyID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbmV3TGVuOyBpaSsrKSB7XG4gICAgICBpZiAoaWkgPT09IGlkeCkge1xuICAgICAgICBhZnRlciA9IDE7XG4gICAgICB9XG4gICAgICBuZXdBcnJheVtpaV0gPSBhcnJheVtpaSArIGFmdGVyXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgdmFyIE1BWF9BUlJBWV9NQVBfU0laRSA9IFNJWkUgLyA0O1xuICB2YXIgTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUgPSBTSVpFIC8gMjtcbiAgdmFyIE1JTl9IQVNIX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG5cbiAgY3JlYXRlQ2xhc3MoTGlzdCwgSW5kZXhlZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIExpc3QodmFsdWUpIHtcbiAgICAgIHZhciBlbXB0eSA9IGVtcHR5TGlzdCgpO1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgICAgfVxuICAgICAgaWYgKGlzTGlzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgdmFyIHNpemUgPSBpdGVyLnNpemU7XG4gICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgICB9XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZShzaXplKTtcbiAgICAgIGlmIChzaXplID4gMCAmJiBzaXplIDwgU0laRSkge1xuICAgICAgICByZXR1cm4gbWFrZUxpc3QoMCwgc2l6ZSwgU0hJRlQsIG51bGwsIG5ldyBWTm9kZShpdGVyLnRvQXJyYXkoKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5LndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcbiAgICAgICAgbGlzdC5zZXRTaXplKHNpemUpO1xuICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaSkgIHtyZXR1cm4gbGlzdC5zZXQoaSwgdil9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIExpc3Qub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnTGlzdCBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIExpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLnNpemUpIHtcbiAgICAgICAgaW5kZXggKz0gdGhpcy5fb3JpZ2luO1xuICAgICAgICB2YXIgbm9kZSA9IGxpc3ROb2RlRm9yKHRoaXMsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5hcnJheVtpbmRleCAmIE1BU0tdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgTGlzdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdXBkYXRlTGlzdCh0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuICF0aGlzLmhhcyhpbmRleCkgPyB0aGlzIDpcbiAgICAgICAgaW5kZXggPT09IDAgPyB0aGlzLnNoaWZ0KCkgOlxuICAgICAgICBpbmRleCA9PT0gdGhpcy5zaXplIC0gMSA/IHRoaXMucG9wKCkgOlxuICAgICAgICB0aGlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKGluZGV4LCAwLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX29yaWdpbiA9IHRoaXMuX2NhcGFjaXR5ID0gMDtcbiAgICAgICAgdGhpcy5fbGV2ZWwgPSBTSElGVDtcbiAgICAgICAgdGhpcy5fcm9vdCA9IHRoaXMuX3RhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eUxpc3QoKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgb2xkU2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcbiAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAwLCBvbGRTaXplICsgdmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB2YWx1ZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgbGlzdC5zZXQob2xkU2l6ZSArIGlpLCB2YWx1ZXNbaWldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMCwgLTEpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcbiAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAtdmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB2YWx1ZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgbGlzdC5zZXQoaWksIHZhbHVlc1tpaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKHRoaXMsIDEpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICAgICAgcmV0dXJuIG1lcmdlSW50b0xpc3RXaXRoKHRoaXMsIHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgbWVyZ2VyLCBpdGVycyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLm1lcmdlRGVlcCA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICAgICAgcmV0dXJuIG1lcmdlSW50b0xpc3RXaXRoKHRoaXMsIGRlZXBNZXJnZXIsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBkZWVwTWVyZ2VyV2l0aChtZXJnZXIpLCBpdGVycyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnNldFNpemUgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCBzaXplKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBJdGVyYXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKFxuICAgICAgICB0aGlzLFxuICAgICAgICByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpLFxuICAgICAgICByZXNvbHZlRW5kKGVuZCwgc2l6ZSlcbiAgICAgICk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlcyA9IGl0ZXJhdGVMaXN0KHRoaXMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IERPTkUgP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGluZGV4KyssIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZXMgPSBpdGVyYXRlTGlzdCh0aGlzLCByZXZlcnNlKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlICgodmFsdWUgPSB2YWx1ZXMoKSkgIT09IERPTkUpIHtcbiAgICAgICAgaWYgKGZuKHZhbHVlLCBpbmRleCsrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZUxpc3QodGhpcy5fb3JpZ2luLCB0aGlzLl9jYXBhY2l0eSwgdGhpcy5fbGV2ZWwsIHRoaXMuX3Jvb3QsIHRoaXMuX3RhaWwsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNMaXN0KG1heWJlTGlzdCkge1xuICAgIHJldHVybiAhIShtYXliZUxpc3QgJiYgbWF5YmVMaXN0W0lTX0xJU1RfU0VOVElORUxdKTtcbiAgfVxuXG4gIExpc3QuaXNMaXN0ID0gaXNMaXN0O1xuXG4gIHZhciBJU19MSVNUX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTElTVF9fQEAnO1xuXG4gIHZhciBMaXN0UHJvdG90eXBlID0gTGlzdC5wcm90b3R5cGU7XG4gIExpc3RQcm90b3R5cGVbSVNfTElTVF9TRU5USU5FTF0gPSB0cnVlO1xuICBMaXN0UHJvdG90eXBlW0RFTEVURV0gPSBMaXN0UHJvdG90eXBlLnJlbW92ZTtcbiAgTGlzdFByb3RvdHlwZS5zZXRJbiA9IE1hcFByb3RvdHlwZS5zZXRJbjtcbiAgTGlzdFByb3RvdHlwZS5kZWxldGVJbiA9XG4gIExpc3RQcm90b3R5cGUucmVtb3ZlSW4gPSBNYXBQcm90b3R5cGUucmVtb3ZlSW47XG4gIExpc3RQcm90b3R5cGUudXBkYXRlID0gTWFwUHJvdG90eXBlLnVwZGF0ZTtcbiAgTGlzdFByb3RvdHlwZS51cGRhdGVJbiA9IE1hcFByb3RvdHlwZS51cGRhdGVJbjtcbiAgTGlzdFByb3RvdHlwZS5tZXJnZUluID0gTWFwUHJvdG90eXBlLm1lcmdlSW47XG4gIExpc3RQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwSW47XG4gIExpc3RQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuICBMaXN0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIExpc3RQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG4gIExpc3RQcm90b3R5cGUud2FzQWx0ZXJlZCA9IE1hcFByb3RvdHlwZS53YXNBbHRlcmVkO1xuXG5cblxuICAgIGZ1bmN0aW9uIFZOb2RlKGFycmF5LCBvd25lcklEKSB7XG4gICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHNlZW1zIGxpa2UgdGhlc2UgbWV0aG9kcyBhcmUgdmVyeSBzaW1pbGFyXG5cbiAgICBWTm9kZS5wcm90b3R5cGUucmVtb3ZlQmVmb3JlID0gZnVuY3Rpb24ob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IDAgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgb3JpZ2luSW5kZXggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgICBpZiAob3JpZ2luSW5kZXggPj0gdGhpcy5hcnJheS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWTm9kZShbXSwgb3duZXJJRCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVtb3ZpbmdGaXJzdCA9IG9yaWdpbkluZGV4ID09PSAwO1xuICAgICAgdmFyIG5ld0NoaWxkO1xuICAgICAgaWYgKGxldmVsID4gMCkge1xuICAgICAgICB2YXIgb2xkQ2hpbGQgPSB0aGlzLmFycmF5W29yaWdpbkluZGV4XTtcbiAgICAgICAgbmV3Q2hpbGQgPSBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVCZWZvcmUob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuICAgICAgICBpZiAobmV3Q2hpbGQgPT09IG9sZENoaWxkICYmIHJlbW92aW5nRmlyc3QpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlbW92aW5nRmlyc3QgJiYgIW5ld0NoaWxkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIGVkaXRhYmxlID0gZWRpdGFibGVWTm9kZSh0aGlzLCBvd25lcklEKTtcbiAgICAgIGlmICghcmVtb3ZpbmdGaXJzdCkge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgb3JpZ2luSW5kZXg7IGlpKyspIHtcbiAgICAgICAgICBlZGl0YWJsZS5hcnJheVtpaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXdDaGlsZCkge1xuICAgICAgICBlZGl0YWJsZS5hcnJheVtvcmlnaW5JbmRleF0gPSBuZXdDaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlZGl0YWJsZTtcbiAgICB9O1xuXG4gICAgVk5vZGUucHJvdG90eXBlLnJlbW92ZUFmdGVyID0gZnVuY3Rpb24ob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IChsZXZlbCA/IDEgPDwgbGV2ZWwgOiAwKSB8fCB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBzaXplSW5kZXggPSAoKGluZGV4IC0gMSkgPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgICBpZiAoc2l6ZUluZGV4ID49IHRoaXMuYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Q2hpbGQ7XG4gICAgICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgICAgIHZhciBvbGRDaGlsZCA9IHRoaXMuYXJyYXlbc2l6ZUluZGV4XTtcbiAgICAgICAgbmV3Q2hpbGQgPSBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVBZnRlcihvd25lcklELCBsZXZlbCAtIFNISUZULCBpbmRleCk7XG4gICAgICAgIGlmIChuZXdDaGlsZCA9PT0gb2xkQ2hpbGQgJiYgc2l6ZUluZGV4ID09PSB0aGlzLmFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuICAgICAgZWRpdGFibGUuYXJyYXkuc3BsaWNlKHNpemVJbmRleCArIDEpO1xuICAgICAgaWYgKG5ld0NoaWxkKSB7XG4gICAgICAgIGVkaXRhYmxlLmFycmF5W3NpemVJbmRleF0gPSBuZXdDaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlZGl0YWJsZTtcbiAgICB9O1xuXG5cblxuICB2YXIgRE9ORSA9IHt9O1xuXG4gIGZ1bmN0aW9uIGl0ZXJhdGVMaXN0KGxpc3QsIHJldmVyc2UpIHtcbiAgICB2YXIgbGVmdCA9IGxpc3QuX29yaWdpbjtcbiAgICB2YXIgcmlnaHQgPSBsaXN0Ll9jYXBhY2l0eTtcbiAgICB2YXIgdGFpbFBvcyA9IGdldFRhaWxPZmZzZXQocmlnaHQpO1xuICAgIHZhciB0YWlsID0gbGlzdC5fdGFpbDtcblxuICAgIHJldHVybiBpdGVyYXRlTm9kZU9yTGVhZihsaXN0Ll9yb290LCBsaXN0Ll9sZXZlbCwgMCk7XG5cbiAgICBmdW5jdGlvbiBpdGVyYXRlTm9kZU9yTGVhZihub2RlLCBsZXZlbCwgb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gbGV2ZWwgPT09IDAgP1xuICAgICAgICBpdGVyYXRlTGVhZihub2RlLCBvZmZzZXQpIDpcbiAgICAgICAgaXRlcmF0ZU5vZGUobm9kZSwgbGV2ZWwsIG9mZnNldCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXRlcmF0ZUxlYWYobm9kZSwgb2Zmc2V0KSB7XG4gICAgICB2YXIgYXJyYXkgPSBvZmZzZXQgPT09IHRhaWxQb3MgPyB0YWlsICYmIHRhaWwuYXJyYXkgOiBub2RlICYmIG5vZGUuYXJyYXk7XG4gICAgICB2YXIgZnJvbSA9IG9mZnNldCA+IGxlZnQgPyAwIDogbGVmdCAtIG9mZnNldDtcbiAgICAgIHZhciB0byA9IHJpZ2h0IC0gb2Zmc2V0O1xuICAgICAgaWYgKHRvID4gU0laRSkge1xuICAgICAgICB0byA9IFNJWkU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICByZXR1cm4gRE9ORTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWR4ID0gcmV2ZXJzZSA/IC0tdG8gOiBmcm9tKys7XG4gICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheVtpZHhdO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KSB7XG4gICAgICB2YXIgdmFsdWVzO1xuICAgICAgdmFyIGFycmF5ID0gbm9kZSAmJiBub2RlLmFycmF5O1xuICAgICAgdmFyIGZyb20gPSBvZmZzZXQgPiBsZWZ0ID8gMCA6IChsZWZ0IC0gb2Zmc2V0KSA+PiBsZXZlbDtcbiAgICAgIHZhciB0byA9ICgocmlnaHQgLSBvZmZzZXQpID4+IGxldmVsKSArIDE7XG4gICAgICBpZiAodG8gPiBTSVpFKSB7XG4gICAgICAgIHRvID0gU0laRTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpICB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXMoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gRE9ORSkge1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZXMgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICAgIHJldHVybiBET05FO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaWR4ID0gcmV2ZXJzZSA/IC0tdG8gOiBmcm9tKys7XG4gICAgICAgICAgdmFsdWVzID0gaXRlcmF0ZU5vZGVPckxlYWYoXG4gICAgICAgICAgICBhcnJheSAmJiBhcnJheVtpZHhdLCBsZXZlbCAtIFNISUZULCBvZmZzZXQgKyAoaWR4IDw8IGxldmVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlTGlzdChvcmlnaW4sIGNhcGFjaXR5LCBsZXZlbCwgcm9vdCwgdGFpbCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBsaXN0ID0gT2JqZWN0LmNyZWF0ZShMaXN0UHJvdG90eXBlKTtcbiAgICBsaXN0LnNpemUgPSBjYXBhY2l0eSAtIG9yaWdpbjtcbiAgICBsaXN0Ll9vcmlnaW4gPSBvcmlnaW47XG4gICAgbGlzdC5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICBsaXN0Ll9sZXZlbCA9IGxldmVsO1xuICAgIGxpc3QuX3Jvb3QgPSByb290O1xuICAgIGxpc3QuX3RhaWwgPSB0YWlsO1xuICAgIGxpc3QuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBsaXN0Ll9faGFzaCA9IGhhc2g7XG4gICAgbGlzdC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIHZhciBFTVBUWV9MSVNUO1xuICBmdW5jdGlvbiBlbXB0eUxpc3QoKSB7XG4gICAgcmV0dXJuIEVNUFRZX0xJU1QgfHwgKEVNUFRZX0xJU1QgPSBtYWtlTGlzdCgwLCAwLCBTSElGVCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTGlzdChsaXN0LCBpbmRleCwgdmFsdWUpIHtcbiAgICBpbmRleCA9IHdyYXBJbmRleChsaXN0LCBpbmRleCk7XG5cbiAgICBpZiAoaW5kZXggIT09IGluZGV4KSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPj0gbGlzdC5zaXplIHx8IGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIGxpc3Qud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBpbmRleCA8IDAgP1xuICAgICAgICAgIHNldExpc3RCb3VuZHMobGlzdCwgaW5kZXgpLnNldCgwLCB2YWx1ZSkgOlxuICAgICAgICAgIHNldExpc3RCb3VuZHMobGlzdCwgMCwgaW5kZXggKyAxKS5zZXQoaW5kZXgsIHZhbHVlKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5kZXggKz0gbGlzdC5fb3JpZ2luO1xuXG4gICAgdmFyIG5ld1RhaWwgPSBsaXN0Ll90YWlsO1xuICAgIHZhciBuZXdSb290ID0gbGlzdC5fcm9vdDtcbiAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKERJRF9BTFRFUik7XG4gICAgaWYgKGluZGV4ID49IGdldFRhaWxPZmZzZXQobGlzdC5fY2FwYWNpdHkpKSB7XG4gICAgICBuZXdUYWlsID0gdXBkYXRlVk5vZGUobmV3VGFpbCwgbGlzdC5fX293bmVySUQsIDAsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdSb290ID0gdXBkYXRlVk5vZGUobmV3Um9vdCwgbGlzdC5fX293bmVySUQsIGxpc3QuX2xldmVsLCBpbmRleCwgdmFsdWUsIGRpZEFsdGVyKTtcbiAgICB9XG5cbiAgICBpZiAoIWRpZEFsdGVyLnZhbHVlKSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBpZiAobGlzdC5fX293bmVySUQpIHtcbiAgICAgIGxpc3QuX3Jvb3QgPSBuZXdSb290O1xuICAgICAgbGlzdC5fdGFpbCA9IG5ld1RhaWw7XG4gICAgICBsaXN0Ll9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIGxpc3QuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cbiAgICByZXR1cm4gbWFrZUxpc3QobGlzdC5fb3JpZ2luLCBsaXN0Ll9jYXBhY2l0eSwgbGlzdC5fbGV2ZWwsIG5ld1Jvb3QsIG5ld1RhaWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVk5vZGUobm9kZSwgb3duZXJJRCwgbGV2ZWwsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpIHtcbiAgICB2YXIgaWR4ID0gKGluZGV4ID4+PiBsZXZlbCkgJiBNQVNLO1xuICAgIHZhciBub2RlSGFzID0gbm9kZSAmJiBpZHggPCBub2RlLmFycmF5Lmxlbmd0aDtcbiAgICBpZiAoIW5vZGVIYXMgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgdmFyIG5ld05vZGU7XG5cbiAgICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgICB2YXIgbG93ZXJOb2RlID0gbm9kZSAmJiBub2RlLmFycmF5W2lkeF07XG4gICAgICB2YXIgbmV3TG93ZXJOb2RlID0gdXBkYXRlVk5vZGUobG93ZXJOb2RlLCBvd25lcklELCBsZXZlbCAtIFNISUZULCBpbmRleCwgdmFsdWUsIGRpZEFsdGVyKTtcbiAgICAgIGlmIChuZXdMb3dlck5vZGUgPT09IGxvd2VyTm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICAgIG5ld05vZGUgPSBlZGl0YWJsZVZOb2RlKG5vZGUsIG93bmVySUQpO1xuICAgICAgbmV3Tm9kZS5hcnJheVtpZHhdID0gbmV3TG93ZXJOb2RlO1xuICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGVIYXMgJiYgbm9kZS5hcnJheVtpZHhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgU2V0UmVmKGRpZEFsdGVyKTtcblxuICAgIG5ld05vZGUgPSBlZGl0YWJsZVZOb2RlKG5vZGUsIG93bmVySUQpO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGlkeCA9PT0gbmV3Tm9kZS5hcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICBuZXdOb2RlLmFycmF5LnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld05vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBlZGl0YWJsZVZOb2RlKG5vZGUsIG93bmVySUQpIHtcbiAgICBpZiAob3duZXJJRCAmJiBub2RlICYmIG93bmVySUQgPT09IG5vZGUub3duZXJJRCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZSA/IG5vZGUuYXJyYXkuc2xpY2UoKSA6IFtdLCBvd25lcklEKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3ROb2RlRm9yKGxpc3QsIHJhd0luZGV4KSB7XG4gICAgaWYgKHJhd0luZGV4ID49IGdldFRhaWxPZmZzZXQobGlzdC5fY2FwYWNpdHkpKSB7XG4gICAgICByZXR1cm4gbGlzdC5fdGFpbDtcbiAgICB9XG4gICAgaWYgKHJhd0luZGV4IDwgMSA8PCAobGlzdC5fbGV2ZWwgKyBTSElGVCkpIHtcbiAgICAgIHZhciBub2RlID0gbGlzdC5fcm9vdDtcbiAgICAgIHZhciBsZXZlbCA9IGxpc3QuX2xldmVsO1xuICAgICAgd2hpbGUgKG5vZGUgJiYgbGV2ZWwgPiAwKSB7XG4gICAgICAgIG5vZGUgPSBub2RlLmFycmF5WyhyYXdJbmRleCA+Pj4gbGV2ZWwpICYgTUFTS107XG4gICAgICAgIGxldmVsIC09IFNISUZUO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0TGlzdEJvdW5kcyhsaXN0LCBiZWdpbiwgZW5kKSB7XG4gICAgLy8gU2FuaXRpemUgYmVnaW4gJiBlbmQgdXNpbmcgdGhpcyBzaG9ydGhhbmQgZm9yIFRvSW50MzIoYXJndW1lbnQpXG4gICAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvaW50MzJcbiAgICBpZiAoYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgYmVnaW4gPSBiZWdpbiB8IDA7XG4gICAgfVxuICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZW5kID0gZW5kIHwgMDtcbiAgICB9XG4gICAgdmFyIG93bmVyID0gbGlzdC5fX293bmVySUQgfHwgbmV3IE93bmVySUQoKTtcbiAgICB2YXIgb2xkT3JpZ2luID0gbGlzdC5fb3JpZ2luO1xuICAgIHZhciBvbGRDYXBhY2l0eSA9IGxpc3QuX2NhcGFjaXR5O1xuICAgIHZhciBuZXdPcmlnaW4gPSBvbGRPcmlnaW4gKyBiZWdpbjtcbiAgICB2YXIgbmV3Q2FwYWNpdHkgPSBlbmQgPT09IHVuZGVmaW5lZCA/IG9sZENhcGFjaXR5IDogZW5kIDwgMCA/IG9sZENhcGFjaXR5ICsgZW5kIDogb2xkT3JpZ2luICsgZW5kO1xuICAgIGlmIChuZXdPcmlnaW4gPT09IG9sZE9yaWdpbiAmJiBuZXdDYXBhY2l0eSA9PT0gb2xkQ2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIC8vIElmIGl0J3MgZ29pbmcgdG8gZW5kIGFmdGVyIGl0IHN0YXJ0cywgaXQncyBlbXB0eS5cbiAgICBpZiAobmV3T3JpZ2luID49IG5ld0NhcGFjaXR5KSB7XG4gICAgICByZXR1cm4gbGlzdC5jbGVhcigpO1xuICAgIH1cblxuICAgIHZhciBuZXdMZXZlbCA9IGxpc3QuX2xldmVsO1xuICAgIHZhciBuZXdSb290ID0gbGlzdC5fcm9vdDtcblxuICAgIC8vIE5ldyBvcmlnaW4gbWlnaHQgbmVlZCBjcmVhdGluZyBhIGhpZ2hlciByb290LlxuICAgIHZhciBvZmZzZXRTaGlmdCA9IDA7XG4gICAgd2hpbGUgKG5ld09yaWdpbiArIG9mZnNldFNoaWZ0IDwgMCkge1xuICAgICAgbmV3Um9vdCA9IG5ldyBWTm9kZShuZXdSb290ICYmIG5ld1Jvb3QuYXJyYXkubGVuZ3RoID8gW3VuZGVmaW5lZCwgbmV3Um9vdF0gOiBbXSwgb3duZXIpO1xuICAgICAgbmV3TGV2ZWwgKz0gU0hJRlQ7XG4gICAgICBvZmZzZXRTaGlmdCArPSAxIDw8IG5ld0xldmVsO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0U2hpZnQpIHtcbiAgICAgIG5ld09yaWdpbiArPSBvZmZzZXRTaGlmdDtcbiAgICAgIG9sZE9yaWdpbiArPSBvZmZzZXRTaGlmdDtcbiAgICAgIG5ld0NhcGFjaXR5ICs9IG9mZnNldFNoaWZ0O1xuICAgICAgb2xkQ2FwYWNpdHkgKz0gb2Zmc2V0U2hpZnQ7XG4gICAgfVxuXG4gICAgdmFyIG9sZFRhaWxPZmZzZXQgPSBnZXRUYWlsT2Zmc2V0KG9sZENhcGFjaXR5KTtcbiAgICB2YXIgbmV3VGFpbE9mZnNldCA9IGdldFRhaWxPZmZzZXQobmV3Q2FwYWNpdHkpO1xuXG4gICAgLy8gTmV3IHNpemUgbWlnaHQgbmVlZCBjcmVhdGluZyBhIGhpZ2hlciByb290LlxuICAgIHdoaWxlIChuZXdUYWlsT2Zmc2V0ID49IDEgPDwgKG5ld0xldmVsICsgU0hJRlQpKSB7XG4gICAgICBuZXdSb290ID0gbmV3IFZOb2RlKG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbbmV3Um9vdF0gOiBbXSwgb3duZXIpO1xuICAgICAgbmV3TGV2ZWwgKz0gU0hJRlQ7XG4gICAgfVxuXG4gICAgLy8gTG9jYXRlIG9yIGNyZWF0ZSB0aGUgbmV3IHRhaWwuXG4gICAgdmFyIG9sZFRhaWwgPSBsaXN0Ll90YWlsO1xuICAgIHZhciBuZXdUYWlsID0gbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQgP1xuICAgICAgbGlzdE5vZGVGb3IobGlzdCwgbmV3Q2FwYWNpdHkgLSAxKSA6XG4gICAgICBuZXdUYWlsT2Zmc2V0ID4gb2xkVGFpbE9mZnNldCA/IG5ldyBWTm9kZShbXSwgb3duZXIpIDogb2xkVGFpbDtcblxuICAgIC8vIE1lcmdlIFRhaWwgaW50byB0cmVlLlxuICAgIGlmIChvbGRUYWlsICYmIG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0ICYmIG5ld09yaWdpbiA8IG9sZENhcGFjaXR5ICYmIG9sZFRhaWwuYXJyYXkubGVuZ3RoKSB7XG4gICAgICBuZXdSb290ID0gZWRpdGFibGVWTm9kZShuZXdSb290LCBvd25lcik7XG4gICAgICB2YXIgbm9kZSA9IG5ld1Jvb3Q7XG4gICAgICBmb3IgKHZhciBsZXZlbCA9IG5ld0xldmVsOyBsZXZlbCA+IFNISUZUOyBsZXZlbCAtPSBTSElGVCkge1xuICAgICAgICB2YXIgaWR4ID0gKG9sZFRhaWxPZmZzZXQgPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgICAgIG5vZGUgPSBub2RlLmFycmF5W2lkeF0gPSBlZGl0YWJsZVZOb2RlKG5vZGUuYXJyYXlbaWR4XSwgb3duZXIpO1xuICAgICAgfVxuICAgICAgbm9kZS5hcnJheVsob2xkVGFpbE9mZnNldCA+Pj4gU0hJRlQpICYgTUFTS10gPSBvbGRUYWlsO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBzaXplIGhhcyBiZWVuIHJlZHVjZWQsIHRoZXJlJ3MgYSBjaGFuY2UgdGhlIHRhaWwgbmVlZHMgdG8gYmUgdHJpbW1lZC5cbiAgICBpZiAobmV3Q2FwYWNpdHkgPCBvbGRDYXBhY2l0eSkge1xuICAgICAgbmV3VGFpbCA9IG5ld1RhaWwgJiYgbmV3VGFpbC5yZW1vdmVBZnRlcihvd25lciwgMCwgbmV3Q2FwYWNpdHkpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBuZXcgb3JpZ2luIGlzIHdpdGhpbiB0aGUgdGFpbCwgdGhlbiB3ZSBkbyBub3QgbmVlZCBhIHJvb3QuXG4gICAgaWYgKG5ld09yaWdpbiA+PSBuZXdUYWlsT2Zmc2V0KSB7XG4gICAgICBuZXdPcmlnaW4gLT0gbmV3VGFpbE9mZnNldDtcbiAgICAgIG5ld0NhcGFjaXR5IC09IG5ld1RhaWxPZmZzZXQ7XG4gICAgICBuZXdMZXZlbCA9IFNISUZUO1xuICAgICAgbmV3Um9vdCA9IG51bGw7XG4gICAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUJlZm9yZShvd25lciwgMCwgbmV3T3JpZ2luKTtcblxuICAgIC8vIE90aGVyd2lzZSwgaWYgdGhlIHJvb3QgaGFzIGJlZW4gdHJpbW1lZCwgZ2FyYmFnZSBjb2xsZWN0LlxuICAgIH0gZWxzZSBpZiAobmV3T3JpZ2luID4gb2xkT3JpZ2luIHx8IG5ld1RhaWxPZmZzZXQgPCBvbGRUYWlsT2Zmc2V0KSB7XG4gICAgICBvZmZzZXRTaGlmdCA9IDA7XG5cbiAgICAgIC8vIElkZW50aWZ5IHRoZSBuZXcgdG9wIHJvb3Qgbm9kZSBvZiB0aGUgc3VidHJlZSBvZiB0aGUgb2xkIHJvb3QuXG4gICAgICB3aGlsZSAobmV3Um9vdCkge1xuICAgICAgICB2YXIgYmVnaW5JbmRleCA9IChuZXdPcmlnaW4gPj4+IG5ld0xldmVsKSAmIE1BU0s7XG4gICAgICAgIGlmIChiZWdpbkluZGV4ICE9PSAobmV3VGFpbE9mZnNldCA+Pj4gbmV3TGV2ZWwpICYgTUFTSykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiZWdpbkluZGV4KSB7XG4gICAgICAgICAgb2Zmc2V0U2hpZnQgKz0gKDEgPDwgbmV3TGV2ZWwpICogYmVnaW5JbmRleDtcbiAgICAgICAgfVxuICAgICAgICBuZXdMZXZlbCAtPSBTSElGVDtcbiAgICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QuYXJyYXlbYmVnaW5JbmRleF07XG4gICAgICB9XG5cbiAgICAgIC8vIFRyaW0gdGhlIG5ldyBzaWRlcyBvZiB0aGUgbmV3IHJvb3QuXG4gICAgICBpZiAobmV3Um9vdCAmJiBuZXdPcmlnaW4gPiBvbGRPcmlnaW4pIHtcbiAgICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QucmVtb3ZlQmVmb3JlKG93bmVyLCBuZXdMZXZlbCwgbmV3T3JpZ2luIC0gb2Zmc2V0U2hpZnQpO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1Jvb3QgJiYgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcbiAgICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QucmVtb3ZlQWZ0ZXIob3duZXIsIG5ld0xldmVsLCBuZXdUYWlsT2Zmc2V0IC0gb2Zmc2V0U2hpZnQpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldFNoaWZ0KSB7XG4gICAgICAgIG5ld09yaWdpbiAtPSBvZmZzZXRTaGlmdDtcbiAgICAgICAgbmV3Q2FwYWNpdHkgLT0gb2Zmc2V0U2hpZnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxpc3QuX19vd25lcklEKSB7XG4gICAgICBsaXN0LnNpemUgPSBuZXdDYXBhY2l0eSAtIG5ld09yaWdpbjtcbiAgICAgIGxpc3QuX29yaWdpbiA9IG5ld09yaWdpbjtcbiAgICAgIGxpc3QuX2NhcGFjaXR5ID0gbmV3Q2FwYWNpdHk7XG4gICAgICBsaXN0Ll9sZXZlbCA9IG5ld0xldmVsO1xuICAgICAgbGlzdC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgICBsaXN0Ll90YWlsID0gbmV3VGFpbDtcbiAgICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuICAgIHJldHVybiBtYWtlTGlzdChuZXdPcmlnaW4sIG5ld0NhcGFjaXR5LCBuZXdMZXZlbCwgbmV3Um9vdCwgbmV3VGFpbCk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUludG9MaXN0V2l0aChsaXN0LCBtZXJnZXIsIGl0ZXJhYmxlcykge1xuICAgIHZhciBpdGVycyA9IFtdO1xuICAgIHZhciBtYXhTaXplID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcmFibGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVzW2lpXTtcbiAgICAgIHZhciBpdGVyID0gSW5kZXhlZEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgIGlmIChpdGVyLnNpemUgPiBtYXhTaXplKSB7XG4gICAgICAgIG1heFNpemUgPSBpdGVyLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoIWlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgIGl0ZXIgPSBpdGVyLm1hcChmdW5jdGlvbih2ICkge3JldHVybiBmcm9tSlModil9KTtcbiAgICAgIH1cbiAgICAgIGl0ZXJzLnB1c2goaXRlcik7XG4gICAgfVxuICAgIGlmIChtYXhTaXplID4gbGlzdC5zaXplKSB7XG4gICAgICBsaXN0ID0gbGlzdC5zZXRTaXplKG1heFNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgobGlzdCwgbWVyZ2VyLCBpdGVycyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYWlsT2Zmc2V0KHNpemUpIHtcbiAgICByZXR1cm4gc2l6ZSA8IFNJWkUgPyAwIDogKCgoc2l6ZSAtIDEpID4+PiBTSElGVCkgPDwgU0hJRlQpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoT3JkZXJlZE1hcCwgTWFwKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBPcmRlcmVkTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5T3JkZXJlZE1hcCgpIDpcbiAgICAgICAgaXNPcmRlcmVkTWFwKHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlPcmRlcmVkTWFwKCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihtYXAgKSB7XG4gICAgICAgICAgdmFyIGl0ZXIgPSBLZXllZEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2LCBrKSAge3JldHVybiBtYXAuc2V0KGssIHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIE9yZGVyZWRNYXAub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnT3JkZXJlZE1hcCB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLl9tYXAuZ2V0KGspO1xuICAgICAgcmV0dXJuIGluZGV4ICE9PSB1bmRlZmluZWQgPyB0aGlzLl9saXN0LmdldChpbmRleClbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX21hcC5jbGVhcigpO1xuICAgICAgICB0aGlzLl9saXN0LmNsZWFyKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5T3JkZXJlZE1hcCgpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrLCB2KSB7XG4gICAgICByZXR1cm4gdXBkYXRlT3JkZXJlZE1hcCh0aGlzLCBrLCB2KTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaykge1xuICAgICAgcmV0dXJuIHVwZGF0ZU9yZGVyZWRNYXAodGhpcywgaywgTk9UX1NFVCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLndhc0FsdGVyZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAud2FzQWx0ZXJlZCgpIHx8IHRoaXMuX2xpc3Qud2FzQWx0ZXJlZCgpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3QuX19pdGVyYXRlKFxuICAgICAgICBmdW5jdGlvbihlbnRyeSApIHtyZXR1cm4gZW50cnkgJiYgZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDApfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saXN0LmZyb21FbnRyeVNlcSgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgbmV3TWFwID0gdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgICB2YXIgbmV3TGlzdCA9IHRoaXMuX2xpc3QuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICAgIGlmICghb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcbiAgICAgICAgdGhpcy5fbGlzdCA9IG5ld0xpc3Q7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VPcmRlcmVkTWFwKG5ld01hcCwgbmV3TGlzdCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc09yZGVyZWRNYXAobWF5YmVPcmRlcmVkTWFwKSB7XG4gICAgcmV0dXJuIGlzTWFwKG1heWJlT3JkZXJlZE1hcCkgJiYgaXNPcmRlcmVkKG1heWJlT3JkZXJlZE1hcCk7XG4gIH1cblxuICBPcmRlcmVkTWFwLmlzT3JkZXJlZE1hcCA9IGlzT3JkZXJlZE1hcDtcblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG4gIE9yZGVyZWRNYXAucHJvdG90eXBlW0RFTEVURV0gPSBPcmRlcmVkTWFwLnByb3RvdHlwZS5yZW1vdmU7XG5cblxuXG4gIGZ1bmN0aW9uIG1ha2VPcmRlcmVkTWFwKG1hcCwgbGlzdCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBvbWFwID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkTWFwLnByb3RvdHlwZSk7XG4gICAgb21hcC5zaXplID0gbWFwID8gbWFwLnNpemUgOiAwO1xuICAgIG9tYXAuX21hcCA9IG1hcDtcbiAgICBvbWFwLl9saXN0ID0gbGlzdDtcbiAgICBvbWFwLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgb21hcC5fX2hhc2ggPSBoYXNoO1xuICAgIHJldHVybiBvbWFwO1xuICB9XG5cbiAgdmFyIEVNUFRZX09SREVSRURfTUFQO1xuICBmdW5jdGlvbiBlbXB0eU9yZGVyZWRNYXAoKSB7XG4gICAgcmV0dXJuIEVNUFRZX09SREVSRURfTUFQIHx8IChFTVBUWV9PUkRFUkVEX01BUCA9IG1ha2VPcmRlcmVkTWFwKGVtcHR5TWFwKCksIGVtcHR5TGlzdCgpKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVPcmRlcmVkTWFwKG9tYXAsIGssIHYpIHtcbiAgICB2YXIgbWFwID0gb21hcC5fbWFwO1xuICAgIHZhciBsaXN0ID0gb21hcC5fbGlzdDtcbiAgICB2YXIgaSA9IG1hcC5nZXQoayk7XG4gICAgdmFyIGhhcyA9IGkgIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgbmV3TWFwO1xuICAgIHZhciBuZXdMaXN0O1xuICAgIGlmICh2ID09PSBOT1RfU0VUKSB7IC8vIHJlbW92ZWRcbiAgICAgIGlmICghaGFzKSB7XG4gICAgICAgIHJldHVybiBvbWFwO1xuICAgICAgfVxuICAgICAgaWYgKGxpc3Quc2l6ZSA+PSBTSVpFICYmIGxpc3Quc2l6ZSA+PSBtYXAuc2l6ZSAqIDIpIHtcbiAgICAgICAgbmV3TGlzdCA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uKGVudHJ5LCBpZHgpICB7cmV0dXJuIGVudHJ5ICE9PSB1bmRlZmluZWQgJiYgaSAhPT0gaWR4fSk7XG4gICAgICAgIG5ld01hcCA9IG5ld0xpc3QudG9LZXllZFNlcSgpLm1hcChmdW5jdGlvbihlbnRyeSApIHtyZXR1cm4gZW50cnlbMF19KS5mbGlwKCkudG9NYXAoKTtcbiAgICAgICAgaWYgKG9tYXAuX19vd25lcklEKSB7XG4gICAgICAgICAgbmV3TWFwLl9fb3duZXJJRCA9IG5ld0xpc3QuX19vd25lcklEID0gb21hcC5fX293bmVySUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld01hcCA9IG1hcC5yZW1vdmUoayk7XG4gICAgICAgIG5ld0xpc3QgPSBpID09PSBsaXN0LnNpemUgLSAxID8gbGlzdC5wb3AoKSA6IGxpc3Quc2V0KGksIHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMpIHtcbiAgICAgICAgaWYgKHYgPT09IGxpc3QuZ2V0KGkpWzFdKSB7XG4gICAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgICAgIH1cbiAgICAgICAgbmV3TWFwID0gbWFwO1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5zZXQoaSwgW2ssIHZdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld01hcCA9IG1hcC5zZXQoaywgbGlzdC5zaXplKTtcbiAgICAgICAgbmV3TGlzdCA9IGxpc3Quc2V0KGxpc3Quc2l6ZSwgW2ssIHZdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9tYXAuX19vd25lcklEKSB7XG4gICAgICBvbWFwLnNpemUgPSBuZXdNYXAuc2l6ZTtcbiAgICAgIG9tYXAuX21hcCA9IG5ld01hcDtcbiAgICAgIG9tYXAuX2xpc3QgPSBuZXdMaXN0O1xuICAgICAgb21hcC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb21hcDtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VPcmRlcmVkTWFwKG5ld01hcCwgbmV3TGlzdCk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhUb0tleWVkU2VxdWVuY2UsIEtleWVkU2VxKTtcbiAgICBmdW5jdGlvbiBUb0tleWVkU2VxdWVuY2UoaW5kZXhlZCwgdXNlS2V5cykge1xuICAgICAgdGhpcy5faXRlciA9IGluZGV4ZWQ7XG4gICAgICB0aGlzLl91c2VLZXlzID0gdXNlS2V5cztcbiAgICAgIHRoaXMuc2l6ZSA9IGluZGV4ZWQuc2l6ZTtcbiAgICB9XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLmdldChrZXksIG5vdFNldFZhbHVlKTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLmhhcyhrZXkpO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci52YWx1ZVNlcSgpO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbigpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciByZXZlcnNlZFNlcXVlbmNlID0gcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSk7XG4gICAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcbiAgICAgICAgcmV2ZXJzZWRTZXF1ZW5jZS52YWx1ZVNlcSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gdGhpcyQwLl9pdGVyLnRvU2VxKCkucmV2ZXJzZSgpfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIG1hcHBlZFNlcXVlbmNlID0gbWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpO1xuICAgICAgaWYgKCF0aGlzLl91c2VLZXlzKSB7XG4gICAgICAgIG1hcHBlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSAge3JldHVybiB0aGlzJDAuX2l0ZXIudG9TZXEoKS5tYXAobWFwcGVyLCBjb250ZXh0KX07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFwcGVkU2VxdWVuY2U7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpaTtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShcbiAgICAgICAgdGhpcy5fdXNlS2V5cyA/XG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZm4odiwgaywgdGhpcyQwKX0gOlxuICAgICAgICAgICgoaWkgPSByZXZlcnNlID8gcmVzb2x2ZVNpemUodGhpcykgOiAwKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZuKHYsIHJldmVyc2UgPyAtLWlpIDogaWkrKywgdGhpcyQwKX0pLFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAodGhpcy5fdXNlS2V5cykge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpaSA9IHJldmVyc2UgPyByZXNvbHZlU2l6ZSh0aGlzKSA6IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiBzdGVwLmRvbmUgPyBzdGVwIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHJldmVyc2UgPyAtLWlpIDogaWkrKywgc3RlcC52YWx1ZSwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cbiAgY3JlYXRlQ2xhc3MoVG9JbmRleGVkU2VxdWVuY2UsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIFRvSW5kZXhlZFNlcXVlbmNlKGl0ZXIpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBpdGVyO1xuICAgICAgdGhpcy5zaXplID0gaXRlci5zaXplO1xuICAgIH1cblxuICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZuKHYsIGl0ZXJhdGlvbnMrKywgdGhpcyQwKX0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiBzdGVwLmRvbmUgPyBzdGVwIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSwgc3RlcClcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKFRvU2V0U2VxdWVuY2UsIFNldFNlcSk7XG4gICAgZnVuY3Rpb24gVG9TZXRTZXF1ZW5jZShpdGVyKSB7XG4gICAgICB0aGlzLl9pdGVyID0gaXRlcjtcbiAgICAgIHRoaXMuc2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICB9XG5cbiAgICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLmluY2x1ZGVzKGtleSk7XG4gICAgfTtcblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgdiwgdGhpcyQwKX0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgc3RlcC52YWx1ZSwgc3RlcC52YWx1ZSwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhGcm9tRW50cmllc1NlcXVlbmNlLCBLZXllZFNlcSk7XG4gICAgZnVuY3Rpb24gRnJvbUVudHJpZXNTZXF1ZW5jZShlbnRyaWVzKSB7XG4gICAgICB0aGlzLl9pdGVyID0gZW50cmllcztcbiAgICAgIHRoaXMuc2l6ZSA9IGVudHJpZXMuc2l6ZTtcbiAgICB9XG5cbiAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5lbnRyeVNlcSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIudG9TZXEoKTtcbiAgICB9O1xuXG4gICAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbihlbnRyeSApIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgZW50cnkgZXhpc3RzIGZpcnN0IHNvIGFycmF5IGFjY2VzcyBkb2Vzbid0IHRocm93IGZvciBob2xlc1xuICAgICAgICAvLyBpbiB0aGUgcGFyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFsaWRhdGVFbnRyeShlbnRyeSk7XG4gICAgICAgICAgdmFyIGluZGV4ZWRJdGVyYWJsZSA9IGlzSXRlcmFibGUoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBmbihcbiAgICAgICAgICAgIGluZGV4ZWRJdGVyYWJsZSA/IGVudHJ5LmdldCgxKSA6IGVudHJ5WzFdLFxuICAgICAgICAgICAgaW5kZXhlZEl0ZXJhYmxlID8gZW50cnkuZ2V0KDApIDogZW50cnlbMF0sXG4gICAgICAgICAgICB0aGlzJDBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgICAgLy8gaW4gdGhlIHBhcmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIHZhciBpbmRleGVkSXRlcmFibGUgPSBpc0l0ZXJhYmxlKGVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICBpbmRleGVkSXRlcmFibGUgPyBlbnRyeS5nZXQoMCkgOiBlbnRyeVswXSxcbiAgICAgICAgICAgICAgaW5kZXhlZEl0ZXJhYmxlID8gZW50cnkuZ2V0KDEpIDogZW50cnlbMV0sXG4gICAgICAgICAgICAgIHN0ZXBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG5cbiAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICAgIGNhY2hlUmVzdWx0VGhyb3VnaDtcblxuXG4gIGZ1bmN0aW9uIGZsaXBGYWN0b3J5KGl0ZXJhYmxlKSB7XG4gICAgdmFyIGZsaXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgZmxpcFNlcXVlbmNlLl9pdGVyID0gaXRlcmFibGU7XG4gICAgZmxpcFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplO1xuICAgIGZsaXBTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZX07XG4gICAgZmxpcFNlcXVlbmNlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmV2ZXJzZWRTZXF1ZW5jZSA9IGl0ZXJhYmxlLnJldmVyc2UuYXBwbHkodGhpcyk7IC8vIHN1cGVyLnJldmVyc2UoKVxuICAgICAgcmV2ZXJzZWRTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS5yZXZlcnNlKCl9O1xuICAgICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gICAgfTtcbiAgICBmbGlwU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5pbmNsdWRlcyhrZXkpfTtcbiAgICBmbGlwU2VxdWVuY2UuaW5jbHVkZXMgPSBmdW5jdGlvbihrZXkgKSB7cmV0dXJuIGl0ZXJhYmxlLmhhcyhrZXkpfTtcbiAgICBmbGlwU2VxdWVuY2UuY2FjaGVSZXN1bHQgPSBjYWNoZVJlc3VsdFRocm91Z2g7XG4gICAgZmxpcFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZuKGssIHYsIHRoaXMkMCkgIT09IGZhbHNlfSwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmICghc3RlcC5kb25lKSB7XG4gICAgICAgICAgICB2YXIgayA9IHN0ZXAudmFsdWVbMF07XG4gICAgICAgICAgICBzdGVwLnZhbHVlWzBdID0gc3RlcC52YWx1ZVsxXTtcbiAgICAgICAgICAgIHN0ZXAudmFsdWVbMV0gPSBrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRvcihcbiAgICAgICAgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMgPyBJVEVSQVRFX0tFWVMgOiBJVEVSQVRFX1ZBTFVFUyxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGZsaXBTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gbWFwRmFjdG9yeShpdGVyYWJsZSwgbWFwcGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIG1hcHBlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBtYXBwZWRTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcbiAgICBtYXBwZWRTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKSB7cmV0dXJuIGl0ZXJhYmxlLmhhcyhrZXkpfTtcbiAgICBtYXBwZWRTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSAge1xuICAgICAgdmFyIHYgPSBpdGVyYWJsZS5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICAgIHJldHVybiB2ID09PSBOT1RfU0VUID9cbiAgICAgICAgbm90U2V0VmFsdWUgOlxuICAgICAgICBtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKTtcbiAgICB9O1xuICAgIG1hcHBlZFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRlKFxuICAgICAgICBmdW5jdGlvbih2LCBrLCBjKSAge3JldHVybiBmbihtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBjKSwgaywgdGhpcyQwKSAhPT0gZmFsc2V9LFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH1cbiAgICBtYXBwZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZShcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBtYXBwZXIuY2FsbChjb250ZXh0LCBlbnRyeVsxXSwga2V5LCBpdGVyYWJsZSksXG4gICAgICAgICAgc3RlcFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gcmV2ZXJzZUZhY3RvcnkoaXRlcmFibGUsIHVzZUtleXMpIHtcbiAgICB2YXIgcmV2ZXJzZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5faXRlciA9IGl0ZXJhYmxlO1xuICAgIHJldmVyc2VkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZX07XG4gICAgaWYgKGl0ZXJhYmxlLmZsaXApIHtcbiAgICAgIHJldmVyc2VkU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZsaXBTZXF1ZW5jZSA9IGZsaXBGYWN0b3J5KGl0ZXJhYmxlKTtcbiAgICAgICAgZmxpcFNlcXVlbmNlLnJldmVyc2UgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlLmZsaXAoKX07XG4gICAgICAgIHJldHVybiBmbGlwU2VxdWVuY2U7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXZlcnNlZFNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpIFxuICAgICAge3JldHVybiBpdGVyYWJsZS5nZXQodXNlS2V5cyA/IGtleSA6IC0xIC0ga2V5LCBub3RTZXRWYWx1ZSl9O1xuICAgIHJldmVyc2VkU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5IClcbiAgICAgIHtyZXR1cm4gaXRlcmFibGUuaGFzKHVzZUtleXMgPyBrZXkgOiAtMSAtIGtleSl9O1xuICAgIHJldmVyc2VkU2VxdWVuY2UuaW5jbHVkZXMgPSBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXRlcmFibGUuaW5jbHVkZXModmFsdWUpfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuICAgIHJldmVyc2VkU2VxdWVuY2UuX19pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZuKHYsIGssIHRoaXMkMCl9LCAhcmV2ZXJzZSk7XG4gICAgfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLl9faXRlcmF0b3IgPVxuICAgICAgZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkgIHtyZXR1cm4gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCAhcmV2ZXJzZSl9O1xuICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBmaWx0ZXJGYWN0b3J5KGl0ZXJhYmxlLCBwcmVkaWNhdGUsIGNvbnRleHQsIHVzZUtleXMpIHtcbiAgICB2YXIgZmlsdGVyU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGlmICh1c2VLZXlzKSB7XG4gICAgICBmaWx0ZXJTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKSB7XG4gICAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICAgIHJldHVybiB2ICE9PSBOT1RfU0VUICYmICEhcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwga2V5LCBpdGVyYWJsZSk7XG4gICAgICB9O1xuICAgICAgZmlsdGVyU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgIHtcbiAgICAgICAgdmFyIHYgPSBpdGVyYWJsZS5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICAgICAgcmV0dXJuIHYgIT09IE5PVF9TRVQgJiYgcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwga2V5LCBpdGVyYWJsZSkgP1xuICAgICAgICAgIHYgOiBub3RTZXRWYWx1ZTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZpbHRlclNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSB7XG4gICAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDApO1xuICAgICAgICB9XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgZmlsdGVyU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBlbnRyeVsxXTtcbiAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdmFsdWUsIGtleSwgaXRlcmFibGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCB1c2VLZXlzID8ga2V5IDogaXRlcmF0aW9ucysrLCB2YWx1ZSwgc3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlclNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBjb3VudEJ5RmFjdG9yeShpdGVyYWJsZSwgZ3JvdXBlciwgY29udGV4dCkge1xuICAgIHZhciBncm91cHMgPSBNYXAoKS5hc011dGFibGUoKTtcbiAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGdyb3Vwcy51cGRhdGUoXG4gICAgICAgIGdyb3VwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSksXG4gICAgICAgIDAsXG4gICAgICAgIGZ1bmN0aW9uKGEgKSB7cmV0dXJuIGEgKyAxfVxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZ3JvdXBzLmFzSW1tdXRhYmxlKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGdyb3VwQnlGYWN0b3J5KGl0ZXJhYmxlLCBncm91cGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIGlzS2V5ZWRJdGVyID0gaXNLZXllZChpdGVyYWJsZSk7XG4gICAgdmFyIGdyb3VwcyA9IChpc09yZGVyZWQoaXRlcmFibGUpID8gT3JkZXJlZE1hcCgpIDogTWFwKCkpLmFzTXV0YWJsZSgpO1xuICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgZ3JvdXBzLnVwZGF0ZShcbiAgICAgICAgZ3JvdXBlci5jYWxsKGNvbnRleHQsIHYsIGssIGl0ZXJhYmxlKSxcbiAgICAgICAgZnVuY3Rpb24oYSApIHtyZXR1cm4gKGEgPSBhIHx8IFtdLCBhLnB1c2goaXNLZXllZEl0ZXIgPyBbaywgdl0gOiB2KSwgYSl9XG4gICAgICApO1xuICAgIH0pO1xuICAgIHZhciBjb2VyY2UgPSBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKTtcbiAgICByZXR1cm4gZ3JvdXBzLm1hcChmdW5jdGlvbihhcnIgKSB7cmV0dXJuIHJlaWZ5KGl0ZXJhYmxlLCBjb2VyY2UoYXJyKSl9KTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc2xpY2VGYWN0b3J5KGl0ZXJhYmxlLCBiZWdpbiwgZW5kLCB1c2VLZXlzKSB7XG4gICAgdmFyIG9yaWdpbmFsU2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG5cbiAgICAvLyBTYW5pdGl6ZSBiZWdpbiAmIGVuZCB1c2luZyB0aGlzIHNob3J0aGFuZCBmb3IgVG9JbnQzMihhcmd1bWVudClcbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9pbnQzMlxuICAgIGlmIChiZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiZWdpbiA9IGJlZ2luIHwgMDtcbiAgICB9XG4gICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoZW5kID09PSBJbmZpbml0eSkge1xuICAgICAgICBlbmQgPSBvcmlnaW5hbFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSBlbmQgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIG9yaWdpbmFsU2l6ZSkpIHtcbiAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzb2x2ZWRCZWdpbiA9IHJlc29sdmVCZWdpbihiZWdpbiwgb3JpZ2luYWxTaXplKTtcbiAgICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgb3JpZ2luYWxTaXplKTtcblxuICAgIC8vIGJlZ2luIG9yIGVuZCB3aWxsIGJlIE5hTiBpZiB0aGV5IHdlcmUgcHJvdmlkZWQgYXMgbmVnYXRpdmUgbnVtYmVycyBhbmRcbiAgICAvLyB0aGlzIGl0ZXJhYmxlJ3Mgc2l6ZSBpcyB1bmtub3duLiBJbiB0aGF0IGNhc2UsIGNhY2hlIGZpcnN0IHNvIHRoZXJlIGlzXG4gICAgLy8gYSBrbm93biBzaXplIGFuZCB0aGVzZSBkbyBub3QgcmVzb2x2ZSB0byBOYU4uXG4gICAgaWYgKHJlc29sdmVkQmVnaW4gIT09IHJlc29sdmVkQmVnaW4gfHwgcmVzb2x2ZWRFbmQgIT09IHJlc29sdmVkRW5kKSB7XG4gICAgICByZXR1cm4gc2xpY2VGYWN0b3J5KGl0ZXJhYmxlLnRvU2VxKCkuY2FjaGVSZXN1bHQoKSwgYmVnaW4sIGVuZCwgdXNlS2V5cyk7XG4gICAgfVxuXG4gICAgLy8gTm90ZTogcmVzb2x2ZWRFbmQgaXMgdW5kZWZpbmVkIHdoZW4gdGhlIG9yaWdpbmFsIHNlcXVlbmNlJ3MgbGVuZ3RoIGlzXG4gICAgLy8gdW5rbm93biBhbmQgdGhpcyBzbGljZSBkaWQgbm90IHN1cHBseSBhbiBlbmQgYW5kIHNob3VsZCBjb250YWluIGFsbFxuICAgIC8vIGVsZW1lbnRzIGFmdGVyIHJlc29sdmVkQmVnaW4uXG4gICAgLy8gSW4gdGhhdCBjYXNlLCByZXNvbHZlZFNpemUgd2lsbCBiZSBOYU4gYW5kIHNsaWNlU2l6ZSB3aWxsIHJlbWFpbiB1bmRlZmluZWQuXG4gICAgdmFyIHJlc29sdmVkU2l6ZSA9IHJlc29sdmVkRW5kIC0gcmVzb2x2ZWRCZWdpbjtcbiAgICB2YXIgc2xpY2VTaXplO1xuICAgIGlmIChyZXNvbHZlZFNpemUgPT09IHJlc29sdmVkU2l6ZSkge1xuICAgICAgc2xpY2VTaXplID0gcmVzb2x2ZWRTaXplIDwgMCA/IDAgOiByZXNvbHZlZFNpemU7XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlU2VxID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcblxuICAgIC8vIElmIGl0ZXJhYmxlLnNpemUgaXMgdW5kZWZpbmVkLCB0aGUgc2l6ZSBvZiB0aGUgcmVhbGl6ZWQgc2xpY2VTZXEgaXNcbiAgICAvLyB1bmtub3duIGF0IHRoaXMgcG9pbnQgdW5sZXNzIHRoZSBudW1iZXIgb2YgaXRlbXMgdG8gc2xpY2UgaXMgMFxuICAgIHNsaWNlU2VxLnNpemUgPSBzbGljZVNpemUgPT09IDAgPyBzbGljZVNpemUgOiBpdGVyYWJsZS5zaXplICYmIHNsaWNlU2l6ZSB8fCB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIXVzZUtleXMgJiYgaXNTZXEoaXRlcmFibGUpICYmIHNsaWNlU2l6ZSA+PSAwKSB7XG4gICAgICBzbGljZVNlcS5nZXQgPSBmdW5jdGlvbiAoaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBzbGljZVNpemUgP1xuICAgICAgICAgIGl0ZXJhYmxlLmdldChpbmRleCArIHJlc29sdmVkQmVnaW4sIG5vdFNldFZhbHVlKSA6XG4gICAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2xpY2VTZXEuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHNsaWNlU2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBza2lwcGVkID0gMDtcbiAgICAgIHZhciBpc1NraXBwaW5nID0gdHJ1ZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgICBpZiAoIShpc1NraXBwaW5nICYmIChpc1NraXBwaW5nID0gc2tpcHBlZCsrIDwgcmVzb2x2ZWRCZWdpbikpKSB7XG4gICAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDApICE9PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICBpdGVyYXRpb25zICE9PSBzbGljZVNpemU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIHNsaWNlU2VxLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmIChzbGljZVNpemUgIT09IDAgJiYgcmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICAvLyBEb24ndCBib3RoZXIgaW5zdGFudGlhdGluZyBwYXJlbnQgaXRlcmF0b3IgaWYgdGFraW5nIDAuXG4gICAgICB2YXIgaXRlcmF0b3IgPSBzbGljZVNpemUgIT09IDAgJiYgaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIHZhciBza2lwcGVkID0gMDtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB3aGlsZSAoc2tpcHBlZCsrIDwgcmVzb2x2ZWRCZWdpbikge1xuICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKytpdGVyYXRpb25zID4gc2xpY2VTaXplKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAodXNlS2V5cyB8fCB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUykge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElURVJBVEVfS0VZUykge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMgLSAxLCB1bmRlZmluZWQsIHN0ZXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMgLSAxLCBzdGVwLnZhbHVlWzFdLCBzdGVwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNsaWNlU2VxO1xuICB9XG5cblxuICBmdW5jdGlvbiB0YWtlV2hpbGVGYWN0b3J5KGl0ZXJhYmxlLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgdGFrZVNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICB0YWtlU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpIFxuICAgICAgICB7cmV0dXJuIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpICYmICsraXRlcmF0aW9ucyAmJiBmbih2LCBrLCB0aGlzJDApfVxuICAgICAgKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgdGFrZVNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIGlmICghaXRlcmF0aW5nKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgdmFyIGsgPSBlbnRyeVswXTtcbiAgICAgICAgdmFyIHYgPSBlbnRyeVsxXTtcbiAgICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCB0aGlzJDApKSB7XG4gICAgICAgICAgaXRlcmF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gdGFrZVNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBza2lwV2hpbGVGYWN0b3J5KGl0ZXJhYmxlLCBwcmVkaWNhdGUsIGNvbnRleHQsIHVzZUtleXMpIHtcbiAgICB2YXIgc2tpcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBza2lwU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1NraXBwaW5nID0gdHJ1ZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuICAgICAgICBpZiAoIShpc1NraXBwaW5nICYmIChpc1NraXBwaW5nID0gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpKSkge1xuICAgICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgICByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIHNraXBTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgc2tpcHBpbmcgPSB0cnVlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwLCBrLCB2O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICBpZiAodXNlS2V5cyB8fCB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUykge1xuICAgICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSVRFUkFURV9LRVlTKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgdW5kZWZpbmVkLCBzdGVwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZVsxXSwgc3RlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgayA9IGVudHJ5WzBdO1xuICAgICAgICAgIHYgPSBlbnRyeVsxXTtcbiAgICAgICAgICBza2lwcGluZyAmJiAoc2tpcHBpbmcgPSBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCB0aGlzJDApKTtcbiAgICAgICAgfSB3aGlsZSAoc2tpcHBpbmcpO1xuICAgICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBrLCB2LCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHNraXBTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY29uY2F0RmFjdG9yeShpdGVyYWJsZSwgdmFsdWVzKSB7XG4gICAgdmFyIGlzS2V5ZWRJdGVyYWJsZSA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBpdGVycyA9IFtpdGVyYWJsZV0uY29uY2F0KHZhbHVlcykubWFwKGZ1bmN0aW9uKHYgKSB7XG4gICAgICBpZiAoIWlzSXRlcmFibGUodikpIHtcbiAgICAgICAgdiA9IGlzS2V5ZWRJdGVyYWJsZSA/XG4gICAgICAgICAga2V5ZWRTZXFGcm9tVmFsdWUodikgOlxuICAgICAgICAgIGluZGV4ZWRTZXFGcm9tVmFsdWUoQXJyYXkuaXNBcnJheSh2KSA/IHYgOiBbdl0pO1xuICAgICAgfSBlbHNlIGlmIChpc0tleWVkSXRlcmFibGUpIHtcbiAgICAgICAgdiA9IEtleWVkSXRlcmFibGUodik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdjtcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24odiApIHtyZXR1cm4gdi5zaXplICE9PSAwfSk7XG5cbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgfVxuXG4gICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIHNpbmdsZXRvbiA9IGl0ZXJzWzBdO1xuICAgICAgaWYgKHNpbmdsZXRvbiA9PT0gaXRlcmFibGUgfHxcbiAgICAgICAgICBpc0tleWVkSXRlcmFibGUgJiYgaXNLZXllZChzaW5nbGV0b24pIHx8XG4gICAgICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSAmJiBpc0luZGV4ZWQoc2luZ2xldG9uKSkge1xuICAgICAgICByZXR1cm4gc2luZ2xldG9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjb25jYXRTZXEgPSBuZXcgQXJyYXlTZXEoaXRlcnMpO1xuICAgIGlmIChpc0tleWVkSXRlcmFibGUpIHtcbiAgICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b0tleWVkU2VxKCk7XG4gICAgfSBlbHNlIGlmICghaXNJbmRleGVkKGl0ZXJhYmxlKSkge1xuICAgICAgY29uY2F0U2VxID0gY29uY2F0U2VxLnRvU2V0U2VxKCk7XG4gICAgfVxuICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS5mbGF0dGVuKHRydWUpO1xuICAgIGNvbmNhdFNlcS5zaXplID0gaXRlcnMucmVkdWNlKFxuICAgICAgZnVuY3Rpb24oc3VtLCBzZXEpICB7XG4gICAgICAgIGlmIChzdW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBzaXplID0gc2VxLnNpemU7XG4gICAgICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1bSArIHNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgMFxuICAgICk7XG4gICAgcmV0dXJuIGNvbmNhdFNlcTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZmxhdHRlbkZhY3RvcnkoaXRlcmFibGUsIGRlcHRoLCB1c2VLZXlzKSB7XG4gICAgdmFyIGZsYXRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgZmxhdFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG4gICAgICBmdW5jdGlvbiBmbGF0RGVlcChpdGVyLCBjdXJyZW50RGVwdGgpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgICAgaXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgICAgICBpZiAoKCFkZXB0aCB8fCBjdXJyZW50RGVwdGggPCBkZXB0aCkgJiYgaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICAgICAgZmxhdERlZXAodiwgY3VycmVudERlcHRoICsgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMrKywgdGhpcyQwKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gIXN0b3BwZWQ7XG4gICAgICAgIH0sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgZmxhdERlZXAoaXRlcmFibGUsIDApO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfVxuICAgIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgdmFyIHN0YWNrID0gW107XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHYgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMpIHtcbiAgICAgICAgICAgIHYgPSB2WzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKCFkZXB0aCB8fCBzdGFjay5sZW5ndGggPCBkZXB0aCkgJiYgaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChpdGVyYXRvcik7XG4gICAgICAgICAgICBpdGVyYXRvciA9IHYuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVzZUtleXMgPyBzdGVwIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHYsIHN0ZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZsYXRTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZmxhdE1hcEZhY3RvcnkoaXRlcmFibGUsIG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciBjb2VyY2UgPSBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKTtcbiAgICByZXR1cm4gaXRlcmFibGUudG9TZXEoKS5tYXAoXG4gICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBjb2VyY2UobWFwcGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpKX1cbiAgICApLmZsYXR0ZW4odHJ1ZSk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGludGVycG9zZUZhY3RvcnkoaXRlcmFibGUsIHNlcGFyYXRvcikge1xuICAgIHZhciBpbnRlcnBvc2VkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGludGVycG9zZWRTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZSAmJiBpdGVyYWJsZS5zaXplICogMiAtMTtcbiAgICBpbnRlcnBvc2VkU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspIFxuICAgICAgICB7cmV0dXJuICghaXRlcmF0aW9ucyB8fCBmbihzZXBhcmF0b3IsIGl0ZXJhdGlvbnMrKywgdGhpcyQwKSAhPT0gZmFsc2UpICYmXG4gICAgICAgIGZuKHYsIGl0ZXJhdGlvbnMrKywgdGhpcyQwKSAhPT0gZmFsc2V9LFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICBpbnRlcnBvc2VkU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAoIXN0ZXAgfHwgaXRlcmF0aW9ucyAlIDIpIHtcbiAgICAgICAgICBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0aW9ucyAlIDIgP1xuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzZXBhcmF0b3IpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBpbnRlcnBvc2VkU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNvcnRGYWN0b3J5KGl0ZXJhYmxlLCBjb21wYXJhdG9yLCBtYXBwZXIpIHtcbiAgICBpZiAoIWNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSBkZWZhdWx0Q29tcGFyYXRvcjtcbiAgICB9XG4gICAgdmFyIGlzS2V5ZWRJdGVyYWJsZSA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJpZXMgPSBpdGVyYWJsZS50b1NlcSgpLm1hcChcbiAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIFtrLCB2LCBpbmRleCsrLCBtYXBwZXIgPyBtYXBwZXIodiwgaywgaXRlcmFibGUpIDogdl19XG4gICAgKS50b0FycmF5KCk7XG4gICAgZW50cmllcy5zb3J0KGZ1bmN0aW9uKGEsIGIpICB7cmV0dXJuIGNvbXBhcmF0b3IoYVszXSwgYlszXSkgfHwgYVsyXSAtIGJbMl19KS5mb3JFYWNoKFxuICAgICAgaXNLZXllZEl0ZXJhYmxlID9cbiAgICAgIGZ1bmN0aW9uKHYsIGkpICB7IGVudHJpZXNbaV0ubGVuZ3RoID0gMjsgfSA6XG4gICAgICBmdW5jdGlvbih2LCBpKSAgeyBlbnRyaWVzW2ldID0gdlsxXTsgfVxuICAgICk7XG4gICAgcmV0dXJuIGlzS2V5ZWRJdGVyYWJsZSA/IEtleWVkU2VxKGVudHJpZXMpIDpcbiAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgPyBJbmRleGVkU2VxKGVudHJpZXMpIDpcbiAgICAgIFNldFNlcShlbnRyaWVzKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gbWF4RmFjdG9yeShpdGVyYWJsZSwgY29tcGFyYXRvciwgbWFwcGVyKSB7XG4gICAgaWYgKCFjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG4gICAgfVxuICAgIGlmIChtYXBwZXIpIHtcbiAgICAgIHZhciBlbnRyeSA9IGl0ZXJhYmxlLnRvU2VxKClcbiAgICAgICAgLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBbdiwgbWFwcGVyKHYsIGssIGl0ZXJhYmxlKV19KVxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uKGEsIGIpICB7cmV0dXJuIG1heENvbXBhcmUoY29tcGFyYXRvciwgYVsxXSwgYlsxXSkgPyBiIDogYX0pO1xuICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5WzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaXRlcmFibGUucmVkdWNlKGZ1bmN0aW9uKGEsIGIpICB7cmV0dXJuIG1heENvbXBhcmUoY29tcGFyYXRvciwgYSwgYikgPyBiIDogYX0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1heENvbXBhcmUoY29tcGFyYXRvciwgYSwgYikge1xuICAgIHZhciBjb21wID0gY29tcGFyYXRvcihiLCBhKTtcbiAgICAvLyBiIGlzIGNvbnNpZGVyZWQgdGhlIG5ldyBtYXggaWYgdGhlIGNvbXBhcmF0b3IgZGVjbGFyZXMgdGhlbSBlcXVhbCwgYnV0XG4gICAgLy8gdGhleSBhcmUgbm90IGVxdWFsIGFuZCBiIGlzIGluIGZhY3QgYSBudWxsaXNoIHZhbHVlLlxuICAgIHJldHVybiAoY29tcCA9PT0gMCAmJiBiICE9PSBhICYmIChiID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiICE9PSBiKSkgfHwgY29tcCA+IDA7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHppcFdpdGhGYWN0b3J5KGtleUl0ZXIsIHppcHBlciwgaXRlcnMpIHtcbiAgICB2YXIgemlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2Uoa2V5SXRlcik7XG4gICAgemlwU2VxdWVuY2Uuc2l6ZSA9IG5ldyBBcnJheVNlcShpdGVycykubWFwKGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkuc2l6ZX0pLm1pbigpO1xuICAgIC8vIE5vdGU6IHRoaXMgYSBnZW5lcmljIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgX19pdGVyYXRlIGluIHRlcm1zIG9mXG4gICAgLy8gX19pdGVyYXRvciB3aGljaCBtYXkgYmUgbW9yZSBnZW5lcmljYWxseSB1c2VmdWwgaW4gdGhlIGZ1dHVyZS5cbiAgICB6aXBTZXF1ZW5jZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgLyogZ2VuZXJpYzpcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWVbMV0sIHN0ZXAudmFsdWVbMF0sIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICAgICovXG4gICAgICAvLyBpbmRleGVkOlxuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICBpZiAoZm4oc3RlcC52YWx1ZSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICB6aXBTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JzID0gaXRlcnMubWFwKGZ1bmN0aW9uKGkgKVxuICAgICAgICB7cmV0dXJuIChpID0gSXRlcmFibGUoaSksIGdldEl0ZXJhdG9yKHJldmVyc2UgPyBpLnJldmVyc2UoKSA6IGkpKX1cbiAgICAgICk7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgaXNEb25lID0gZmFsc2U7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXBzO1xuICAgICAgICBpZiAoIWlzRG9uZSkge1xuICAgICAgICAgIHN0ZXBzID0gaXRlcmF0b3JzLm1hcChmdW5jdGlvbihpICkge3JldHVybiBpLm5leHQoKX0pO1xuICAgICAgICAgIGlzRG9uZSA9IHN0ZXBzLnNvbWUoZnVuY3Rpb24ocyApIHtyZXR1cm4gcy5kb25lfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZShcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGl0ZXJhdGlvbnMrKyxcbiAgICAgICAgICB6aXBwZXIuYXBwbHkobnVsbCwgc3RlcHMubWFwKGZ1bmN0aW9uKHMgKSB7cmV0dXJuIHMudmFsdWV9KSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHppcFNlcXVlbmNlXG4gIH1cblxuXG4gIC8vICNwcmFnbWEgSGVscGVyIEZ1bmN0aW9uc1xuXG4gIGZ1bmN0aW9uIHJlaWZ5KGl0ZXIsIHNlcSkge1xuICAgIHJldHVybiBpc1NlcShpdGVyKSA/IHNlcSA6IGl0ZXIuY29uc3RydWN0b3Ioc2VxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlRW50cnkoZW50cnkpIHtcbiAgICBpZiAoZW50cnkgIT09IE9iamVjdChlbnRyeSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFtLLCBWXSB0dXBsZTogJyArIGVudHJ5KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlU2l6ZShpdGVyKSB7XG4gICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICByZXR1cm4gZW5zdXJlU2l6ZShpdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGl0ZXJhYmxlQ2xhc3MoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gaXNLZXllZChpdGVyYWJsZSkgPyBLZXllZEl0ZXJhYmxlIDpcbiAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgPyBJbmRleGVkSXRlcmFibGUgOlxuICAgICAgU2V0SXRlcmFibGU7XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlU2VxdWVuY2UoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShcbiAgICAgIChcbiAgICAgICAgaXNLZXllZChpdGVyYWJsZSkgPyBLZXllZFNlcSA6XG4gICAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgPyBJbmRleGVkU2VxIDpcbiAgICAgICAgU2V0U2VxXG4gICAgICApLnByb3RvdHlwZVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBjYWNoZVJlc3VsdFRocm91Z2goKSB7XG4gICAgaWYgKHRoaXMuX2l0ZXIuY2FjaGVSZXN1bHQpIHtcbiAgICAgIHRoaXMuX2l0ZXIuY2FjaGVSZXN1bHQoKTtcbiAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX2l0ZXIuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gU2VxLnByb3RvdHlwZS5jYWNoZVJlc3VsdC5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJhdG9yKGEsIGIpIHtcbiAgICByZXR1cm4gYSA+IGIgPyAxIDogYSA8IGIgPyAtMSA6IDA7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JjZUl0ZXJhdG9yKGtleVBhdGgpIHtcbiAgICB2YXIgaXRlciA9IGdldEl0ZXJhdG9yKGtleVBhdGgpO1xuICAgIGlmICghaXRlcikge1xuICAgICAgLy8gQXJyYXkgbWlnaHQgbm90IGJlIGl0ZXJhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQsIHNvIHdlIG5lZWQgYSBmYWxsYmFja1xuICAgICAgLy8gdG8gb3VyIHdyYXBwZWQgdHlwZS5cbiAgICAgIGlmICghaXNBcnJheUxpa2Uoa2V5UGF0aCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgaXRlcmFibGUgb3IgYXJyYXktbGlrZTogJyArIGtleVBhdGgpO1xuICAgICAgfVxuICAgICAgaXRlciA9IGdldEl0ZXJhdG9yKEl0ZXJhYmxlKGtleVBhdGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXI7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhSZWNvcmQsIEtleWVkQ29sbGVjdGlvbik7XG5cbiAgICBmdW5jdGlvbiBSZWNvcmQoZGVmYXVsdFZhbHVlcywgbmFtZSkge1xuICAgICAgdmFyIGhhc0luaXRpYWxpemVkO1xuXG4gICAgICB2YXIgUmVjb3JkVHlwZSA9IGZ1bmN0aW9uIFJlY29yZCh2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIFJlY29yZFR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWNvcmRUeXBlKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgUmVjb3JkVHlwZSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGFzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICBoYXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0VmFsdWVzKTtcbiAgICAgICAgICBzZXRQcm9wcyhSZWNvcmRUeXBlUHJvdG90eXBlLCBrZXlzKTtcbiAgICAgICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLnNpemUgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9uYW1lID0gbmFtZTtcbiAgICAgICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9rZXlzID0ga2V5cztcbiAgICAgICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9kZWZhdWx0VmFsdWVzID0gZGVmYXVsdFZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tYXAgPSBNYXAodmFsdWVzKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBSZWNvcmRUeXBlUHJvdG90eXBlID0gUmVjb3JkVHlwZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlY29yZFByb3RvdHlwZSk7XG4gICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVjb3JkVHlwZTtcblxuICAgICAgcmV0dXJuIFJlY29yZFR5cGU7XG4gICAgfVxuXG4gICAgUmVjb3JkLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZyhyZWNvcmROYW1lKHRoaXMpICsgJyB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIFJlY29yZC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oaykge1xuICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRWYWx1ZXMuaGFzT3duUHJvcGVydHkoayk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5oYXMoaykpIHtcbiAgICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGRlZmF1bHRWYWwgPSB0aGlzLl9kZWZhdWx0VmFsdWVzW2tdO1xuICAgICAgcmV0dXJuIHRoaXMuX21hcCA/IHRoaXMuX21hcC5nZXQoaywgZGVmYXVsdFZhbCkgOiBkZWZhdWx0VmFsO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgUmVjb3JkVHlwZSA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gUmVjb3JkVHlwZS5fZW1wdHkgfHwgKFJlY29yZFR5cGUuX2VtcHR5ID0gbWFrZVJlY29yZCh0aGlzLCBlbXB0eU1hcCgpKSk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oaywgdikge1xuICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgdW5rbm93biBrZXkgXCInICsgayArICdcIiBvbiAnICsgcmVjb3JkTmFtZSh0aGlzKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbWFwICYmICF0aGlzLl9tYXAuaGFzKGspKSB7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsID0gdGhpcy5fZGVmYXVsdFZhbHVlc1trXTtcbiAgICAgICAgaWYgKHYgPT09IGRlZmF1bHRWYWwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuc2V0KGssIHYpO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAucmVtb3ZlKGspO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIEtleWVkSXRlcmFibGUodGhpcy5fZGVmYXVsdFZhbHVlcykubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIHRoaXMkMC5nZXQoayl9KS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gS2V5ZWRJdGVyYWJsZSh0aGlzLl9kZWZhdWx0VmFsdWVzKS5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gdGhpcyQwLmdldChrKX0pLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXdNYXA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwLCBvd25lcklEKTtcbiAgICB9O1xuXG5cbiAgdmFyIFJlY29yZFByb3RvdHlwZSA9IFJlY29yZC5wcm90b3R5cGU7XG4gIFJlY29yZFByb3RvdHlwZVtERUxFVEVdID0gUmVjb3JkUHJvdG90eXBlLnJlbW92ZTtcbiAgUmVjb3JkUHJvdG90eXBlLmRlbGV0ZUluID1cbiAgUmVjb3JkUHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLnJlbW92ZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2UgPSBNYXBQcm90b3R5cGUubWVyZ2U7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZVdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VXaXRoO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VJbiA9IE1hcFByb3RvdHlwZS5tZXJnZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwV2l0aDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcEluID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcEluO1xuICBSZWNvcmRQcm90b3R5cGUuc2V0SW4gPSBNYXBQcm90b3R5cGUuc2V0SW47XG4gIFJlY29yZFByb3RvdHlwZS51cGRhdGUgPSBNYXBQcm90b3R5cGUudXBkYXRlO1xuICBSZWNvcmRQcm90b3R5cGUudXBkYXRlSW4gPSBNYXBQcm90b3R5cGUudXBkYXRlSW47XG4gIFJlY29yZFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFJlY29yZFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuICBSZWNvcmRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cblxuICBmdW5jdGlvbiBtYWtlUmVjb3JkKGxpa2VSZWNvcmQsIG1hcCwgb3duZXJJRCkge1xuICAgIHZhciByZWNvcmQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihsaWtlUmVjb3JkKSk7XG4gICAgcmVjb3JkLl9tYXAgPSBtYXA7XG4gICAgcmVjb3JkLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZE5hbWUocmVjb3JkKSB7XG4gICAgcmV0dXJuIHJlY29yZC5fbmFtZSB8fCByZWNvcmQuY29uc3RydWN0b3IubmFtZSB8fCAnUmVjb3JkJztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFByb3BzKHByb3RvdHlwZSwgbmFtZXMpIHtcbiAgICB0cnkge1xuICAgICAgbmFtZXMuZm9yRWFjaChzZXRQcm9wLmJpbmQodW5kZWZpbmVkLCBwcm90b3R5cGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGZhaWxlZC4gUHJvYmFibHkgSUU4LlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFByb3AocHJvdG90eXBlLCBuYW1lKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgbmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaW52YXJpYW50KHRoaXMuX19vd25lcklELCAnQ2Fubm90IHNldCBvbiBhbiBpbW11dGFibGUgcmVjb3JkLicpO1xuICAgICAgICB0aGlzLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTZXQsIFNldENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIFNldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNldCgpIDpcbiAgICAgICAgaXNTZXQodmFsdWUpICYmICFpc09yZGVyZWQodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eVNldCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICAgIHZhciBpdGVyID0gU2V0SXRlcmFibGUodmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIHNldC5hZGQodil9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgU2V0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzKEtleWVkSXRlcmFibGUodmFsdWUpLmtleVNlcSgpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2V0IHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5oYXModmFsdWUpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuc2V0KHZhbHVlLCB0cnVlKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnJlbW92ZSh2YWx1ZSkpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5jbGVhcigpKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gICAgU2V0LnByb3RvdHlwZS51bmlvbiA9IGZ1bmN0aW9uKCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgaXRlcnMgPSBpdGVycy5maWx0ZXIoZnVuY3Rpb24oeCApIHtyZXR1cm4geC5zaXplICE9PSAwfSk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCAmJiAhdGhpcy5fX293bmVySUQgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgU2V0SXRlcmFibGUoaXRlcnNbaWldKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBzZXQuYWRkKHZhbHVlKX0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5pbnRlcnNlY3QgPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpdGVycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpdGVyICkge3JldHVybiBTZXRJdGVyYWJsZShpdGVyKX0pO1xuICAgICAgdmFyIG9yaWdpbmFsU2V0ID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBvcmlnaW5hbFNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuICAgICAgICAgIGlmICghaXRlcnMuZXZlcnkoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSl9KSkge1xuICAgICAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcbiAgICAgIHZhciBvcmlnaW5hbFNldCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgICBpZiAoaXRlcnMuc29tZShmdW5jdGlvbihpdGVyICkge3JldHVybiBpdGVyLmluY2x1ZGVzKHZhbHVlKX0pKSB7XG4gICAgICAgICAgICBzZXQucmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBpdGVycyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZFNldChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5fX2l0ZXJhdGUoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gZm4oaywgaywgdGhpcyQwKX0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLm1hcChmdW5jdGlvbihfLCBrKSAge3JldHVybiBrfSkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9fbWFrZShuZXdNYXAsIG93bmVySUQpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc1NldChtYXliZVNldCkge1xuICAgIHJldHVybiAhIShtYXliZVNldCAmJiBtYXliZVNldFtJU19TRVRfU0VOVElORUxdKTtcbiAgfVxuXG4gIFNldC5pc1NldCA9IGlzU2V0O1xuXG4gIHZhciBJU19TRVRfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVRfX0BAJztcblxuICB2YXIgU2V0UHJvdG90eXBlID0gU2V0LnByb3RvdHlwZTtcbiAgU2V0UHJvdG90eXBlW0lTX1NFVF9TRU5USU5FTF0gPSB0cnVlO1xuICBTZXRQcm90b3R5cGVbREVMRVRFXSA9IFNldFByb3RvdHlwZS5yZW1vdmU7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXAgPSBTZXRQcm90b3R5cGUubWVyZ2U7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gU2V0UHJvdG90eXBlLm1lcmdlV2l0aDtcbiAgU2V0UHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU2V0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIFNldFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcblxuICBTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5U2V0O1xuICBTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZVNldDtcblxuICBmdW5jdGlvbiB1cGRhdGVTZXQoc2V0LCBuZXdNYXApIHtcbiAgICBpZiAoc2V0Ll9fb3duZXJJRCkge1xuICAgICAgc2V0LnNpemUgPSBuZXdNYXAuc2l6ZTtcbiAgICAgIHNldC5fbWFwID0gbmV3TWFwO1xuICAgICAgcmV0dXJuIHNldDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld01hcCA9PT0gc2V0Ll9tYXAgPyBzZXQgOlxuICAgICAgbmV3TWFwLnNpemUgPT09IDAgPyBzZXQuX19lbXB0eSgpIDpcbiAgICAgIHNldC5fX21ha2UobmV3TWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VTZXQobWFwLCBvd25lcklEKSB7XG4gICAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFVDtcbiAgZnVuY3Rpb24gZW1wdHlTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX1NFVCB8fCAoRU1QVFlfU0VUID0gbWFrZVNldChlbXB0eU1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkU2V0LCBTZXQpO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkU2V0KCkgOlxuICAgICAgICBpc09yZGVyZWRTZXQodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIE9yZGVyZWRTZXQub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzKEtleWVkSXRlcmFibGUodmFsdWUpLmtleVNlcSgpKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ09yZGVyZWRTZXQgeycsICd9Jyk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZFNldChtYXliZU9yZGVyZWRTZXQpIHtcbiAgICByZXR1cm4gaXNTZXQobWF5YmVPcmRlcmVkU2V0KSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkU2V0KTtcbiAgfVxuXG4gIE9yZGVyZWRTZXQuaXNPcmRlcmVkU2V0ID0gaXNPcmRlcmVkU2V0O1xuXG4gIHZhciBPcmRlcmVkU2V0UHJvdG90eXBlID0gT3JkZXJlZFNldC5wcm90b3R5cGU7XG4gIE9yZGVyZWRTZXRQcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG4gIE9yZGVyZWRTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5T3JkZXJlZFNldDtcbiAgT3JkZXJlZFNldFByb3RvdHlwZS5fX21ha2UgPSBtYWtlT3JkZXJlZFNldDtcblxuICBmdW5jdGlvbiBtYWtlT3JkZXJlZFNldChtYXAsIG93bmVySUQpIHtcbiAgICB2YXIgc2V0ID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX09SREVSRURfU0VUO1xuICBmdW5jdGlvbiBlbXB0eU9yZGVyZWRTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX09SREVSRURfU0VUIHx8IChFTVBUWV9PUkRFUkVEX1NFVCA9IG1ha2VPcmRlcmVkU2V0KGVtcHR5T3JkZXJlZE1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTdGFjaywgSW5kZXhlZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIFN0YWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U3RhY2soKSA6XG4gICAgICAgIGlzU3RhY2sodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eVN0YWNrKCkudW5zaGlmdEFsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgU3RhY2sub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1N0YWNrIFsnLCAnXScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgd2hpbGUgKGhlYWQgJiYgaW5kZXgtLSkge1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhlYWQgPyBoZWFkLnZhbHVlIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faGVhZCAmJiB0aGlzLl9oZWFkLnZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgU3RhY2sucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplICsgYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIGZvciAodmFyIGlpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGlpID49IDA7IGlpLS0pIHtcbiAgICAgICAgaGVhZCA9IHtcbiAgICAgICAgICB2YWx1ZTogYXJndW1lbnRzW2lpXSxcbiAgICAgICAgICBuZXh0OiBoZWFkXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnB1c2hBbGwgPSBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gSW5kZXhlZEl0ZXJhYmxlKGl0ZXIpO1xuICAgICAgaWYgKGl0ZXIuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIGl0ZXIucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24odmFsdWUgKSB7XG4gICAgICAgIG5ld1NpemUrKztcbiAgICAgICAgaGVhZCA9IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgbmV4dDogaGVhZFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMSk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUudW5zaGlmdEFsbCA9IGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2hBbGwoaXRlcik7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucG9wLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLl9oZWFkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eVN0YWNrKCk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHRoaXMuc2l6ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzb2x2ZWRCZWdpbiA9IHJlc29sdmVCZWdpbihiZWdpbiwgdGhpcy5zaXplKTtcbiAgICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCB0aGlzLnNpemUpO1xuICAgICAgaWYgKHJlc29sdmVkRW5kICE9PSB0aGlzLnNpemUpIHtcbiAgICAgICAgLy8gc3VwZXIuc2xpY2UoYmVnaW4sIGVuZCk7XG4gICAgICAgIHJldHVybiBJbmRleGVkQ29sbGVjdGlvbi5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplIC0gcmVzb2x2ZWRCZWdpbjtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIHdoaWxlIChyZXNvbHZlZEJlZ2luLS0pIHtcbiAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE11dGFiaWxpdHlcblxuICAgIFN0YWNrLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKHRoaXMuc2l6ZSwgdGhpcy5faGVhZCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEl0ZXJhdGlvblxuXG4gICAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuX19pdGVyYXRlKGZuKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChmbihub2RlLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuX19pdGVyYXRvcih0eXBlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUudmFsdWU7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNTdGFjayhtYXliZVN0YWNrKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU3RhY2sgJiYgbWF5YmVTdGFja1tJU19TVEFDS19TRU5USU5FTF0pO1xuICB9XG5cbiAgU3RhY2suaXNTdGFjayA9IGlzU3RhY2s7XG5cbiAgdmFyIElTX1NUQUNLX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU1RBQ0tfX0BAJztcblxuICB2YXIgU3RhY2tQcm90b3R5cGUgPSBTdGFjay5wcm90b3R5cGU7XG4gIFN0YWNrUHJvdG90eXBlW0lTX1NUQUNLX1NFTlRJTkVMXSA9IHRydWU7XG4gIFN0YWNrUHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU3RhY2tQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgU3RhY2tQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG4gIFN0YWNrUHJvdG90eXBlLndhc0FsdGVyZWQgPSBNYXBQcm90b3R5cGUud2FzQWx0ZXJlZDtcblxuXG4gIGZ1bmN0aW9uIG1ha2VTdGFjayhzaXplLCBoZWFkLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUoU3RhY2tQcm90b3R5cGUpO1xuICAgIG1hcC5zaXplID0gc2l6ZTtcbiAgICBtYXAuX2hlYWQgPSBoZWFkO1xuICAgIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIG1hcC5fX2hhc2ggPSBoYXNoO1xuICAgIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NUQUNLO1xuICBmdW5jdGlvbiBlbXB0eVN0YWNrKCkge1xuICAgIHJldHVybiBFTVBUWV9TVEFDSyB8fCAoRU1QVFlfU1RBQ0sgPSBtYWtlU3RhY2soMCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyaWJ1dGVzIGFkZGl0aW9uYWwgbWV0aG9kcyB0byBhIGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBtaXhpbihjdG9yLCBtZXRob2RzKSB7XG4gICAgdmFyIGtleUNvcGllciA9IGZ1bmN0aW9uKGtleSApIHsgY3Rvci5wcm90b3R5cGVba2V5XSA9IG1ldGhvZHNba2V5XTsgfTtcbiAgICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJlxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgcmV0dXJuIGN0b3I7XG4gIH1cblxuICBJdGVyYWJsZS5JdGVyYXRvciA9IEl0ZXJhdG9yO1xuXG4gIG1peGluKEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXG4gICAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHRoaXMuc2l6ZSB8fCAwKTtcbiAgICAgIHRoaXMudmFsdWVTZXEoKS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaSkgIHsgYXJyYXlbaV0gPSB2OyB9KTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LFxuXG4gICAgdG9JbmRleGVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9JbmRleGVkU2VxdWVuY2UodGhpcyk7XG4gICAgfSxcblxuICAgIHRvSlM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5tYXAoXG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KUyA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlMoKSA6IHZhbHVlfVxuICAgICAgKS5fX3RvSlMoKTtcbiAgICB9LFxuXG4gICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlNPTigpIDogdmFsdWV9XG4gICAgICApLl9fdG9KUygpO1xuICAgIH0sXG5cbiAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9LZXllZFNlcXVlbmNlKHRoaXMsIHRydWUpO1xuICAgIH0sXG5cbiAgICB0b01hcDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7IG9iamVjdFtrXSA9IHY7IH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkU2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkU2V0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2V0U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9TZXRTZXF1ZW5jZSh0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh0aGlzKSA/IHRoaXMudG9JbmRleGVkU2VxKCkgOlxuICAgICAgICBpc0tleWVkKHRoaXMpID8gdGhpcy50b0tleWVkU2VxKCkgOlxuICAgICAgICB0aGlzLnRvU2V0U2VxKCk7XG4gICAgfSxcblxuICAgIHRvU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFN0YWNrKGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9MaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBMaXN0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgQ29tbW9uIEphdmFTY3JpcHQgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbSXRlcmFibGVdJztcbiAgICB9LFxuXG4gICAgX190b1N0cmluZzogZnVuY3Rpb24oaGVhZCwgdGFpbCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaGVhZCArIHRhaWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGVhZCArICcgJyArIHRoaXMudG9TZXEoKS5tYXAodGhpcy5fX3RvU3RyaW5nTWFwcGVyKS5qb2luKCcsICcpICsgJyAnICsgdGFpbDtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBjb25jYXQ6IGZ1bmN0aW9uKCkge3ZhciB2YWx1ZXMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBjb25jYXRGYWN0b3J5KHRoaXMsIHZhbHVlcykpO1xuICAgIH0sXG5cbiAgICBpbmNsdWRlczogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvbWUoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUyk7XG4gICAgfSxcblxuICAgIGV2ZXJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIHJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9LFxuXG4gICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgZm9yRWFjaDogZnVuY3Rpb24oc2lkZUVmZmVjdCwgY29udGV4dCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0ZShjb250ZXh0ID8gc2lkZUVmZmVjdC5iaW5kKGNvbnRleHQpIDogc2lkZUVmZmVjdCk7XG4gICAgfSxcblxuICAgIGpvaW46IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHNlcGFyYXRvciA9IHNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gJycgKyBzZXBhcmF0b3IgOiAnLCc7XG4gICAgICB2YXIgam9pbmVkID0gJyc7XG4gICAgICB2YXIgaXNGaXJzdCA9IHRydWU7XG4gICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge1xuICAgICAgICBpc0ZpcnN0ID8gKGlzRmlyc3QgPSBmYWxzZSkgOiAoam9pbmVkICs9IHNlcGFyYXRvcik7XG4gICAgICAgIGpvaW5lZCArPSB2ICE9PSBudWxsICYmIHYgIT09IHVuZGVmaW5lZCA/IHYudG9TdHJpbmcoKSA6ICcnO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gam9pbmVkO1xuICAgIH0sXG5cbiAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9LRVlTKTtcbiAgICB9LFxuXG4gICAgbWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBtYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCkpO1xuICAgIH0sXG5cbiAgICByZWR1Y2U6IGZ1bmN0aW9uKHJlZHVjZXIsIGluaXRpYWxSZWR1Y3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgcmVkdWN0aW9uO1xuICAgICAgdmFyIHVzZUZpcnN0O1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHVzZUZpcnN0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZHVjdGlvbiA9IGluaXRpYWxSZWR1Y3Rpb247XG4gICAgICB9XG4gICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuICAgICAgICBpZiAodXNlRmlyc3QpIHtcbiAgICAgICAgICB1c2VGaXJzdCA9IGZhbHNlO1xuICAgICAgICAgIHJlZHVjdGlvbiA9IHY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVkdWN0aW9uID0gcmVkdWNlci5jYWxsKGNvbnRleHQsIHJlZHVjdGlvbiwgdiwgaywgYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlZHVjdGlvbjtcbiAgICB9LFxuXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uKHJlZHVjZXIsIGluaXRpYWxSZWR1Y3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciByZXZlcnNlZCA9IHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKTtcbiAgICAgIHJldHVybiByZXZlcnNlZC5yZWR1Y2UuYXBwbHkocmV2ZXJzZWQsIGFyZ3VtZW50cyk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHJldmVyc2VGYWN0b3J5KHRoaXMsIHRydWUpKTtcbiAgICB9LFxuXG4gICAgc2xpY2U6IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzbGljZUZhY3RvcnkodGhpcywgYmVnaW4sIGVuZCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBzb21lOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiAhdGhpcy5ldmVyeShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIHNvcnQ6IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKSk7XG4gICAgfSxcblxuICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblxuICAgIGJ1dExhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMCwgLTEpO1xuICAgIH0sXG5cbiAgICBpc0VtcHR5OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNpemUgIT09IHVuZGVmaW5lZCA/IHRoaXMuc2l6ZSA9PT0gMCA6ICF0aGlzLnNvbWUoZnVuY3Rpb24oKSAge3JldHVybiB0cnVlfSk7XG4gICAgfSxcblxuICAgIGNvdW50OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBlbnN1cmVTaXplKFxuICAgICAgICBwcmVkaWNhdGUgPyB0aGlzLnRvU2VxKCkuZmlsdGVyKHByZWRpY2F0ZSwgY29udGV4dCkgOiB0aGlzXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBjb3VudEJ5OiBmdW5jdGlvbihncm91cGVyLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gY291bnRCeUZhY3RvcnkodGhpcywgZ3JvdXBlciwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIGVxdWFsczogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuICAgIH0sXG5cbiAgICBlbnRyeVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaXRlcmFibGUgPSB0aGlzO1xuICAgICAgaWYgKGl0ZXJhYmxlLl9jYWNoZSkge1xuICAgICAgICAvLyBXZSBjYWNoZSBhcyBhbiBlbnRyaWVzIGFycmF5LCBzbyB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGNhY2hlIVxuICAgICAgICByZXR1cm4gbmV3IEFycmF5U2VxKGl0ZXJhYmxlLl9jYWNoZSk7XG4gICAgICB9XG4gICAgICB2YXIgZW50cmllc1NlcXVlbmNlID0gaXRlcmFibGUudG9TZXEoKS5tYXAoZW50cnlNYXBwZXIpLnRvSW5kZXhlZFNlcSgpO1xuICAgICAgZW50cmllc1NlcXVlbmNlLmZyb21FbnRyeVNlcSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUudG9TZXEoKX07XG4gICAgICByZXR1cm4gZW50cmllc1NlcXVlbmNlO1xuICAgIH0sXG5cbiAgICBmaWx0ZXJOb3Q6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgZmluZEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZm91bmQgPSBub3RTZXRWYWx1ZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIGZvdW5kID0gW2ssIHZdO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfSxcblxuICAgIGZpbmRLZXk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVswXTtcbiAgICB9LFxuXG4gICAgZmluZExhc3Q6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvS2V5ZWRTZXEoKS5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgZmluZExhc3RFbnRyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSk7XG4gICAgfSxcblxuICAgIGZpbmRMYXN0S2V5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvS2V5ZWRTZXEoKS5yZXZlcnNlKCkuZmluZEtleShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kKHJldHVyblRydWUpO1xuICAgIH0sXG5cbiAgICBmbGF0TWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0TWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgZmxhdHRlbjogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmcm9tRW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBGcm9tRW50cmllc1NlcXVlbmNlKHRoaXMpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHNlYXJjaEtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQoZnVuY3Rpb24oXywga2V5KSAge3JldHVybiBpcyhrZXksIHNlYXJjaEtleSl9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0SW46IGZ1bmN0aW9uKHNlYXJjaEtleVBhdGgsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgbmVzdGVkID0gdGhpcztcbiAgICAgIC8vIE5vdGU6IGluIGFuIEVTNiBlbnZpcm9ubWVudCwgd2Ugd291bGQgcHJlZmVyOlxuICAgICAgLy8gZm9yICh2YXIga2V5IG9mIHNlYXJjaEtleVBhdGgpIHtcbiAgICAgIHZhciBpdGVyID0gZm9yY2VJdGVyYXRvcihzZWFyY2hLZXlQYXRoKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWQgJiYgbmVzdGVkLmdldCA/IG5lc3RlZC5nZXQoa2V5LCBOT1RfU0VUKSA6IE5PVF9TRVQ7XG4gICAgICAgIGlmIChuZXN0ZWQgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXN0ZWQ7XG4gICAgfSxcblxuICAgIGdyb3VwQnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBncm91cEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihzZWFyY2hLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChzZWFyY2hLZXksIE5PVF9TRVQpICE9PSBOT1RfU0VUO1xuICAgIH0sXG5cbiAgICBoYXNJbjogZnVuY3Rpb24oc2VhcmNoS2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW4oc2VhcmNoS2V5UGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gICAgfSxcblxuICAgIGlzU3Vic2V0OiBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gdHlwZW9mIGl0ZXIuaW5jbHVkZXMgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogSXRlcmFibGUoaXRlcik7XG4gICAgICByZXR1cm4gdGhpcy5ldmVyeShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgaXNTdXBlcnNldDogZnVuY3Rpb24oaXRlcikge1xuICAgICAgaXRlciA9IHR5cGVvZiBpdGVyLmlzU3Vic2V0ID09PSAnZnVuY3Rpb24nID8gaXRlciA6IEl0ZXJhYmxlKGl0ZXIpO1xuICAgICAgcmV0dXJuIGl0ZXIuaXNTdWJzZXQodGhpcyk7XG4gICAgfSxcblxuICAgIGtleU9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZEtleShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXModmFsdWUsIHNlYXJjaFZhbHVlKX0pO1xuICAgIH0sXG5cbiAgICBrZXlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5tYXAoa2V5TWFwcGVyKS50b0luZGV4ZWRTZXEoKTtcbiAgICB9LFxuXG4gICAgbGFzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLnJldmVyc2UoKS5maXJzdCgpO1xuICAgIH0sXG5cbiAgICBsYXN0S2V5T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpLmtleU9mKHNlYXJjaFZhbHVlKTtcbiAgICB9LFxuXG4gICAgbWF4OiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKTtcbiAgICB9LFxuXG4gICAgbWF4Qnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKTtcbiAgICB9LFxuXG4gICAgbWluOiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yID8gbmVnKGNvbXBhcmF0b3IpIDogZGVmYXVsdE5lZ0NvbXBhcmF0b3IpO1xuICAgIH0sXG5cbiAgICBtaW5CeTogZnVuY3Rpb24obWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yID8gbmVnKGNvbXBhcmF0b3IpIDogZGVmYXVsdE5lZ0NvbXBhcmF0b3IsIG1hcHBlcik7XG4gICAgfSxcblxuICAgIHJlc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMSk7XG4gICAgfSxcblxuICAgIHNraXA6IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoTWF0aC5tYXgoMCwgYW1vdW50KSk7XG4gICAgfSxcblxuICAgIHNraXBMYXN0OiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLnNraXAoYW1vdW50KS5yZXZlcnNlKCkpO1xuICAgIH0sXG5cbiAgICBza2lwV2hpbGU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCB0cnVlKSk7XG4gICAgfSxcblxuICAgIHNraXBVbnRpbDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5za2lwV2hpbGUobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBzb3J0Qnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcikpO1xuICAgIH0sXG5cbiAgICB0YWtlOiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDAsIE1hdGgubWF4KDAsIGFtb3VudCkpO1xuICAgIH0sXG5cbiAgICB0YWtlTGFzdDogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS50YWtlKGFtb3VudCkucmV2ZXJzZSgpKTtcbiAgICB9LFxuXG4gICAgdGFrZVdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB0YWtlV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCkpO1xuICAgIH0sXG5cbiAgICB0YWtlVW50aWw6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZVdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgdmFsdWVTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9JbmRleGVkU2VxKCk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIEhhc2hhYmxlIE9iamVjdFxuXG4gICAgaGFzaENvZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19oYXNoIHx8ICh0aGlzLl9faGFzaCA9IGhhc2hJdGVyYWJsZSh0aGlzKSk7XG4gICAgfVxuXG5cbiAgICAvLyAjIyMgSW50ZXJuYWxcblxuICAgIC8vIGFic3RyYWN0IF9faXRlcmF0ZShmbiwgcmV2ZXJzZSlcblxuICAgIC8vIGFic3RyYWN0IF9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSlcbiAgfSk7XG5cbiAgLy8gdmFyIElTX0lURVJBQkxFX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSVRFUkFCTEVfX0BAJztcbiAgLy8gdmFyIElTX0tFWUVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfS0VZRURfX0BAJztcbiAgLy8gdmFyIElTX0lOREVYRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JTkRFWEVEX19AQCc7XG4gIC8vIHZhciBJU19PUkRFUkVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfT1JERVJFRF9fQEAnO1xuXG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgSXRlcmFibGVQcm90b3R5cGVbSVNfSVRFUkFCTEVfU0VOVElORUxdID0gdHJ1ZTtcbiAgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JfU1lNQk9MXSA9IEl0ZXJhYmxlUHJvdG90eXBlLnZhbHVlcztcbiAgSXRlcmFibGVQcm90b3R5cGUuX190b0pTID0gSXRlcmFibGVQcm90b3R5cGUudG9BcnJheTtcbiAgSXRlcmFibGVQcm90b3R5cGUuX190b1N0cmluZ01hcHBlciA9IHF1b3RlU3RyaW5nO1xuICBJdGVyYWJsZVByb3RvdHlwZS5pbnNwZWN0ID1cbiAgSXRlcmFibGVQcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsgfTtcbiAgSXRlcmFibGVQcm90b3R5cGUuY2hhaW4gPSBJdGVyYWJsZVByb3RvdHlwZS5mbGF0TWFwO1xuICBJdGVyYWJsZVByb3RvdHlwZS5jb250YWlucyA9IEl0ZXJhYmxlUHJvdG90eXBlLmluY2x1ZGVzO1xuXG4gIG1peGluKEtleWVkSXRlcmFibGUsIHtcblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAgZmxpcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmxpcEZhY3RvcnkodGhpcykpO1xuICAgIH0sXG5cbiAgICBtYXBFbnRyaWVzOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLFxuICAgICAgICB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcHBlci5jYWxsKGNvbnRleHQsIFtrLCB2XSwgaXRlcmF0aW9ucysrLCB0aGlzJDApfVxuICAgICAgICApLmZyb21FbnRyeVNlcSgpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBtYXBLZXlzOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLFxuICAgICAgICB0aGlzLnRvU2VxKCkuZmxpcCgpLm1hcChcbiAgICAgICAgICBmdW5jdGlvbihrLCB2KSAge3JldHVybiBtYXBwZXIuY2FsbChjb250ZXh0LCBrLCB2LCB0aGlzJDApfVxuICAgICAgICApLmZsaXAoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgdmFyIEtleWVkSXRlcmFibGVQcm90b3R5cGUgPSBLZXllZEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZVtJU19LRVlFRF9TRU5USU5FTF0gPSB0cnVlO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9KUyA9IEl0ZXJhYmxlUHJvdG90eXBlLnRvT2JqZWN0O1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBmdW5jdGlvbih2LCBrKSAge3JldHVybiBKU09OLnN0cmluZ2lmeShrKSArICc6ICcgKyBxdW90ZVN0cmluZyh2KX07XG5cblxuXG4gIG1peGluKEluZGV4ZWRJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblxuICAgIHRvS2V5ZWRTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBUb0tleWVkU2VxdWVuY2UodGhpcywgZmFsc2UpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblxuICAgIGZpbHRlcjogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmlsdGVyRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQsIGZhbHNlKSk7XG4gICAgfSxcblxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMF0gOiAtMTtcbiAgICB9LFxuXG4gICAgaW5kZXhPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmtleU9mKHNlYXJjaFZhbHVlKTtcbiAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuICAgIH0sXG5cbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmxhc3RLZXlPZihzZWFyY2hWYWx1ZSk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgc2xpY2U6IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzbGljZUZhY3RvcnkodGhpcywgYmVnaW4sIGVuZCwgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgc3BsaWNlOiBmdW5jdGlvbihpbmRleCwgcmVtb3ZlTnVtIC8qLCAuLi52YWx1ZXMqLykge1xuICAgICAgdmFyIG51bUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgcmVtb3ZlTnVtID0gTWF0aC5tYXgocmVtb3ZlTnVtIHwgMCwgMCk7XG4gICAgICBpZiAobnVtQXJncyA9PT0gMCB8fCAobnVtQXJncyA9PT0gMiAmJiAhcmVtb3ZlTnVtKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIC8vIElmIGluZGV4IGlzIG5lZ2F0aXZlLCBpdCBzaG91bGQgcmVzb2x2ZSByZWxhdGl2ZSB0byB0aGUgc2l6ZSBvZiB0aGVcbiAgICAgIC8vIGNvbGxlY3Rpb24uIEhvd2V2ZXIgc2l6ZSBtYXkgYmUgZXhwZW5zaXZlIHRvIGNvbXB1dGUgaWYgbm90IGNhY2hlZCwgc29cbiAgICAgIC8vIG9ubHkgY2FsbCBjb3VudCgpIGlmIHRoZSBudW1iZXIgaXMgaW4gZmFjdCBuZWdhdGl2ZS5cbiAgICAgIGluZGV4ID0gcmVzb2x2ZUJlZ2luKGluZGV4LCBpbmRleCA8IDAgPyB0aGlzLmNvdW50KCkgOiB0aGlzLnNpemUpO1xuICAgICAgdmFyIHNwbGljZWQgPSB0aGlzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgIHJldHVybiByZWlmeShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgbnVtQXJncyA9PT0gMSA/XG4gICAgICAgICAgc3BsaWNlZCA6XG4gICAgICAgICAgc3BsaWNlZC5jb25jYXQoYXJyQ29weShhcmd1bWVudHMsIDIpLCB0aGlzLnNsaWNlKGluZGV4ICsgcmVtb3ZlTnVtKSlcbiAgICAgICk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIE1vcmUgY29sbGVjdGlvbiBtZXRob2RzXG5cbiAgICBmaW5kTGFzdEluZGV4OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZExhc3RFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMF0gOiAtMTtcbiAgICB9LFxuXG4gICAgZmlyc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApO1xuICAgIH0sXG5cbiAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIChpbmRleCA8IDAgfHwgKHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHxcbiAgICAgICAgICAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPiB0aGlzLnNpemUpKSkgP1xuICAgICAgICBub3RTZXRWYWx1ZSA6XG4gICAgICAgIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGtleSA9PT0gaW5kZXh9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgdGhpcy5zaXplID09PSBJbmZpbml0eSB8fCBpbmRleCA8IHRoaXMuc2l6ZSA6XG4gICAgICAgIHRoaXMuaW5kZXhPZihpbmRleCkgIT09IC0xXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBpbnRlcnBvc2U6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVycG9zZUZhY3RvcnkodGhpcywgc2VwYXJhdG9yKSk7XG4gICAgfSxcblxuICAgIGludGVybGVhdmU6IGZ1bmN0aW9uKC8qLi4uaXRlcmFibGVzKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgICB2YXIgemlwcGVkID0gemlwV2l0aEZhY3RvcnkodGhpcy50b1NlcSgpLCBJbmRleGVkU2VxLm9mLCBpdGVyYWJsZXMpO1xuICAgICAgdmFyIGludGVybGVhdmVkID0gemlwcGVkLmZsYXR0ZW4odHJ1ZSk7XG4gICAgICBpZiAoemlwcGVkLnNpemUpIHtcbiAgICAgICAgaW50ZXJsZWF2ZWQuc2l6ZSA9IHppcHBlZC5zaXplICogaXRlcmFibGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcmxlYXZlZCk7XG4gICAgfSxcblxuICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUmFuZ2UoMCwgdGhpcy5zaXplKTtcbiAgICB9LFxuXG4gICAgbGFzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoLTEpO1xuICAgIH0sXG5cbiAgICBza2lwV2hpbGU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICB6aXA6IGZ1bmN0aW9uKC8qLCAuLi5pdGVyYWJsZXMgKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgZGVmYXVsdFppcHBlciwgaXRlcmFibGVzKSk7XG4gICAgfSxcblxuICAgIHppcFdpdGg6IGZ1bmN0aW9uKHppcHBlci8qLCAuLi5pdGVyYWJsZXMgKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBhcnJDb3B5KGFyZ3VtZW50cyk7XG4gICAgICBpdGVyYWJsZXNbMF0gPSB0aGlzO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIHppcHBlciwgaXRlcmFibGVzKSk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIEluZGV4ZWRJdGVyYWJsZS5wcm90b3R5cGVbSVNfSU5ERVhFRF9TRU5USU5FTF0gPSB0cnVlO1xuICBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblxuXG5cbiAgbWl4aW4oU2V0SXRlcmFibGUsIHtcblxuICAgIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblxuICAgIGdldDogZnVuY3Rpb24odmFsdWUsIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpID8gdmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAga2V5U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlU2VxKCk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIFNldEl0ZXJhYmxlLnByb3RvdHlwZS5oYXMgPSBJdGVyYWJsZVByb3RvdHlwZS5pbmNsdWRlcztcbiAgU2V0SXRlcmFibGUucHJvdG90eXBlLmNvbnRhaW5zID0gU2V0SXRlcmFibGUucHJvdG90eXBlLmluY2x1ZGVzO1xuXG5cbiAgLy8gTWl4aW4gc3ViY2xhc3Nlc1xuXG4gIG1peGluKEtleWVkU2VxLCBLZXllZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG4gIG1peGluKEluZGV4ZWRTZXEsIEluZGV4ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihTZXRTZXEsIFNldEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cbiAgbWl4aW4oS2V5ZWRDb2xsZWN0aW9uLCBLZXllZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG4gIG1peGluKEluZGV4ZWRDb2xsZWN0aW9uLCBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oU2V0Q29sbGVjdGlvbiwgU2V0SXRlcmFibGUucHJvdG90eXBlKTtcblxuXG4gIC8vICNwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXG4gIGZ1bmN0aW9uIGtleU1hcHBlcih2LCBrKSB7XG4gICAgcmV0dXJuIGs7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyeU1hcHBlcih2LCBrKSB7XG4gICAgcmV0dXJuIFtrLCB2XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdChwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5lZyhwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gLXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHF1b3RlU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFppcHBlcigpIHtcbiAgICByZXR1cm4gYXJyQ29weShhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdE5lZ0NvbXBhcmF0b3IoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IDEgOiBhID4gYiA/IC0xIDogMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2hJdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZS5zaXplID09PSBJbmZpbml0eSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciBvcmRlcmVkID0gaXNPcmRlcmVkKGl0ZXJhYmxlKTtcbiAgICB2YXIga2V5ZWQgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaCA9IG9yZGVyZWQgPyAxIDogMDtcbiAgICB2YXIgc2l6ZSA9IGl0ZXJhYmxlLl9faXRlcmF0ZShcbiAgICAgIGtleWVkID9cbiAgICAgICAgb3JkZXJlZCA/XG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHsgaCA9IDMxICogaCArIGhhc2hNZXJnZShoYXNoKHYpLCBoYXNoKGspKSB8IDA7IH0gOlxuICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7IGggPSBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG4gICAgICAgIG9yZGVyZWQgP1xuICAgICAgICAgIGZ1bmN0aW9uKHYgKSB7IGggPSAzMSAqIGggKyBoYXNoKHYpIHwgMDsgfSA6XG4gICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IGggKyBoYXNoKHYpIHwgMDsgfVxuICAgICk7XG4gICAgcmV0dXJuIG11cm11ckhhc2hPZlNpemUoc2l6ZSwgaCk7XG4gIH1cblxuICBmdW5jdGlvbiBtdXJtdXJIYXNoT2ZTaXplKHNpemUsIGgpIHtcbiAgICBoID0gaW11bChoLCAweENDOUUyRDUxKTtcbiAgICBoID0gaW11bChoIDw8IDE1IHwgaCA+Pj4gLTE1LCAweDFCODczNTkzKTtcbiAgICBoID0gaW11bChoIDw8IDEzIHwgaCA+Pj4gLTEzLCA1KTtcbiAgICBoID0gKGggKyAweEU2NTQ2QjY0IHwgMCkgXiBzaXplO1xuICAgIGggPSBpbXVsKGggXiBoID4+PiAxNiwgMHg4NUVCQ0E2Qik7XG4gICAgaCA9IGltdWwoaCBeIGggPj4+IDEzLCAweEMyQjJBRTM1KTtcbiAgICBoID0gc21pKGggXiBoID4+PiAxNik7XG4gICAgcmV0dXJuIGg7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNoTWVyZ2UoYSwgYikge1xuICAgIHJldHVybiBhIF4gYiArIDB4OUUzNzc5QjkgKyAoYSA8PCA2KSArIChhID4+IDIpIHwgMDsgLy8gaW50XG4gIH1cblxuICB2YXIgSW1tdXRhYmxlID0ge1xuXG4gICAgSXRlcmFibGU6IEl0ZXJhYmxlLFxuXG4gICAgU2VxOiBTZXEsXG4gICAgQ29sbGVjdGlvbjogQ29sbGVjdGlvbixcbiAgICBNYXA6IE1hcCxcbiAgICBPcmRlcmVkTWFwOiBPcmRlcmVkTWFwLFxuICAgIExpc3Q6IExpc3QsXG4gICAgU3RhY2s6IFN0YWNrLFxuICAgIFNldDogU2V0LFxuICAgIE9yZGVyZWRTZXQ6IE9yZGVyZWRTZXQsXG5cbiAgICBSZWNvcmQ6IFJlY29yZCxcbiAgICBSYW5nZTogUmFuZ2UsXG4gICAgUmVwZWF0OiBSZXBlYXQsXG5cbiAgICBpczogaXMsXG4gICAgZnJvbUpTOiBmcm9tSlNcblxuICB9O1xuXG4gIHJldHVybiBJbW11dGFibGU7XG5cbn0pKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNzsgfSkpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBleHBvcnRzLmFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG52YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbnZhciBoYXNCYXNlbmFtZSA9IGV4cG9ydHMuaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBleHBvcnRzLnN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbnZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09ICdAQHJlZHV4L0lOSVQnID8gJ2luaXRpYWxTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0U3RhdGVOYW1lLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoX0RPTVV0aWxzLmNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0hpc3RvcnkpKCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICEoMCwgX0RPTVV0aWxzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UpKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gX0RPTVV0aWxzLmdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCFiYXNlbmFtZSB8fCAoMCwgX1BhdGhVdGlscy5oYXNCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLnN0cmlwQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoKDAsIF9ET01VdGlscy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KShldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0TWVtb2l6ZSA9IGRlZmF1bHRNZW1vaXplO1xuZXhwb3J0cy5jcmVhdGVTZWxlY3RvckNyZWF0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3I7XG5leHBvcnRzLmNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciA9IGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcjtcbmZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIHByZXYsIG5leHQpIHtcbiAgaWYgKHByZXYgPT09IG51bGwgfHwgbmV4dCA9PT0gbnVsbCB8fCBwcmV2Lmxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBEbyB0aGlzIGluIGEgZm9yIGxvb3AgKGFuZCBub3QgYSBgZm9yRWFjaGAgb3IgYW4gYGV2ZXJ5YCkgc28gd2UgY2FuIGRldGVybWluZSBlcXVhbGl0eSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuICB2YXIgbGVuZ3RoID0gcHJldi5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuICB2YXIgZXF1YWxpdHlDaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XG5cbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICAvLyB3ZSByZWZlcmVuY2UgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIHRoZW0gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RvciBjcmVhdG9ycyBleHBlY3QgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsICcgKyAoJ2luc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogWycgKyBkZXBlbmRlbmN5VHlwZXMgKyAnXScpKTtcbiAgfVxuXG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZnVuY3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IGdldERlcGVuZGVuY2llcyhmdW5jcyk7XG5cbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh1bmRlZmluZWQsIFtmdW5jdGlvbiAoKSB7XG4gICAgICByZWNvbXB1dGF0aW9ucysrO1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiByZXN1bHRGdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cbiAgICAvLyBJZiBhIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBleGFjdCBzYW1lIGFyZ3VtZW50cyB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIG91ciBkZXBlbmRlbmNpZXMgYWdhaW4uXG4gICAgdmFyIHNlbGVjdG9yID0gZGVmYXVsdE1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgcGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuICAgIHNlbGVjdG9yLnJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zO1xuICAgIH07XG4gICAgc2VsZWN0b3IucmVzZXRSZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG59XG5cbnZhciBjcmVhdGVTZWxlY3RvciA9IGV4cG9ydHMuY3JlYXRlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3Ioc2VsZWN0b3JzKSB7XG4gIHZhciBzZWxlY3RvckNyZWF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNyZWF0ZVNlbGVjdG9yO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3JzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yIGV4cGVjdHMgZmlyc3QgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0ICcgKyAoJ3doZXJlIGVhY2ggcHJvcGVydHkgaXMgYSBzZWxlY3RvciwgaW5zdGVhZCByZWNlaXZlZCBhICcgKyB0eXBlb2Ygc2VsZWN0b3JzKSk7XG4gIH1cbiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuICByZXR1cm4gc2VsZWN0b3JDcmVhdG9yKG9iamVjdEtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzW2tleV07XG4gIH0pLCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgdmFsdWVzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGNvbXBvc2l0aW9uLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGNvbXBvc2l0aW9uW29iamVjdEtleXNbaW5kZXhdXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgIH0sIHt9KTtcbiAgfSk7XG59IiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY29tYmluZVJlZHVjZXJzID0gdW5kZWZpbmVkO1xuXG52YXIgX2NvbWJpbmVSZWR1Y2VyczIgPSByZXF1aXJlKCcuL2NvbWJpbmVSZWR1Y2VycycpO1xuXG52YXIgX2NvbWJpbmVSZWR1Y2VyczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21iaW5lUmVkdWNlcnMyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5jb21iaW5lUmVkdWNlcnMgPSBfY29tYmluZVJlZHVjZXJzMy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi41LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTI7biYmU3ltYm9sLmZvcihcInJlYWN0LnBsYWNlaG9sZGVyXCIpO1xudmFyIHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgaz1bZCxjLGUsZyxoLGZdLGw9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBrW2wrK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7QSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGQpfXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0IoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbCxjdXJyZW50RGlzcGF0Y2hlcjpudWxsfSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTChhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbD0wO2w8ZjtsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtlLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpJLmN1cnJlbnR9fVxuZnVuY3Rpb24gTShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZT1hW2hdO3ZhciBmPWIrVChlLGgpO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaCsrKSxnKz1TKGUsZixkLGMpO2Vsc2VcIm9iamVjdFwiPT09ZSYmKGQ9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBWKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1coYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9TShhLGUrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2QpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFcoYSxiLGQsYyxlKXt2YXIgZz1cIlwiO251bGwhPWQmJihnPShcIlwiK2QpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGUpO1UoYSxhYSxiKTtSKGIpfWZ1bmN0aW9uIGJhKGEsYil7dmFyIGQ9SS5jdXJyZW50RGlzcGF0Y2hlcjtudWxsPT09ZD9CKFwiMjc3XCIpOnZvaWQgMDtyZXR1cm4gZC5yZWFkQ29udGV4dChhLGIpfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VyhhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsVixiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpCKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCx1bnN0YWJsZV9yZWFkOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07YS5Db25zdW1lcj1hO2EudW5zdGFibGVfcmVhZD1iYS5iaW5kKG51bGwsYSk7cmV0dXJuIGF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCx1bnN0YWJsZV9Bc3luY01vZGU6eCx1bnN0YWJsZV9Qcm9maWxlcjp1LGNyZWF0ZUVsZW1lbnQ6TCxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe251bGw9PT1hfHx2b2lkIDA9PT1hP0IoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGU9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1JLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTtcbnZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihrPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtlLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TC5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjUuMFwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpJLFxuYXNzaWduOm19fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjUuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLGJhPXJlcXVpcmUoXCJzY2hlZHVsZVwiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGspe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBoPVtjLGQsZSxmLGcsa10sbD0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGhbbCsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHcoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp3KFwiMjI3XCIpO2Z1bmN0aW9uIGRhKGEsYixjLGQsZSxmLGcsayxoKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGVhPSExLGZhPW51bGwsaGE9ITEsaWE9bnVsbCxqYT17b25FcnJvcjpmdW5jdGlvbihhKXtlYT0hMDtmYT1hfX07ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxrLGgpe2VhPSExO2ZhPW51bGw7ZGEuYXBwbHkoamEsYXJndW1lbnRzKX1mdW5jdGlvbiBsYShhLGIsYyxkLGUsZixnLGssaCl7a2EuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGVhKXtpZihlYSl7dmFyIGw9ZmE7ZWE9ITE7ZmE9bnVsbH1lbHNlIHcoXCIxOThcIiksbD12b2lkIDA7aGF8fChoYT0hMCxpYT1sKX19dmFyIG1hPW51bGwsbmE9e307XG5mdW5jdGlvbiBvYSgpe2lmKG1hKWZvcih2YXIgYSBpbiBuYSl7dmFyIGI9bmFbYV0sYz1tYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOncoXCI5NlwiLGEpO2lmKCFwYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp3KFwiOTdcIixhKTtwYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaz1kO3FhLmhhc093blByb3BlcnR5KGspP3coXCI5OVwiLGspOnZvaWQgMDtxYVtrXT1mO3ZhciBoPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoaCl7Zm9yKGUgaW4gaCloLmhhc093blByb3BlcnR5KGUpJiZyYShoW2VdLGcsayk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocmEoZi5yZWdpc3RyYXRpb25OYW1lLGcsayksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp3KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcmEoYSxiLGMpe3NhW2FdP3coXCIxMDBcIixhKTp2b2lkIDA7c2FbYV09Yjt0YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBwYT1bXSxxYT17fSxzYT17fSx0YT17fSx1YT1udWxsLHZhPW51bGwsd2E9bnVsbDtmdW5jdGlvbiB4YShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXdhKGQpO2xhKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geWEoYSxiKXtudWxsPT1iP3coXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24gemEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEFhPW51bGw7ZnVuY3Rpb24gQmEoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspeGEoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZ4YShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBDYShhKXtyZXR1cm4gQmEoYSwhMCl9ZnVuY3Rpb24gRGEoYSl7cmV0dXJuIEJhKGEsITEpfVxudmFyIEVhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe21hP3coXCIxMDFcIik6dm9pZCAwO21hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO29hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtuYS5oYXNPd25Qcm9wZXJ0eShjKSYmbmFbY109PT1kfHwobmFbY10/dyhcIjEwMlwiLGMpOnZvaWQgMCxuYVtjXT1kLGI9ITApfWImJm9hKCl9fTtcbmZ1bmN0aW9uIEZhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dWEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dyhcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIEdhKGEsYil7bnVsbCE9PWEmJihBYT15YShBYSxhKSk7YT1BYTtBYT1udWxsO2lmKGEmJihiP3phKGEsQ2EpOnphKGEsRGEpLEFhP3coXCI5NVwiKTp2b2lkIDAsaGEpKXRocm93IGI9aWEsaGE9ITEsaWE9bnVsbCxiO312YXIgSGE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksSWE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitIYSxKYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0hhO2Z1bmN0aW9uIEthKGEpe2lmKGFbSWFdKXJldHVybiBhW0lhXTtmb3IoOyFhW0lhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0lhXTtyZXR1cm4gNz09PWEudGFnfHw4PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIExhKGEpe2E9YVtJYV07cmV0dXJuIWF8fDchPT1hLnRhZyYmOCE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIE1hKGEpe2lmKDc9PT1hLnRhZ3x8OD09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt3KFwiMzNcIil9ZnVuY3Rpb24gTmEoYSl7cmV0dXJuIGFbSmFdfHxudWxsfWZ1bmN0aW9uIE9hKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNyE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gUGEoYSxiLGMpe2lmKGI9RmEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz15YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz15YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIFFhKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9T2EoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVBhKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspUGEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gUmEoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RmEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXlhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXlhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBUYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlJhKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFVhKGEpe3phKGEsUWEpfXZhciBWYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFdhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFlhPXthbmltYXRpb25lbmQ6V2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246V2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpXYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpXYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFphPXt9LCRhPXt9O1xuVmEmJigkYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBZYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBZYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBZYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBZYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIGFiKGEpe2lmKFphW2FdKXJldHVybiBaYVthXTtpZighWWFbYV0pcmV0dXJuIGE7dmFyIGI9WWFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gJGEpcmV0dXJuIFphW2FdPWJbY107cmV0dXJuIGF9XG52YXIgYmI9YWIoXCJhbmltYXRpb25lbmRcIiksY2I9YWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksZGI9YWIoXCJhbmltYXRpb25zdGFydFwiKSxlYj1hYihcInRyYW5zaXRpb25lbmRcIiksZmI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGdiPW51bGwsaGI9bnVsbCxpYj1udWxsO1xuZnVuY3Rpb24gamIoKXtpZihpYilyZXR1cm4gaWI7dmFyIGEsYj1oYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBnYj9nYi52YWx1ZTpnYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBpYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGtiKCl7cmV0dXJuITB9ZnVuY3Rpb24gbGIoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEMoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2tiOmxiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9bGI7cmV0dXJuIHRoaXN9XG5uKEMucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9a2IpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9a2IpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9a2J9LGlzUGVyc2lzdGVudDpsYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1sYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0MuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuQy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDttYihjKTtyZXR1cm4gY307bWIoQyk7ZnVuY3Rpb24gbmIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gb2IoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOncoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gbWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9bmI7YS5yZWxlYXNlPW9ifXZhciBwYj1DLmV4dGVuZCh7ZGF0YTpudWxsfSkscWI9Qy5leHRlbmQoe2RhdGE6bnVsbH0pLHJiPVs5LDEzLDI3LDMyXSxzYj1WYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csdGI9bnVsbDtWYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYodGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB1Yj1WYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXRiLHZiPVZhJiYoIXNifHx0YiYmODx0YiYmMTE+PXRiKSx3Yj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSx4Yj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx5Yj0hMTtcbmZ1bmN0aW9uIHpiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09cmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBBYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBCYj0hMTtmdW5jdGlvbiBDYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gQWIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3liPSEwO3JldHVybiB3YjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT13YiYmeWI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gRGIoYSxiKXtpZihCYilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhc2ImJnpiKGEsYik/KGE9amIoKSxpYj1oYj1nYj1udWxsLEJiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB2YiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgRWI9e2V2ZW50VHlwZXM6eGIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHNiKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9eGIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9eGIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXhiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBCYj96YihhLGMpJiYoZT14Yi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXhiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHZiJiZcImtvXCIhPT1jLmxvY2FsZSYmKEJifHxlIT09eGIuY29tcG9zaXRpb25TdGFydD9lPT09eGIuY29tcG9zaXRpb25FbmQmJkJiJiYoZj1qYigpKTooZ2I9ZCxoYj1cInZhbHVlXCJpbiBnYj9nYi52YWx1ZTpnYi50ZXh0Q29udGVudCxCYj1cbiEwKSksZT1wYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj1BYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksVWEoZSksZj1lKTpmPW51bGw7KGE9dWI/Q2IoYSxjKTpEYihhLGMpKT8oYj1xYi5nZXRQb29sZWQoeGIuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFVhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEZiPW51bGwsR2I9bnVsbCxIYj1udWxsO2Z1bmN0aW9uIEliKGEpe2lmKGE9dmEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBGYj93KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj11YShhLnN0YXRlTm9kZSk7RmIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBKYihhKXtHYj9IYj9IYi5wdXNoKGEpOkhiPVthXTpHYj1hfWZ1bmN0aW9uIEtiKCl7aWYoR2Ipe3ZhciBhPUdiLGI9SGI7SGI9R2I9bnVsbDtJYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspSWIoYlthXSl9fVxuZnVuY3Rpb24gTGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBNYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBOYigpe312YXIgT2I9ITE7ZnVuY3Rpb24gUGIoYSxiKXtpZihPYilyZXR1cm4gYShiKTtPYj0hMDt0cnl7cmV0dXJuIExiKGEsYil9ZmluYWxseXtpZihPYj0hMSxudWxsIT09R2J8fG51bGwhPT1IYilOYigpLEtiKCl9fXZhciBRYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBSYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVFiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIFNiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBUYihhKXtpZighVmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gVWIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFZiKGEpe3ZhciBiPVViKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBXYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VmIoYSkpfWZ1bmN0aW9uIFhiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1VYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIFliPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELFpiPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLCRiPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsYWM9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGJjPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGNjPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGRjPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGVjPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGZjPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZ2M9RT9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxoYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixpYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wbGFjZWhvbGRlclwiKTpcbjYwMTEzLGpjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBrYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9amMmJmFbamNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBsYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGdjOnJldHVyblwiQXN5bmNNb2RlXCI7Y2FzZSBiYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBhYzpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgZGM6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgY2M6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBpYzpyZXR1cm5cIlBsYWNlaG9sZGVyXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXtzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGVjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgaGM6cmV0dXJuIGE9YS5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9aWYoXCJmdW5jdGlvblwiPT09XG50eXBlb2YgYS50aGVuJiYoYT0xPT09YS5fcmVhY3RTdGF0dXM/YS5fcmVhY3RSZXN1bHQ6bnVsbCkpcmV0dXJuIGxjKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIG1jKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgNDpjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA3OmNhc2UgMTA6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlLGU9bGMoYS50eXBlKTt2YXIgZj1udWxsO2MmJihmPWxjKGMudHlwZSkpO2M9ZTtlPVwiXCI7ZD9lPVwiIChhdCBcIitkLmZpbGVOYW1lLnJlcGxhY2UoWmIsXCJcIikrXCI6XCIrZC5saW5lTnVtYmVyK1wiKVwiOmYmJihlPVwiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCIpO2Y9XCJcXG4gICAgaW4gXCIrKGN8fFwiVW5rbm93blwiKStlO2JyZWFrIGE7ZGVmYXVsdDpmPVwiXCJ9Yis9ZjthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIG5jPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxwYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHFjPXt9LHJjPXt9O1xuZnVuY3Rpb24gc2MoYSl7aWYocGMuY2FsbChyYyxhKSlyZXR1cm4hMDtpZihwYy5jYWxsKHFjLGEpKXJldHVybiExO2lmKG5jLnRlc3QoYSkpcmV0dXJuIHJjW2FdPSEwO3FjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHRjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gdWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBGKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtHW2JdPW5ldyBGKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgdmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB3YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2YyxcbndjKTtHW2JdPW5ldyBGKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0cudGFiSW5kZXg9bmV3IEYoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24geGMoYSxiLGMsZCl7dmFyIGU9Ry5oYXNPd25Qcm9wZXJ0eShiKT9HW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwodWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3NjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB5YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gemMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9eWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBDYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnhjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBEYyhhLGIpe0NjKGEsYik7dmFyIGM9eWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RWMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRWMoYSxiLnR5cGUseWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBGYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtkPWEudmFsdWU7Y3x8Yj09PWR8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRWMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBHYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBIYyhhLGIsYyl7YT1DLmdldFBvb2xlZChHYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0piKGMpO1VhKGEpO3JldHVybiBhfXZhciBJYz1udWxsLEpjPW51bGw7ZnVuY3Rpb24gS2MoYSl7R2EoYSwhMSl9XG5mdW5jdGlvbiBMYyhhKXt2YXIgYj1NYShhKTtpZihYYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBNYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBOYz0hMTtWYSYmKE5jPVRiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIE9jKCl7SWMmJihJYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixQYyksSmM9SWM9bnVsbCl9ZnVuY3Rpb24gUGMoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkxjKEpjKSYmKGE9SGMoSmMsYSxTYihhKSksUGIoS2MsYSkpfWZ1bmN0aW9uIFFjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhPYygpLEljPWIsSmM9YyxJYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixQYykpOlwiYmx1clwiPT09YSYmT2MoKX1mdW5jdGlvbiBSYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBMYyhKYyl9XG5mdW5jdGlvbiBTYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIExjKGIpfWZ1bmN0aW9uIFRjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIExjKGIpfVxudmFyIFVjPXtldmVudFR5cGVzOkdjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6TmMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP01hKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxrPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1NYzpSYihlKT9OYz9mPVRjOihmPVJjLGc9UWMpOihrPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVNjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBIYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkVjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFZjPUMuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxXYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBYYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVdjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gWWMoKXtyZXR1cm4gWGN9XG52YXIgWmM9MCwkYz0wLGFkPSExLGJkPSExLGNkPVZjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpZYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1aYztaYz1hLnNjcmVlblg7cmV0dXJuIGFkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooYWQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj0kYzskYz1hLnNjcmVlblk7cmV0dXJuIGJkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooYmQ9ITAsMCl9fSksZGQ9Y2QuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGVkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxmZD17ZXZlbnRUeXBlczplZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9LYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGs9dm9pZCAwLGg9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9Y2Qsaz1lZC5tb3VzZUxlYXZlLGg9ZWQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9ZGQsaz1lZC5wb2ludGVyTGVhdmUsaD1lZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6TWEoZik7ZT1udWxsPT1iP2U6TWEoYik7YT1nLmdldFBvb2xlZChrLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGgsYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihnPWI7ZztnPU9hKGcpKWwrKztnPTA7Zm9yKGg9ZTtoO2g9T2EoaCkpZysrO2Zvcig7MDxsLWc7KWI9T2EoYiksbC0tO2Zvcig7MDxnLWw7KWU9T2EoZSksZy0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9T2EoYik7ZT1PYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1PYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPU9hKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspUmEoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspUmEoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fSxnZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIGhkKGEsYil7cmV0dXJuIGE9PT1iPzAhPT1hfHwwIT09Ynx8MS9hPT09MS9iOmEhPT1hJiZiIT09Yn1cbmZ1bmN0aW9uIGlkKGEsYil7aWYoaGQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFnZC5jYWxsKGIsY1tkXSl8fCFoZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGpkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiA1PT09Yi50YWc/MjozfWZ1bmN0aW9uIGtkKGEpezIhPT1qZChhKT93KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGxkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWpkKGEpLDM9PT1iP3coXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGtkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGtkKGUpLGI7Zz1nLnNpYmxpbmd9dyhcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaz1lLmNoaWxkO2s7KXtpZihrPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGs9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9az1rLnNpYmxpbmd9aWYoIWcpe2ZvcihrPWYuY2hpbGQ7azspe2lmKGs9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaz09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31rPWsuc2libGluZ31nP1xudm9pZCAwOncoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD93KFwiMTkwXCIpOnZvaWQgMH01IT09Yy50YWc/dyhcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBtZChhKXthPWxkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDc9PT1iLnRhZ3x8OD09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIG5kPUMuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxvZD1DLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHBkPVZjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gcWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHNkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx0ZD1WYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3NkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpZYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9xZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9xZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHVkPWNkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx2ZD1WYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpZY30pLHdkPUMuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHhkPWNkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSkseWQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbYmIsXCJhbmltYXRpb25FbmRcIl0sW2NiLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtkYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2ViLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0semQ9e30sQWQ9e307ZnVuY3Rpb24gQmQoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt6ZFthXT1iO0FkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7QmQoYSwhMCl9KTt5ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0JkKGEsITEpfSk7XG52YXIgQ2Q9e2V2ZW50VHlwZXM6emQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QWRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUFkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cWQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXRkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1wZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWNkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG51ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXZkO2JyZWFrO2Nhc2UgYmI6Y2FzZSBjYjpjYXNlIGRiOmE9bmQ7YnJlYWs7Y2FzZSBlYjphPXdkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVZjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eGQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1vZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWRkO2JyZWFrO2RlZmF1bHQ6YT1DfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7VWEoYik7cmV0dXJuIGJ9fSxEZD1DZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5FZD1bXTtmdW5jdGlvbiBGZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD01IT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1LYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1TYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxrPTA7azxwYS5sZW5ndGg7aysrKXt2YXIgaD1wYVtrXTtoJiYoaD1oLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz15YShnLGgpKX1HYShnLCExKX19dmFyIEdkPSEwO1xuZnVuY3Rpb24gSChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9IZDpJZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEpkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KERkKGEpP0hkOklkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gSGQoYSxiKXtNYihJZCxhLGIpfVxuZnVuY3Rpb24gSWQoYSxiKXtpZihHZCl7dmFyIGM9U2IoYik7Yz1LYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWpkKGMpfHwoYz1udWxsKTtpZihFZC5sZW5ndGgpe3ZhciBkPUVkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e1BiKEZkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RWQubGVuZ3RoJiZFZC5wdXNoKGEpfX19dmFyIEtkPXt9LExkPTAsTWQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gTmQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsTWQpfHwoYVtNZF09TGQrKyxLZFthW01kXV09e30pO3JldHVybiBLZFthW01kXV19ZnVuY3Rpb24gUGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIFFkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJkKGEsYil7dmFyIGM9UWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9UWQoYyl9fWZ1bmN0aW9uIFNkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/U2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gVGQoKXtmb3IodmFyIGE9d2luZG93LGI9UGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXthPWIuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3fWNhdGNoKGMpe2JyZWFrfWI9UGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1WYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxYZD1udWxsLFlkPW51bGwsWmQ9bnVsbCwkZD0hMTtcbmZ1bmN0aW9uIGFlKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoJGR8fG51bGw9PVhkfHxYZCE9PVBkKGMpKXJldHVybiBudWxsO2M9WGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmVWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gWmQmJmlkKFpkLGMpP251bGw6KFpkPWMsYT1DLmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxVYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1OZChlKTtmPXRhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaz1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGspfHwhZVtrXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/TWEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihSYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gJGQ9ITEsYWUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoVmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBhZShjLGQpfXJldHVybiBudWxsfX07RWEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt1YT1OYTt2YT1MYTt3YT1NYTtFYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkNkLEVudGVyTGVhdmVFdmVudFBsdWdpbjpmZCxDaGFuZ2VFdmVudFBsdWdpbjpVYyxTZWxlY3RFdmVudFBsdWdpbjpiZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOkVifSk7ZnVuY3Rpb24gY2UoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkZShhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWNlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBlZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIreWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGZlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD93KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGdlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/dyhcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOncoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnljKGMpfX1cbmZ1bmN0aW9uIGhlKGEsYil7dmFyIGM9eWMoYi52YWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPVwiXCIreWMoYi5kZWZhdWx0VmFsdWUpKX1mdW5jdGlvbiBpZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgamU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24ga2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBsZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWU9dm9pZCAwLG5lPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWplLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21lPW1lfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21lLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPW1lLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9lKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FlLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGVbYl09cGVbYV19KX0pO1xuZnVuY3Rpb24gcmUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8cGUuaGFzT3duUHJvcGVydHkoZSkmJnBlW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHNlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB0ZShhLGIpe2ImJihzZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dyhcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj93KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOncoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3coXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiB1ZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiB2ZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1OZChhKTtiPXRhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpKZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6SmQoXCJmb2N1c1wiLGEpO0pkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpUYihlKSYmSmQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09ZmIuaW5kZXhPZihlKSYmSChlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB3ZSgpe312YXIgeGU9bnVsbCx5ZT1udWxsO1xuZnVuY3Rpb24gemUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIEFlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1mdW5jdGlvbiBCZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfVxuZnVuY3Rpb24gQ2UoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIERlPVtdLEVlPS0xO2Z1bmN0aW9uIEkoYSl7MD5FZXx8KGEuY3VycmVudD1EZVtFZV0sRGVbRWVdPW51bGwsRWUtLSl9ZnVuY3Rpb24gSihhLGIpe0VlKys7RGVbRWVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgRmU9e30sSz17Y3VycmVudDpGZX0sTD17Y3VycmVudDohMX0sR2U9RmU7XG5mdW5jdGlvbiBIZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEZlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIE0oYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBJZShhKXtJKEwsYSk7SShLLGEpfWZ1bmN0aW9uIEplKGEpe0koTCxhKTtJKEssYSl9XG5mdW5jdGlvbiBLZShhLGIsYyl7Sy5jdXJyZW50IT09RmU/dyhcIjE2OFwiKTp2b2lkIDA7SihLLGIsYSk7SihMLGMsYSl9ZnVuY3Rpb24gTGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6dyhcIjEwOFwiLGxjKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIE1lKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8RmU7R2U9Sy5jdXJyZW50O0ooSyxiLGEpO0ooTCxMLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6dyhcIjE2OVwiKTtjPyhiPUxlKGEsYixHZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEkoTCxhKSxJKEssYSksSihLLGIsYSkpOkkoTCxhKTtKKEwsYyxhKX12YXIgT2U9bnVsbCxQZT1udWxsO2Z1bmN0aW9uIFFlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBSZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtPZT1RZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7UGU9UWUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFNlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIFRlKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmXCJvYmplY3RcIj09PXR5cGVvZiBhLmlzUmVhY3RDb21wb25lbnQmJm51bGwhPT1hLmlzUmVhY3RDb21wb25lbnR9XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IFNlKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7ZC5leHBpcmF0aW9uVGltZT1iIT09YS5wZW5kaW5nUHJvcHM/YzphLmV4cGlyYXRpb25UaW1lO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2QuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7ZC5zaWJsaW5nPWEuc2libGluZztcbmQuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIFZlKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7dmFyIGY9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKWY9VGUoZCk/Mjo0O2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NztlbHNlIGE6c3dpdGNoKGQpe2Nhc2UgYmM6cmV0dXJuIFdlKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2UgZ2M6Zj0xMDtifD0zO2JyZWFrO2Nhc2UgY2M6Zj0xMDtifD0yO2JyZWFrO2Nhc2UgZGM6cmV0dXJuIGQ9bmV3IFNlKDE1LGEsZSxifDQpLGQudHlwZT1kYyxkLmV4cGlyYXRpb25UaW1lPWMsZDtjYXNlIGljOmY9MTY7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIGVjOmY9MTI7YnJlYWsgYTtjYXNlIGZjOmY9MTE7YnJlYWsgYTtjYXNlIGhjOmY9MTM7YnJlYWsgYTtkZWZhdWx0OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnRoZW4pe2Y9NDticmVhayBhfX13KFwiMTMwXCIsXG5udWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgU2UoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIFdlKGEsYixjLGQpe2E9bmV3IFNlKDksYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBYZShhLGIsYyl7YT1uZXcgU2UoOCxhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFllKGEsYixjKXtiPW5ldyBTZSg2LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFplKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPmI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZTxiJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTskZShiLGEpfWZ1bmN0aW9uICRlKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZD5hKSYmKGU9ZCk7YT1lOzAhPT1hJiYwIT09YyYmYzxhJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfXZhciBhZj0hMTtcbmZ1bmN0aW9uIGJmKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBjZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBkZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBlZihhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBmZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9YmYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9YmYoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9YmYoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPWNmKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPWNmKGQpKTtudWxsPT09ZXx8ZD09PWU/ZWYoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhlZihkLGIpLGVmKGUsYikpOihlZihkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9YmYoYS5tZW1vaXplZFN0YXRlKTpoZihhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIGhmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPWNmKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGpmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6YWY9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBrZihhLGIsYyxkLGUpe2FmPSExO2I9aGYoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGs9MCxoPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1oOyl7dmFyIG09aC5leHBpcmF0aW9uVGltZTtpZihtPmUpe2lmKG51bGw9PT1nJiYoZz1oLGY9bCksMD09PWt8fGs+bSlrPW19ZWxzZSBsPWpmKGEsYixoLGwsYyxkKSxudWxsIT09aC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixoLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWg6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWgsYi5sYXN0RWZmZWN0PWgpKTtoPWgubmV4dH1tPW51bGw7Zm9yKGg9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1oOyl7dmFyIHQ9aC5leHBpcmF0aW9uVGltZTtpZih0PmUpe2lmKG51bGw9PT1tJiYobT1oLG51bGw9PT1nJiYoZj1sKSksMD09PWt8fGs+dClrPXR9ZWxzZSBsPWpmKGEsYixoLGwsYyxkKSxcbm51bGwhPT1oLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGgubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aDooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1oLGIubGFzdENhcHR1cmVkRWZmZWN0PWgpKTtoPWgubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9azthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIGxmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTttZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7bWYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIG1mKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3coXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6bWMoYil9fXZhciBvZj17Y3VycmVudDpudWxsfSxwZj1udWxsLHFmPW51bGwscmY9bnVsbDtmdW5jdGlvbiBzZihhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtKKG9mLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB0ZihhKXt2YXIgYj1vZi5jdXJyZW50O0kob2YsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB1ZihhKXtwZj1hO3JmPXFmPW51bGw7YS5maXJzdENvbnRleHREZXBlbmRlbmN5PW51bGx9XG5mdW5jdGlvbiB2ZihhLGIpe2lmKHJmIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilyZj1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09cWY/KG51bGw9PT1wZj93KFwiMjc3XCIpOnZvaWQgMCxwZi5maXJzdENvbnRleHREZXBlbmRlbmN5PXFmPWIpOnFmPXFmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zj17fSxOPXtjdXJyZW50OndmfSx4Zj17Y3VycmVudDp3Zn0seWY9e2N1cnJlbnQ6d2Z9O2Z1bmN0aW9uIHpmKGEpe2E9PT13Zj93KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEFmKGEsYil7Sih5ZixiLGEpO0ooeGYsYSxhKTtKKE4sd2YsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPWxlKGIsYyl9SShOLGEpO0ooTixiLGEpfWZ1bmN0aW9uIEJmKGEpe0koTixhKTtJKHhmLGEpO0koeWYsYSl9ZnVuY3Rpb24gQ2YoYSl7emYoeWYuY3VycmVudCk7dmFyIGI9emYoTi5jdXJyZW50KTt2YXIgYz1sZShiLGEudHlwZSk7YiE9PWMmJihKKHhmLGEsYSksSihOLGMsYSkpfWZ1bmN0aW9uIERmKGEpe3hmLmN1cnJlbnQ9PT1hJiYoSShOLGEpLEkoeGYsYSkpfXZhciBFZj0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEZmKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIEpmPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09amQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2YoKTtkPUhmKGQsYSk7dmFyIGU9ZGYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO2ZmKGEsZSk7SWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2YoKTtkPUhmKGQsYSk7dmFyIGU9ZGYoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7ZmYoYSxlKTtJZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZigpO2M9SGYoYyxhKTt2YXIgZD1kZihjKTtkLnRhZz0yO3ZvaWQgMCE9PVxuYiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO2ZmKGEsZCk7SWYoYSxjKX19O2Z1bmN0aW9uIEtmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWlkKGMsZCl8fCFpZChlLGYpOiEwfWZ1bmN0aW9uIExmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE1mKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlLGY9TShiKT9HZTpLLmN1cnJlbnQ7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZjtlLmNvbnRleHQ9SGUoYSxmKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihrZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmYoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJlxuZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoa2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBOZj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gT2YoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnJiYzIT09Yy50YWc/dyhcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6dyhcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWYmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/dyhcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOncoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFBmKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ3KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBRZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVVlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGw9PT1ifHw4IT09Yi50YWcpcmV0dXJuIGI9WGUoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9T2YoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZlKGMsYS5tb2RlLGQpO2QucmVmPU9mKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuWWUoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw5IT09Yi50YWcpcmV0dXJuIGI9V2UoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHQoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVhlKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlICRiOnJldHVybiBjPVZlKGIsYS5tb2RlLGMpLGMucmVmPU9mKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBhYzpyZXR1cm4gYj1ZZShiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoTmYoYil8fGtjKGIpKXJldHVybiBiPVdlKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49XG5hLGI7UGYoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ayhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlICRiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YmM/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmgoYSxiLGMsZCk6bnVsbDtjYXNlIGFjOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE5mKGMpfHxrYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UGYoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsayhiLGEsXCJcIitkLGUpO1xuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWJjP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6aChiLGEsZCxlKTtjYXNlIGFjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE5mKGQpfHxrYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UGYoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHI9bnVsbCxwPWcsbT1nPTAscT1udWxsO251bGwhPT1wJiZtPGgubGVuZ3RoO20rKyl7cC5pbmRleD5tPyhxPXAscD1udWxsKTpxPXAuc2libGluZzt2YXIgdj14KGUscCxoW21dLGspO2lmKG51bGw9PT12KXtudWxsPT09cCYmKHA9cSk7YnJlYWt9YSYmcCYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUsXG5wKTtnPWYodixnLG0pO251bGw9PT1yP2w9djpyLnNpYmxpbmc9djtyPXY7cD1xfWlmKG09PT1oLmxlbmd0aClyZXR1cm4gYyhlLHApLGw7aWYobnVsbD09PXApe2Zvcig7bTxoLmxlbmd0aDttKyspaWYocD10KGUsaFttXSxrKSlnPWYocCxnLG0pLG51bGw9PT1yP2w9cDpyLnNpYmxpbmc9cCxyPXA7cmV0dXJuIGx9Zm9yKHA9ZChlLHApO208aC5sZW5ndGg7bSsrKWlmKHE9eihwLGUsbSxoW21dLGspKWEmJm51bGwhPT1xLmFsdGVybmF0ZSYmcC5kZWxldGUobnVsbD09PXEua2V5P206cS5rZXkpLGc9ZihxLGcsbSksbnVsbD09PXI/bD1xOnIuc2libGluZz1xLHI9cTthJiZwLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHUoZSxnLGgsayl7dmFyIGw9a2MoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/dyhcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD93KFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIG09bD1udWxsLHA9ZyxyPWc9XG4wLHE9bnVsbCx2PWgubmV4dCgpO251bGwhPT1wJiYhdi5kb25lO3IrKyx2PWgubmV4dCgpKXtwLmluZGV4PnI/KHE9cCxwPW51bGwpOnE9cC5zaWJsaW5nO3ZhciB1PXgoZSxwLHYudmFsdWUsayk7aWYobnVsbD09PXUpe3B8fChwPXEpO2JyZWFrfWEmJnAmJm51bGw9PT11LmFsdGVybmF0ZSYmYihlLHApO2c9Zih1LGcscik7bnVsbD09PW0/bD11Om0uc2libGluZz11O209dTtwPXF9aWYodi5kb25lKXJldHVybiBjKGUscCksbDtpZihudWxsPT09cCl7Zm9yKDshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9dChlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHIpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO3JldHVybiBsfWZvcihwPWQoZSxwKTshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9eihwLGUscix2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZwLmRlbGV0ZShudWxsPT09di5rZXk/cjp2LmtleSksZz1mKHYsZyxyKSxudWxsPT09XG5tP2w9djptLnNpYmxpbmc9dixtPXYpO2EmJnAuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWJjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlICRiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig5PT09ay50YWc/Zi50eXBlPT09YmM6ay50eXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1iYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9T2YoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YmM/KGQ9V2UoZi5wcm9wcy5jaGlsZHJlbixcbmEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmUoZixhLm1vZGUsaCksaC5yZWY9T2YoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIGFjOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDY9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9WWUoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY4PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49XG5hLGE9ZCk6KGMoYSxkKSxkPVhlKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE5mKGYpKXJldHVybiB5KGEsZCxmLGgpO2lmKGtjKGYpKXJldHVybiB1KGEsZCxmLGgpO2wmJlBmKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDM6Y2FzZSAwOmg9YS50eXBlLHcoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBSZj1RZighMCksU2Y9UWYoITEpLFRmPW51bGwsVWY9bnVsbCxWZj0hMTtmdW5jdGlvbiBXZihhLGIpe3ZhciBjPW5ldyBTZSg3LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFhmKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDc6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDg6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIFlmKGEpe2lmKFZmKXt2YXIgYj1VZjtpZihiKXt2YXIgYz1iO2lmKCFYZihhLGIpKXtiPUJlKGMpO2lmKCFifHwhWGYoYSxiKSl7YS5lZmZlY3RUYWd8PTI7VmY9ITE7VGY9YTtyZXR1cm59V2YoVGYsYyl9VGY9YTtVZj1DZShiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLFZmPSExLFRmPWF9fVxuZnVuY3Rpb24gWmYoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjchPT1hLnRhZyYmNSE9PWEudGFnOylhPWEucmV0dXJuO1RmPWF9ZnVuY3Rpb24gJGYoYSl7aWYoYSE9PVRmKXJldHVybiExO2lmKCFWZilyZXR1cm4gWmYoYSksVmY9ITAsITE7dmFyIGI9YS50eXBlO2lmKDchPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFBZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9VWY7YjspV2YoYSxiKSxiPUJlKGIpO1pmKGEpO1VmPVRmP0JlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIGFnKCl7VWY9VGY9bnVsbDtWZj0hMX1cbmZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhLl9yZWFjdFN0YXR1cyl7Y2FzZSAxOnJldHVybiBhLl9yZWFjdFJlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVhY3RSZXN1bHQ7Y2FzZSAwOnRocm93IGE7ZGVmYXVsdDp0aHJvdyBhLl9yZWFjdFN0YXR1cz0wLGEudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fcmVhY3RTdGF0dXMpe2EuX3JlYWN0U3RhdHVzPTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7dmFyIGM9Yi5kZWZhdWx0O2I9dm9pZCAwIT09YyYmbnVsbCE9PWM/YzpifWEuX3JlYWN0UmVzdWx0PWJ9fSxmdW5jdGlvbihiKXswPT09YS5fcmVhY3RTdGF0dXMmJihhLl9yZWFjdFN0YXR1cz0yLGEuX3JlYWN0UmVzdWx0PWIpfSksYTt9fXZhciBjZz1ZYi5SZWFjdEN1cnJlbnRPd25lcjtmdW5jdGlvbiBPKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/U2YoYixudWxsLGMsZCk6UmYoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBkZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7aWYoIUwuY3VycmVudCYmYi5tZW1vaXplZFByb3BzPT09ZCYmZj09PShudWxsIT09YT9hLnJlZjpudWxsKSlyZXR1cm4gZWcoYSxiLGUpO2M9YyhkLGYpO08oYSxiLGMsZSk7Yi5tZW1vaXplZFByb3BzPWQ7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gZmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBnZyhhLGIsYyxkLGUpe3ZhciBmPU0oYyk/R2U6Sy5jdXJyZW50O2Y9SGUoYixmKTt1ZihiLGUpO2M9YyhkLGYpO2IuZWZmZWN0VGFnfD0xO08oYSxiLGMsZSk7Yi5tZW1vaXplZFByb3BzPWQ7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoZyhhLGIsYyxkLGUpe2lmKE0oYykpe3ZhciBmPSEwO01lKGIpfWVsc2UgZj0hMTt1ZihiLGUpO2lmKG51bGw9PT1hKWlmKG51bGw9PT1iLnN0YXRlTm9kZSl7dmFyIGc9TShjKT9HZTpLLmN1cnJlbnQsaz1jLmNvbnRleHRUeXBlcyxoPW51bGwhPT1rJiZ2b2lkIDAhPT1rO2s9aD9IZShiLGcpOkZlO3ZhciBsPW5ldyBjKGQsayk7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1sLnN0YXRlJiZ2b2lkIDAhPT1sLnN0YXRlP2wuc3RhdGU6bnVsbDtsLnVwZGF0ZXI9SmY7Yi5zdGF0ZU5vZGU9bDtsLl9yZWFjdEludGVybmFsRmliZXI9YjtoJiYoaD1iLnN0YXRlTm9kZSxoLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZyxoLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWspO01mKGIsYyxkLGUpO2Q9ITB9ZWxzZXtnPWIuc3RhdGVOb2RlO2s9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9azt2YXIgbT1nLmNvbnRleHQ7XG5oPU0oYyk/R2U6Sy5jdXJyZW50O2g9SGUoYixoKTt2YXIgdD1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGshPT1kfHxtIT09aCkmJkxmKGIsZyxkLGgpO2FmPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTttPWcuc3RhdGU9eDt2YXIgej1iLnVwZGF0ZVF1ZXVlO251bGwhPT16JiYoa2YoYix6LGQsZyxlKSxtPWIubWVtb2l6ZWRTdGF0ZSk7ayE9PWR8fHghPT1tfHxMLmN1cnJlbnR8fGFmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgdCYmKEZmKGIsYyx0LGQpLG09Yi5tZW1vaXplZFN0YXRlKSwoaz1hZnx8S2YoYixjLGssZCx4LG0saCkpPyhsfHxcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9bSksZy5wcm9wcz1kLGcuc3RhdGU9bSxnLmNvbnRleHQ9aCxkPWspOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaz1cbmIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWssbT1nLmNvbnRleHQsaD1NKGMpP0dlOksuY3VycmVudCxoPUhlKGIsaCksdD1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGshPT1kfHxtIT09aCkmJkxmKGIsZyxkLGgpLGFmPSExLG09Yi5tZW1vaXplZFN0YXRlLHg9Zy5zdGF0ZT1tLHo9Yi51cGRhdGVRdWV1ZSxudWxsIT09eiYmKGtmKGIseixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUpLGshPT1kfHxtIT09eHx8TC5jdXJyZW50fHxhZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHQmJihGZihiLGMsdCxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKHQ9YWZ8fEtmKGIsYyxrLGQsXG5tLHgsaCkpPyhsfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8az09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZtPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWgsZD10KTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZtPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZtPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGlnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGlnKGEsYixjLGQsZSxmKXtmZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmTmUoYixjLCExKSxlZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtjZy5jdXJyZW50PWI7dmFyIGs9Zz9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmcmJihPKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7TyhhLGIsayxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9ZC5wcm9wcztlJiZOZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGpnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/S2UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmS2UoYSxiLmNvbnRleHQsITEpO0FmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG5nKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gb2coYSxiLGMsZCl7bnVsbCE9PWE/dyhcIjE1NVwiKTp2b2lkIDA7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudGhlbil7Yz1iZyhjKTt2YXIgZj1jO2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/VGUoZik/MzoxOnZvaWQgMCE9PWYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPzE0OjQ7Zj1iLnRhZz1mO3ZhciBnPW5nKGMsZSk7c3dpdGNoKGYpe2Nhc2UgMTpyZXR1cm4gZ2coYSxiLGMsZyxkKTtjYXNlIDM6cmV0dXJuIGhnKGEsYixjLGcsZCk7Y2FzZSAxNDpyZXR1cm4gZGcoYSxiLGMsZyxkKTtkZWZhdWx0OncoXCIyODNcIixjKX19Zj1IZShiLEsuY3VycmVudCk7dWYoYixkKTtmPWMoZSxmKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5yZW5kZXImJnZvaWQgMD09PWYuJCR0eXBlb2Ype2IudGFnPTI7TShjKT9cbihnPSEwLE1lKGIpKTpnPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09Zi5zdGF0ZSYmdm9pZCAwIT09Zi5zdGF0ZT9mLnN0YXRlOm51bGw7dmFyIGs9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGsmJkZmKGIsYyxrLGUpO2YudXBkYXRlcj1KZjtiLnN0YXRlTm9kZT1mO2YuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO01mKGIsYyxlLGQpO3JldHVybiBpZyhhLGIsYywhMCxnLGQpfWIudGFnPTA7TyhhLGIsZixkKTtiLm1lbW9pemVkUHJvcHM9ZTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGVnKGEsYixjKXtudWxsIT09YSYmKGIuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3kpO3ZhciBkPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwPT09ZHx8ZD5jKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD93KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYoIUwuY3VycmVudCYmKDA9PT1kfHxkPmMpKXtzd2l0Y2goYi50YWcpe2Nhc2UgNTpqZyhiKTthZygpO2JyZWFrO2Nhc2UgNzpDZihiKTticmVhaztjYXNlIDI6TShiLnR5cGUpJiZNZShiKTticmVhaztjYXNlIDM6TShiLnR5cGUuX3JlYWN0UmVzdWx0KSYmTWUoYik7YnJlYWs7Y2FzZSA2OkFmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMjpzZihiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSl9cmV0dXJuIGVnKGEsYixjKX1iLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDQ6cmV0dXJuIG9nKGEsYixiLnR5cGUsYyk7Y2FzZSAwOnJldHVybiBnZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTp2YXIgZT1iLnR5cGUuX3JlYWN0UmVzdWx0O2Q9Yi5wZW5kaW5nUHJvcHM7YT1nZyhhLGIsZSxuZyhlLGQpLGMpO2IubWVtb2l6ZWRQcm9wcz1kO3JldHVybiBhO1xuY2FzZSAyOnJldHVybiBoZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMzpyZXR1cm4gZT1iLnR5cGUuX3JlYWN0UmVzdWx0LGQ9Yi5wZW5kaW5nUHJvcHMsYT1oZyhhLGIsZSxuZyhlLGQpLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGE7Y2FzZSA1OmpnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD93KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO2tmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpYWcoKSxiPWVnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKVVmPUNlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFRmPWIsZT1WZj0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVNmKGIsbnVsbCxkLGMpKTooTyhhLGIsZCxjKSxhZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7XG5jYXNlIDc6Q2YoYik7bnVsbD09PWEmJllmKGIpO2Q9Yi50eXBlO2U9Yi5wZW5kaW5nUHJvcHM7dmFyIGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuO0FlKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZBZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTtmZyhhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZSxiPW51bGwpOihPKGEsYixnLGMpLGIubWVtb2l6ZWRQcm9wcz1lLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSA4OnJldHVybiBudWxsPT09YSYmWWYoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDY6cmV0dXJuIEFmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVJmKGIsbnVsbCxkLGMpOk8oYSxiLGQsYyksYi5tZW1vaXplZFByb3BzPVxuZCxiLmNoaWxkO2Nhc2UgMTM6cmV0dXJuIGRnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUuX3JlYWN0UmVzdWx0LGQ9Yi5wZW5kaW5nUHJvcHMsYT1kZyhhLGIsZSxuZyhlLGQpLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGE7Y2FzZSA5OnJldHVybiBkPWIucGVuZGluZ1Byb3BzLE8oYSxiLGQsYyksYi5tZW1vaXplZFByb3BzPWQsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLE8oYSxiLGQsYyksYi5tZW1vaXplZFByb3BzPWQsYi5jaGlsZDtjYXNlIDE1OnJldHVybiBkPWIucGVuZGluZ1Byb3BzLE8oYSxiLGQuY2hpbGRyZW4sYyksYi5tZW1vaXplZFByb3BzPWQsYi5jaGlsZDtjYXNlIDEyOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO3NmKGIsZik7aWYobnVsbCE9PWcpe3ZhciBrPWcudmFsdWU7XG5mPWs9PT1mJiYoMCE9PWt8fDEvaz09PTEvZil8fGshPT1rJiZmIT09Zj8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoayxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUwuY3VycmVudCl7Yj1lZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZz1iLmNoaWxkLG51bGwhPT1nJiYoZy5yZXR1cm49Yik7bnVsbCE9PWc7KXtrPWcuZmlyc3RDb250ZXh0RGVwZW5kZW5jeTtpZihudWxsIT09ayl7ZG97aWYoay5jb250ZXh0PT09ZCYmMCE9PShrLm9ic2VydmVkQml0cyZmKSl7aWYoMj09PWcudGFnfHwzPT09Zy50YWcpe3ZhciBoPWRmKGMpO2gudGFnPTI7ZmYoZyxoKX1pZigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5jKWcuZXhwaXJhdGlvblRpbWU9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoMD09PWguZXhwaXJhdGlvblRpbWV8fFxuaC5leHBpcmF0aW9uVGltZT5jKSYmKGguZXhwaXJhdGlvblRpbWU9Yyk7Zm9yKHZhciBsPWcucmV0dXJuO251bGwhPT1sOyl7aD1sLmFsdGVybmF0ZTtpZigwPT09bC5jaGlsZEV4cGlyYXRpb25UaW1lfHxsLmNoaWxkRXhwaXJhdGlvblRpbWU+YylsLmNoaWxkRXhwaXJhdGlvblRpbWU9YyxudWxsIT09aCYmKDA9PT1oLmNoaWxkRXhwaXJhdGlvblRpbWV8fGguY2hpbGRFeHBpcmF0aW9uVGltZT5jKSYmKGguY2hpbGRFeHBpcmF0aW9uVGltZT1jKTtlbHNlIGlmKG51bGwhPT1oJiYoMD09PWguY2hpbGRFeHBpcmF0aW9uVGltZXx8aC5jaGlsZEV4cGlyYXRpb25UaW1lPmMpKWguY2hpbGRFeHBpcmF0aW9uVGltZT1jO2Vsc2UgYnJlYWs7bD1sLnJldHVybn19aD1nLmNoaWxkO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rKX1lbHNlIGg9MTI9PT1nLnRhZz9nLnR5cGU9PT1iLnR5cGU/bnVsbDpnLmNoaWxkOmcuY2hpbGQ7aWYobnVsbCE9PWgpaC5yZXR1cm49ZztlbHNlIGZvcihoPWc7bnVsbCE9PVxuaDspe2lmKGg9PT1iKXtoPW51bGw7YnJlYWt9Zz1oLnNpYmxpbmc7aWYobnVsbCE9PWcpe2cucmV0dXJuPWgucmV0dXJuO2g9ZzticmVha31oPWgucmV0dXJufWc9aH19TyhhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAxMTpyZXR1cm4gZj1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sdWYoYixjKSxmPXZmKGYsZC51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGU9ZShmKSxiLmVmZmVjdFRhZ3w9MSxPKGEsYixlLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7ZGVmYXVsdDp3KFwiMTU2XCIpfX1mdW5jdGlvbiBxZyhhKXthLmVmZmVjdFRhZ3w9NH12YXIgcmc9dm9pZCAwLHNnPXZvaWQgMCx0Zz12b2lkIDA7cmc9ZnVuY3Rpb24oKXt9O3NnPWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1jKSYmcWcoYil9O3RnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZxZyhiKX07XG5mdW5jdGlvbiB1ZyhhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPW1jKGMpKTtudWxsIT09YyYmbGMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmbGMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gdmcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7d2coYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24geGcoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFBlJiZQZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDM6dmcoYSk7dmFyIGI9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXt3ZyhhLGMpfWJyZWFrO2Nhc2UgNzp2ZyhhKTticmVhaztjYXNlIDY6eWcoYSl9fWZ1bmN0aW9uIHpnKGEpe3JldHVybiA3PT09YS50YWd8fDU9PT1hLnRhZ3x8Nj09PWEudGFnfVxuZnVuY3Rpb24gQWcoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoemcoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXcoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDc6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgNTpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDY6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp3KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYob2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fHpnKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs3IT09Yy50YWcmJjghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw2PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNz09PWUudGFnfHw4PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaz1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxrKTpmLmluc2VydEJlZm9yZShnLGspfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhmPWIsZz1lLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT8oaz1mLnBhcmVudE5vZGUsay5pbnNlcnRCZWZvcmUoZyxmKSk6KGs9ZixrLmFwcGVuZENoaWxkKGcpKSxudWxsPT09ay5vbmNsaWNrJiYoay5vbmNsaWNrPXdlKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7ZWxzZSBpZig2IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1cbmU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24geWcoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/dyhcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDc6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA2OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDc9PT1iLnRhZ3x8OD09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKHhnKGcpLG51bGwhPT1nLmNoaWxkJiY2IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDY9PT1iLnRhZz8oZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGU9ITApOnhnKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs2PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIEJnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAzOmJyZWFrO2Nhc2UgNzp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tKYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQ2MoYyxkKTt1ZShhLGUpO2I9dWUoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxrPWZbZSsxXTtcInN0eWxlXCI9PT1nP3JlKGMsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9uZShjLGspOlwiY2hpbGRyZW5cIj09PWc/b2UoYyxrKTp4YyhjLGcsayxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RGMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxcbmMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZWUoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2VlKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTplZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgODpudWxsPT09Yi5zdGF0ZU5vZGU/dyhcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDU6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO2RlZmF1bHQ6dyhcIjE2M1wiKX19ZnVuY3Rpb24gQ2coYSxiLGMpe2M9ZGYoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGcoZCk7dWcoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFZyhhLGIsYyl7Yz1kZihjKTtjLnRhZz0zO3ZhciBkPWEuc3RhdGVOb2RlO251bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtudWxsPT09Rmc/Rmc9bmV3IFNldChbdGhpc10pOkZnLmFkZCh0aGlzKTt2YXIgYz1iLnZhbHVlLGQ9Yi5zdGFjazt1ZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWQ/ZDpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEdnKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOk0oYS50eXBlKSYmSWUoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gTShhLnR5cGUuX3JlYWN0UmVzdWx0KSYmSWUoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIEJmKGEpLEplKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT93KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGE7Y2FzZSA3OnJldHVybiBEZihhKSxudWxsO2Nhc2UgMTY6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA2OnJldHVybiBCZihhKSxudWxsO2Nhc2UgMTI6cmV0dXJuIHRmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSGc9e3JlYWRDb250ZXh0OnZmfSxJZz1ZYi5SZWFjdEN1cnJlbnRPd25lcixKZz0wLEtnPTAsTGc9ITEsUD1udWxsLE1nPW51bGwsUT0wLE5nPSExLFI9bnVsbCxPZz0hMSxGZz1udWxsO2Z1bmN0aW9uIFBnKCl7aWYobnVsbCE9PVApZm9yKHZhciBhPVAucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJkllKGIpO2JyZWFrO2Nhc2UgMzpjPWIudHlwZS5fcmVhY3RSZXN1bHQuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJkllKGIpO2JyZWFrO2Nhc2UgNTpCZihiKTtKZShiKTticmVhaztjYXNlIDc6RGYoYik7YnJlYWs7Y2FzZSA2OkJmKGIpO2JyZWFrO2Nhc2UgMTI6dGYoYil9YT1hLnJldHVybn1NZz1udWxsO1E9MDtOZz0hMTtQPW51bGx9XG5mdW5jdGlvbiBRZyhhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXt2YXIgZT1iO2I9YTt2YXIgZj1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDE6YnJlYWs7Y2FzZSAyOk0oYi50eXBlKSYmSWUoYik7YnJlYWs7Y2FzZSAzOk0oYi50eXBlLl9yZWFjdFJlc3VsdCkmJkllKGIpO2JyZWFrO2Nhc2UgNTpCZihiKTtKZShiKTtmPWIuc3RhdGVOb2RlO2YucGVuZGluZ0NvbnRleHQmJihmLmNvbnRleHQ9Zi5wZW5kaW5nQ29udGV4dCxmLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZCkkZihiKSxiLmVmZmVjdFRhZyY9LTM7cmcoYik7YnJlYWs7Y2FzZSA3OkRmKGIpO3ZhciBnPXpmKHlmLmN1cnJlbnQpLGs9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIGg9ZS5tZW1vaXplZFByb3BzO2lmKGghPT1mKXt2YXIgbD1cbmIuc3RhdGVOb2RlLG09emYoTi5jdXJyZW50KSx0PWwseD1rO3ZhciB6PWg7dmFyIHk9ZjtsPWc7dmFyIHU9bnVsbDtzd2l0Y2goeCl7Y2FzZSBcImlucHV0XCI6ej16Yyh0LHopO3k9emModCx5KTt1PVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjp6PWRlKHQseik7eT1kZSh0LHkpO3U9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOno9bih7fSx6LHt2YWx1ZTp2b2lkIDB9KTt5PW4oe30seSx7dmFsdWU6dm9pZCAwfSk7dT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp6PWZlKHQseik7eT1mZSh0LHkpO3U9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2Ygei5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgeS5vbkNsaWNrJiYodC5vbmNsaWNrPXdlKX10ZSh4LHkpO3g9dD12b2lkIDA7dmFyIHY9bnVsbDtmb3IodCBpbiB6KWlmKCF5Lmhhc093blByb3BlcnR5KHQpJiZ6Lmhhc093blByb3BlcnR5KHQpJiZudWxsIT16W3RdKWlmKFwic3R5bGVcIj09PXQpe3ZhciByPXpbdF07Zm9yKHggaW4gcilyLmhhc093blByb3BlcnR5KHgpJiZcbih2fHwodj17fSksdlt4XT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09dCYmXCJjaGlsZHJlblwiIT09dCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PXQmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT10JiZcImF1dG9Gb2N1c1wiIT09dCYmKHNhLmhhc093blByb3BlcnR5KHQpP3V8fCh1PVtdKToodT11fHxbXSkucHVzaCh0LG51bGwpKTtmb3IodCBpbiB5KXt2YXIgcD15W3RdO3I9bnVsbCE9ej96W3RdOnZvaWQgMDtpZih5Lmhhc093blByb3BlcnR5KHQpJiZwIT09ciYmKG51bGwhPXB8fG51bGwhPXIpKWlmKFwic3R5bGVcIj09PXQpaWYocil7Zm9yKHggaW4gcikhci5oYXNPd25Qcm9wZXJ0eSh4KXx8cCYmcC5oYXNPd25Qcm9wZXJ0eSh4KXx8KHZ8fCh2PXt9KSx2W3hdPVwiXCIpO2Zvcih4IGluIHApcC5oYXNPd25Qcm9wZXJ0eSh4KSYmclt4XSE9PXBbeF0mJih2fHwodj17fSksdlt4XT1wW3hdKX1lbHNlIHZ8fCh1fHwodT1bXSksdS5wdXNoKHQsXG52KSksdj1wO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT10PyhwPXA/cC5fX2h0bWw6dm9pZCAwLHI9cj9yLl9faHRtbDp2b2lkIDAsbnVsbCE9cCYmciE9PXAmJih1PXV8fFtdKS5wdXNoKHQsXCJcIitwKSk6XCJjaGlsZHJlblwiPT09dD9yPT09cHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBwJiZcIm51bWJlclwiIT09dHlwZW9mIHB8fCh1PXV8fFtdKS5wdXNoKHQsXCJcIitwKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09dCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PXQmJihzYS5oYXNPd25Qcm9wZXJ0eSh0KT8obnVsbCE9cCYmdmUobCx0KSx1fHxyPT09cHx8KHU9W10pKToodT11fHxbXSkucHVzaCh0LHApKX12JiYodT11fHxbXSkucHVzaChcInN0eWxlXCIsdik7c2coZSxiLHUsayxoLGYsZyxtKX1lLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBpZihmKXt1PXpmKE4uY3VycmVudCk7aWYoJGYoYikpe2Y9YjtsPWYuc3RhdGVOb2RlO2U9Zi50eXBlO1xuaD1mLm1lbW9pemVkUHJvcHM7bT1nO2xbSWFdPWY7bFtKYV09aDtrPXZvaWQgMDtnPWw7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixnKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IobD0wO2w8ZmIubGVuZ3RoO2wrKylIKGZiW2xdLGcpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpIKFwiZXJyb3JcIixnKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixnKTtIKFwibG9hZFwiLGcpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIsZyk7SChcInN1Ym1pdFwiLGcpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SChcInRvZ2dsZVwiLGcpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJjKGcsaCk7SChcImludmFsaWRcIixnKTt2ZShtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmcuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFoLm11bHRpcGxlfTtIKFwiaW52YWxpZFwiLGcpO3ZlKG0sXCJvbkNoYW5nZVwiKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmdlKGcsaCksSChcImludmFsaWRcIixnKSx2ZShtLFwib25DaGFuZ2VcIil9dGUoZSxoKTtsPW51bGw7Zm9yKGsgaW4gaCloLmhhc093blByb3BlcnR5KGspJiYodT1oW2tdLFwiY2hpbGRyZW5cIj09PWs/XCJzdHJpbmdcIj09PXR5cGVvZiB1P2cudGV4dENvbnRlbnQhPT11JiYobD1bXCJjaGlsZHJlblwiLHVdKTpcIm51bWJlclwiPT09dHlwZW9mIHUmJmcudGV4dENvbnRlbnQhPT1cIlwiK3UmJihsPVtcImNoaWxkcmVuXCIsXCJcIit1XSk6c2EuaGFzT3duUHJvcGVydHkoaykmJm51bGwhPXUmJnZlKG0saykpO3N3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjpXYihnKTtGYyhnLGgsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOldiKGcpO2llKGcsaCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihnLm9uY2xpY2s9d2UpfWs9bDtmLnVwZGF0ZVF1ZXVlPWs7Zj1udWxsIT09az8hMDohMTtcbmYmJnFnKGIpfWVsc2V7aD1iO2U9azttPWY7bD05PT09Zy5ub2RlVHlwZT9nOmcub3duZXJEb2N1bWVudDt1PT09amUuaHRtbCYmKHU9a2UoZSkpO3U9PT1qZS5odG1sP1wic2NyaXB0XCI9PT1lPyhlPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGw9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIG0uaXM/bD1sLmNyZWF0ZUVsZW1lbnQoZSx7aXM6bS5pc30pOihsPWwuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmbS5tdWx0aXBsZSYmKGwubXVsdGlwbGU9ITApKTpsPWwuY3JlYXRlRWxlbWVudE5TKHUsZSk7ZT1sO2VbSWFdPWg7ZVtKYV09ZjthOmZvcihoPWUsbT1iLGw9bS5jaGlsZDtudWxsIT09bDspe2lmKDc9PT1sLnRhZ3x8OD09PWwudGFnKWguYXBwZW5kQ2hpbGQobC5zdGF0ZU5vZGUpO2Vsc2UgaWYoNiE9PWwudGFnJiZudWxsIT09bC5jaGlsZCl7bC5jaGlsZC5yZXR1cm49XG5sO2w9bC5jaGlsZDtjb250aW51ZX1pZihsPT09bSlicmVhaztmb3IoO251bGw9PT1sLnNpYmxpbmc7KXtpZihudWxsPT09bC5yZXR1cm58fGwucmV0dXJuPT09bSlicmVhayBhO2w9bC5yZXR1cm59bC5zaWJsaW5nLnJldHVybj1sLnJldHVybjtsPWwuc2libGluZ31tPWU7bD1rO2g9Zjt0PWc7dj11ZShsLGgpO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkgoXCJsb2FkXCIsbSk7Zz1oO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihnPTA7ZzxmYi5sZW5ndGg7ZysrKUgoZmJbZ10sbSk7Zz1oO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpIKFwiZXJyb3JcIixtKTtnPWg7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6SChcImVycm9yXCIsbSk7SChcImxvYWRcIixtKTtnPWg7YnJlYWs7Y2FzZSBcImZvcm1cIjpIKFwicmVzZXRcIixtKTtIKFwic3VibWl0XCIsbSk7Zz1oO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SChcInRvZ2dsZVwiLG0pO2c9aDticmVhaztcbmNhc2UgXCJpbnB1dFwiOkJjKG0saCk7Zz16YyhtLGgpO0goXCJpbnZhbGlkXCIsbSk7dmUodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpnPWRlKG0saCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOm0uX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFoLm11bHRpcGxlfTtnPW4oe30saCx7dmFsdWU6dm9pZCAwfSk7SChcImludmFsaWRcIixtKTt2ZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Z2UobSxoKTtnPWZlKG0saCk7SChcImludmFsaWRcIixtKTt2ZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpnPWh9dGUobCxnKTt1PXZvaWQgMDt6PWw7eT1tO3g9Zztmb3IodSBpbiB4KXguaGFzT3duUHJvcGVydHkodSkmJihyPXhbdV0sXCJzdHlsZVwiPT09dT9yZSh5LHIpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PXU/KHI9cj9yLl9faHRtbDp2b2lkIDAsbnVsbCE9ciYmbmUoeSxyKSk6XCJjaGlsZHJlblwiPT09dT9cInN0cmluZ1wiPT09dHlwZW9mIHI/KFwidGV4dGFyZWFcIiE9PVxuenx8XCJcIiE9PXIpJiZvZSh5LHIpOlwibnVtYmVyXCI9PT10eXBlb2YgciYmb2UoeSxcIlwiK3IpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT11JiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09dSYmXCJhdXRvRm9jdXNcIiE9PXUmJihzYS5oYXNPd25Qcm9wZXJ0eSh1KT9udWxsIT1yJiZ2ZSh0LHUpOm51bGwhPXImJnhjKHksdSxyLHYpKSk7c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOldiKG0pO0ZjKG0saCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6V2IobSk7aWUobSxoKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9aC52YWx1ZSYmbS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIreWMoaC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpnPW07Zy5tdWx0aXBsZT0hIWgubXVsdGlwbGU7bT1oLnZhbHVlO251bGwhPW0/ZWUoZywhIWgubXVsdGlwbGUsbSwhMSk6bnVsbCE9aC5kZWZhdWx0VmFsdWUmJmVlKGcsISFoLm11bHRpcGxlLGguZGVmYXVsdFZhbHVlLCEwKTticmVhaztcbmRlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGcub25DbGljayYmKG0ub25jbGljaz13ZSl9KGY9emUoayxmKSkmJnFnKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/dyhcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA4OmUmJm51bGwhPWIuc3RhdGVOb2RlP3RnKGUsYixlLm1lbW9pemVkUHJvcHMsZik6KFwic3RyaW5nXCIhPT10eXBlb2YgZiYmKG51bGw9PT1iLnN0YXRlTm9kZT93KFwiMTY2XCIpOnZvaWQgMCksZz16Zih5Zi5jdXJyZW50KSx6ZihOLmN1cnJlbnQpLCRmKGIpPyhmPWIsaz1mLnN0YXRlTm9kZSxnPWYubWVtb2l6ZWRQcm9wcyxrW0lhXT1mLChmPWsubm9kZVZhbHVlIT09ZykmJnFnKGIpKTooaz1iLGY9KDk9PT1nLm5vZGVUeXBlP2c6Zy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShmKSxmW0lhXT1rLGIuc3RhdGVOb2RlPWYpKTticmVhaztjYXNlIDEzOmNhc2UgMTQ6YnJlYWs7XG5jYXNlIDE2OmJyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDEwOmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSA2OkJmKGIpO3JnKGIpO2JyZWFrO2Nhc2UgMTI6dGYoYik7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDQ6dyhcIjE2N1wiKTtkZWZhdWx0OncoXCIxNTZcIil9Yj1QPW51bGw7Zj1hO2lmKDEwNzM3NDE4MjM9PT1RfHwxMDczNzQxODIzIT09Zi5jaGlsZEV4cGlyYXRpb25UaW1lKXtrPTA7Zm9yKGc9Zi5jaGlsZDtudWxsIT09Zzspe2U9Zy5leHBpcmF0aW9uVGltZTtoPWcuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwPT09a3x8MCE9PWUmJmU8aylrPWU7aWYoMD09PWt8fDAhPT1oJiZoPGspaz1oO2c9Zy5zaWJsaW5nfWYuY2hpbGRFeHBpcmF0aW9uVGltZT1rfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmXG4obnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPUdnKGEsUSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj01MTEsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTUxMil9aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9cGcoYS5hbHRlcm5hdGUsYSxRKTtudWxsPT09YiYmKGI9UWcoYSkpO0lnLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtMZz93KFwiMjQzXCIpOnZvaWQgMDtMZz0hMDtJZy5jdXJyZW50RGlzcGF0Y2hlcj1IZzt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1RfHxhIT09TWd8fG51bGw9PT1QKVBnKCksTWc9YSxRPWQsUD1VZShNZy5jdXJyZW50LG51bGwsUSksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1QJiYhVGcoKTspUD1SZyhQKTtlbHNlIGZvcig7bnVsbCE9PVA7KVA9UmcoUCl9Y2F0Y2godCl7aWYobnVsbD09PVApZT0hMCxEZyh0KTtlbHNle251bGw9PT1QP3coXCIyNzFcIik6dm9pZCAwO3ZhciBmPVAsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLERnKHQpO2Vsc2V7YTp7dmFyIGs9ZyxoPWYsbD10O2c9UTtoLmVmZmVjdFRhZ3w9NTEyO2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7Tmc9ITA7bD1uZihsLGgpO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSA1OmsuZWZmZWN0VGFnfD1cbjEwMjQ7ay5leHBpcmF0aW9uVGltZT1nO2c9Q2coayxsLGcpO2dmKGssZyk7YnJlYWsgYTtjYXNlIDI6Y2FzZSAzOmg9bDt2YXIgbT1rLnN0YXRlTm9kZTtpZigwPT09KGsuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PW0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZnfHwhRmcuaGFzKG0pKSl7ay5lZmZlY3RUYWd8PTEwMjQ7ay5leHBpcmF0aW9uVGltZT1nO2c9RWcoayxoLGcpO2dmKGssZyk7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9UD1RZyhmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO0xnPSExO3JmPXFmPXBmPUlnLmN1cnJlbnREaXNwYXRjaGVyPW51bGw7aWYoZSlNZz1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09UClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yj1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1iP3coXCIyODFcIik6dm9pZCAwO01nPW51bGw7aWYoTmcpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtcbmY9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPmR8fDAhPT1mJiZmPmR8fDAhPT1nJiZnPmQpe2EuZGlkRXJyb3I9ITE7Yz1hLmxhdGVzdFBpbmdlZFRpbWU7MCE9PWMmJmM8PWQmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7Yz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7Yj1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1kP2EuZWFybGllc3RQZW5kaW5nVGltZT1iPT09ZD9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YjpiPT09ZCYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtiPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9ZDpjPmQ/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9ZDpiPGQmJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9ZCk7JGUoZCxhKTthLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZcbiFjKXthLmRpZEVycm9yPSEwO2EubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtkPWEuZXhwaXJhdGlvblRpbWU9MTthLmV4cGlyYXRpb25UaW1lPWQ7cmV0dXJufX1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1kO2EuZmluaXNoZWRXb3JrPWJ9fVxuZnVuY3Rpb24gd2coYSxiKXt2YXIgYzthOntMZyYmIU9nP3coXCIyNjNcIik6dm9pZCAwO2ZvcihjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6Y2FzZSAzOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GZ3x8IUZnLmhhcyhkKSkpe2E9bmYoYixhKTthPUVnKGMsYSwxKTtmZihjLGEpO0lmKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDU6YT1uZihiLGEpO2E9Q2coYyxhLDEpO2ZmKGMsYSk7SWYoYywxKTtjPXZvaWQgMDticmVhayBhfWM9Yy5yZXR1cm59NT09PWEudGFnJiYoYz1uZihiLGEpLGM9Q2coYSxjLDEpLGZmKGEsYyksSWYoYSwxKSk7Yz12b2lkIDB9cmV0dXJuIGN9XG5mdW5jdGlvbiBIZihhLGIpezAhPT1LZz9hPUtnOkxnP2E9T2c/MTpROmIubW9kZSYxPyhhPVVnPzIrMTAqKCgoYS0yKzE1KS8xMHwwKSsxKToyKzI1KigoKGEtMis1MDApLzI1fDApKzEpLG51bGwhPT1NZyYmYT09PVEmJihhKz0xKSk6YT0xO1VnJiYoMD09PVZnfHxhPlZnKSYmKFZnPWEpO3JldHVybiBhfVxuZnVuY3Rpb24gSWYoYSxiKXthOntpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKDA9PT1jLmV4cGlyYXRpb25UaW1lfHxjLmV4cGlyYXRpb25UaW1lPmIpJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybjtpZihudWxsPT09ZCYmNT09PWEudGFnKWE9YS5zdGF0ZU5vZGU7ZWxzZXtmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtpZigwPT09ZC5jaGlsZEV4cGlyYXRpb25UaW1lfHxkLmNoaWxkRXhwaXJhdGlvblRpbWU+YilkLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtudWxsIT09YyYmKDA9PT1jLmNoaWxkRXhwaXJhdGlvblRpbWV8fGMuY2hpbGRFeHBpcmF0aW9uVGltZT5iKSYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjU9PT1kLnRhZyl7YT1kLnN0YXRlTm9kZTticmVhayBhfWQ9ZC5yZXR1cm59YT1udWxsfX1pZihudWxsIT09XG5hKXshTGcmJjAhPT1RJiZiPFEmJlBnKCk7WmUoYSxiKTtpZighTGd8fE9nfHxNZyE9PWEpe2I9YTthPWEuZXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWIubmV4dFNjaGVkdWxlZFJvb3QpYi5leHBpcmF0aW9uVGltZT1hLG51bGw9PT1UPyhVPVQ9YixiLm5leHRTY2hlZHVsZWRSb290PWIpOihUPVQubmV4dFNjaGVkdWxlZFJvb3Q9YixULm5leHRTY2hlZHVsZWRSb290PVUpO2Vsc2UgaWYoYz1iLmV4cGlyYXRpb25UaW1lLDA9PT1jfHxhPGMpYi5leHBpcmF0aW9uVGltZT1hO1Z8fChXP1dnJiYoWT1iLFo9MSxYZyhiLDEsITApKToxPT09YT9ZZygxLG51bGwpOlpnKGIsYSkpfSRnPmFoJiYoJGc9MCx3KFwiMTg1XCIpKX19ZnVuY3Rpb24gYmgoYSxiLGMsZCxlKXt2YXIgZj1LZztLZz0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e0tnPWZ9fVxudmFyIFU9bnVsbCxUPW51bGwsY2g9MCxkaD12b2lkIDAsVj0hMSxZPW51bGwsWj0wLFZnPTAsZWg9ITEsZmg9ITEsZ2g9bnVsbCxoaD1udWxsLFc9ITEsV2c9ITEsVWc9ITEsaWg9bnVsbCxqaD1iYS51bnN0YWJsZV9ub3coKSxraD0oamgvMTB8MCkrMixsaD1raCxhaD01MCwkZz0wLG1oPW51bGwsbmg9MTtmdW5jdGlvbiBvaCgpe2toPSgoYmEudW5zdGFibGVfbm93KCktamgpLzEwfDApKzJ9ZnVuY3Rpb24gWmcoYSxiKXtpZigwIT09Y2gpe2lmKGI+Y2gpcmV0dXJuO251bGwhPT1kaCYmYmEudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yayhkaCl9Y2g9YjthPWJhLnVuc3RhYmxlX25vdygpLWpoO2RoPWJhLnVuc3RhYmxlX3NjaGVkdWxlV29yayhwaCx7dGltZW91dDoxMCooYi0yKS1hfSl9ZnVuY3Rpb24gR2YoKXtpZihWKXJldHVybiBsaDtxaCgpO2lmKDA9PT1afHwxMDczNzQxODIzPT09WilvaCgpLGxoPWtoO3JldHVybiBsaH1cbmZ1bmN0aW9uIHFoKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVQpZm9yKHZhciBjPVQsZD1VO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1UP3coXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtVPVQ9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PVUpVT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVC5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1UKXtUPWM7VC5uZXh0U2NoZWR1bGVkUm9vdD1VO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1UKWJyZWFrO2lmKDE9PT1hKWJyZWFrO1xuYz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19WT1iO1o9YX1mdW5jdGlvbiBwaChhKXtpZihhLmRpZFRpbWVvdXQmJm51bGwhPT1VKXtvaCgpO3ZhciBiPVU7ZG97dmFyIGM9Yi5leHBpcmF0aW9uVGltZTswIT09YyYma2g+PWMmJihiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWtoKTtiPWIubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYiE9PVUpfVlnKDAsYSl9XG5mdW5jdGlvbiBZZyhhLGIpe2hoPWI7cWgoKTtpZihudWxsIT09aGgpZm9yKG9oKCksbGg9a2g7bnVsbCE9PVkmJjAhPT1aJiYoMD09PWF8fGE+PVopJiYoIWVofHxraD49Wik7KVhnKFksWixraD49WikscWgoKSxvaCgpLGxoPWtoO2Vsc2UgZm9yKDtudWxsIT09WSYmMCE9PVomJigwPT09YXx8YT49Wik7KVhnKFksWiwhMCkscWgoKTtudWxsIT09aGgmJihjaD0wLGRoPW51bGwpOzAhPT1aJiZaZyhZLFopO2hoPW51bGw7ZWg9ITE7JGc9MDttaD1udWxsO2lmKG51bGwhPT1paClmb3IoYT1paCxpaD1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe2ZofHwoZmg9ITAsZ2g9ZCl9fWlmKGZoKXRocm93IGE9Z2gsZ2g9bnVsbCxmaD0hMSxhO31cbmZ1bmN0aW9uIFhnKGEsYixjKXtWP3coXCIyNDVcIik6dm9pZCAwO1Y9ITA7aWYobnVsbD09PWhofHxjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9yaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsU2coYSwhMSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiZyaChhLGQsYikpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9yaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsU2coYSwhMCxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoVGcoKT9hLmZpbmlzaGVkV29yaz1kOnJoKGEsZCxiKSkpO1Y9ITF9XG5mdW5jdGlvbiByaChhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1paD9paD1bZF06aWgucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT1taD8kZysrOihtaD1hLCRnPTApO09nPUxnPSEwO2EuY3VycmVudD09PWI/dyhcIjE3N1wiKTp2b2lkIDA7Yz1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09Yz93KFwiMjYxXCIpOnZvaWQgMDthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO2Q9Yi5leHBpcmF0aW9uVGltZTt2YXIgZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU7ZD0wPT09ZHx8MCE9PWUmJmU8ZD9lOmQ7YS5kaWRFcnJvcj0hMTswPT09ZD8oYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPVxuMCxhLmxhdGVzdFBpbmdlZFRpbWU9MCk6KGU9YS5sYXRlc3RQZW5kaW5nVGltZSwwIT09ZSYmKGU8ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZTxkJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKSxlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLDA9PT1lP1plKGEsZCk6ZD5hLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsWmUoYSxkKSk6ZDxlJiZaZShhLGQpKTskZSgwLGEpO0lnLmN1cnJlbnQ9bnVsbDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3hlPUdkO2U9VGQoKTtpZihVZChlKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZSl2YXIgZj1cbntzdGFydDplLnNlbGVjdGlvblN0YXJ0LGVuZDplLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntmPShmPWUub3duZXJEb2N1bWVudCkmJmYuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZz1mLmdldFNlbGVjdGlvbiYmZi5nZXRTZWxlY3Rpb24oKTtpZihnJiYwIT09Zy5yYW5nZUNvdW50KXtmPWcuYW5jaG9yTm9kZTt2YXIgaz1nLmFuY2hvck9mZnNldCxoPWcuZm9jdXNOb2RlO2c9Zy5mb2N1c09mZnNldDt0cnl7Zi5ub2RlVHlwZSxoLm5vZGVUeXBlfWNhdGNoKFhhKXtmPW51bGw7YnJlYWsgYX12YXIgbD0wLG09LTEsdD0tMSx4PTAsej0wLHk9ZSx1PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdjs7KXt5IT09Znx8MCE9PWsmJjMhPT15Lm5vZGVUeXBlfHwobT1sK2spO3khPT1ofHwwIT09ZyYmMyE9PXkubm9kZVR5cGV8fCh0PWwrZyk7Mz09PXkubm9kZVR5cGUmJihsKz15Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odj15LmZpcnN0Q2hpbGQpKWJyZWFrO3U9eTt5PXZ9Zm9yKDs7KXtpZih5PT09XG5lKWJyZWFrIGI7dT09PWYmJisreD09PWsmJihtPWwpO3U9PT1oJiYrK3o9PT1nJiYodD1sKTtpZihudWxsIT09KHY9eS5uZXh0U2libGluZykpYnJlYWs7eT11O3U9eS5wYXJlbnROb2RlfXk9dn1mPS0xPT09bXx8LTE9PT10P251bGw6e3N0YXJ0Om0sZW5kOnR9fWVsc2UgZj1udWxsfWY9Znx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZj1udWxsO3llPXtmb2N1c2VkRWxlbTplLHNlbGVjdGlvblJhbmdlOmZ9O0dkPSExO2ZvcihSPWQ7bnVsbCE9PVI7KXtlPSExO2Y9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1SOyl7aWYoUi5lZmZlY3RUYWcmMjU2KXt2YXIgcj1SLmFsdGVybmF0ZTthOnN3aXRjaChrPVIsay50YWcpe2Nhc2UgMjpjYXNlIDM6aWYoay5lZmZlY3RUYWcmMjU2JiZudWxsIT09cil7dmFyIHA9ci5tZW1vaXplZFByb3BzLEQ9ci5tZW1vaXplZFN0YXRlLFM9ay5zdGF0ZU5vZGU7Uy5wcm9wcz1rLm1lbW9pemVkUHJvcHM7Uy5zdGF0ZT1rLm1lbW9pemVkU3RhdGU7dmFyIHloPVMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocCxcbkQpO1MuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9eWh9YnJlYWsgYTtjYXNlIDU6Y2FzZSA3OmNhc2UgODpjYXNlIDY6YnJlYWsgYTtkZWZhdWx0OncoXCIxNjNcIil9fVI9Ui5uZXh0RWZmZWN0fX1jYXRjaChYYSl7ZT0hMCxmPVhhfWUmJihudWxsPT09Uj93KFwiMTc4XCIpOnZvaWQgMCx3ZyhSLGYpLG51bGwhPT1SJiYoUj1SLm5leHRFZmZlY3QpKX1mb3IoUj1kO251bGwhPT1SOyl7cj0hMTtwPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09Ujspe3ZhciBBPVIuZWZmZWN0VGFnO0EmMTYmJm9lKFIuc3RhdGVOb2RlLFwiXCIpO2lmKEEmMTI4KXt2YXIgQj1SLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHE9Qi5yZWY7bnVsbCE9PXEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgcT9xKG51bGwpOnEuY3VycmVudD1udWxsKX19c3dpdGNoKEEmMTQpe2Nhc2UgMjpBZyhSKTtSLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OkFnKFIpO1IuZWZmZWN0VGFnJj0tMztCZyhSLmFsdGVybmF0ZSxcblIpO2JyZWFrO2Nhc2UgNDpCZyhSLmFsdGVybmF0ZSxSKTticmVhaztjYXNlIDg6RD1SLHlnKEQpLEQucmV0dXJuPW51bGwsRC5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlJiYoRC5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZS5yZXR1cm49bnVsbCl9Uj1SLm5leHRFZmZlY3R9fWNhdGNoKFhhKXtyPSEwLHA9WGF9ciYmKG51bGw9PT1SP3coXCIxNzhcIik6dm9pZCAwLHdnKFIscCksbnVsbCE9PVImJihSPVIubmV4dEVmZmVjdCkpfXE9eWU7Qj1UZCgpO0E9cS5mb2N1c2VkRWxlbTtwPXEuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PUEmJkEmJkEub3duZXJEb2N1bWVudCYmU2QoQS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxBKSl7bnVsbCE9PXAmJlVkKEEpJiYoQj1wLnN0YXJ0LHE9cC5lbmQsdm9pZCAwPT09cSYmKHE9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gQT8oQS5zZWxlY3Rpb25TdGFydD1CLEEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHEsQS52YWx1ZS5sZW5ndGgpKTpcbihyPUEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQsQj0ocj9yLmRlZmF1bHRWaWV3OndpbmRvdykuZ2V0U2VsZWN0aW9uKCksRD1BLnRleHRDb250ZW50Lmxlbmd0aCxxPU1hdGgubWluKHAuc3RhcnQsRCkscD12b2lkIDA9PT1wLmVuZD9xOk1hdGgubWluKHAuZW5kLEQpLCFCLmV4dGVuZCYmcT5wJiYoRD1wLHA9cSxxPUQpLEQ9UmQoQSxxKSxTPVJkKEEscCksRCYmUyYmKDEhPT1CLnJhbmdlQ291bnR8fEIuYW5jaG9yTm9kZSE9PUQubm9kZXx8Qi5hbmNob3JPZmZzZXQhPT1ELm9mZnNldHx8Qi5mb2N1c05vZGUhPT1TLm5vZGV8fEIuZm9jdXNPZmZzZXQhPT1TLm9mZnNldCkmJihyPXIuY3JlYXRlUmFuZ2UoKSxyLnNldFN0YXJ0KEQubm9kZSxELm9mZnNldCksQi5yZW1vdmVBbGxSYW5nZXMoKSxxPnA/KEIuYWRkUmFuZ2UociksQi5leHRlbmQoUy5ub2RlLFMub2Zmc2V0KSk6KHIuc2V0RW5kKFMubm9kZSxTLm9mZnNldCksQi5hZGRSYW5nZShyKSkpKSk7Qj1bXTtmb3IocT1BO3E9cS5wYXJlbnROb2RlOykxPT09XG5xLm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6cSxsZWZ0OnEuc2Nyb2xsTGVmdCx0b3A6cS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5mb2N1cyYmQS5mb2N1cygpO2ZvcihBPTA7QTxCLmxlbmd0aDtBKyspcT1CW0FdLHEuZWxlbWVudC5zY3JvbGxMZWZ0PXEubGVmdCxxLmVsZW1lbnQuc2Nyb2xsVG9wPXEudG9wfXllPW51bGw7R2Q9ISF4ZTt4ZT1udWxsO2EuY3VycmVudD1iO2ZvcihSPWQ7bnVsbCE9PVI7KXtkPSExO0E9dm9pZCAwO3RyeXtmb3IoQj1jO251bGwhPT1SOyl7dmFyIFNhPVIuZWZmZWN0VGFnO2lmKFNhJjM2KXt2YXIgb2M9Ui5hbHRlcm5hdGU7cT1SO3I9Qjtzd2l0Y2gocS50YWcpe2Nhc2UgMjpjYXNlIDM6dmFyIFg9cS5zdGF0ZU5vZGU7aWYocS5lZmZlY3RUYWcmNClpZihudWxsPT09b2MpWC5wcm9wcz1xLm1lbW9pemVkUHJvcHMsWC5zdGF0ZT1xLm1lbW9pemVkU3RhdGUsWC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIEloPW9jLm1lbW9pemVkUHJvcHMsXG5KaD1vYy5tZW1vaXplZFN0YXRlO1gucHJvcHM9cS5tZW1vaXplZFByb3BzO1guc3RhdGU9cS5tZW1vaXplZFN0YXRlO1guY29tcG9uZW50RGlkVXBkYXRlKEloLEpoLFguX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBrZz1xLnVwZGF0ZVF1ZXVlO251bGwhPT1rZyYmKFgucHJvcHM9cS5tZW1vaXplZFByb3BzLFguc3RhdGU9cS5tZW1vaXplZFN0YXRlLGxmKHEsa2csWCxyKSk7YnJlYWs7Y2FzZSA1OnZhciBsZz1xLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sZyl7cD1udWxsO2lmKG51bGwhPT1xLmNoaWxkKXN3aXRjaChxLmNoaWxkLnRhZyl7Y2FzZSA3OnA9cS5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAyOmNhc2UgMzpwPXEuY2hpbGQuc3RhdGVOb2RlfWxmKHEsbGcscCxyKX1icmVhaztjYXNlIDc6dmFyIEtoPXEuc3RhdGVOb2RlO251bGw9PT1vYyYmcS5lZmZlY3RUYWcmNCYmemUocS50eXBlLHEubWVtb2l6ZWRQcm9wcykmJktoLmZvY3VzKCk7YnJlYWs7XG5jYXNlIDg6YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OncoXCIxNjNcIil9fWlmKFNhJjEyOCl7dmFyIEFjPVIucmVmO2lmKG51bGwhPT1BYyl7dmFyIG1nPVIuc3RhdGVOb2RlO3N3aXRjaChSLnRhZyl7Y2FzZSA3OnZhciBPZD1tZzticmVhaztkZWZhdWx0Ok9kPW1nfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBBYz9BYyhPZCk6QWMuY3VycmVudD1PZH19dmFyIExoPVIubmV4dEVmZmVjdDtSLm5leHRFZmZlY3Q9bnVsbDtSPUxofX1jYXRjaChYYSl7ZD0hMCxBPVhhfWQmJihudWxsPT09Uj93KFwiMTc4XCIpOnZvaWQgMCx3ZyhSLEEpLG51bGwhPT1SJiYoUj1SLm5leHRFZmZlY3QpKX1MZz1PZz0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgT2UmJk9lKGIuc3RhdGVOb2RlKTtTYT1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9MD09PVNhfHwwIT09YiYmYjxTYT9iOlNhOzA9PT1iJiYoRmc9bnVsbCk7YS5leHBpcmF0aW9uVGltZT1cbmI7YS5maW5pc2hlZFdvcms9bnVsbH1mdW5jdGlvbiBUZygpe3JldHVybiBlaD8hMDpudWxsPT09aGh8fGhoLnRpbWVSZW1haW5pbmcoKT5uaD8hMTplaD0hMH1mdW5jdGlvbiBEZyhhKXtudWxsPT09WT93KFwiMjQ2XCIpOnZvaWQgMDtZLmV4cGlyYXRpb25UaW1lPTA7Zmh8fChmaD0hMCxnaD1hKX1mdW5jdGlvbiBzaChhLGIpe3ZhciBjPVc7Vz0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoVz1jKXx8Vnx8WWcoMSxudWxsKX19ZnVuY3Rpb24gdGgoYSxiKXtpZihXJiYhV2cpe1dnPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1dnPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiB1aChhLGIsYyl7aWYoVWcpcmV0dXJuIGEoYixjKTtXfHxWfHwwPT09Vmd8fChZZyhWZyxudWxsKSxWZz0wKTt2YXIgZD1VZyxlPVc7Vz1VZz0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e1VnPWQsKFc9ZSl8fFZ8fFlnKDEsbnVsbCl9fVxuZnVuY3Rpb24gdmgoYSl7aWYoIWEpcmV0dXJuIEZlO2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2E6ezIhPT1qZChhKXx8MiE9PWEudGFnJiYzIT09YS50YWc/dyhcIjE3MFwiKTp2b2lkIDA7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgNTpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDI6aWYoTShiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmlmKE0oYi50eXBlLl9yZWFjdFJlc3VsdCkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dyhcIjE3MVwiKTtiPXZvaWQgMH1pZigyPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihNKGMpKXJldHVybiBMZShhLGMsYil9ZWxzZSBpZigzPT09YS50YWcmJihjPWEudHlwZS5fcmVhY3RSZXN1bHQsTShjKSkpcmV0dXJuIExlKGEsXG5jLGIpO3JldHVybiBifWZ1bmN0aW9uIHdoKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2M9dmgoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9ZGYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2ZmKGYsZSk7SWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiB4aChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZigpO2U9SGYoZixlKTtyZXR1cm4gd2goYSxiLGMsZSxkKX1mdW5jdGlvbiB6aChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNzpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gQWgoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjphYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkZiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RGMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPU5hKGQpO2U/dm9pZCAwOncoXCI5MFwiKTtYYihkKTtEYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmVlKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBCaChhKXt2YXIgYj0yKzI1KigoKEdmKCktMis1MDApLzI1fDApKzEpO2I8PUpnJiYoYj1KZysxKTt0aGlzLl9leHBpcmF0aW9uVGltZT1KZz1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9QmgucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6dyhcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IENoO3doKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbkJoLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbkJoLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDp3KFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP3coXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7Yj1jO1Y/dyhcIjI1M1wiKTp2b2lkIDA7WT1hO1o9YjtYZyhhLGIsITApO1lnKDEsbnVsbCk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1cbmImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PW51bGwsdGhpcy5fZGVmZXI9ITF9O0JoLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBDaCgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfUNoLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5DaC5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz93KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIERoKGEsYixjKXtiPW5ldyBTZSg1LG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLGRpZEVycm9yOiExLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLHRpbWVvdXRIYW5kbGU6LTEsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOjAsZXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07dGhpcy5faW50ZXJuYWxSb290PWIuc3RhdGVOb2RlPWF9XG5EaC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IENoO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTt4aChhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O0RoLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBDaDthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7eGgobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtEaC5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgQ2g7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO3hoKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5EaC5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgQmgodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBFaChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9TGI9c2g7TWI9dWg7TmI9ZnVuY3Rpb24oKXtWfHwwPT09Vmd8fChZZyhWZyxudWxsKSxWZz0wKX07XG5mdW5jdGlvbiBGaChhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IERoKGEsITEsYil9XG5mdW5jdGlvbiBHaChhLGIsYyxkLGUpe0VoKGMpP3ZvaWQgMDp3KFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emgoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1GaChjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT16aChmLl9pbnRlcm5hbFJvb3QpO2suY2FsbChhKX19dGgoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIHpoKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBIaChhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO0VoKGIpP3ZvaWQgMDp3KFwiMjAwXCIpO3JldHVybiBBaChhLGIsbnVsbCxjKX1cbnZhciBNaD17Y3JlYXRlUG9ydGFsOkhoLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/dyhcIjE4OFwiKTp3KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW1kKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEdoKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBHaChudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP3coXCIzOFwiKTp2b2lkIDA7cmV0dXJuIEdoKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe0VoKGEpP1xudm9pZCAwOncoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyh0aChmdW5jdGlvbigpe0doKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEhoLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpzaCx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6dWgsZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vj93KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1XO1c9ITA7dHJ5e3JldHVybiBiaChhLGIpfWZpbmFsbHl7Vz1jLFlnKDEsbnVsbCl9fSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9VztXPSEwO3RyeXtiaChhKX1maW5hbGx5eyhXPWIpfHxWfHxZZygxLG51bGwpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbTGEsXG5NYSxOYSxxYSxVYSxmdW5jdGlvbihhKXt6YShhLFRhKX0sSmIsS2IsSWQsR2FdfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7RWgoYSk/dm9pZCAwOncoXCIyNzhcIik7cmV0dXJuIG5ldyBEaChhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19OyhmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBSZShuKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9bWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6S2EsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi41LjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgTmg9e2RlZmF1bHQ6TWh9LE9oPU5oJiZNaHx8Tmg7XG5tb2R1bGUuZXhwb3J0cz1PaC5kZWZhdWx0fHxPaDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi41LjBcbiAqIHNjaGVkdWxlLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksZj1EYXRlLGc9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsbT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLG49XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdztcbmV4cG9ydHMudW5zdGFibGVfbm93PXZvaWQgMDtpZihuKXt2YXIgcD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGYubm93KCl9O2V4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVXb3JrPXZvaWQgMDtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcms9dm9pZCAwO1xuaWYoZCl7dmFyIHE9bnVsbCxyPW51bGwsdD0tMSx1PSExLHY9ITEsdz12b2lkIDAseD12b2lkIDAseT1mdW5jdGlvbihhKXt3PWwoZnVuY3Rpb24oYil7aCh4KTthKGIpfSk7eD1nKGZ1bmN0aW9uKCl7bSh3KTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfSx6PTAsQT0zMyxCPTMzLEM9e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXotZXhwb3J0cy51bnN0YWJsZV9ub3coKTtyZXR1cm4gMDxhP2E6MH19LEU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnNjaGVkdWxlZENhbGxiYWNrLGU9ITE7dHJ5e2MoYiksZT0hMH1maW5hbGx5e2V4cG9ydHMudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yayhhKSxlfHwodT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRCxcIipcIikpfX0sRD1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT1cbndpbmRvdyYmYS5kYXRhPT09RCYmKHU9ITEsbnVsbCE9PXEpKXtpZihudWxsIT09cSl7dmFyIGI9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZighKC0xPT09dHx8dD5iKSl7YT0tMTtmb3IodmFyIGM9W10sZT1xO251bGwhPT1lOyl7dmFyIGs9ZS50aW1lb3V0VGltZTstMSE9PWsmJms8PWI/Yy5wdXNoKGUpOi0xIT09ayYmKC0xPT09YXx8azxhKSYmKGE9ayk7ZT1lLm5leHR9aWYoMDxjLmxlbmd0aClmb3IoQy5kaWRUaW1lb3V0PSEwLGI9MCxlPWMubGVuZ3RoO2I8ZTtiKyspRShjW2JdLEMpO3Q9YX19Zm9yKGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTswPHotYSYmbnVsbCE9PXE7KWE9cSxDLmRpZFRpbWVvdXQ9ITEsRShhLEMpLGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtudWxsPT09cXx8dnx8KHY9ITAseShGKSl9fSwhMSk7dmFyIEY9ZnVuY3Rpb24oYSl7dj0hMTt2YXIgYj1hLXorQjtiPEImJkE8Qj8oOD5iJiYoYj04KSxCPWI8QT9BOmIpOkE9Yjt6PWErQjt1fHwodT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRCxcblwiKlwiKSl9O2V4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVXb3JrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJihjPWV4cG9ydHMudW5zdGFibGVfbm93KCkrYi50aW1lb3V0KTtpZigtMT09PXR8fC0xIT09YyYmYzx0KXQ9YzthPXtzY2hlZHVsZWRDYWxsYmFjazphLHRpbWVvdXRUaW1lOmMscHJldjpudWxsLG5leHQ6bnVsbH07bnVsbD09PXE/cT1hOihiPWEucHJldj1yLG51bGwhPT1iJiYoYi5uZXh0PWEpKTtyPWE7dnx8KHY9ITAseShGKSk7cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yaz1mdW5jdGlvbihhKXtpZihudWxsIT09YS5wcmV2fHxxPT09YSl7dmFyIGI9YS5uZXh0LGM9YS5wcmV2O2EubmV4dD1udWxsO2EucHJldj1udWxsO251bGwhPT1iP251bGwhPT1jPyhjLm5leHQ9YixiLnByZXY9Yyk6KGIucHJldj1udWxsLHE9Yik6bnVsbCE9PWM/KGMubmV4dD1udWxsLHI9Yyk6cj1cbnE9bnVsbH19fWVsc2V7dmFyIEc9bmV3IE1hcDtleHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlV29yaz1mdW5jdGlvbihhKXt2YXIgYj17c2NoZWR1bGVkQ2FsbGJhY2s6YSx0aW1lb3V0VGltZTowLG5leHQ6bnVsbCxwcmV2Om51bGx9LGM9ZyhmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pO0cuc2V0KGEsYyk7cmV0dXJuIGJ9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yaz1mdW5jdGlvbihhKXt2YXIgYj1HLmdldChhLnNjaGVkdWxlZENhbGxiYWNrKTtHLmRlbGV0ZShhKTtoKGIpfX07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5jbGFtcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zaWduYml0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCkge1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJG1hdGNoXTtcbn0pO1xuIiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuIiwiLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCkge1xuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRzZWFyY2hdO1xufSk7XG4iLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbiAgdmFyIF9zcGxpdCA9ICRzcGxpdDtcbiAgdmFyICRwdXNoID0gW10ucHVzaDtcbiAgdmFyICRTUExJVCA9ICdzcGxpdCc7XG4gIHZhciBMRU5HVEggPSAnbGVuZ3RoJztcbiAgdmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZiAoIU5QQ0cpIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICBpZiAoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXR0ZW4nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBnbG9iYWwucHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlZ0V4cCwgcmVwbGFjZSkge1xuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpIHtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgRE9NSXRlcmFibGVzID0gKCdDU1NSdWxlTGlzdCxDU1NTdHlsZURlY2xhcmF0aW9uLENTU1ZhbHVlTGlzdCxDbGllbnRSZWN0TGlzdCxET01SZWN0TGlzdCxET01TdHJpbmdMaXN0LCcgK1xuICAnRE9NVG9rZW5MaXN0LERhdGFUcmFuc2Zlckl0ZW1MaXN0LEZpbGVMaXN0LEhUTUxBbGxDb2xsZWN0aW9uLEhUTUxDb2xsZWN0aW9uLEhUTUxGb3JtRWxlbWVudCxIVE1MU2VsZWN0RWxlbWVudCwnICtcbiAgJ01lZGlhTGlzdCxNaW1lVHlwZUFycmF5LE5hbWVkTm9kZU1hcCxOb2RlTGlzdCxQYWludFJlcXVlc3RMaXN0LFBsdWdpbixQbHVnaW5BcnJheSxTVkdMZW5ndGhMaXN0LFNWR051bWJlckxpc3QsJyArXG4gICdTVkdQYXRoU2VnTGlzdCxTVkdQb2ludExpc3QsU1ZHU3RyaW5nTGlzdCxTVkdUcmFuc2Zvcm1MaXN0LFNvdXJjZUJ1ZmZlckxpc3QsU3R5bGVTaGVldExpc3QsVGV4dFRyYWNrQ3VlTGlzdCwnICtcbiAgJ1RleHRUcmFja0xpc3QsVG91Y2hMaXN0Jykuc3BsaXQoJywnKTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBET01JdGVyYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBET01JdGVyYWJsZXNbaV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpIHtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGNhblVzZURPTSA9IGV4cG9ydHMuY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxudmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZXhwb3J0cy5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgZ2V0Q29uZmlybWF0aW9uID0gZXhwb3J0cy5nZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xudmFyIHN1cHBvcnRzSGlzdG9yeSA9IGV4cG9ydHMuc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbnZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZXhwb3J0cy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xudmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZXhwb3J0cy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xudmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBleHBvcnRzLmlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIF9pbW11dGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1tdXRhYmxlKTtcblxudmFyIF91dGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAocmVkdWNlcnMpIHtcbiAgdmFyIGdldERlZmF1bHRTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX2ltbXV0YWJsZTIuZGVmYXVsdC5NYXA7XG5cbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzcGFjZS1pbmZpeC1vcHNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5wdXRTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZ2V0RGVmYXVsdFN0YXRlKCk7XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm9jZXNzLWVudlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSAoMCwgX3V0aWxpdGllcy5nZXRVbmV4cGVjdGVkSW52b2NhdGlvblBhcmFtZXRlck1lc3NhZ2UpKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24pO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcih3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGlucHV0U3RhdGUud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAodGVtcG9yYXJ5U3RhdGUpIHtcbiAgICAgIHJlZHVjZXJLZXlzLmZvckVhY2goZnVuY3Rpb24gKHJlZHVjZXJOYW1lKSB7XG4gICAgICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xuICAgICAgICB2YXIgY3VycmVudERvbWFpblN0YXRlID0gdGVtcG9yYXJ5U3RhdGUuZ2V0KHJlZHVjZXJOYW1lKTtcbiAgICAgICAgdmFyIG5leHREb21haW5TdGF0ZSA9IHJlZHVjZXIoY3VycmVudERvbWFpblN0YXRlLCBhY3Rpb24pO1xuXG4gICAgICAgICgwLCBfdXRpbGl0aWVzLnZhbGlkYXRlTmV4dFN0YXRlKShuZXh0RG9tYWluU3RhdGUsIHJlZHVjZXJOYW1lLCBhY3Rpb24pO1xuXG4gICAgICAgIHRlbXBvcmFyeVN0YXRlLnNldChyZWR1Y2VyTmFtZSwgbmV4dERvbWFpblN0YXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lUmVkdWNlcnMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy52YWxpZGF0ZU5leHRTdGF0ZSA9IGV4cG9ydHMuZ2V0VW5leHBlY3RlZEludm9jYXRpb25QYXJhbWV0ZXJNZXNzYWdlID0gZXhwb3J0cy5nZXRTdGF0ZU5hbWUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZ2V0U3RhdGVOYW1lMiA9IHJlcXVpcmUoJy4vZ2V0U3RhdGVOYW1lJyk7XG5cbnZhciBfZ2V0U3RhdGVOYW1lMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFN0YXRlTmFtZTIpO1xuXG52YXIgX2dldFVuZXhwZWN0ZWRJbnZvY2F0aW9uUGFyYW1ldGVyTWVzc2FnZTIgPSByZXF1aXJlKCcuL2dldFVuZXhwZWN0ZWRJbnZvY2F0aW9uUGFyYW1ldGVyTWVzc2FnZScpO1xuXG52YXIgX2dldFVuZXhwZWN0ZWRJbnZvY2F0aW9uUGFyYW1ldGVyTWVzc2FnZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRVbmV4cGVjdGVkSW52b2NhdGlvblBhcmFtZXRlck1lc3NhZ2UyKTtcblxudmFyIF92YWxpZGF0ZU5leHRTdGF0ZTIgPSByZXF1aXJlKCcuL3ZhbGlkYXRlTmV4dFN0YXRlJyk7XG5cbnZhciBfdmFsaWRhdGVOZXh0U3RhdGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGVOZXh0U3RhdGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5nZXRTdGF0ZU5hbWUgPSBfZ2V0U3RhdGVOYW1lMy5kZWZhdWx0O1xuZXhwb3J0cy5nZXRVbmV4cGVjdGVkSW52b2NhdGlvblBhcmFtZXRlck1lc3NhZ2UgPSBfZ2V0VW5leHBlY3RlZEludm9jYXRpb25QYXJhbWV0ZXJNZXNzYWdlMy5kZWZhdWx0O1xuZXhwb3J0cy52YWxpZGF0ZU5leHRTdGF0ZSA9IF92YWxpZGF0ZU5leHRTdGF0ZTMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIF9pbW11dGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1tdXRhYmxlKTtcblxudmFyIF9nZXRTdGF0ZU5hbWUgPSByZXF1aXJlKCcuL2dldFN0YXRlTmFtZScpO1xuXG52YXIgX2dldFN0YXRlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRTdGF0ZU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24pIHtcbiAgdmFyIHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcblxuICBpZiAoIXJlZHVjZXJOYW1lcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIHZhciBzdGF0ZU5hbWUgPSAoMCwgX2dldFN0YXRlTmFtZTIuZGVmYXVsdCkoYWN0aW9uKTtcblxuICBpZiAoX2ltbXV0YWJsZTIuZGVmYXVsdC5pc0ltbXV0YWJsZSA/ICFfaW1tdXRhYmxlMi5kZWZhdWx0LmlzSW1tdXRhYmxlKHN0YXRlKSA6ICFfaW1tdXRhYmxlMi5kZWZhdWx0Lkl0ZXJhYmxlLmlzSXRlcmFibGUoc3RhdGUpKSB7XG4gICAgcmV0dXJuICdUaGUgJyArIHN0YXRlTmFtZSArICcgaXMgb2YgdW5leHBlY3RlZCB0eXBlLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBpbnN0YW5jZSBvZiBJbW11dGFibGUuQ29sbGVjdGlvbiBvciBJbW11dGFibGUuUmVjb3JkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiBcIicgKyByZWR1Y2VyTmFtZXMuam9pbignXCIsIFwiJykgKyAnXCIuJztcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkU3RhdGVQcm9wZXJ0eU5hbWVzID0gc3RhdGUudG9TZXEoKS5rZXlTZXEoKS50b0FycmF5KCkuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgfSk7XG5cbiAgaWYgKHVuZXhwZWN0ZWRTdGF0ZVByb3BlcnR5TmFtZXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiAnVW5leHBlY3RlZCAnICsgKHVuZXhwZWN0ZWRTdGF0ZVByb3BlcnR5TmFtZXMubGVuZ3RoID09PSAxID8gJ3Byb3BlcnR5JyA6ICdwcm9wZXJ0aWVzJykgKyAnIFwiJyArIHVuZXhwZWN0ZWRTdGF0ZVByb3BlcnR5TmFtZXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIHN0YXRlTmFtZSArICcuIEV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIHByb3BlcnR5IG5hbWVzIGluc3RlYWQ6IFwiJyArIHJlZHVjZXJOYW1lcy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBwcm9wZXJ0aWVzIHdpbGwgYmUgaWdub3JlZC4nO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFVuZXhwZWN0ZWRJbnZvY2F0aW9uUGFyYW1ldGVyTWVzc2FnZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChuZXh0U3RhdGUsIHJlZHVjZXJOYW1lLCBhY3Rpb24pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmaW5lZFxuICBpZiAobmV4dFN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsgcmVkdWNlck5hbWUgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gaGFuZGxpbmcgXCInICsgYWN0aW9uLnR5cGUgKyAnXCIgYWN0aW9uLiBUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuJyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVOZXh0U3RhdGUuanMubWFwIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IHZhciBzdWJzY3JpcHRpb25TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRyeVN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdHJ5VW5zdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vdGlmeU5lc3RlZFN1YnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzU3Vic2NyaWJlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5cbnZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IHRydWU7XG5cbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKCkge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4O1xuXG4gIHZhciBzdG9yZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3N0b3JlJztcbiAgdmFyIHN1YktleSA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3ViS2V5IHx8IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzW3N0b3JlS2V5XSAhPT0gbmV4dFByb3BzLnN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogc3RvcmVTaGFwZS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gIH07XG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3RvcmVLZXldID0gc3RvcmVTaGFwZS5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBvblN0YXRlQ2hhbmdlO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgfVxuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIGhvdFJlbG9hZGluZ1ZlcnNpb24gPSAwO1xudmFyIGR1bW15U3RhdGUgPSB7fTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHN0b3JlKSB7XG4gIC8vIHdyYXAgdGhlIHNlbGVjdG9yIGluIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBpdHMgcmVzdWx0cyBiZXR3ZWVuIHJ1bnMuXG4gIHZhciBzZWxlY3RvciA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bkNvbXBvbmVudFNlbGVjdG9yKHByb3BzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgICAgICBpZiAobmV4dFByb3BzICE9PSBzZWxlY3Rvci5wcm9wcyB8fCBzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2VsZWN0b3IucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBzZWxlY3Rvci5lcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5KSB7XG4gIHZhciBfY29udGV4dFR5cGVzLCBfY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRnZXREaXNwbGF5TmFtZSA9IF9yZWYuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYkZ2V0RGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICdDb25uZWN0QWR2YW5jZWQoJyArIG5hbWUgKyAnKSc7XG4gIH0gOiBfcmVmJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRtZXRob2ROYW1lID0gX3JlZi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYkbWV0aG9kTmFtZSA9PT0gdW5kZWZpbmVkID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmJHJlbmRlckNvdW50UHJvcCA9IF9yZWYucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZiRyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZiRzaG91bGRIYW5kbGVTdGF0ID0gX3JlZi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJHNob3VsZEhhbmRsZVN0YXQsXG4gICAgICBfcmVmJHN0b3JlS2V5ID0gX3JlZi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZiRzdG9yZUtleSA9PT0gdW5kZWZpbmVkID8gJ3N0b3JlJyA6IF9yZWYkc3RvcmVLZXksXG4gICAgICBfcmVmJHdpdGhSZWYgPSBfcmVmLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZiR3aXRoUmVmID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkd2l0aFJlZixcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnZ2V0RGlzcGxheU5hbWUnLCAnbWV0aG9kTmFtZScsICdyZW5kZXJDb3VudFByb3AnLCAnc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzJywgJ3N0b3JlS2V5JywgJ3dpdGhSZWYnXSk7XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG4gIHZhciB2ZXJzaW9uID0gaG90UmVsb2FkaW5nVmVyc2lvbisrO1xuXG4gIHZhciBjb250ZXh0VHlwZXMgPSAoX2NvbnRleHRUeXBlcyA9IHt9LCBfY29udGV4dFR5cGVzW3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUsIF9jb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY29udGV4dFR5cGVzKTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gKF9jaGlsZENvbnRleHRUeXBlcyA9IHt9LCBfY2hpbGRDb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY2hpbGRDb250ZXh0VHlwZXMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PSAnZnVuY3Rpb24nLCAnWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgJyArIChtZXRob2ROYW1lICsgJy4gSW5zdGVhZCByZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgd2l0aFJlZjogd2l0aFJlZixcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBDb25uZWN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wc1tzdG9yZUtleV0gfHwgY29udGV4dFtzdG9yZUtleV07XG4gICAgICAgIF90aGlzLnByb3BzTW9kZSA9IEJvb2xlYW4ocHJvcHNbc3RvcmVLZXldKTtcbiAgICAgICAgX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlID0gX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIGludmFyaWFudChfdGhpcy5zdG9yZSwgJ0NvdWxkIG5vdCBmaW5kIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiAnICsgKCdcIicgKyBkaXNwbGF5TmFtZSArICdcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgJykgKyAoJ29yIGV4cGxpY2l0bHkgcGFzcyBcIicgKyBzdG9yZUtleSArICdcIiBhcyBhIHByb3AgdG8gXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJykpO1xuXG4gICAgICAgIF90aGlzLmluaXRTZWxlY3RvcigpO1xuICAgICAgICBfdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjI7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX3JlZjJbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjI7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBmaXJlcyBkdXJpbmcgc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBidXQgY29tcG9uZW50RGlkTW91bnQgYW5kXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGRvIG5vdC4gQmVjYXVzZSBvZiB0aGlzLCB0cnlTdWJzY3JpYmUgaGFwcGVucyBkdXJpbmcgLi4uZGlkTW91bnQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdW5zdWJzY3JpcHRpb24gd291bGQgbmV2ZXIgdGFrZSBwbGFjZSBkdXJpbmcgU1NSLCBjYXVzaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNoaWxkIGNvbXBvbmVudCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYSBzdGF0ZSBjaGFuZ2UgYnlcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgYW4gYWN0aW9uIGluIGl0cyBjb21wb25lbnRXaWxsTW91bnQsIHdlIGhhdmUgdG8gcmUtcnVuIHRoZSBzZWxlY3QgYW5kIG1heWJlXG4gICAgICAgIC8vIHJlLXJlbmRlci5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5zdG9yZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuID0gbm9vcDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsICdUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgJyArICgneyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlICcgKyBtZXRob2ROYW1lICsgJygpIGNhbGwuJykpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFNlbGVjdG9yID0gZnVuY3Rpb24gaW5pdFNlbGVjdG9yKCkge1xuICAgICAgICB2YXIgc291cmNlU2VsZWN0b3IgPSBzZWxlY3RvckZhY3RvcnkodGhpcy5zdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3RvciwgdGhpcy5zdG9yZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQodGhpcy5zdWJzY3JpcHRpb24pO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuc3Vic2NyaXB0aW9uKSAmJiB0aGlzLnN1YnNjcmlwdGlvbi5pc1N1YnNjcmliZWQoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7XG4gICAgICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuICAgICAgICB2YXIgd2l0aEV4dHJhcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBzZWxlY3Rvci5lcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLmFkZEV4dHJhUHJvcHMoc2VsZWN0b3IucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENvbm5lY3Q7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTtcblxuICAgICAgICAgIC8vIElmIGFueSBjb25uZWN0ZWQgZGVzY2VuZGFudHMgZG9uJ3QgaG90IHJlbG9hZCAoYW5kIHJlc3Vic2NyaWJlIGluIHRoZSBwcm9jZXNzKSwgdGhlaXJcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMgd2lsbCBiZSBsb3N0IHdoZW4gd2UgdW5zdWJzY3JpYmUuIFVuZm9ydHVuYXRlbHksIGJ5IGNvcHlpbmcgb3ZlciBhbGxcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMsIHRoaXMgZG9lcyBtZWFuIHRoYXQgdGhlIG9sZCB2ZXJzaW9ucyBvZiBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd2lsbCBzdGlsbCBiZVxuICAgICAgICAgIC8vIG5vdGlmaWVkIG9mIHN0YXRlIGNoYW5nZXM7IGhvd2V2ZXIsIHRoZWlyIG9uU3RhdGVDaGFuZ2UgZnVuY3Rpb24gaXMgYSBuby1vcCBzbyB0aGlzXG4gICAgICAgICAgLy8gaXNuJ3QgYSBodWdlIGRlYWwuXG4gICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5cbi8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuXG4vLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9O1xuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHsgZGlzcGF0Y2g6IGRpc3BhdGNoIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcblxuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcblxuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICB2YXIgb3duUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBzdGF0ZVByb3BzID0gdm9pZCAwO1xuICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuXG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydpbml0TWFwU3RhdGVUb1Byb3BzJywgJ2luaXRNYXBEaXNwYXRjaFRvUHJvcHMnLCAnaW5pdE1lcmdlUHJvcHMnXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5JztcblxuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJyArIHR5cGVvZiBhcmcgKyAnIGZvciAnICsgbmFtZSArICcgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCAnICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArICcuJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHVuZGVmaW5lZCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcbiAgICAgICAgX3JlZjIkcHVyZSA9IF9yZWYyLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMiRwdXJlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkcHVyZSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9PT0gdW5kZWZpbmVkID8gc3RyaWN0RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjIkYXJlT3duUHJvcHNFcXVhID0gX3JlZjIuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU93blByb3BzRXF1YSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMi5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMi5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydwdXJlJywgJ2FyZVN0YXRlc0VxdWFsJywgJ2FyZU93blByb3BzRXF1YWwnLCAnYXJlU3RhdGVQcm9wc0VxdWFsJywgJ2FyZU1lcmdlZFByb3BzRXF1YWwnXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG5cbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcblxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdDb25uZWN0KCcgKyBuYW1lICsgJyknO1xuICAgICAgfSxcblxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG5cbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCBcIkEgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudFwiKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICB2YXIgX2VsZW1lbnQkcHJvcHMgPSBlbGVtZW50LnByb3BzLFxuICAgICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICAgIHN0cmljdCA9IF9lbGVtZW50JHByb3BzLnN0cmljdCxcbiAgICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICAgIHZhciBwYXRoID0gcGF0aFByb3AgfHwgZnJvbTtcblxuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBsb2NhdGlvbjogbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2guY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuLy8gaW1wb3J0IFByb3BzVHlwZSBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcblxyXG5jbGFzcyBIb21lUGFnZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5Ib21lIFBhZ2U8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfSAgICBcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZVBhZ2U7XHJcbiIsImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xyXG5cclxuY29uc3QgZmlyc3RTZWxlY3RvciA9IChzdGF0ZSkgPT4gc3RhdGUuZ2V0KCdmaXJzdFBhZ2UnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNlbGVjdG9yKGZpcnN0U2VsZWN0b3IsIChmaXJzdCkgPT4gKHsgICAgXHJcbiAgICBsaXN0OiBmaXJzdC5nZXQoJ2xpc3QnKVxyXG59KSk7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbi8vIGltcG9ydCBQcm9wc1R5cGUgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5pbXBvcnQgc2VsZWN0b3JzIGZyb20gJy4vc2VsZWN0b3JzJztcclxuXHJcblxyXG5jbGFzcyBGaXJzdFBhZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHsgbGlzdCB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBjb25zb2xlLmxvZygneHh4eHh4eHgnLCBsaXN0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5GaXJzdCBQYWdlPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH0gICAgXHJcbn1cclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4gKHt9KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXHJcbiAgICBzZWxlY3RvcnMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuKShGaXJzdFBhZ2UpO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuXHJcbmNsYXNzIFNlY29uZFBhZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+U2Vjb25kIFBhZ2U8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfSAgICBcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2Vjb25kUGFnZTtcclxuIiwiaW1wb3J0IHsgZnJvbUpTIH0gZnJvbSAnaW1tdXRhYmxlJztcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IGZyb21KUyh7XHJcbiAgICBsaXN0OiBbXHJcbiAgICAgICAgJ2FhJ1xyXG4gICAgXSxcclxuICAgIGRhdGE6IHt9XHJcbn0pO1xyXG5cclxuY29uc3QgZmlyc3RQYWdlID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdBRERfVE9ET19GSVJTVCc6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5zZXQoJ2xpc3QnLCBhY3Rpb24ubGlzdCk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG4gIFxyXG5leHBvcnQgZGVmYXVsdCBmaXJzdFBhZ2U7XHJcbiIsImltcG9ydCB7IGZyb21KUyB9IGZyb20gJ2ltbXV0YWJsZSc7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSBmcm9tSlMoe1xyXG4gICAgbGlzdDogW10sXHJcbiAgICBkYXRhOiB7fVxyXG59KTtcclxuXHJcbmNvbnN0IHNlY29uZFBhZ2UgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ0FERF9UT0RPX1NFQ09ORCc6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5zZXQoJ2xpc3QnLCBhY3Rpb24ubGlzdCk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG4gIFxyXG5leHBvcnQgZGVmYXVsdCBzZWNvbmRQYWdlO1xyXG4iLCJpbXBvcnQgeyBmcm9tSlMgfSBmcm9tICdpbW11dGFibGUnO1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlID0gZnJvbUpTKHtcclxuICAgIGxpc3Q6IFtdLFxyXG4gICAgZGF0YToge31cclxufSk7XHJcblxyXG5jb25zdCBob21lUGFnZSA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnQUREX1RPRE9fSE9NRSc6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5zZXQoJ2xpc3QnLCBhY3Rpb24ubGlzdCk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG4gIFxyXG5leHBvcnQgZGVmYXVsdCBob21lUGFnZTtcclxuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgtaW1tdXRhYmxlJztcclxuaW1wb3J0IGZpcnN0UGFnZSBmcm9tICcuLi9GaXJzdFBhZ2UvcmVkdWNlcnMnO1xyXG5pbXBvcnQgc2Vjb25kUGFnZSBmcm9tICcuLi9TZWNvbmRQYWdlL3JlZHVjZXJzJztcclxuaW1wb3J0IGhvbWVQYWdlIGZyb20gJy4uL0hvbWVQYWdlL3JlZHVjZXJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICBmaXJzdFBhZ2UsXHJcbiAgICBzZWNvbmRQYWdlLFxyXG4gICAgaG9tZVBhZ2VcclxufSk7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbi8vIGltcG9ydCBQcm9wc1R5cGUgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgY3JlYXRlQnJvd3Nlckhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeSc7XHJcblxyXG4vLyBpbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9jb25maWd1cmVTdG9yZSc7XHJcbi8vIGltcG9ydCByZW5kZXJSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvcmVuZGVyUm91dGVzJztcclxuLy8gaW1wb3J0IHJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XHJcblxyXG4vLyBpbXBvcnQgeyBzeW5jSGlzdG9yeVdpdGhTdG9yZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1yZWR1eCc7XHJcbi8vIGltcG9ydCBDYXRjaEVycm9ySGFuZGxlciBmcm9tICdjb21wb25lbnRzL0NhdGNoRXJyb3JIYW5kbGVyJztcclxuXHJcbmltcG9ydCByZW5kZXJSb3V0ZXMgZnJvbSAnLi4vLi4vcm91dGVzJztcclxuaW1wb3J0IHJlZHVjZXJzIGZyb20gJy4vcmVkdWNlcnMnO1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlID0ge307XHJcbmV4cG9ydCBjb25zdCBoaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKTtcclxuLy8gZXhwb3J0IGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoaW5pdGlhbFN0YXRlLCBoaXN0b3J5KTtcclxuLy8gY29uc3QgY29ubmVjdGVkSGlzdG9yeSA9IHN5bmNIaXN0b3J5V2l0aFN0b3JlKGhpc3RvcnksIHN0b3JlLCB7XHJcbi8vICAgICBzZWxlY3RMb2NhdGlvblN0YXRlOiBzdGF0ZSA9PiBzdGF0ZS5nZXQoJ3JvdXRpbmcnKVxyXG4vLyB9KTtcclxuXHJcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlcnMpO1xyXG5cclxuY2xhc3MgUm9vdCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgICAgICAgICA8Um91dGVyIGhpc3Rvcnk9e2hpc3Rvcnl9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtyZW5kZXJSb3V0ZXMoKX1cclxuICAgICAgICAgICAgICAgIDwvUm91dGVyPlxyXG4gICAgICAgICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgICAgICk7XHJcbiAgICB9ICAgIFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSb290O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBTd2l0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5cclxuXHJcbmltcG9ydCBIb21lUGFnZSBmcm9tICcuLi9jb250YWluZXJzL0hvbWVQYWdlJztcclxuaW1wb3J0IEZpcnN0UGFnZSBmcm9tICcuLi9jb250YWluZXJzL0ZpcnN0UGFnZSc7XHJcbmltcG9ydCBTZWNvbmRQYWdlIGZyb20gJy4uL2NvbnRhaW5lcnMvU2Vjb25kUGFnZSc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyUm91dGVzKHN0b3JlKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17SG9tZVBhZ2V9PjwvUm91dGU+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2ZpcnN0XCIgY29tcG9uZW50PXtGaXJzdFBhZ2V9PjwvUm91dGU+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3NlY29uZFwiIGNvbXBvbmVudD17U2Vjb25kUGFnZX0+PC9Sb3V0ZT5cclxuICAgICAgICA8L1N3aXRjaD5cclxuICAgICk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xyXG5cclxuaW1wb3J0IFJvb3QgZnJvbSAnLi4vdmlldy9jb250YWluZXJzL1Jvb3QnO1xyXG5cclxuXHJcbnJlbmRlcihcclxuICAgIDxSb290IC8+LFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKVxyXG4pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9