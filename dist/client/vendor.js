(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(e,t,n){"use strict";n.d(t,"x",function(){return i}),n.d(t,"e",function(){return a}),n.d(t,"b",function(){return l}),n.d(t,"a",function(){return c}),n.d(t,"c",function(){return s}),n.d(t,"d",function(){return f}),n.d(t,"r",function(){return d}),n.d(t,"u",function(){return h}),n.d(t,"o",function(){return y}),n.d(t,"h",function(){return v}),n.d(t,"q",function(){return b}),n.d(t,"v",function(){return w}),n.d(t,"w",function(){return k}),n.d(t,"f",function(){return x}),n.d(t,"l",function(){return E}),n.d(t,"g",function(){return T}),n.d(t,"m",function(){return O}),n.d(t,"j",function(){return C}),n.d(t,"y",function(){return S}),n.d(t,"t",function(){return j}),n.d(t,"s",function(){return R}),n.d(t,"n",function(){return N}),n.d(t,"z",function(){return A}),n.d(t,"p",function(){return M}),n.d(t,"k",function(){return U}),n.d(t,"A",function(){return I}),n.d(t,"i",function(){return q});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e){return"@@redux-saga/"+e},a=i("TASK"),u=i("HELPER"),l=i("MATCH"),c=i("CANCEL_PROMISE"),s=i("SAGA_ACTION"),f=i("SELF_CANCELLATION"),p=function(e){return function(){return e}},d=p(!0),h=function(){},y=function(e){return e};function v(e,t,n){if(!t(e))throw R("error","uncaught at check",n),new Error(n)}var m=Object.prototype.hasOwnProperty;function g(e,t){return b.notUndef(e)&&m.call(e,t)}var b={undef:function(e){return null===e||void 0===e},notUndef:function(e){return null!==e&&void 0!==e},func:function(e){return"function"==typeof e},number:function(e){return"number"==typeof e},string:function(e){return"string"==typeof e},array:Array.isArray,object:function(e){return e&&!b.array(e)&&"object"===(void 0===e?"undefined":o(e))},promise:function(e){return e&&b.func(e.then)},iterator:function(e){return e&&b.func(e.next)&&b.func(e.throw)},iterable:function(e){return e&&b.func(Symbol)?b.func(e[Symbol.iterator]):b.array(e)},task:function(e){return e&&e[a]},observable:function(e){return e&&b.func(e.subscribe)},buffer:function(e){return e&&b.func(e.isEmpty)&&b.func(e.take)&&b.func(e.put)},pattern:function(e){return e&&(b.string(e)||"symbol"===(void 0===e?"undefined":o(e))||b.func(e)||b.array(e))},channel:function(e){return e&&b.func(e.take)&&b.func(e.close)},helper:function(e){return e&&e[u]},stringableFunc:function(e){return b.func(e)&&g(e,"toString")}},w={assign:function(e,t){for(var n in t)g(t,n)&&(e[n]=t[n])}};function k(e,t){var n=e.indexOf(t);n>=0&&e.splice(n,1)}var x={from:function(e){var t=Array(e.length);for(var n in e)g(e,n)&&(t[n]=e[n]);return t}};function E(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=r({},e),n=new Promise(function(e,n){t.resolve=e,t.reject=n});return t.promise=n,t}function T(e){for(var t=[],n=0;n<e;n++)t.push(E());return t}function O(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=void 0,r=new Promise(function(r){n=setTimeout(function(){return r(t)},e)});return r[c]=function(){return clearTimeout(n)},r}function C(){var e,t=!0,n=void 0,r=void 0;return(e={})[a]=!0,e.isRunning=function(){return t},e.result=function(){return n},e.error=function(){return r},e.setRunning=function(e){return t=e},e.setResult=function(e){return n=e},e.setError=function(e){return r=e},e}var S=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return function(){return++e}}(),_=function(e){throw e},P=function(e){return{value:e,done:!0}};function j(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments[3],o={name:n,next:e,throw:t,return:P};return r&&(o[u]=!0),"undefined"!=typeof Symbol&&(o[Symbol.iterator]=function(){return o}),o}function R(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";"undefined"==typeof window?console.log("redux-saga "+e+": "+t+"\n"+(n&&n.stack||n)):console[e](t,n)}function N(e,t){return function(){return e.apply(void 0,arguments)}}var A=function(e,t){return e+" has been deprecated in favor of "+t+", please update your code"},M=function(e){return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: "+e+"\n")},U=function(e,t){return(e?e+".":"")+"setContext(props): argument "+t+" is not a plain object"},I=function(e){return function(t){return e(Object.defineProperty(t,s,{value:!0}))}},q=function e(t){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=[],a=t.apply(void 0,r);return{next:function(e){return i.push(e),a.next(e)},clone:function(){var n=e(t).apply(void 0,r);return i.forEach(function(e){return n.next(e)}),n},return:function(e){return a.return(e)},throw:function(e){return a.throw(e)}}}}},10:function(e,t,n){"use strict";n.r(t);var r=n(4);n.d(t,"take",function(){return r.s}),n.d(t,"takem",function(){return r.v}),n.d(t,"put",function(){return r.n}),n.d(t,"all",function(){return r.b}),n.d(t,"race",function(){return r.o}),n.d(t,"call",function(){return r.e}),n.d(t,"apply",function(){return r.c}),n.d(t,"cps",function(){return r.h}),n.d(t,"fork",function(){return r.k}),n.d(t,"spawn",function(){return r.r}),n.d(t,"join",function(){return r.m}),n.d(t,"cancel",function(){return r.f}),n.d(t,"select",function(){return r.p}),n.d(t,"actionChannel",function(){return r.a}),n.d(t,"cancelled",function(){return r.g}),n.d(t,"flush",function(){return r.j}),n.d(t,"getContext",function(){return r.l}),n.d(t,"setContext",function(){return r.q}),n.d(t,"takeEvery",function(){return r.t}),n.d(t,"takeLatest",function(){return r.u}),n.d(t,"throttle",function(){return r.w})},108:function(e,t,n){"use strict";var r=n(81);t.a=r.a},109:function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,s=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(s){var p=c(n);p&&p!==s&&e(t,p,f)}var d=a(n);u&&(d=d.concat(u(n)));for(var h=0;h<d.length;++h){var y=d[h];if(!(r[y]||o[y]||f&&f[y])){var v=l(n,y);try{i(t,y,v)}catch(e){}}}return t}return t}},11:function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},111:function(e,t,n){var r=n(481);e.exports=h,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],y=n[2],v=n[3],m=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var k=null!=y&&null!=h&&h!==y,x="+"===b||"*"===b,E="?"===b||"*"===b,T=n[2]||l,O=m||g;r.push({name:v||i++,prefix:y||"",delimiter:T,optional:E,repeat:x,partial:k,asterisk:!!w,pattern:O?s(O):w?".*":"[^"+c(T)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",l=n||{},c=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var f=e[s];if("string"!=typeof f){var p,d=l[f.name];if(null==d){if(f.optional){f.partial&&(i+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(r(d)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var h=0;h<d.length;h++){if(p=c(d[h]),!t[s].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");i+=(0===h?f.prefix:f.delimiter)+p}}else{if(p=f.asterisk?u(d):c(d),!t[s].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');i+=f.prefix+p}}else i+=f}return i}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function p(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)a+=c(l);else{var s=c(l.prefix),d="(?:"+l.pattern+")";t.push(l),l.repeat&&(d+="(?:"+s+d+")*"),a+=d=l.optional?l.partial?s+"("+d+")?":"(?:"+s+"("+d+"))?":s+"("+d+")"}}var h=c(n.delimiter||"/"),y=a.slice(-h.length)===h;return o||(a=(y?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&y?"":"(?="+h+"|$)",f(new RegExp("^"+a,p(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",p(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},112:function(e,t,n){"use strict";var r=n(15),o=n.n(r),i=n(11),a=n.n(i),u=n(3),l=n.n(u),c=n(2),s=n.n(c),f=n(80),p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){return 0===l.a.Children.count(e)},y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:p({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,u=e.exact,l=e.sensitive;if(n)return n;a()(t,"You should not use <Route> or withRouter() outside a <Router>");var c=t.route,s=(r||c.location).pathname;return Object(f.a)(s,{path:o,strict:i,exact:u,sensitive:l},c.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!h(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!h(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,a=i.history,u=i.route,c=i.staticContext,s={match:e,location:this.props.location||u.location,history:a,staticContext:c};return r?e?l.a.createElement(r,s):null:o?e?o(s):null:"function"==typeof n?n(s):n&&!h(n)?l.a.Children.only(n):null},t}(l.a.Component);y.propTypes={computedMatch:s.a.object,path:s.a.string,exact:s.a.bool,strict:s.a.bool,sensitive:s.a.bool,component:s.a.func,render:s.a.func,children:s.a.oneOfType([s.a.func,s.a.node]),location:s.a.object},y.contextTypes={router:s.a.shape({history:s.a.object.isRequired,route:s.a.object.isRequired,staticContext:s.a.object})},y.childContextTypes={router:s.a.object.isRequired},t.a=y},113:function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},15:function(e,t,n){"use strict";var r=function(){};e.exports=r},154:function(e,t,n){"use strict";var r=n(112);t.a=r.a},155:function(e,t,n){"use strict";n.r(t);var r=n(15),o=n.n(r),i=n(3),a=n.n(i),u=n(2),l=n.n(u),c=n(17),s=n.n(c),f=n(11),p=n.n(f),d=n(157),h=n(158),y=function(e){return"/"===e.charAt(0)?e:"/"+e},v=function(e){return"/"===e.charAt(0)?e.substr(1):e},m=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},g=function(e,t){return m(e,t)?e.substr(t.length):e},b=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},w=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},x=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=k({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(d.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},E=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(h.default)(e.state,t.state)},T=function(){var e=null,t=[];return{setPrompt:function(t){return s()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):(s()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},O=!("undefined"==typeof window||!window.document||!window.document.createElement),C=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},S=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},_=function(e,t){return t(window.confirm(e))},P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},R=function(){try{return window.history.state||{}}catch(e){return{}}},N=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e.forceRefresh,i=void 0!==o&&o,a=e.getUserConfirmation,u=void 0===a?_:a,l=e.keyLength,c=void 0===l?6:l,f=e.basename?b(y(e.basename)):"",d=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return s()(!f||m(i,f),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+f+'".'),f&&(i=g(i,f)),x(i,r,n)},h=function(){return Math.random().toString(36).substr(2,c)},v=T(),k=function(e){j(H,e),H.length=t.length,v.notifyListeners(H.location,H.action)},E=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||M(d(e.state))},N=function(){M(d(R()))},A=!1,M=function(e){A?(A=!1,k()):v.confirmTransitionTo(e,"POP",u,function(t){t?k({action:"POP",location:e}):U(e)})},U=function(e){var t=H.location,n=q.indexOf(t.key);-1===n&&(n=0);var r=q.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,D(o))},I=d(R()),q=[I.key],L=function(e){return f+w(e)},D=function(e){t.go(e)},F=0,z=function(e){1===(F+=e)?(C(window,"popstate",E),r&&C(window,"hashchange",N)):0===F&&(S(window,"popstate",E),r&&S(window,"hashchange",N))},W=!1,H={length:t.length,action:"POP",location:I,createHref:L,push:function(e,r){s()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,h(),H.location);v.confirmTransitionTo(o,"PUSH",u,function(e){if(e){var r=L(o),a=o.key,u=o.state;if(n)if(t.pushState({key:a,state:u},null,r),i)window.location.href=r;else{var l=q.indexOf(H.location.key),c=q.slice(0,-1===l?0:l+1);c.push(o.key),q=c,k({action:"PUSH",location:o})}else s()(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){s()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,h(),H.location);v.confirmTransitionTo(o,"REPLACE",u,function(e){if(e){var r=L(o),a=o.key,u=o.state;if(n)if(t.replaceState({key:a,state:u},null,r),i)window.location.replace(r);else{var l=q.indexOf(H.location.key);-1!==l&&(q[l]=o.key),k({action:"REPLACE",location:o})}else s()(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:D,goBack:function(){return D(-1)},goForward:function(){return D(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=v.setPrompt(e);return W||(z(1),W=!0),function(){return W&&(W=!1,z(-1)),t()}},listen:function(e){var t=v.appendListener(e);return z(1),function(){z(-1),t()}}};return H},A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+v(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:v,decodePath:y},slash:{encodePath:y,decodePath:y}},U=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},I=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?_:r,i=e.hashType,a=void 0===i?"slash":i,u=e.basename?b(y(e.basename)):"",l=M[a],c=l.encodePath,f=l.decodePath,d=function(){var e=f(U());return s()(!u||m(e,u),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+u+'".'),u&&(e=g(e,u)),x(e)},h=T(),v=function(e){A(V,e),V.length=t.length,h.notifyListeners(V.location,V.action)},k=!1,P=null,j=function(){var e=U(),t=c(e);if(e!==t)I(t);else{var n=d(),r=V.location;if(!k&&E(r,n))return;if(P===w(n))return;P=null,R(n)}},R=function(e){k?(k=!1,v()):h.confirmTransitionTo(e,"POP",o,function(t){t?v({action:"POP",location:e}):N(e)})},N=function(e){var t=V.location,n=F.lastIndexOf(w(t));-1===n&&(n=0);var r=F.lastIndexOf(w(e));-1===r&&(r=0);var o=n-r;o&&(k=!0,z(o))},q=U(),L=c(q);q!==L&&I(L);var D=d(),F=[w(D)],z=function(e){s()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},W=0,H=function(e){1===(W+=e)?C(window,"hashchange",j):0===W&&S(window,"hashchange",j)},B=!1,V={length:t.length,action:"POP",location:D,createHref:function(e){return"#"+c(u+w(e))},push:function(e,t){s()(void 0===t,"Hash history cannot push state; it is ignored");var n=x(e,void 0,void 0,V.location);h.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=w(n),r=c(u+t);if(U()!==r){P=t,function(e){window.location.hash=e}(r);var o=F.lastIndexOf(w(V.location)),i=F.slice(0,-1===o?0:o+1);i.push(t),F=i,v({action:"PUSH",location:n})}else s()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),v()}})},replace:function(e,t){s()(void 0===t,"Hash history cannot replace state; it is ignored");var n=x(e,void 0,void 0,V.location);h.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=w(n),r=c(u+t);U()!==r&&(P=t,I(r));var o=F.indexOf(w(V.location));-1!==o&&(F[o]=t),v({action:"REPLACE",location:n})}})},go:z,goBack:function(){return z(-1)},goForward:function(){return z(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=h.setPrompt(e);return B||(H(1),B=!0),function(){return B&&(B=!1,H(-1)),t()}},listen:function(e){var t=h.appendListener(e);return H(1),function(){H(-1),t()}}};return V},L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F=function(e,t,n){return Math.min(Math.max(e,t),n)},z=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,o=e.initialIndex,i=void 0===o?0:o,a=e.keyLength,u=void 0===a?6:a,l=T(),c=function(e){D(v,e),v.length=v.entries.length,l.notifyListeners(v.location,v.action)},f=function(){return Math.random().toString(36).substr(2,u)},p=F(i,0,r.length-1),d=r.map(function(e){return x(e,void 0,"string"==typeof e?f():e.key||f())}),h=w,y=function(e){var n=F(v.index+e,0,v.entries.length-1),r=v.entries[n];l.confirmTransitionTo(r,"POP",t,function(e){e?c({action:"POP",location:r,index:n}):c()})},v={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:h,push:function(e,n){s()(!("object"===(void 0===e?"undefined":L(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,f(),v.location);l.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){s()(!("object"===(void 0===e?"undefined":L(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,f(),v.location);l.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(v.entries[v.index]=r,c({action:"REPLACE",location:r}))})},go:y,goBack:function(){return y(-1)},goForward:function(){return y(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return v},W=n(108);function H(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var B=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=H(this,e.call.apply(e,[this].concat(i))),r.history=N(r.props),H(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(W.a,{history:this.history,children:this.props.children})},t}(a.a.Component);B.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var V=B;function $(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=$(this,e.call.apply(e,[this].concat(i))),r.history=q(r.props),$(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(W.a,{history:this.history,children:this.props.children})},t}(a.a.Component);Y.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var K=Y,Q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function X(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var G=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},J=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=X(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!G(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},X(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>"),p()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,i="string"==typeof t?x(t,null,null,o.location):t,u=o.createHref(i);return a.a.createElement("a",Q({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(a.a.Component);J.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},J.defaultProps={replace:!1},J.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var Z=J,ee=n(81);function te(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ne=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=te(this,e.call.apply(e,[this].concat(i))),r.history=z(r.props),te(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(ee.a,{history:this.history,children:this.props.children})},t}(a.a.Component);ne.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var re=ne,oe=n(154),ie=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var ue=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,u=e.className,l=e.activeStyle,c=e.style,s=e.isActive,f=e["aria-current"],p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),d="object"===(void 0===t?"undefined":ae(t))?t.pathname:t,h=d&&d.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return a.a.createElement(oe.a,{path:h,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(s?s(r,n):r);return a.a.createElement(Z,ie({to:t,className:o?[u,i].filter(function(e){return e}).join(" "):u,style:o?ie({},c,l):c,"aria-current":o&&f||null},p))}})};ue.propTypes={to:Z.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,"aria-current":l.a.oneOf(["page","step","location","date","time","true"])},ue.defaultProps={activeClassName:"active","aria-current":"page"};var le=ue;var ce=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);ce.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},ce.defaultProps={when:!0},ce.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var se=ce,fe=n(111),pe=n.n(fe),de={},he=0,ye=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=de[t]||(de[t]={});if(n[e])return n[e];var r=pe.a.compile(e);return he<1e4&&(n[e]=r,he++),r}(e)(t,{pretty:!0})},ve=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var me=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=x(e.to),n=x(this.props.to);E(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?ye(n,t.params):ve({},n,{pathname:ye(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(a.a.Component);me.propTypes={computedMatch:l.a.object,push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},me.defaultProps={push:!1},me.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ge=me,be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function we(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ke=function(e){return"/"===e.charAt(0)?e:"/"+e},xe=function(e,t){return e?be({},t,{pathname:ke(e)+t.pathname}):t},Ee=function(e){return"string"==typeof e?e:w(e)},Te=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},Oe=function(){},Ce=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=we(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return ke(r.props.basename+Ee(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=xe(n,x(e)),o.url=Ee(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=xe(n,x(e)),o.url=Ee(o.location)},r.handleListen=function(){return Oe},r.handleBlock=function(){return Oe},we(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=ke(e);return 0!==t.pathname.indexOf(n)?t:be({},t,{pathname:t.pathname.substr(n.length)})}(t,x(n)),push:this.handlePush,replace:this.handleReplace,go:Te("go"),goBack:Te("goBack"),goForward:Te("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(ee.a,be({},r,{history:o}))},t}(a.a.Component);Ce.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},Ce.defaultProps={basename:"",location:"/"},Ce.childContextTypes={router:l.a.object.isRequired};var Se=Ce,_e=n(480).a,Pe=ye,je=n(80).a,Re=n(109),Ne=n.n(Re),Ae=n(112),Me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ue=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return a.a.createElement(Ae.a,{children:function(t){return a.a.createElement(e,Me({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},Ne()(t,e)};n.d(t,"BrowserRouter",function(){return V}),n.d(t,"HashRouter",function(){return K}),n.d(t,"Link",function(){return Z}),n.d(t,"MemoryRouter",function(){return re}),n.d(t,"NavLink",function(){return le}),n.d(t,"Prompt",function(){return se}),n.d(t,"Redirect",function(){return ge}),n.d(t,"Route",function(){return oe.a}),n.d(t,"Router",function(){return W.a}),n.d(t,"StaticRouter",function(){return Se}),n.d(t,"Switch",function(){return _e}),n.d(t,"generatePath",function(){return Pe}),n.d(t,"matchPath",function(){return je}),n.d(t,"withRouter",function(){return Ue})},156:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(217)},157:function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),u=t&&r(t),l=a||u;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var c=void 0;if(i.length){var s=i[i.length-1];c="."===s||".."===s||""===s}else c=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!l)for(;f--;f)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return c&&"/"!==h.substr(-1)&&(h+="/"),h}},158:function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var u=Object.keys(t),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},159:function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"TASK",function(){return o.e}),n.d(r,"SAGA_ACTION",function(){return o.c}),n.d(r,"noop",function(){return o.u}),n.d(r,"is",function(){return o.q}),n.d(r,"deferred",function(){return o.l}),n.d(r,"arrayOfDeffered",function(){return o.g}),n.d(r,"createMockTask",function(){return o.j}),n.d(r,"cloneableGenerator",function(){return o.i}),n.d(r,"asEffect",function(){return u.d}),n.d(r,"CHANNEL_END",function(){return p});var o=n(0),i=n(19),a=n(82),u=n(4),l=n(42),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var f="proc first argument (Saga function result) must be an iterator",p={toString:function(){return"@@redux-saga/CHANNEL_END"}},d={toString:function(){return"@@redux-saga/TASK_CANCEL"}},h={wildcard:function(){return o.r},default:function(e){return"symbol"===(void 0===e?"undefined":s(e))?function(t){return t.type===e}:function(t){return t.type===String(e)}},array:function(e){return function(t){return e.some(function(e){return y(e)(t)})}},predicate:function(e){return function(t){return e(t)}}};function y(e){return("*"===e?h.wildcard:o.q.array(e)?h.array:o.q.stringableFunc(e)?h.default:o.q.func(e)?h.predicate:h.default)(e)}var v=function(e){return{fn:e}};function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return o.u},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.u,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:o.u,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},h=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},g=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,b=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"anonymous",w=arguments[8];Object(o.h)(e,o.q.iterator,f);var k=Object(o.n)(D,Object(o.z)("[...effects]","all([...effects])")),x=h.sagaMonitor,E=h.logger,T=h.onError,O=E||o.s,C=function(e){var t=e.sagaStack;!t&&e.stack&&(t=-1!==e.stack.split("\n")[0].indexOf(e.message)?e.stack:"Error: "+e.message+"\n"+e.stack),O("error","uncaught at "+b,t||e.message||e)},S=Object(i.f)(t),_=Object.create(s);A.cancel=o.u;var P=function(e,t,n,r){var i,a;return n._deferredEnd=null,(i={})[o.e]=!0,i.id=e,i.name=t,"done",(a={}).done=a.done||{},a.done.get=function(){if(n._deferredEnd)return n._deferredEnd.promise;var e=Object(o.l)();return n._deferredEnd=e,n._isRunning||(n._error?e.reject(n._error):e.resolve(n._result)),e.promise},i.cont=r,i.joiners=[],i.cancel=N,i.isRunning=function(){return n._isRunning},i.isCancelled=function(){return n._isCancelled},i.isAborted=function(){return n._isAborted},i.result=function(){return n._result},i.error=function(){return n._error},i.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("task",e)),o.v.assign(_,e)},function(e,t){for(var n in t){var r=t[n];r.configurable=r.enumerable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,n,r)}}(i,a),i}(g,b,e,w),j={name:b,cancel:function(){j.isRunning&&!j.isCancelled&&(j.isCancelled=!0,A(d))},isRunning:!0},R=function(e,t,n){var r=[],i=void 0,a=!1;function u(e){c(),n(e,!0)}function l(e){r.push(e),e.cont=function(l,c){a||(Object(o.w)(r,e),e.cont=o.u,c?u(l):(e===t&&(i=l),r.length||(a=!0,n(i))))}}function c(){a||(a=!0,r.forEach(function(e){e.cont=o.u,e.cancel()}),r=[])}return l(t),{addTask:l,cancelAll:c,abort:u,getTasks:function(){return r},taskNames:function(){return r.map(function(e){return e.name})}}}(0,j,M);function N(){e._isRunning&&!e._isCancelled&&(e._isCancelled=!0,R.cancelAll(),M(d))}return w&&(w.cancel=N),e._isRunning=!0,A(),P;function A(t,n){if(!j.isRunning)throw new Error("Trying to resume an already finished generator");try{var r=void 0;n?r=e.throw(t):t===d?(j.isCancelled=!0,A.cancel(),r=o.q.func(e.return)?e.return(d):{done:!0,value:d}):r=t===p?o.q.func(e.return)?e.return():{done:!0}:e.next(t),r.done?(j.isMainRunning=!1,j.cont&&j.cont(r.value)):U(r.value,g,"",A)}catch(e){j.isCancelled&&C(e),j.isMainRunning=!1,j.cont(e,!0)}}function M(t,n){e._isRunning=!1,S.close(),n?(t instanceof Error&&Object.defineProperty(t,"sagaStack",{value:"at "+b+" \n "+(t.sagaStack||t.stack),configurable:!0}),P.cont||(t instanceof Error&&T?T(t):C(t)),e._error=t,e._isAborted=!0,e._deferredEnd&&e._deferredEnd.reject(t)):(e._result=t,e._deferredEnd&&e._deferredEnd.resolve(t)),P.cont&&P.cont(t,n),P.joiners.forEach(function(e){return e.cb(t,n)}),P.joiners=null}function U(e,s){var f=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",h=arguments[3],m=Object(o.y)();x&&x.effectTriggered({effectId:m,parentEffectId:s,label:f,effect:e});var g=void 0;function w(e,t){g||(g=!0,h.cancel=o.u,x&&(t?x.effectRejected(m,e):x.effectResolved(m,e)),h(e,t))}w.cancel=o.u,h.cancel=function(){if(!g){g=!0;try{w.cancel()}catch(e){C(e)}w.cancel=o.u,x&&x.effectCancelled(m)}};var E=void 0;return o.q.promise(e)?I(e,w):o.q.helper(e)?L(v(e),m,w):o.q.iterator(e)?q(e,m,b,w):o.q.array(e)?k(e,m,w):(E=u.d.take(e))?function(e,t){var n=e.channel,r=e.pattern,o=e.maybe;n=n||S;var a=function(e){return e instanceof Error?t(e,!0):Object(i.e)(e)&&!o?t(p):t(e)};try{n.take(a,y(r))}catch(e){return t(e,!0)}t.cancel=a.cancel}(E,w):(E=u.d.put(e))?function(e,t){var r=e.channel,i=e.action,u=e.resolve;Object(a.a)(function(){var e=void 0;try{e=(r?r.put:n)(i)}catch(e){if(r||u)return t(e,!0);C(e)}if(!u||!o.q.promise(e))return t(e);I(e,t)})}(E,w):(E=u.d.all(e))?D(E,m,w):(E=u.d.race(e))?function(e,t,n){var r=void 0,a=Object.keys(e),u={};a.forEach(function(t){var l=function(u,l){if(!r)if(l)n.cancel(),n(u,!0);else if(!Object(i.e)(u)&&u!==p&&u!==d){var s;n.cancel(),r=!0;var f=((s={})[t]=u,s);n(o.q.array(e)?[].slice.call(c({},f,{length:a.length})):f)}};l.cancel=o.u,u[t]=l}),n.cancel=function(){r||(r=!0,a.forEach(function(e){return u[e].cancel()}))},a.forEach(function(n){r||U(e[n],t,n,u[n])})}(E,m,w):(E=u.d.call(e))?function(e,t,n){var r=e.context,i=e.fn,a=e.args,u=void 0;try{u=i.apply(r,a)}catch(e){return n(e,!0)}return o.q.promise(u)?I(u,n):o.q.iterator(u)?q(u,t,i.name,n):n(u)}(E,m,w):(E=u.d.cps(e))?function(e,t){var n=e.context,r=e.fn,i=e.args;try{var a=function(e,n){return o.q.undef(e)?t(n):t(e,!0)};r.apply(n,i.concat(a)),a.cancel&&(t.cancel=function(){return a.cancel()})}catch(e){return t(e,!0)}}(E,w):(E=u.d.fork(e))?L(E,m,w):(E=u.d.join(e))?function(e,t){if(e.isRunning()){var n={task:P,cb:t};t.cancel=function(){return Object(o.w)(e.joiners,n)},e.joiners.push(n)}else e.isAborted()?t(e.error(),!0):t(e.result())}(E,w):(E=u.d.cancel(e))?function(e,t){e===o.d&&(e=P);e.isRunning()&&e.cancel();t()}(E,w):(E=u.d.select(e))?function(e,t){var n=e.selector,o=e.args;try{var i=n.apply(void 0,[r()].concat(o));t(i)}catch(e){t(e,!0)}}(E,w):(E=u.d.actionChannel(e))?function(e,n){var r=e.pattern,o=e.buffer,a=y(r);a.pattern=r,n(Object(i.d)(t,o||l.a.fixed(),a))}(E,w):(E=u.d.flush(e))?function(e,t){e.flush(t)}(E,w):(E=u.d.cancelled(e))?function(e,t){t(!!j.isCancelled)}(0,w):(E=u.d.getContext(e))?function(e,t){t(_[e])}(E,w):(E=u.d.setContext(e))?function(e,t){o.v.assign(_,e),t()}(E,w):w(e)}function I(e,t){var n=e[o.a];o.q.func(n)?t.cancel=n:o.q.func(e.abort)&&(t.cancel=function(){return e.abort()}),e.then(t,function(e){return t(e,!0)})}function q(e,o,i,a){m(e,t,n,r,_,h,o,i,a)}function L(e,i,u){var l=e.context,c=e.fn,s=e.args,f=e.detached,p=function(e){var t=e.context,n=e.fn,r=e.args;if(o.q.iterator(n))return n;var i=void 0,a=void 0;try{i=n.apply(t,r)}catch(e){a=e}return o.q.iterator(i)?i:a?Object(o.t)(function(){throw a}):Object(o.t)(function(){var e=void 0,t={done:!1,value:i};return function(n){return e?function(e){return{done:!0,value:e}}(n):(e=!0,t)}}())}({context:l,fn:c,args:s});try{Object(a.c)();var d=m(p,t,n,r,_,h,i,c.name,f?null:o.u);f?u(d):p._isRunning?(R.addTask(d),u(d)):p._error?R.abort(p._error):u(d)}finally{Object(a.b)()}}function D(e,t,n){var r=Object.keys(e);if(!r.length)return n(o.q.array(e)?[]:{});var a=0,u=void 0,l={},s={};r.forEach(function(t){var f=function(s,f){u||(f||Object(i.e)(s)||s===p||s===d?(n.cancel(),n(s,f)):(l[t]=s,++a===r.length&&(u=!0,n(o.q.array(e)?o.f.from(c({},l,{length:r.length})):l))))};f.cancel=o.u,s[t]=f}),n.cancel=function(){u||(u=!0,r.forEach(function(e){return s[e].cancel()}))},r.forEach(function(n){return U(e[n],t,n,s[n])})}}var g="runSaga(storeInterface, saga, ...args): saga argument must be a Generator function!";function b(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var a=void 0;o.q.iterator(e)?(a=e,e=t):(Object(o.h)(t,o.q.func,g),a=t.apply(void 0,r),Object(o.h)(a,o.q.iterator,g));var u=e,l=u.subscribe,c=u.dispatch,s=u.getState,f=u.context,p=u.sagaMonitor,d=u.logger,h=u.onError,y=Object(o.y)();p&&(p.effectTriggered=p.effectTriggered||o.u,p.effectResolved=p.effectResolved||o.u,p.effectRejected=p.effectRejected||o.u,p.effectCancelled=p.effectCancelled||o.u,p.actionDispatched=p.actionDispatched||o.u,p.effectTriggered({effectId:y,root:!0,parentEffectId:0,effect:{root:!0,saga:t,args:r}}));var v=m(a,l,Object(o.A)(c),s,f,{sagaMonitor:p,logger:d,onError:h},y,t.name);return p&&p.effectResolved(y,v),v}var w=n(49),k=n(10);n.d(t,"runSaga",function(){return b}),n.d(t,"END",function(){return i.a}),n.d(t,"eventChannel",function(){return i.d}),n.d(t,"channel",function(){return i.b}),n.d(t,"buffers",function(){return l.a}),n.d(t,"takeEvery",function(){return w.a}),n.d(t,"takeLatest",function(){return w.c}),n.d(t,"throttle",function(){return w.e}),n.d(t,"delay",function(){return o.m}),n.d(t,"CANCEL",function(){return o.a}),n.d(t,"detach",function(){return u.i}),n.d(t,"effects",function(){return k}),n.d(t,"utils",function(){return r});t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.context,n=void 0===t?{}:t,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["context"]),a=r.sagaMonitor,u=r.logger,l=r.onError;if(o.q.func(r))throw new Error("Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead");if(u&&!o.q.func(u))throw new Error("`options.logger` passed to the Saga middleware is not a function!");if(l&&!o.q.func(l))throw new Error("`options.onError` passed to the Saga middleware is not a function!");if(r.emitter&&!o.q.func(r.emitter))throw new Error("`options.emitter` passed to the Saga middleware is not a function!");function c(e){var t=e.getState,s=e.dispatch,f=Object(i.c)();return f.emit=(r.emitter||o.o)(f.emit),c.run=b.bind(null,{context:n,subscribe:f.subscribe,dispatch:s,getState:t,sagaMonitor:a,logger:u,onError:l}),function(e){return function(t){a&&a.actionDispatched&&a.actionDispatched(t);var n=e(t);return f.emit(t),n}}}return c.run=function(){throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware")},c.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("sagaMiddleware",e)),o.v.assign(n,e)},c}},160:function(e,t,n){"use strict";(function(e,r){var o,i=n(210);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(83),n(462)(e))},17:function(e,t,n){"use strict";e.exports=function(){}},19:function(e,t,n){"use strict";n.d(t,"a",function(){return u}),n.d(t,"e",function(){return l}),n.d(t,"c",function(){return c}),n.d(t,"b",function(){return p}),n.d(t,"d",function(){return d}),n.d(t,"f",function(){return h});var r=n(0),o=n(42),i=n(82),a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u={type:"@@redux-saga/CHANNEL_END"},l=function(e){return e&&"@@redux-saga/CHANNEL_END"===e.type};function c(){var e=[];return{subscribe:function(t){return e.push(t),function(){return Object(r.w)(e,t)}},emit:function(t){for(var n=e.slice(),r=0,o=n.length;r<o;r++)n[r](t)}}}var s="invalid buffer passed to channel factory function",f="Saga was provided with an undefined action";function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.a.fixed(),t=!1,n=[];function i(){if(t&&n.length)throw Object(r.p)("Cannot have a closed channel with pending takers");if(n.length&&!e.isEmpty())throw Object(r.p)("Cannot have pending takers with non empty buffer")}return Object(r.h)(e,r.q.buffer,s),{take:function(o){i(),Object(r.h)(o,r.q.func,"channel.take's callback must be a function"),t&&e.isEmpty()?o(u):e.isEmpty()?(n.push(o),o.cancel=function(){return Object(r.w)(n,o)}):o(e.take())},put:function(o){if(i(),Object(r.h)(o,r.q.notUndef,f),!t){if(!n.length)return e.put(o);for(var a=0;a<n.length;a++){var u=n[a];if(!u[r.b]||u[r.b](o))return n.splice(a,1),u(o)}}},flush:function(n){i(),Object(r.h)(n,r.q.func,"channel.flush' callback must be a function"),t&&e.isEmpty()?n(u):n(e.flush())},close:function(){if(i(),!t&&(t=!0,n.length)){var e=n;n=[];for(var r=0,o=e.length;r<o;r++)e[r](u)}},get __takers__(){return n},get __closed__(){return t}}}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.a.none(),n=arguments[2];arguments.length>2&&Object(r.h)(n,r.q.func,"Invalid match function passed to eventChannel");var i=p(t),a=function(){i.__closed__||(u&&u(),i.close())},u=e(function(e){l(e)?a():n&&!n(e)||i.put(e)});if(i.__closed__&&u(),!r.q.func(u))throw new Error("in eventChannel: subscribe should return a function to unsubscribe");return{take:i.take,flush:i.flush,close:a}}function h(e){var t=d(function(t){return e(function(e){e[r.c]?t(e):Object(i.a)(function(){return t(e)})})});return a({},t,{take:function(e,n){arguments.length>1&&(Object(r.h)(n,r.q.func,"channel.take's matcher argument must be a function"),e[r.b]=n),t.take(e)}})}},2:function(e,t,n){e.exports=n(460)()},209:function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(83))},210:function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},216:function(e,t,n){"use strict";
/** @license React v16.5.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(113),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.async_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112;o&&Symbol.for("react.placeholder");var h="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}function b(){}function w(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=g.prototype;var k=w.prototype=new b;k.constructor=w,r(k,g.prototype),k.isPureReactComponent=!0;var x={current:null,currentDispatcher:null},E=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:x.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var S=/\/+/g,_=[];function P(e,t,n,r){if(_.length){var o=_.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>_.length&&_.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+N(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+N(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=h&&t[h]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+N(u,c++),r,o);else"object"===u&&y("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(S,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(S,"$&/")+"/"),R(e,M,t=P(t,i,r,o)),j(t)}var I={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,A,t=P(null,null,t,n)),j(t)},count:function(e){return R(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return C(e)||y("143"),e}},createRef:function(){return{current:null}},Component:g,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,Provider:null,Consumer:null,unstable_read:null}).Provider={$$typeof:s,_context:e},e.Consumer=e,e.unstable_read=function(e,t){var n=x.currentDispatcher;return null===n&&y("277"),n.readContext(e,t)}.bind(null,e),e},forwardRef:function(e){return{$$typeof:d,render:e}},Fragment:u,StrictMode:l,unstable_AsyncMode:p,unstable_Profiler:c,createElement:O,cloneElement:function(e,t,n){(null===e||void 0===e)&&y("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=x.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)E.call(t,o)&&!T.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:C,version:"16.5.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},q={default:I},L=q&&I||q;e.exports=L.default||L},217:function(e,t,n){"use strict";
/** @license React v16.5.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(3),o=n(113),i=n(218);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,c=!1,s=null,f={onError:function(e){u=!0,l=e}};function p(e,t,n,r,o,i,a,c,s){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function y(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!m[n])for(var r in t.extractEvents||a("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;g.hasOwnProperty(l)&&a("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&v(c[o],u,l);o=!0}else i.registrationName?(v(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function v(e,t,n){b[e]&&a("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var m=[],g={},b={},w={},k=null,x=null,E=null;function T(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=E(r),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),u){if(u){var y=l;u=!1,l=null}else a("198"),y=void 0;c||(c=!0,s=y)}}(t,n,void 0,e),e.currentTarget=null}function O(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var S=null;function _(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)T(e,t,n[o],r[o]);else n&&T(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function P(e){return _(e,!0)}function j(e){return _(e,!1)}var R=function(e){d&&a("101"),d=Array.prototype.slice.call(e),y()},N=function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&y()};function A(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function M(e,t){if(null!==e&&(S=O(S,e)),e=S,S=null,e&&(C(e,t?P:j),S&&a("95"),c))throw t=s,c=!1,s=null,t}var U=Math.random().toString(36).slice(2),I="__reactInternalInstance$"+U,q="__reactEventHandlers$"+U;function L(e){if(e[I])return e[I];for(;!e[I];){if(!e.parentNode)return null;e=e.parentNode}return 7===(e=e[I]).tag||8===e.tag?e:null}function D(e){return!(e=e[I])||7!==e.tag&&8!==e.tag?null:e}function F(e){if(7===e.tag||8===e.tag)return e.stateNode;a("33")}function z(e){return e[q]||null}function W(e){do{e=e.return}while(e&&7!==e.tag);return e||null}function H(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function B(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=W(t);for(t=n.length;0<t--;)H(n[t],"captured",e);for(t=0;t<n.length;t++)H(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function $(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function Y(e){C(e,B)}var K=!("undefined"==typeof window||!window.document||!window.document.createElement);function Q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var X={animationend:Q("Animation","AnimationEnd"),animationiteration:Q("Animation","AnimationIteration"),animationstart:Q("Animation","AnimationStart"),transitionend:Q("Transition","TransitionEnd")},G={},J={};function Z(e){if(G[e])return G[e];if(!X[e])return e;var t,n=X[e];for(t in n)if(n.hasOwnProperty(t)&&t in J)return G[e]=n[t];return e}K&&(J=document.createElement("div").style,"AnimationEvent"in window||(delete X.animationend.animation,delete X.animationiteration.animation,delete X.animationstart.animation),"TransitionEvent"in window||delete X.transitionend.transition);var ee=Z("animationend"),te=Z("animationiteration"),ne=Z("animationstart"),re=Z("transitionend"),oe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ie=null,ae=null,ue=null;function le(){if(ue)return ue;var e,t,n=ae,r=n.length,o="value"in ie?ie.value:ie.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ue=o.slice(e,1<t?1-t:void 0)}function ce(){return!0}function se(){return!1}function fe(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ce:se,this.isPropagationStopped=se,this}function pe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function de(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function he(e){e.eventPool=[],e.getPooled=pe,e.release=de}o(fe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ce)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ce)},persist:function(){this.isPersistent=ce},isPersistent:se,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=se,this._dispatchInstances=this._dispatchListeners=null}}),fe.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},fe.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,he(n),n},he(fe);var ye=fe.extend({data:null}),ve=fe.extend({data:null}),me=[9,13,27,32],ge=K&&"CompositionEvent"in window,be=null;K&&"documentMode"in document&&(be=document.documentMode);var we=K&&"TextEvent"in window&&!be,ke=K&&(!ge||be&&8<be&&11>=be),xe=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Te=!1;function Oe(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ce(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var _e={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"compositionstart":o=Ee.compositionStart;break e;case"compositionend":o=Ee.compositionEnd;break e;case"compositionupdate":o=Ee.compositionUpdate;break e}o=void 0}else Se?Oe(e,n)&&(o=Ee.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(ke&&"ko"!==n.locale&&(Se||o!==Ee.compositionStart?o===Ee.compositionEnd&&Se&&(i=le()):(ae="value"in(ie=r)?ie.value:ie.textContent,Se=!0)),o=ye.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ce(n))&&(o.data=i),Y(o),i=o):i=null,(e=we?function(e,t){switch(e){case"compositionend":return Ce(t);case"keypress":return 32!==t.which?null:(Te=!0,xe);case"textInput":return(e=t.data)===xe&&Te?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!ge&&Oe(e,t)?(e=le(),ue=ae=ie=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ke&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=ve.getPooled(Ee.beforeInput,t,n,r)).data=e,Y(t)):t=null,null===i?t:null===t?i:[i,t]}},Pe=null,je=null,Re=null;function Ne(e){if(e=x(e)){"function"!=typeof Pe&&a("280");var t=k(e.stateNode);Pe(e.stateNode,e.type,t)}}function Ae(e){je?Re?Re.push(e):Re=[e]:je=e}function Me(){if(je){var e=je,t=Re;if(Re=je=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Ue(e,t){return e(t)}function Ie(e,t,n){return e(t,n)}function qe(){}var Le=!1;function De(e,t){if(Le)return e(t);Le=!0;try{return Ue(e,t)}finally{Le=!1,(null!==je||null!==Re)&&(qe(),Me())}}var Fe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fe[e.type]:"textarea"===t}function We(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function He(e){if(!K)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=Be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ye=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ke=/^(.*)[\\\/]/,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Ge=Qe?Symbol.for("react.portal"):60106,Je=Qe?Symbol.for("react.fragment"):60107,Ze=Qe?Symbol.for("react.strict_mode"):60108,et=Qe?Symbol.for("react.profiler"):60114,tt=Qe?Symbol.for("react.provider"):60109,nt=Qe?Symbol.for("react.context"):60110,rt=Qe?Symbol.for("react.async_mode"):60111,ot=Qe?Symbol.for("react.forward_ref"):60112,it=Qe?Symbol.for("react.placeholder"):60113,at="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=at&&e[at]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case rt:return"AsyncMode";case Je:return"Fragment";case Ge:return"Portal";case et:return"Profiler";case Ze:return"StrictMode";case it:return"Placeholder"}if("object"==typeof e){switch(e.$$typeof){case nt:return"Context.Consumer";case tt:return"Context.Provider";case ot:return""!==(e=(e=e.render).displayName||e.name||"")?"ForwardRef("+e+")":"ForwardRef"}if("function"==typeof e.then&&(e=1===e._reactStatus?e._reactResult:null))return lt(e)}return null}function ct(e){var t="";do{e:switch(e.tag){case 4:case 0:case 1:case 2:case 3:case 7:case 10:var n=e._debugOwner,r=e._debugSource,o=lt(e.type),i=null;n&&(i=lt(n.type)),n=o,o="",r?o=" (at "+r.fileName.replace(Ke,"")+":"+r.lineNumber+")":i&&(o=" (created by "+i+")"),i="\n    in "+(n||"Unknown")+o;break e;default:i=""}t+=i,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ft=Object.prototype.hasOwnProperty,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){yt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];yt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){yt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){yt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){yt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){yt[e]=new ht(e,3,!0,e,null)}),["capture","download"].forEach(function(e){yt[e]=new ht(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){yt[e]=new ht(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){yt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function mt(e){return e[1].toUpperCase()}function gt(e,t,n,r){var o=yt.hasOwnProperty(t)?yt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ft.call(dt,e)||!ft.call(pt,e)&&(st.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function wt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function kt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=bt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&gt(e,"checked",t,!1)}function Et(e,t){xt(e,t);var n=bt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ot(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ot(e,t.type,bt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Tt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r=e.value,n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ot(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,mt);yt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,mt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,mt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),yt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function St(e,t,n){return(e=fe.getPooled(Ct.change,e,t,n)).type="change",Ae(n),Y(e),e}var _t=null,Pt=null;function jt(e){M(e,!1)}function Rt(e){if($e(F(e)))return e}function Nt(e,t){if("change"===e)return t}var At=!1;function Mt(){_t&&(_t.detachEvent("onpropertychange",Ut),Pt=_t=null)}function Ut(e){"value"===e.propertyName&&Rt(Pt)&&De(jt,e=St(Pt,e,We(e)))}function It(e,t,n){"focus"===e?(Mt(),Pt=n,(_t=t).attachEvent("onpropertychange",Ut)):"blur"===e&&Mt()}function qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Pt)}function Lt(e,t){if("click"===e)return Rt(t)}function Dt(e,t){if("input"===e||"change"===e)return Rt(t)}K&&(At=He("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Ct,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?F(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Nt:ze(o)?At?i=Dt:(i=qt,a=It):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Lt),i&&(i=i(e,t)))return St(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ot(o,"number",o.value)}},zt=fe.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Ht}var Vt=0,$t=0,Yt=!1,Kt=!1,Qt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Vt;return Vt=e.screenX,Yt?"mousemove"===e.type?e.screenX-t:0:(Yt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=$t;return $t=e.screenY,Kt?"mousemove"===e.type?e.screenY-t:0:(Kt=!0,0)}}),Xt=Qt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Gt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jt={eventTypes:Gt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?L(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Qt,u=Gt.mouseLeave,l=Gt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Xt,u=Gt.pointerLeave,l=Gt.pointerEnter,c="pointer");var s=null==i?o:F(i);if(o=null==t?o:F(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=W(a))c++;for(a=0,l=o;l;l=W(l))a++;for(;0<c-a;)t=W(t),c--;for(;0<a-c;)o=W(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=W(t),o=W(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=W(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=W(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}},Zt=Object.prototype.hasOwnProperty;function en(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function tn(e,t){if(en(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!en(e[n[r]],t[n[r]]))return!1;return!0}function nn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 5===t.tag?2:3}function rn(e){2!==nn(e)&&a("188")}function on(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=nn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return rn(o),e;if(u===r)return rn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 5!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(7===t.tag||8===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var an=fe.extend({animationName:null,elapsedTime:null,pseudoElement:null}),un=fe.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=zt.extend({relatedTarget:null});function cn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pn=zt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=cn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?cn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?cn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Qt.extend({dataTransfer:null}),hn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),yn=fe.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=Qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),mn=[["abort","abort"],[ee,"animationEnd"],[te,"animationIteration"],[ne,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[re,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],gn={},bn={};function wn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},gn[e]=t,bn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){wn(e,!0)}),mn.forEach(function(e){wn(e,!1)});var kn={eventTypes:gn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=bn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=bn[e];if(!o)return null;switch(e){case"keypress":if(0===cn(n))return null;case"keydown":case"keyup":e=pn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Qt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=hn;break;case ee:case te:case ne:e=an;break;case re:e=yn;break;case"scroll":e=zt;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Xt;break;default:e=fe}return Y(t=e.getPooled(o,t,n,r)),t}},xn=kn.isInteractiveTopLevelEventType,En=[];function Tn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=5!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=L(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=We(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<m.length;u++){var l=m[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=O(a,l))}M(a,!1)}}var On=!0;function Cn(e,t){if(!t)return null;var n=(xn(e)?_n:Pn).bind(null,e);t.addEventListener(e,n,!1)}function Sn(e,t){if(!t)return null;var n=(xn(e)?_n:Pn).bind(null,e);t.addEventListener(e,n,!0)}function _n(e,t){Ie(Pn,e,t)}function Pn(e,t){if(On){var n=We(t);if(null===(n=L(n))||"number"!=typeof n.tag||2===nn(n)||(n=null),En.length){var r=En.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{De(Tn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>En.length&&En.push(e)}}}var jn={},Rn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=Rn++,jn[e[Nn]]={}),jn[e[Nn]]}function Mn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Un(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=Un(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Un(r)}}function qn(){for(var e=window,t=Mn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Mn(e.document)}return t}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Dn=K&&"documentMode"in document&&11>=document.documentMode,Fn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},zn=null,Wn=null,Hn=null,Bn=!1;function Vn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Bn||null==zn||zn!==Mn(n)?null:("selectionStart"in(n=zn)&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hn&&tn(Hn,n)?null:(Hn=n,(e=fe.getPooled(Fn.select,Wn,e,t)).type="select",e.target=zn,Y(e),e))}var $n={eventTypes:Fn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?F(t):window,e){case"focus":(ze(i)||"true"===i.contentEditable)&&(zn=i,Wn=t,Hn=null);break;case"blur":Hn=Wn=zn=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,Vn(n,r);case"selectionchange":if(Dn)break;case"keydown":case"keyup":return Vn(n,r)}return null}};function Yn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Qn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Xn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:bt(n)}}function Gn(e,t){var n=bt(t.value);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=""+bt(t.defaultValue))}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}R("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=z,x=D,E=F,N({SimpleEventPlugin:kn,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:Ft,SelectEventPlugin:$n,BeforeInputEventPlugin:_e});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr=void 0,rr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||ir.hasOwnProperty(o)&&ir[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var lr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(lr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function sr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function fr(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Sn("scroll",e);break;case"focus":case"blur":Sn("focus",e),Sn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":He(o)&&Sn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===oe.indexOf(o)&&Cn(o,e)}n[o]=!0}}}function pr(){}var dr=null,hr=null;function yr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function mr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function gr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var br=[],wr=-1;function kr(e){0>wr||(e.current=br[wr],br[wr]=null,wr--)}function xr(e,t){br[++wr]=e.current,e.current=t}var Er={},Tr={current:Er},Or={current:!1},Cr=Er;function Sr(e,t){var n=e.type.contextTypes;if(!n)return Er;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function _r(e){return null!==(e=e.childContextTypes)&&void 0!==e}function Pr(e){kr(Or),kr(Tr)}function jr(e){kr(Or),kr(Tr)}function Rr(e,t,n){Tr.current!==Er&&a("168"),xr(Tr,t),xr(Or,n)}function Nr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",lt(t)||"Unknown",i);return o({},n,r)}function Ar(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Er,Cr=Tr.current,xr(Tr,t),xr(Or,Or.current),!0}function Mr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Nr(e,t,Cr),r.__reactInternalMemoizedMergedChildContext=t,kr(Or),kr(Tr),xr(Tr,t)):kr(Or),xr(Or,n)}var Ur=null,Ir=null;function qr(e){return function(t){try{return e(t)}catch(e){}}}function Lr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Dr(e){return"object"==typeof(e=e.prototype)&&null!==e&&"object"==typeof e.isReactComponent&&null!==e.isReactComponent}function Fr(e,t,n){var r=e.alternate;return null===r?((r=new Lr(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=e.childExpirationTime,r.expirationTime=t!==e.pendingProps?n:e.expirationTime,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.firstContextDependency=e.firstContextDependency,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function zr(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=Dr(r)?2:4;else if("string"==typeof r)i=7;else e:switch(r){case Je:return Wr(e.children,t,n,o);case rt:i=10,t|=3;break;case Ze:i=10,t|=2;break;case et:return(r=new Lr(15,e,o,4|t)).type=et,r.expirationTime=n,r;case it:i=16;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case tt:i=12;break e;case nt:i=11;break e;case ot:i=13;break e;default:if("function"==typeof r.then){i=4;break e}}a("130",null==r?r:typeof r,"")}return(t=new Lr(i,e,o,t)).type=r,t.expirationTime=n,t}function Wr(e,t,n,r){return(e=new Lr(9,e,r,t)).expirationTime=n,e}function Hr(e,t,n){return(e=new Lr(8,e,null,t)).expirationTime=n,e}function Br(e,t,n){return(t=new Lr(6,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n>t?e.earliestPendingTime=t:e.latestPendingTime<t&&(e.latestPendingTime=t),$r(t,e)}function $r(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r>e)&&(o=r),0!==(e=o)&&0!==n&&n<e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var Yr=!1;function Kr(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qr(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Xr(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Gr(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Jr(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Kr(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Kr(e.memoizedState),o=n.updateQueue=Kr(n.memoizedState)):r=e.updateQueue=Qr(o):null===o&&(o=n.updateQueue=Qr(r));null===o||r===o?Gr(r,t):null===r.lastUpdate||null===o.lastUpdate?(Gr(r,t),Gr(o,t)):(Gr(r,t),o.lastUpdate=t)}function Zr(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Kr(e.memoizedState):eo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function eo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Qr(t)),t}function to(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(i="function"==typeof(e=n.payload)?e.call(a,r,i):e)||void 0===i)break;return o({},r,i);case 2:Yr=!0}return r}function no(e,t,n,r,o){Yr=!1;for(var i=(t=eo(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s>o?(null===a&&(a=l,i=c),(0===u||u>s)&&(u=s)):(c=to(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f>o?(null===s&&(s=l,null===a&&(i=c)),(0===u||u>f)&&(u=f)):(c=to(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function ro(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function io(e,t){return{value:e,source:t,stack:ct(t)}}var ao={current:null},uo=null,lo=null,co=null;function so(e,t){var n=e.type._context;xr(ao,n._currentValue),n._currentValue=t}function fo(e){var t=ao.current;kr(ao),e.type._context._currentValue=t}function po(e){uo=e,co=lo=null,e.firstContextDependency=null}function ho(e,t){return co!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(co=e,t=1073741823),t={context:e,observedBits:t,next:null},null===lo?(null===uo&&a("277"),uo.firstContextDependency=lo=t):lo=lo.next=t),e._currentValue}var yo={},vo={current:yo},mo={current:yo},go={current:yo};function bo(e){return e===yo&&a("174"),e}function wo(e,t){xr(go,t),xr(mo,e),xr(vo,yo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}kr(vo),xr(vo,t)}function ko(e){kr(vo),kr(mo),kr(go)}function xo(e){bo(go.current);var t=bo(vo.current),n=tr(t,e.type);t!==n&&(xr(mo,e),xr(vo,n))}function Eo(e){mo.current===e&&(kr(vo),kr(mo))}var To=(new r.Component).refs;function Oo(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Co={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===nn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ua(),o=Xr(r=Ai(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Jr(e,o),Mi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ua(),o=Xr(r=Ai(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Jr(e,o),Mi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ua(),r=Xr(n=Ai(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Jr(e,r),Mi(e,n)}};function So(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!tn(n,r)||!tn(o,i))}function _o(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Co.enqueueReplaceState(t,t.state,null)}function Po(e,t,n,r){var o=e.stateNode,i=_r(t)?Cr:Tr.current;o.props=n,o.state=e.memoizedState,o.refs=To,o.context=Sr(e,i),null!==(i=e.updateQueue)&&(no(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Oo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Co.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(no(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var jo=Array.isArray;function Ro(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&3!==n.tag&&a("110"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===To&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("254",e)}return e}function No(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ao(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Fr(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||8!==t.tag?((t=Hr(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function c(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=Ro(e,t,n),r.return=e,r):((r=zr(n,e.mode,r)).ref=Ro(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||6!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Br(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,i){return null===t||9!==t.tag?((t=Wr(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Hr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=zr(t,e.mode,n)).ref=Ro(e,null,t),n.return=e,n;case Ge:return(t=Br(t,e.mode,n)).return=e,t}if(jo(t)||ut(t))return(t=Wr(t,e.mode,n,null)).return=e,t;No(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===o?n.type===Je?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ge:return n.key===o?s(e,t,n,r):null}if(jo(n)||ut(n))return null!==o?null:f(e,t,n,r,null);No(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xe:return e=e.get(null===r.key?n:r.key)||null,r.type===Je?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ge:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(jo(r)||ut(r))return f(t,e=e.get(n)||null,r,o,null);No(t,r)}return null}function y(o,a,u,l){for(var c=null,s=null,f=a,y=a=0,v=null;null!==f&&y<u.length;y++){f.index>y?(v=f,f=null):v=f.sibling;var m=d(o,f,u[y],l);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,y),null===s?c=m:s.sibling=m,s=m,f=v}if(y===u.length)return n(o,f),c;if(null===f){for(;y<u.length;y++)(f=p(o,u[y],l))&&(a=i(f,a,y),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);y<u.length;y++)(v=h(f,o,y,u[y],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?y:v.key),a=i(v,a,y),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach(function(e){return t(o,e)}),c}function v(o,u,l,c){var s=ut(l);"function"!=typeof s&&a("150"),null==(l=s.call(l))&&a("151");for(var f=s=null,y=u,v=u=0,m=null,g=l.next();null!==y&&!g.done;v++,g=l.next()){y.index>v?(m=y,y=null):m=y.sibling;var b=d(o,y,g.value,c);if(null===b){y||(y=m);break}e&&y&&null===b.alternate&&t(o,y),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,y=m}if(g.done)return n(o,y),s;if(null===y){for(;!g.done;v++,g=l.next())null!==(g=p(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(y=r(o,y);!g.done;v++,g=l.next())null!==(g=h(y,o,v,g.value,c))&&(e&&null!==g.alternate&&y.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&y.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Je&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Xe:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(9===c.tag?i.type===Je:c.type===i.type){n(e,c.sibling),(r=o(c,i.type===Je?i.props.children:i.props,l)).ref=Ro(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Je?((r=Wr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=zr(i,e.mode,l)).ref=Ro(e,r,i),l.return=e,e=l)}return u(e);case Ge:e:{for(c=i.key;null!==r;){if(r.key===c){if(6===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],l)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Br(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&8===r.tag?(n(e,r.sibling),(r=o(r,i,l)).return=e,e=r):(n(e,r),(r=Hr(i,e.mode,l)).return=e,e=r),u(e);if(jo(i))return y(e,r,i,l);if(ut(i))return v(e,r,i,l);if(s&&No(e,i),void 0===i&&!c)switch(e.tag){case 2:case 3:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var Mo=Ao(!0),Uo=Ao(!1),Io=null,qo=null,Lo=!1;function Do(e,t){var n=new Lr(7,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fo(e,t){switch(e.tag){case 7:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 8:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function zo(e){if(Lo){var t=qo;if(t){var n=t;if(!Fo(e,t)){if(!(t=mr(n))||!Fo(e,t))return e.effectTag|=2,Lo=!1,void(Io=e);Do(Io,n)}Io=e,qo=gr(t)}else e.effectTag|=2,Lo=!1,Io=e}}function Wo(e){for(e=e.return;null!==e&&7!==e.tag&&5!==e.tag;)e=e.return;Io=e}function Ho(e){if(e!==Io)return!1;if(!Lo)return Wo(e),Lo=!0,!1;var t=e.type;if(7!==e.tag||"head"!==t&&"body"!==t&&!vr(t,e.memoizedProps))for(t=qo;t;)Do(e,t),t=mr(t);return Wo(e),qo=Io?mr(e.stateNode):null,!0}function Bo(){qo=Io=null,Lo=!1}var Vo=Ye.ReactCurrentOwner;function $o(e,t,n,r){t.child=null===e?Uo(t,null,n,r):Mo(t,e.child,n,r)}function Yo(e,t,n,r,o){n=n.render;var i=t.ref;return Or.current||t.memoizedProps!==r||i!==(null!==e?e.ref:null)?($o(e,t,n=n(r,i),o),t.memoizedProps=r,t.child):ei(e,t,o)}function Ko(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Qo(e,t,n,r,o){var i=_r(n)?Cr:Tr.current;return i=Sr(t,i),po(t),n=n(r,i),t.effectTag|=1,$o(e,t,n,o),t.memoizedProps=r,t.child}function Xo(e,t,n,r,o){if(_r(n)){var i=!0;Ar(t)}else i=!1;if(po(t),null===e)if(null===t.stateNode){var a=_r(n)?Cr:Tr.current,u=n.contextTypes,l=null!==u&&void 0!==u,c=new n(r,u=l?Sr(t,a):Er);t.memoizedState=null!==c.state&&void 0!==c.state?c.state:null,c.updater=Co,t.stateNode=c,c._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,l.__reactInternalMemoizedMaskedChildContext=u),Po(t,n,r,o),r=!0}else{a=t.stateNode,u=t.memoizedProps,a.props=u;var s=a.context;l=Sr(t,l=_r(n)?Cr:Tr.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==l)&&_o(t,a,r,l),Yr=!1;var p=t.memoizedState;s=a.state=p;var d=t.updateQueue;null!==d&&(no(t,d,r,a,o),s=t.memoizedState),u!==r||p!==s||Or.current||Yr?("function"==typeof f&&(Oo(t,n,f,r),s=t.memoizedState),(u=Yr||So(t,n,u,r,p,s,l))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=l,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=u,s=a.context,l=Sr(t,l=_r(n)?Cr:Tr.current),(c="function"==typeof(f=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==l)&&_o(t,a,r,l),Yr=!1,s=t.memoizedState,p=a.state=s,null!==(d=t.updateQueue)&&(no(t,d,r,a,o),p=t.memoizedState),u!==r||s!==p||Or.current||Yr?("function"==typeof f&&(Oo(t,n,f,r),p=t.memoizedState),(f=Yr||So(t,n,u,r,s,p,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=f):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Go(e,t,n,r,i,o)}function Go(e,t,n,r,o,i){Ko(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Mr(t,n,!1),ei(e,t,i);r=t.stateNode,Vo.current=t;var u=a?null:r.render();return t.effectTag|=1,null!==e&&a&&($o(e,t,null,i),t.child=null),$o(e,t,u,i),t.memoizedState=r.state,t.memoizedProps=r.props,o&&Mr(t,n,!0),t.child}function Jo(e){var t=e.stateNode;t.pendingContext?Rr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Rr(0,t.context,!1),wo(e,t.containerInfo)}function Zo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}function ei(e,t,n){null!==e&&(t.firstContextDependency=e.firstContextDependency);var r=t.childExpirationTime;if(0===r||r>n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Fr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ti(e,t,n){var r=t.expirationTime;if(!Or.current&&(0===r||r>n)){switch(t.tag){case 5:Jo(t),Bo();break;case 7:xo(t);break;case 2:_r(t.type)&&Ar(t);break;case 3:_r(t.type._reactResult)&&Ar(t);break;case 6:wo(t,t.stateNode.containerInfo);break;case 12:so(t,t.memoizedProps.value)}return ei(e,t,n)}switch(t.expirationTime=0,t.tag){case 4:return function(e,t,n,r){null!==e&&a("155");var o=t.pendingProps;if("object"==typeof n&&null!==n&&"function"==typeof n.then){var i=n=function(e){switch(e._reactStatus){case 1:return e._reactResult;case 2:throw e._reactResult;case 0:throw e;default:throw e._reactStatus=0,e.then(function(t){if(0===e._reactStatus){if(e._reactStatus=1,"object"==typeof t&&null!==t){var n=t.default;t=void 0!==n&&null!==n?n:t}e._reactResult=t}},function(t){0===e._reactStatus&&(e._reactStatus=2,e._reactResult=t)}),e}}(n);i="function"==typeof i?Dr(i)?3:1:void 0!==i&&null!==i&&i.$$typeof?14:4,i=t.tag=i;var u=Zo(n,o);switch(i){case 1:return Qo(e,t,n,u,r);case 3:return Xo(e,t,n,u,r);case 14:return Yo(e,t,n,u,r);default:a("283",n)}}if(i=Sr(t,Tr.current),po(t),i=n(o,i),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){t.tag=2,_r(n)?(u=!0,Ar(t)):u=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var l=n.getDerivedStateFromProps;return"function"==typeof l&&Oo(t,n,l,o),i.updater=Co,t.stateNode=i,i._reactInternalFiber=t,Po(t,n,o,r),Go(e,t,n,!0,u,r)}return t.tag=0,$o(e,t,i,r),t.memoizedProps=o,t.child}(e,t,t.type,n);case 0:return Qo(e,t,t.type,t.pendingProps,n);case 1:var o=t.type._reactResult;return e=Qo(e,t,o,Zo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 2:return Xo(e,t,t.type,t.pendingProps,n);case 3:return e=Xo(e,t,o=t.type._reactResult,Zo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 5:return Jo(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,no(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(Bo(),t=ei(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(qo=gr(t.stateNode.containerInfo),Io=t,o=Lo=!0),o?(t.effectTag|=2,t.child=Uo(t,null,r,n)):($o(e,t,r,n),Bo()),t=t.child),t;case 7:xo(t),null===e&&zo(t),r=t.type,o=t.pendingProps;var i=null!==e?e.memoizedProps:null,u=o.children;return vr(r,o)?u=null:null!==i&&vr(r,i)&&(t.effectTag|=16),Ko(e,t),1073741823!==n&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,t=null):($o(e,t,u,n),t.memoizedProps=o,t=t.child),t;case 8:return null===e&&zo(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 6:return wo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Mo(t,null,r,n):$o(e,t,r,n),t.memoizedProps=r,t.child;case 13:return Yo(e,t,t.type,t.pendingProps,n);case 14:return e=Yo(e,t,o=t.type._reactResult,Zo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 9:return $o(e,t,r=t.pendingProps,n),t.memoizedProps=r,t.child;case 10:return $o(e,t,r=t.pendingProps.children,n),t.memoizedProps=r,t.child;case 15:return $o(e,t,(r=t.pendingProps).children,n),t.memoizedProps=r,t.child;case 12:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value,t.memoizedProps=o,so(t,i),null!==u){var l=u.value;if(0===(i=l===i&&(0!==l||1/l==1/i)||l!=l&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!Or.current){t=ei(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){if(null!==(l=u.firstContextDependency))do{if(l.context===r&&0!=(l.observedBits&i)){if(2===u.tag||3===u.tag){var c=Xr(n);c.tag=2,Jr(u,c)}(0===u.expirationTime||u.expirationTime>n)&&(u.expirationTime=n),null!==(c=u.alternate)&&(0===c.expirationTime||c.expirationTime>n)&&(c.expirationTime=n);for(var s=u.return;null!==s;){if(c=s.alternate,0===s.childExpirationTime||s.childExpirationTime>n)s.childExpirationTime=n,null!==c&&(0===c.childExpirationTime||c.childExpirationTime>n)&&(c.childExpirationTime=n);else{if(null===c||!(0===c.childExpirationTime||c.childExpirationTime>n))break;c.childExpirationTime=n}s=s.return}}c=u.child,l=l.next}while(null!==l);else c=12===u.tag&&u.type===t.type?null:u.child;if(null!==c)c.return=u;else for(c=u;null!==c;){if(c===t){c=null;break}if(null!==(u=c.sibling)){u.return=c.return,c=u;break}c=c.return}u=c}}$o(e,t,o.children,n),t=t.child}return t;case 11:return i=t.type,o=(r=t.pendingProps).children,po(t),o=o(i=ho(i,r.unstable_observedBits)),t.effectTag|=1,$o(e,t,o,n),t.memoizedProps=r,t.child;default:a("156")}}function ni(e){e.effectTag|=4}var ri=void 0,oi=void 0,ii=void 0;function ai(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ct(n)),null!==n&&lt(n.type),t=t.value,null!==e&&2===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function ui(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ni(e,t)}else t.current=null}function li(e){switch("function"==typeof Ir&&Ir(e),e.tag){case 2:case 3:ui(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ni(e,t)}break;case 7:ui(e);break;case 6:fi(e)}}function ci(e){return 7===e.tag||5===e.tag||6===e.tag}function si(e){e:{for(var t=e.return;null!==t;){if(ci(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 7:t=n.stateNode,r=!1;break;case 5:case 6:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ci(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;7!==n.tag&&8!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||6===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(7===o.tag||8===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(i=t,u=o.stateNode,8===i.nodeType?(l=i.parentNode).insertBefore(u,i):(l=i).appendChild(u),null===l.onclick&&(l.onclick=pr)):t.appendChild(o.stateNode);else if(6!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function fi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 7:r=n.stateNode,o=!1;break e;case 5:case 6:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(7===t.tag||8===t.tag){e:for(var i=t,u=i;;)if(li(u),null!==u.child&&6!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(6===t.tag?(r=t.stateNode.containerInfo,o=!0):li(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;6===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function pi(e,t){switch(t.tag){case 2:case 3:break;case 7:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[q]=r,"input"===e&&"radio"===r.type&&null!=r.name&&xt(n,r),sr(e,o),t=sr(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?ur(n,l):"dangerouslySetInnerHTML"===u?rr(n,l):"children"===u?or(n,l):gt(n,u,l,t)}switch(e){case"input":Et(n,r);break;case"textarea":Gn(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?Kn(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?Kn(n,!!r.multiple,r.defaultValue,!0):Kn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 8:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 5:case 15:case 16:break;default:a("163")}}function di(e,t,n){(n=Xr(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ha(r),ai(e,t)},n}function hi(e,t,n){(n=Xr(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===Si?Si=new Set([this]):Si.add(this);var n=t.value,r=t.stack;ai(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function yi(e){switch(e.tag){case 2:_r(e.type)&&Pr();var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return _r(e.type._reactResult)&&Pr(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return ko(),jr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-1025&t|64,e;case 7:return Eo(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 6:return ko(),null;case 12:return fo(e),null;default:return null}}ri=function(){},oi=function(e,t,n){(t.updateQueue=n)&&ni(t)},ii=function(e,t,n,r){n!==r&&ni(t)};var vi={readContext:ho},mi=Ye.ReactCurrentOwner,gi=0,bi=0,wi=!1,ki=null,xi=null,Ei=0,Ti=!1,Oi=null,Ci=!1,Si=null;function _i(){if(null!==ki)for(var e=ki.return;null!==e;){var t=e;switch(t.tag){case 2:var n=t.type.childContextTypes;null!==n&&void 0!==n&&Pr();break;case 3:null!==(n=t.type._reactResult.childContextTypes)&&void 0!==n&&Pr();break;case 5:ko(),jr();break;case 7:Eo(t);break;case 6:ko();break;case 12:fo(t)}e=e.return}xi=null,Ei=0,Ti=!1,ki=null}function Pi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){var i=t,u=(t=e).pendingProps;switch(t.tag){case 0:case 1:break;case 2:_r(t.type)&&Pr();break;case 3:_r(t.type._reactResult)&&Pr();break;case 5:ko(),jr(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==i&&null!==i.child||(Ho(t),t.effectTag&=-3),ri(t);break;case 7:Eo(t);var l=bo(go.current),c=t.type;if(null!==i&&null!=t.stateNode){var s=i.memoizedProps;if(s!==u){var f=t.stateNode,p=bo(vo.current),d=f,h=c,y=s,v=u;f=l;var m=null;switch(h){case"input":y=wt(d,y),v=wt(d,v),m=[];break;case"option":y=Yn(d,y),v=Yn(d,v),m=[];break;case"select":y=o({},y,{value:void 0}),v=o({},v,{value:void 0}),m=[];break;case"textarea":y=Qn(d,y),v=Qn(d,v),m=[];break;default:"function"!=typeof y.onClick&&"function"==typeof v.onClick&&(d.onclick=pr)}cr(h,v),h=d=void 0;var g=null;for(d in y)if(!v.hasOwnProperty(d)&&y.hasOwnProperty(d)&&null!=y[d])if("style"===d){var w=y[d];for(h in w)w.hasOwnProperty(h)&&(g||(g={}),g[h]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(b.hasOwnProperty(d)?m||(m=[]):(m=m||[]).push(d,null));for(d in v){var k=v[d];if(w=null!=y?y[d]:void 0,v.hasOwnProperty(d)&&k!==w&&(null!=k||null!=w))if("style"===d)if(w){for(h in w)!w.hasOwnProperty(h)||k&&k.hasOwnProperty(h)||(g||(g={}),g[h]="");for(h in k)k.hasOwnProperty(h)&&w[h]!==k[h]&&(g||(g={}),g[h]=k[h])}else g||(m||(m=[]),m.push(d,g)),g=k;else"dangerouslySetInnerHTML"===d?(k=k?k.__html:void 0,w=w?w.__html:void 0,null!=k&&w!==k&&(m=m||[]).push(d,""+k)):"children"===d?w===k||"string"!=typeof k&&"number"!=typeof k||(m=m||[]).push(d,""+k):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(b.hasOwnProperty(d)?(null!=k&&fr(f,d),m||w===k||(m=[])):(m=m||[]).push(d,k))}g&&(m=m||[]).push("style",g),oi(i,t,m,c,s,u,l,p)}i.ref!==t.ref&&(t.effectTag|=128)}else if(u){if(m=bo(vo.current),Ho(t)){switch(f=(u=t).stateNode,i=u.type,s=u.memoizedProps,p=l,f[I]=u,f[q]=s,c=void 0,l=f,i){case"iframe":case"object":Cn("load",l);break;case"video":case"audio":for(f=0;f<oe.length;f++)Cn(oe[f],l);break;case"source":Cn("error",l);break;case"img":case"image":case"link":Cn("error",l),Cn("load",l);break;case"form":Cn("reset",l),Cn("submit",l);break;case"details":Cn("toggle",l);break;case"input":kt(l,s),Cn("invalid",l),fr(p,"onChange");break;case"select":l._wrapperState={wasMultiple:!!s.multiple},Cn("invalid",l),fr(p,"onChange");break;case"textarea":Xn(l,s),Cn("invalid",l),fr(p,"onChange")}for(c in cr(i,s),f=null,s)s.hasOwnProperty(c)&&(m=s[c],"children"===c?"string"==typeof m?l.textContent!==m&&(f=["children",m]):"number"==typeof m&&l.textContent!==""+m&&(f=["children",""+m]):b.hasOwnProperty(c)&&null!=m&&fr(p,c));switch(i){case"input":Ve(l),Tt(l,s,!0);break;case"textarea":Ve(l),Jn(l);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(l.onclick=pr)}c=f,u.updateQueue=c,(u=null!==c)&&ni(t)}else{s=t,i=c,p=u,f=9===l.nodeType?l:l.ownerDocument,m===Zn.html&&(m=er(i)),m===Zn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof p.is?f=f.createElement(i,{is:p.is}):(f=f.createElement(i),"select"===i&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(m,i),(i=f)[I]=s,i[q]=u;e:for(s=i,p=t,f=p.child;null!==f;){if(7===f.tag||8===f.tag)s.appendChild(f.stateNode);else if(6!==f.tag&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===p)break;for(;null===f.sibling;){if(null===f.return||f.return===p)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}switch(p=i,d=l,g=sr(f=c,s=u),f){case"iframe":case"object":Cn("load",p),l=s;break;case"video":case"audio":for(l=0;l<oe.length;l++)Cn(oe[l],p);l=s;break;case"source":Cn("error",p),l=s;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),l=s;break;case"form":Cn("reset",p),Cn("submit",p),l=s;break;case"details":Cn("toggle",p),l=s;break;case"input":kt(p,s),l=wt(p,s),Cn("invalid",p),fr(d,"onChange");break;case"option":l=Yn(p,s);break;case"select":p._wrapperState={wasMultiple:!!s.multiple},l=o({},s,{value:void 0}),Cn("invalid",p),fr(d,"onChange");break;case"textarea":Xn(p,s),l=Qn(p,s),Cn("invalid",p),fr(d,"onChange");break;default:l=s}for(m in cr(f,l),m=void 0,y=f,v=p,h=l)h.hasOwnProperty(m)&&(w=h[m],"style"===m?ur(v,w):"dangerouslySetInnerHTML"===m?null!=(w=w?w.__html:void 0)&&rr(v,w):"children"===m?"string"==typeof w?("textarea"!==y||""!==w)&&or(v,w):"number"==typeof w&&or(v,""+w):"suppressContentEditableWarning"!==m&&"suppressHydrationWarning"!==m&&"autoFocus"!==m&&(b.hasOwnProperty(m)?null!=w&&fr(d,m):null!=w&&gt(v,m,w,g)));switch(f){case"input":Ve(p),Tt(p,s,!1);break;case"textarea":Ve(p),Jn(p);break;case"option":null!=s.value&&p.setAttribute("value",""+bt(s.value));break;case"select":(l=p).multiple=!!s.multiple,null!=(p=s.value)?Kn(l,!!s.multiple,p,!1):null!=s.defaultValue&&Kn(l,!!s.multiple,s.defaultValue,!0);break;default:"function"==typeof l.onClick&&(p.onclick=pr)}(u=yr(c,u))&&ni(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 8:i&&null!=t.stateNode?ii(i,t,i.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&a("166")),l=bo(go.current),bo(vo.current),Ho(t)?(c=(u=t).stateNode,l=u.memoizedProps,c[I]=u,(u=c.nodeValue!==l)&&ni(t)):(c=t,(u=(9===l.nodeType?l:l.ownerDocument).createTextNode(u))[I]=c,t.stateNode=u));break;case 13:case 14:case 16:case 9:case 10:case 15:break;case 6:ko(),ri(t);break;case 12:fo(t);break;case 11:break;case 4:a("167");default:a("156")}if(t=ki=null,u=e,1073741823===Ei||1073741823!==u.childExpirationTime){for(c=0,l=u.child;null!==l;)i=l.expirationTime,s=l.childExpirationTime,(0===c||0!==i&&i<c)&&(c=i),(0===c||0!==s&&s<c)&&(c=s),l=l.sibling;u.childExpirationTime=c}if(null!==t)return t;null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=yi(e)))return e.effectTag&=511,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512)}if(null!==r)return r;if(null===n)break;e=n}return null}function ji(e){var t=ti(e.alternate,e,Ei);return null===t&&(t=Pi(e)),mi.current=null,t}function Ri(e,t,n){wi&&a("243"),wi=!0,mi.currentDispatcher=vi;var r=e.nextExpirationTimeToWorkOn;r===Ei&&e===xi&&null!==ki||(_i(),Ei=r,ki=Fr((xi=e).current,null,Ei),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==ki&&!da();)ki=ji(ki);else for(;null!==ki;)ki=ji(ki)}catch(e){if(null===ki)o=!0,ha(e);else{null===ki&&a("271");var i=ki,u=i.return;if(null!==u){e:{var l=u,c=i,s=e;u=Ei,c.effectTag|=512,c.firstEffect=c.lastEffect=null,Ti=!0,s=io(s,c);do{switch(l.tag){case 5:l.effectTag|=1024,l.expirationTime=u,Zr(l,u=di(l,s,u));break e;case 2:case 3:c=s;var f=l.stateNode;if(0==(64&l.effectTag)&&null!==f&&"function"==typeof f.componentDidCatch&&(null===Si||!Si.has(f))){l.effectTag|=1024,l.expirationTime=u,Zr(l,u=hi(l,c,u));break e}}l=l.return}while(null!==l)}ki=Pi(i);continue}o=!0,ha(e)}}break}if(wi=!1,co=lo=uo=mi.currentDispatcher=null,o)xi=null,e.finishedWork=null;else if(null!==ki)e.finishedWork=null;else{if(null===(t=e.current.alternate)&&a("281"),xi=null,Ti){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o>r||0!==i&&i>r||0!==u&&u>r)return e.didError=!1,0!==(n=e.latestPingedTime)&&n<=r&&(e.latestPingedTime=0),n=e.earliestPendingTime,t=e.latestPendingTime,n===r?e.earliestPendingTime=t===r?e.latestPendingTime=0:t:t===r&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,t=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=r:n>r?e.earliestSuspendedTime=r:t<r&&(e.latestSuspendedTime=r),$r(r,e),void(e.expirationTime=e.expirationTime);if(!e.didError&&!n)return e.didError=!0,e.nextExpirationTimeToWorkOn=r,r=e.expirationTime=1,void(e.expirationTime=r)}e.pendingCommitExpirationTime=r,e.finishedWork=t}}function Ni(e,t){var n;e:{for(wi&&!Ci&&a("263"),n=e.return;null!==n;){switch(n.tag){case 2:case 3:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===Si||!Si.has(r))){Jr(n,e=hi(n,e=io(t,e),1)),Mi(n,1),n=void 0;break e}break;case 5:Jr(n,e=di(n,e=io(t,e),1)),Mi(n,1),n=void 0;break e}n=n.return}5===e.tag&&(Jr(e,n=di(e,n=io(t,e),1)),Mi(e,1)),n=void 0}return n}function Ai(e,t){return 0!==bi?e=bi:wi?e=Ci?1:Ei:1&t.mode?(e=Xi?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)),null!==xi&&e===Ei&&(e+=1)):e=1,Xi&&(0===Hi||e>Hi)&&(Hi=e),e}function Mi(e,t){e:{(0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t);var n=e.alternate;null!==n&&(0===n.expirationTime||n.expirationTime>t)&&(n.expirationTime=t);var r=e.return;if(null===r&&5===e.tag)e=e.stateNode;else{for(;null!==r;){if(n=r.alternate,(0===r.childExpirationTime||r.childExpirationTime>t)&&(r.childExpirationTime=t),null!==n&&(0===n.childExpirationTime||n.childExpirationTime>t)&&(n.childExpirationTime=t),null===r.return&&5===r.tag){e=r.stateNode;break e}r=r.return}e=null}}null!==e&&(!wi&&0!==Ei&&t<Ei&&_i(),Vr(e,t),wi&&!Ci&&xi===e||(t=e,e=e.expirationTime,null===t.nextScheduledRoot?(t.expirationTime=e,null===qi?(Ii=qi=t,t.nextScheduledRoot=t):(qi=qi.nextScheduledRoot=t).nextScheduledRoot=Ii):(0===(n=t.expirationTime)||e<n)&&(t.expirationTime=e),Fi||(Ki?Qi&&(zi=t,Wi=1,fa(t,1,!0)):1===e?sa(1,null):aa(t,e))),na>ta&&(na=0,a("185")))}function Ui(e,t,n,r,o){var i=bi;bi=1;try{return e(t,n,r,o)}finally{bi=i}}var Ii=null,qi=null,Li=0,Di=void 0,Fi=!1,zi=null,Wi=0,Hi=0,Bi=!1,Vi=!1,$i=null,Yi=null,Ki=!1,Qi=!1,Xi=!1,Gi=null,Ji=i.unstable_now(),Zi=2+(Ji/10|0),ea=Zi,ta=50,na=0,ra=null,oa=1;function ia(){Zi=2+((i.unstable_now()-Ji)/10|0)}function aa(e,t){if(0!==Li){if(t>Li)return;null!==Di&&i.unstable_cancelScheduledWork(Di)}Li=t,e=i.unstable_now()-Ji,Di=i.unstable_scheduleWork(ca,{timeout:10*(t-2)-e})}function ua(){return Fi?ea:(la(),0!==Wi&&1073741823!==Wi||(ia(),ea=Zi),ea)}function la(){var e=0,t=null;if(null!==qi)for(var n=qi,r=Ii;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===qi)&&a("244"),r===r.nextScheduledRoot){Ii=qi=r.nextScheduledRoot=null;break}if(r===Ii)Ii=o=r.nextScheduledRoot,qi.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===qi){(qi=n).nextScheduledRoot=Ii,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===qi)break;if(1===e)break;n=r,r=r.nextScheduledRoot}}zi=t,Wi=e}function ca(e){if(e.didTimeout&&null!==Ii){ia();var t=Ii;do{var n=t.expirationTime;0!==n&&Zi>=n&&(t.nextExpirationTimeToWorkOn=Zi),t=t.nextScheduledRoot}while(t!==Ii)}sa(0,e)}function sa(e,t){if(Yi=t,la(),null!==Yi)for(ia(),ea=Zi;null!==zi&&0!==Wi&&(0===e||e>=Wi)&&(!Bi||Zi>=Wi);)fa(zi,Wi,Zi>=Wi),la(),ia(),ea=Zi;else for(;null!==zi&&0!==Wi&&(0===e||e>=Wi);)fa(zi,Wi,!0),la();if(null!==Yi&&(Li=0,Di=null),0!==Wi&&aa(zi,Wi),Yi=null,Bi=!1,na=0,ra=null,null!==Gi)for(e=Gi,Gi=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Vi||(Vi=!0,$i=e)}}if(Vi)throw e=$i,$i=null,Vi=!1,e}function fa(e,t,n){if(Fi&&a("245"),Fi=!0,null===Yi||n){var r=e.finishedWork;null!==r?pa(e,r,t):(e.finishedWork=null,Ri(e,!1,n),null!==(r=e.finishedWork)&&pa(e,r,t))}else null!==(r=e.finishedWork)?pa(e,r,t):(e.finishedWork=null,Ri(e,!0,n),null!==(r=e.finishedWork)&&(da()?e.finishedWork=r:pa(e,r,t)));Fi=!1}function pa(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Gi?Gi=[r]:Gi.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ra?na++:(ra=e,na=0),Ci=wi=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=0===r||0!==o&&o<r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(o=e.latestPendingTime)&&(o<r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime<r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Vr(e,r):r>e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Vr(e,r)):r<o&&Vr(e,r)),$r(0,e),mi.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,dr=On,Ln(o=qn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var u=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(u&&0!==u.rangeCount){i=u.anchorNode;var l=u.anchorOffset,c=u.focusNode;u=u.focusOffset;try{i.nodeType,c.nodeType}catch(e){i=null;break e}var s=0,f=-1,p=-1,d=0,h=0,y=o,v=null;t:for(;;){for(var m;y!==i||0!==l&&3!==y.nodeType||(f=s+l),y!==c||0!==u&&3!==y.nodeType||(p=s+u),3===y.nodeType&&(s+=y.nodeValue.length),null!==(m=y.firstChild);)v=y,y=m;for(;;){if(y===o)break t;if(v===i&&++d===l&&(f=s),v===c&&++h===u&&(p=s),null!==(m=y.nextSibling))break;v=(y=v).parentNode}y=m}i=-1===f||-1===p?null:{start:f,end:p}}else i=null}i=i||{start:0,end:0}}else i=null;for(hr={focusedElem:o,selectionRange:i},On=!1,Oi=r;null!==Oi;){o=!1,i=void 0;try{for(;null!==Oi;){if(256&Oi.effectTag){var g=Oi.alternate;e:switch(l=Oi,l.tag){case 2:case 3:if(256&l.effectTag&&null!==g){var b=g.memoizedProps,w=g.memoizedState,k=l.stateNode;k.props=l.memoizedProps,k.state=l.memoizedState;var x=k.getSnapshotBeforeUpdate(b,w);k.__reactInternalSnapshotBeforeUpdate=x}break e;case 5:case 7:case 8:case 6:break e;default:a("163")}}Oi=Oi.nextEffect}}catch(e){o=!0,i=e}o&&(null===Oi&&a("178"),Ni(Oi,i),null!==Oi&&(Oi=Oi.nextEffect))}for(Oi=r;null!==Oi;){g=!1,b=void 0;try{for(;null!==Oi;){var E=Oi.effectTag;if(16&E&&or(Oi.stateNode,""),128&E){var T=Oi.alternate;if(null!==T){var O=T.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&E){case 2:si(Oi),Oi.effectTag&=-3;break;case 6:si(Oi),Oi.effectTag&=-3,pi(Oi.alternate,Oi);break;case 4:pi(Oi.alternate,Oi);break;case 8:fi(w=Oi),w.return=null,w.child=null,w.alternate&&(w.alternate.child=null,w.alternate.return=null)}Oi=Oi.nextEffect}}catch(e){g=!0,b=e}g&&(null===Oi&&a("178"),Ni(Oi,b),null!==Oi&&(Oi=Oi.nextEffect))}if(O=hr,T=qn(),E=O.focusedElem,b=O.selectionRange,T!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==b&&Ln(E)&&(T=b.start,void 0===(O=b.end)&&(O=T),"selectionStart"in E?(E.selectionStart=T,E.selectionEnd=Math.min(O,E.value.length)):(T=((g=E.ownerDocument||document)?g.defaultView:window).getSelection(),w=E.textContent.length,O=Math.min(b.start,w),b=void 0===b.end?O:Math.min(b.end,w),!T.extend&&O>b&&(w=b,b=O,O=w),w=In(E,O),k=In(E,b),w&&k&&(1!==T.rangeCount||T.anchorNode!==w.node||T.anchorOffset!==w.offset||T.focusNode!==k.node||T.focusOffset!==k.offset)&&((g=g.createRange()).setStart(w.node,w.offset),T.removeAllRanges(),O>b?(T.addRange(g),T.extend(k.node,k.offset)):(g.setEnd(k.node,k.offset),T.addRange(g))))),T=[];for(O=E;O=O.parentNode;)1===O.nodeType&&T.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<T.length;E++)(O=T[E]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(hr=null,On=!!dr,dr=null,e.current=t,Oi=r;null!==Oi;){r=!1,E=void 0;try{for(T=n;null!==Oi;){var C=Oi.effectTag;if(36&C){var S=Oi.alternate;switch(g=T,(O=Oi).tag){case 2:case 3:var _=O.stateNode;if(4&O.effectTag)if(null===S)_.props=O.memoizedProps,_.state=O.memoizedState,_.componentDidMount();else{var P=S.memoizedProps,j=S.memoizedState;_.props=O.memoizedProps,_.state=O.memoizedState,_.componentDidUpdate(P,j,_.__reactInternalSnapshotBeforeUpdate)}var R=O.updateQueue;null!==R&&(_.props=O.memoizedProps,_.state=O.memoizedState,ro(0,R,_));break;case 5:var N=O.updateQueue;if(null!==N){if(b=null,null!==O.child)switch(O.child.tag){case 7:b=O.child.stateNode;break;case 2:case 3:b=O.child.stateNode}ro(0,N,b)}break;case 7:var A=O.stateNode;null===S&&4&O.effectTag&&yr(O.type,O.memoizedProps)&&A.focus();break;case 8:case 6:case 15:case 16:break;default:a("163")}}if(128&C){var M=Oi.ref;if(null!==M){var U=Oi.stateNode;switch(Oi.tag){case 7:var I=U;break;default:I=U}"function"==typeof M?M(I):M.current=I}}var q=Oi.nextEffect;Oi.nextEffect=null,Oi=q}}catch(e){r=!0,E=e}r&&(null===Oi&&a("178"),Ni(Oi,E),null!==Oi&&(Oi=Oi.nextEffect))}wi=Ci=!1,"function"==typeof Ur&&Ur(t.stateNode),C=t.expirationTime,t=t.childExpirationTime,0===(t=0===C||0!==t&&t<C?t:C)&&(Si=null),e.expirationTime=t,e.finishedWork=null}function da(){return!!Bi||!(null===Yi||Yi.timeRemaining()>oa)&&(Bi=!0)}function ha(e){null===zi&&a("246"),zi.expirationTime=0,Vi||(Vi=!0,$i=e)}function ya(e,t){var n=Ki;Ki=!0;try{return e(t)}finally{(Ki=n)||Fi||sa(1,null)}}function va(e,t){if(Ki&&!Qi){Qi=!0;try{return e(t)}finally{Qi=!1}}return e(t)}function ma(e,t,n){if(Xi)return e(t,n);Ki||Fi||0===Hi||(sa(Hi,null),Hi=0);var r=Xi,o=Ki;Ki=Xi=!0;try{return e(t,n)}finally{Xi=r,(Ki=o)||Fi||sa(1,null)}}function ga(e,t,n,r,o){var i=t.current;return n=function(e){if(!e)return Er;e=e._reactInternalFiber;e:{(2!==nn(e)||2!==e.tag&&3!==e.tag)&&a("170");var t=e;do{switch(t.tag){case 5:t=t.stateNode.context;break e;case 2:if(_r(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}break;case 3:if(_r(t.type._reactResult)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);a("171"),t=void 0}if(2===e.tag){var n=e.type;if(_r(n))return Nr(e,n,t)}else if(3===e.tag&&_r(n=e.type._reactResult))return Nr(e,n,t);return t}(n),null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Xr(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Jr(i,o),Mi(i,r),r}function ba(e,t,n,r){var o=t.current;return ga(e,t,n,o=Ai(ua(),o),r)}function wa(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 7:default:return e.child.stateNode}}function ka(e){var t=2+25*(1+((ua()-2+500)/25|0));t<=gi&&(t=gi+1),this._expirationTime=gi=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ea(e,t,n){e={current:t=new Lr(5,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ta(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Oa(e,t,n,r,o){Ta(n)||a("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var u=o;o=function(){var e=wa(i._internalRoot);u.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ea(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=wa(i._internalRoot);l.call(e)}}va(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return wa(i._internalRoot)}function Ca(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ta(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ge,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Pe=function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=z(r);o||a("90"),$e(r),Et(r,o)}}}break;case"textarea":Gn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},ka.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new xa;return ga(e,t,null,n,r._onCommit),r},ka.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ka.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,t=n,Fi&&a("253"),zi=e,Wi=t,fa(e,t,!0),sa(1,null),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ka.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},xa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Ea.prototype.render=function(e,t){var n=this._internalRoot,r=new xa;return null!==(t=void 0===t?null:t)&&r.then(t),ba(e,n,null,r._onCommit),r},Ea.prototype.unmount=function(e){var t=this._internalRoot,n=new xa;return null!==(e=void 0===e?null:e)&&n.then(e),ba(null,t,null,n._onCommit),n},Ea.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new xa;return null!==(n=void 0===n?null:n)&&o.then(n),ba(t,r,e,o._onCommit),o},Ea.prototype.createBatch=function(){var e=new ka(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ue=ya,Ie=ma,qe=function(){Fi||0===Hi||(sa(Hi,null),Hi=0)};var Sa={createPortal:Ca,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=on(t))?null:e.stateNode},hydrate:function(e,t,n){return Oa(null,e,t,!0,n)},render:function(e,t,n){return Oa(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),Oa(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ta(e)||a("40"),!!e._reactRootContainer&&(va(function(){Oa(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ca.apply(void 0,arguments)},unstable_batchedUpdates:ya,unstable_interactiveUpdates:ma,flushSync:function(e,t){Fi&&a("187");var n=Ki;Ki=!0;try{return Ui(e,t)}finally{Ki=n,sa(1,null)}},unstable_flushControlled:function(e){var t=Ki;Ki=!0;try{Ui(e)}finally{(Ki=t)||Fi||sa(1,null)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[D,F,z,g,Y,function(e){C(e,$)},Ae,Me,Pn,M]},unstable_createRoot:function(e,t){return Ta(e)||a("278"),new Ea(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ur=qr(function(e){return t.onCommitFiberRoot(n,e)}),Ir=qr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{findHostInstanceByFiber:function(e){return null===(e=on(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:L,bundleType:0,version:"16.5.0",rendererPackageName:"react-dom"});var _a={default:Sa},Pa=_a&&Sa||_a;e.exports=Pa.default||Pa},218:function(e,t,n){"use strict";e.exports=n(219)},219:function(e,t,n){"use strict";
/** @license React v16.5.0
 * schedule.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o=Date,i="function"==typeof setTimeout?setTimeout:void 0,a="function"==typeof clearTimeout?clearTimeout:void 0,u="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,l="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0,c="object"==typeof performance&&"function"==typeof performance.now;if(t.unstable_now=void 0,c){var s=performance;t.unstable_now=function(){return s.now()}}else t.unstable_now=function(){return o.now()};if(t.unstable_scheduleWork=void 0,t.unstable_cancelScheduledWork=void 0,r){var f=null,p=null,d=-1,h=!1,y=!1,v=void 0,m=void 0,g=function(e){v=u(function(t){a(m),e(t)}),m=i(function(){l(v),e(t.unstable_now())},100)},b=0,w=33,k=33,x={didTimeout:!1,timeRemaining:function(){var e=b-t.unstable_now();return 0<e?e:0}},E=function(e,n){var r=e.scheduledCallback,o=!1;try{r(n),o=!0}finally{t.unstable_cancelScheduledWork(e),o||(h=!0,window.postMessage(T,"*"))}},T="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===T&&(h=!1,null!==f)){if(null!==f){var n=t.unstable_now();if(!(-1===d||d>n)){e=-1;for(var r=[],o=f;null!==o;){var i=o.timeoutTime;-1!==i&&i<=n?r.push(o):-1!==i&&(-1===e||i<e)&&(e=i),o=o.next}if(0<r.length)for(x.didTimeout=!0,n=0,o=r.length;n<o;n++)E(r[n],x);d=e}}for(e=t.unstable_now();0<b-e&&null!==f;)e=f,x.didTimeout=!1,E(e,x),e=t.unstable_now();null===f||y||(y=!0,g(O))}},!1);var O=function(e){y=!1;var t=e-b+k;t<k&&w<k?(8>t&&(t=8),k=t<w?w:t):w=t,b=e+k,h||(h=!0,window.postMessage(T,"*"))};t.unstable_scheduleWork=function(e,n){var r=-1;return null!=n&&"number"==typeof n.timeout&&(r=t.unstable_now()+n.timeout),(-1===d||-1!==r&&r<d)&&(d=r),e={scheduledCallback:e,timeoutTime:r,prev:null,next:null},null===f?f=e:null!==(n=e.prev=p)&&(n.next=e),p=e,y||(y=!0,g(O)),e},t.unstable_cancelScheduledWork=function(e){if(null!==e.prev||f===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,f=t):null!==n?(n.next=null,p=n):p=f=null}}}else{var C=new Map;t.unstable_scheduleWork=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=i(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return C.set(e,n),t},t.unstable_cancelScheduledWork=function(e){var t=C.get(e.scheduledCallback);C.delete(e),a(t)}}},3:function(e,t,n){"use strict";e.exports=n(216)},4:function(e,t,n){"use strict";n.d(t,"i",function(){return E}),n.d(t,"s",function(){return T}),n.d(t,"v",function(){return O}),n.d(t,"n",function(){return C}),n.d(t,"b",function(){return S}),n.d(t,"o",function(){return _}),n.d(t,"e",function(){return j}),n.d(t,"c",function(){return R}),n.d(t,"h",function(){return N}),n.d(t,"k",function(){return A}),n.d(t,"r",function(){return M}),n.d(t,"m",function(){return U}),n.d(t,"f",function(){return I}),n.d(t,"p",function(){return q}),n.d(t,"a",function(){return L}),n.d(t,"g",function(){return D}),n.d(t,"j",function(){return F}),n.d(t,"l",function(){return z}),n.d(t,"q",function(){return W}),n.d(t,"t",function(){return H}),n.d(t,"u",function(){return B}),n.d(t,"w",function(){return V}),n.d(t,"d",function(){return Y});var r=n(0),o=n(49),i=Object(r.x)("IO"),a="TAKE",u="PUT",l="ALL",c="RACE",s="CALL",f="CPS",p="FORK",d="JOIN",h="CANCEL",y="SELECT",v="ACTION_CHANNEL",m="CANCELLED",g="FLUSH",b="GET_CONTEXT",w="SET_CONTEXT",k="\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)",x=function(e,t){var n;return(n={})[i]=!0,n[e]=t,n},E=function(e){return Object(r.h)(Y.fork(e),r.q.object,"detach(eff): argument must be a fork effect"),e[p].detached=!0,e};function T(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"*";if(arguments.length&&Object(r.h)(arguments[0],r.q.notUndef,"take(patternOrChannel): patternOrChannel is undefined"),r.q.pattern(e))return x(a,{pattern:e});if(r.q.channel(e))return x(a,{channel:e});throw new Error("take(patternOrChannel): argument "+String(e)+" is not valid channel or a valid pattern")}T.maybe=function(){var e=T.apply(void 0,arguments);return e[a].maybe=!0,e};var O=Object(r.n)(T.maybe,Object(r.z)("takem","take.maybe"));function C(e,t){return arguments.length>1?(Object(r.h)(e,r.q.notUndef,"put(channel, action): argument channel is undefined"),Object(r.h)(e,r.q.channel,"put(channel, action): argument "+e+" is not a valid channel"),Object(r.h)(t,r.q.notUndef,"put(channel, action): argument action is undefined")):(Object(r.h)(e,r.q.notUndef,"put(action): argument action is undefined"),t=e,e=null),x(u,{channel:e,action:t})}function S(e){return x(l,e)}function _(e){return x(c,e)}function P(e,t,n){Object(r.h)(t,r.q.notUndef,e+": argument fn is undefined");var o=null;if(r.q.array(t)){var i=t;o=i[0],t=i[1]}else if(t.fn){var a=t;o=a.context,t=a.fn}return o&&r.q.string(t)&&r.q.func(o[t])&&(t=o[t]),Object(r.h)(t,r.q.func,e+": argument "+t+" is not a function"),{context:o,fn:t,args:n}}function j(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return x(s,P("call",e,n))}function R(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return x(s,P("apply",{context:e,fn:t},n))}function N(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return x(f,P("cps",e,n))}function A(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return x(p,P("fork",e,n))}function M(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E(A.apply(void 0,[e].concat(n)))}function U(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return S(t.map(function(e){return U(e)}));var o=t[0];return Object(r.h)(o,r.q.notUndef,"join(task): argument task is undefined"),Object(r.h)(o,r.q.task,"join(task): argument "+o+" is not a valid Task object "+k),x(d,o)}function I(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return S(t.map(function(e){return I(e)}));var o=t[0];return 1===t.length&&(Object(r.h)(o,r.q.notUndef,"cancel(task): argument task is undefined"),Object(r.h)(o,r.q.task,"cancel(task): argument "+o+" is not a valid Task object "+k)),x(h,o||r.d)}function q(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return 0===arguments.length?e=r.o:(Object(r.h)(e,r.q.notUndef,"select(selector,[...]): argument selector is undefined"),Object(r.h)(e,r.q.func,"select(selector,[...]): argument "+e+" is not a function")),x(y,{selector:e,args:n})}function L(e,t){return Object(r.h)(e,r.q.notUndef,"actionChannel(pattern,...): argument pattern is undefined"),arguments.length>1&&(Object(r.h)(t,r.q.notUndef,"actionChannel(pattern, buffer): argument buffer is undefined"),Object(r.h)(t,r.q.buffer,"actionChannel(pattern, buffer): argument "+t+" is not a valid buffer")),x(v,{pattern:e,buffer:t})}function D(){return x(m,{})}function F(e){return Object(r.h)(e,r.q.channel,"flush(channel): argument "+e+" is not valid channel"),x(g,e)}function z(e){return Object(r.h)(e,r.q.string,"getContext(prop): argument "+e+" is not a string"),x(b,e)}function W(e){return Object(r.h)(e,r.q.object,Object(r.k)(null,e)),x(w,e)}function H(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return A.apply(void 0,[o.b,e,t].concat(r))}function B(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return A.apply(void 0,[o.d,e,t].concat(r))}function V(e,t,n){for(var r=arguments.length,i=Array(r>3?r-3:0),a=3;a<r;a++)i[a-3]=arguments[a];return A.apply(void 0,[o.f,e,t,n].concat(i))}C.resolve=function(){var e=C.apply(void 0,arguments);return e[u].resolve=!0,e},C.sync=Object(r.n)(C.resolve,Object(r.z)("put.sync","put.resolve"));var $=function(e){return function(t){return t&&t[i]&&t[e]}},Y={take:$(a),put:$(u),all:$(l),race:$(c),call:$(s),cps:$(f),fork:$(p),join:$(d),cancel:$(h),select:$(y),actionChannel:$(v),cancelled:$(m),flush:$(g),getContext:$(b),setContext:$(w)}},42:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),o="Channel's Buffer overflow!",i=1,a=3,u=4,l={isEmpty:r.r,put:r.u,take:r.u};function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=arguments[1],n=new Array(e),r=0,l=0,c=0,s=function(t){n[l]=t,l=(l+1)%e,r++},f=function(){if(0!=r){var t=n[c];return n[c]=null,r--,c=(c+1)%e,t}},p=function(){for(var e=[];r;)e.push(f());return e};return{isEmpty:function(){return 0==r},put:function(f){if(r<e)s(f);else{var d=void 0;switch(t){case i:throw new Error(o);case a:n[l]=f,c=l=(l+1)%e;break;case u:d=2*e,n=p(),r=n.length,l=n.length,c=0,n.length=d,e=d,s(f)}}},take:f,flush:p}}var s={none:function(){return l},fixed:function(e){return c(e,i)},dropping:function(e){return c(e,2)},sliding:function(e){return c(e,a)},expanding:function(e){return c(e,u)}}},43:function(e,t,n){"use strict";n.r(t);var r=n(3),o=n(2),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function l(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=a,e),o}var c=l(),s=n(109),f=n.n(s),p=n(11),d=n.n(p);var h=null,y={notify:function(){}};var v=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var g=0,b={};function w(){}function k(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,l=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,s=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,y=o.shouldHandleStateChanges,k=void 0===y||y,x=o.storeKey,E=void 0===x?"store":x,T=o.withRef,O=void 0!==T&&T,C=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),S=E+"Subscription",_=g++,P=((t={})[E]=u,t[S]=a,t),j=((n={})[S]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+s+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),i=m({},C,{getDisplayName:l,methodName:s,renderCountProp:h,shouldHandleStateChanges:k,storeKey:E,withRef:O,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=_,r.state={},r.renderCount=0,r.store=e[E]||t[E],r.propsMode=Boolean(e[E]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+E+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+E+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[S]=t||this.context[S],e},a.prototype.componentDidMount=function(){k&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=w,this.store=null,this.selector.run=w,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(O,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+s+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(k){var e=(this.propsMode?this.props:this.context)[S];this.subscription=new v(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(O||h||this.propsMode&&this.subscription))return e;var t=m({},e);return O&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[S]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=j,a.contextTypes=P,a.propTypes=P,f()(a,t)}}var x=Object.prototype.hasOwnProperty;function E(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function T(e,t){if(E(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!x.call(t,n[o])||!E(e[n[o]],t[n[o]]))return!1;return!0}var O=n(70),C=n(209),S="object"==typeof self&&self&&self.Object===Object&&self,_=(C.a||S||Function("return this")()).Symbol,P=Object.prototype;P.hasOwnProperty,P.toString,_&&_.toStringTag;Object.prototype.toString;_&&_.toStringTag;Object.getPrototypeOf,Object;var j=Function.prototype,R=Object.prototype,N=j.toString;R.hasOwnProperty,N.call(Object);function A(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function M(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function U(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=M(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=M(o),o=r(t,n)),o},r}}var I=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:A(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?A(function(t){return Object(O.bindActionCreators)(e,t)}):void 0}];var q=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:A(function(){return{}})}],L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function D(e,t,n){return L({},n,e,t)}var F=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,u){var l=e(t,n,u);return i?r&&o(l,a)||(a=l):(i=!0,a=l),a}}}(e):void 0},function(e){return e?void 0:function(){return D}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function W(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,c=void 0,s=void 0,f=void 0,p=void 0,d=void 0;function h(o,l){var h=!a(l,s),y=!i(o,c);return c=o,s=l,h&&y?(f=e(c,s),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):h?(e.dependsOnOwnProps&&(f=e(c,s)),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):y?function(){var t=e(c,s),r=!u(t,f);return f=t,r&&(d=n(f,p,s)),d}():d}return function(o,i){return l?h(o,i):function(o,i){return f=e(c=o,s=i),p=t(r,s),d=n(f,p,s),l=!0,d}(o,i)}}function H(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?W:z)(a,u,l,e,i)}var B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function V(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function $(e,t){return e===t}var Y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?k:t,r=e.mapStateToPropsFactories,o=void 0===r?q:r,i=e.mapDispatchToPropsFactories,a=void 0===i?I:i,u=e.mergePropsFactories,l=void 0===u?F:u,c=e.selectorFactory,s=void 0===c?H:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,c=void 0===u||u,f=i.areStatesEqual,p=void 0===f?$:f,d=i.areOwnPropsEqual,h=void 0===d?T:d,y=i.areStatePropsEqual,v=void 0===y?T:y,m=i.areMergedPropsEqual,g=void 0===m?T:m,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=V(e,o,"mapStateToProps"),k=V(t,a,"mapDispatchToProps"),x=V(r,l,"mergeProps");return n(s,B({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:k,initMergeProps:x,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:v,areMergedPropsEqual:g},b))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return k}),n.d(t,"connect",function(){return Y})},460:function(e,t,n){"use strict";var r=n(461);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},461:function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},462:function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},480:function(e,t,n){"use strict";var r=n(3),o=n.n(r),i=n(2),a=n.n(i),u=n(15),l=n.n(u),c=n(11),s=n.n(c),f=n(80);var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){s()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){l()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),l()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.a.Children.forEach(t,function(t){if(null==r&&o.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,c=a.strict,s=a.sensitive,p=a.from,d=u||p;i=t,r=Object(f.a)(n.pathname,{path:d,exact:l,strict:c,sensitive:s},e.match)}}),r?o.a.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.a.Component);p.contextTypes={router:a.a.shape({route:a.a.object.isRequired}).isRequired},p.propTypes={children:a.a.node,location:a.a.object},t.a=p},481:function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},49:function(e,t,n){"use strict";var r=n(0),o={done:!0,value:void 0},i={};function a(e){return r.q.channel(e)?"channel":Array.isArray(e)?String(e.map(function(e){return String(e)})):String(e)}function u(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"iterator",a=void 0,u=t;function l(t,n){if(u===i)return o;if(n)throw u=i,n;a&&a(t);var r=e[u](),l=r[0],c=r[1],s=r[2];return a=s,(u=l)===i?o:c}return Object(r.t)(l,function(e){return l(null,e)},n,!0)}var l=n(4),c=n(19);function s(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var s={done:!1,value:Object(l.s)(e)},f=void 0,p=function(e){return f=e};return u({q1:function(){return["q2",s,p]},q2:function(){return f===c.a?[i]:["q1",function(e){return{done:!1,value:l.k.apply(void 0,[t].concat(r,[e]))}}(f)]}},"q1","takeEvery("+a(e)+", "+t.name+")")}function f(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var s={done:!1,value:Object(l.s)(e)},f=function(e){return{done:!1,value:l.k.apply(void 0,[t].concat(r,[e]))}},p=void 0,d=void 0,h=function(e){return p=e},y=function(e){return d=e};return u({q1:function(){return["q2",s,y]},q2:function(){return d===c.a?[i]:p?["q3",function(e){return{done:!1,value:Object(l.f)(e)}}(p)]:["q1",f(d),h]},q3:function(){return["q1",f(d),h]}},"q1","takeLatest("+a(e)+", "+t.name+")")}var p=n(42);function d(e,t,n){for(var o=arguments.length,s=Array(o>3?o-3:0),f=3;f<o;f++)s[f-3]=arguments[f];var d=void 0,h=void 0,y={done:!1,value:Object(l.a)(t,p.a.sliding(1))},v={done:!1,value:Object(l.e)(r.m,e)},m=function(e){return d=e},g=function(e){return h=e};return u({q1:function(){return["q2",y,g]},q2:function(){return["q3",{done:!1,value:Object(l.s)(h)},m]},q3:function(){return d===c.a?[i]:["q4",function(e){return{done:!1,value:l.k.apply(void 0,[n].concat(s,[e]))}}(d)]},q4:function(){return["q2",v]}},"q1","throttle("+a(t)+", "+n.name+")")}n.d(t,"a",function(){return y}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return m}),n.d(t,"b",function(){return s}),n.d(t,"d",function(){return f}),n.d(t,"f",function(){return d});var h=function(e){return"import { "+e+" } from 'redux-saga' has been deprecated in favor of import { "+e+" } from 'redux-saga/effects'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield "+e+" will return task descriptor to your saga and execute next lines of code."},y=Object(r.n)(s,h("takeEvery")),v=Object(r.n)(f,h("takeLatest")),m=Object(r.n)(d,h("throttle"))},492:function(e,t,n){n(3),n(156),n(155),n(70),n(159),e.exports=n(43)},70:function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return l}),n.d(t,"combineReducers",function(){return s}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(160),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,s=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function y(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function m(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=c(s,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return m({type:o.INIT}),(a={dispatch:m,subscribe:v,getState:y,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,m({type:o.REPLACE})}})[r.a]=function(){var e,t=v;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(y())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var l=a[i],s=n[l],f=e[l],p=s(f,t);if(void 0===p){var d=c(l,t);throw new Error(d)}o[l]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],u=e[a];"function"==typeof u&&(r[a]=f(u,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},l={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},c=t.map(function(e){return e(l)});return u=d.apply(void 0,c)(i.dispatch),a({},i,{dispatch:u})}}}},80:function(e,t,n){"use strict";var r=n(111),o=n.n(r),i={},a=0;t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,u=r.path,l=r.exact,c=void 0!==l&&l,s=r.strict,f=void 0!==s&&s,p=r.sensitive,d=void 0!==p&&p;if(null==u)return n;var h=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=i[n]||(i[n]={});if(r[e])return r[e];var u=[],l={re:o()(e,u,t),keys:u};return a<1e4&&(r[e]=l,a++),l}(u,{end:c,strict:f,sensitive:d}),y=h.re,v=h.keys,m=y.exec(e);if(!m)return null;var g=m[0],b=m.slice(1),w=e===g;return c&&!w?null:{path:u,url:"/"===u&&""===g?"/":g,isExact:w,params:v.reduce(function(e,t,n){return e[t.name]=b[n],e},{})}}},81:function(e,t,n){"use strict";var r=n(15),o=n.n(r),i=n(11),a=n.n(i),u=n(3),l=n.n(u),c=n(2),s=n.n(c),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:f({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;a()(null==n||1===l.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?l.a.Children.only(e):null},t}(l.a.Component);d.propTypes={history:s.a.object.isRequired,children:s.a.node},d.contextTypes={router:s.a.object},d.childContextTypes={router:s.a.object.isRequired},t.a=d},82:function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"c",function(){return u}),n.d(t,"b",function(){return c});var r=[],o=0;function i(e){try{u(),e()}finally{l()}}function a(e){r.push(e),o||(u(),c())}function u(){o++}function l(){o--}function c(){l();for(var e=void 0;!o&&void 0!==(e=r.shift());)i(e)}},83:function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9lZmZlY3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9wcm9jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3J1blNhZ2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3Rvcnkvbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9jaGFubmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGUvY2pzL3NjaGVkdWxlLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9pby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9idWZmZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy9mc21JdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy90YWtlRXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2FnYUhlbHBlcnMvdGFrZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwic3ltIiwiVEFTSyIsIk1BVENIIiwiQ0FOQ0VMIiwiU0FHQV9BQ1RJT04iLCJTRUxGX0NBTkNFTExBVElPTiIsImtUcnVlIiwibm9vcCIsImlkZW50IiwiY2hlY2siLCJpcyIsIm9iamVjdCIsInJlbW92ZSIsImFycmF5IiwiZGVmZXJyZWQiLCJhcnJheU9mRGVmZmVyZWQiLCJkZWxheSIsImNyZWF0ZU1vY2tUYXNrIiwidWlkIiwibWFrZUl0ZXJhdG9yIiwibG9nIiwiZGVwcmVjYXRlIiwidXBkYXRlSW5jZW50aXZlIiwiaW50ZXJuYWxFcnIiLCJjcmVhdGVTZXRDb250ZXh0V2FybmluZyIsIndyYXBTYWdhRGlzcGF0Y2giLCJjbG9uZWFibGVHZW5lcmF0b3IiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsImlkIiwiSEVMUEVSIiwia29uc3QiLCJ2IiwidmFsdWUiLCJwcmVkaWNhdGUiLCJlcnJvciIsIkVycm9yIiwiaGFzT3duIiwicHJvcGVydHkiLCJub3RVbmRlZiIsInVuZGVmIiwidW5kZWZpbmVkIiwiZnVuYyIsImYiLCJudW1iZXIiLCJuIiwic3RyaW5nIiwicyIsIkFycmF5IiwiaXNBcnJheSIsInByb21pc2UiLCJwIiwidGhlbiIsIml0IiwibmV4dCIsInRocm93IiwiaXRlcmFibGUiLCJ0YXNrIiwidCIsIm9ic2VydmFibGUiLCJvYiIsInN1YnNjcmliZSIsImJ1ZmZlciIsImJ1ZiIsImlzRW1wdHkiLCJ0YWtlIiwicHV0IiwicGF0dGVybiIsInBhdCIsImNoYW5uZWwiLCJjaCIsImNsb3NlIiwiaGVscGVyIiwic3RyaW5nYWJsZUZ1bmMiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZnJvbSIsImFyciIsInByb3BzIiwiZGVmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwdXNoIiwibXMiLCJ2YWwiLCJ0aW1lb3V0SWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiX3JlZiIsInJ1bm5pbmciLCJfcmVzdWx0IiwiX2Vycm9yIiwiaXNSdW5uaW5nIiwicmVzdWx0Iiwic2V0UnVubmluZyIsImIiLCJzZXRSZXN1bHQiLCJyIiwic2V0RXJyb3IiLCJlIiwic2VlZCIsImF1dG9JbmMiLCJrVGhyb3ciLCJlcnIiLCJrUmV0dXJuIiwiZG9uZSIsInRocm8iLCJuYW1lIiwiaXNIZWxwZXIiLCJyZXR1cm4iLCJsZXZlbCIsIm1lc3NhZ2UiLCJ3aW5kb3ciLCJjb25zb2xlIiwic3RhY2siLCJmbiIsImRlcHJlY2F0aW9uV2FybmluZyIsImFwcGx5IiwiZGVwcmVjYXRlZCIsInByZWZlcnJlZCIsImN0eCIsImRpc3BhdGNoIiwiYWN0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJnZW5lcmF0b3JGdW5jIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiaGlzdG9yeSIsImdlbiIsImFyZyIsImNsb25lIiwiY2xvbmVkR2VuIiwiZm9yRWFjaCIsImV4Y2VwdGlvbiIsIl9pbnRlcm5hbF9pb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicmVhY3Rfcm91dGVyX2VzX1JvdXRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsImRlc2NyaXB0b3IiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInN0ciIsIm9wdGlvbnMiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsImpvaW4iLCJyZXMiLCJ0b2tlbnMiLCJwYXRoIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJtIiwiZXNjYXBlZCIsIm9mZnNldCIsInNsaWNlIiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJlbmNvZGVBc3RlcmlzayIsIm1hdGNoZXMiLCJvcHRzIiwiZGF0YSIsImVuY29kZSIsInByZXR0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsIlR5cGVFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJqIiwidGVzdCIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIndhcm5pbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIndhcm5pbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiaW52YXJpYW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJpbnZhcmlhbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwiX21hdGNoUGF0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJpc0VtcHR5Q2hpbGRyZW4iLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiY291bnQiLCJSb3V0ZSIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGVtcCIsIl90aGlzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJzdGF0ZSIsImNvbXB1dGVNYXRjaCIsImNvbnRleHQiLCJyb3V0ZXIiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsImxvY2F0aW9uIiwiY29tcHV0ZWRNYXRjaCIsImV4YWN0IiwicGF0aG5hbWUiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnQiLCJyZW5kZXIiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwibmV4dENvbnRleHQiLCJzZXRTdGF0ZSIsIl9wcm9wcyIsIl9jb250ZXh0JHJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJjcmVhdGVFbGVtZW50Iiwib25seSIsIkNvbXBvbmVudCIsImJvb2wiLCJvbmVPZlR5cGUiLCJub2RlIiwic2hhcGUiLCJpc1JlcXVpcmVkIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJTdHJpbmciLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm1hcCIsInRlc3QzIiwic3BsaXQiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG8iLCJ0b09iamVjdCIsIndhcm5pbmciLCJyZWFjdF9yb3V0ZXJfZXNfUm91dGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImFkZExlYWRpbmdTbGFzaCIsImNoYXJBdCIsInN0cmlwTGVhZGluZ1NsYXNoIiwiaGFzQmFzZW5hbWUiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsInNlYXJjaCIsImhhc2giLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsInJlc29sdmVfcGF0aG5hbWUiLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwidmFsdWVfZXF1YWwiLCJlc19jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJicm93c2VyX2RlZmF1bHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwiZmlsdGVyIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJjcmVhdGVCcm93c2VySGlzdG9yeV9leHRlbmRzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiZXNfY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJpbnZhcmlhbnRfYnJvd3Nlcl9kZWZhdWx0IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInN1cHBvcnRzSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsIk1hdGgiLCJyYW5kb20iLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJjcmVhdGVIYXNoSGlzdG9yeV9leHRlbmRzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJlc19jcmVhdGVIYXNoSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfdHlwZW9mIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV9leHRlbmRzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsImVzX2NyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiQnJvd3NlclJvdXRlcl9Ccm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlciIsIndhcm5pbmdfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJSb3V0ZXIiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJIYXNoUm91dGVyX2luaGVyaXRzIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJMaW5rX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJyZWYiLCJlc19MaW5rIiwiTWVtb3J5Um91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJNZW1vcnlSb3V0ZXJfTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyX2NsYXNzQ2FsbENoZWNrIiwiTWVtb3J5Um91dGVyX2luaGVyaXRzIiwiZXNfUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19NZW1vcnlSb3V0ZXIiLCJOYXZMaW5rX2V4dGVuZHMiLCJOYXZMaW5rX3R5cGVvZiIsIk5hdkxpbmtfTmF2TGluayIsImFjdGl2ZUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwic3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsIk5hdkxpbmtfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJlc2NhcGVkUGF0aCIsIl9yZWYyIiwiYXJpYS1jdXJyZW50IiwiZXNfTmF2TGluayIsIlByb21wdF9Qcm9tcHQiLCJQcm9tcHQiLCJQcm9tcHRfY2xhc3NDYWxsQ2hlY2siLCJQcm9tcHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlByb21wdF9pbmhlcml0cyIsImVuYWJsZSIsImRpc2FibGUiLCJ3aGVuIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1Byb21wdCIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJlc19nZW5lcmF0ZVBhdGgiLCJwYXJhbXMiLCJjYWNoZUtleSIsImNhY2hlIiwiY29tcGlsZWRHZW5lcmF0b3IiLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwiZ2VuZXJhdGVQYXRoX2NvbXBpbGVHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJSZWRpcmVjdF9leHRlbmRzIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2VG8iLCJuZXh0VG8iLCJjb21wdXRlVG8iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JlZGlyZWN0IiwiU3RhdGljUm91dGVyX2V4dGVuZHMiLCJTdGF0aWNSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN0YXRpY1JvdXRlcl9hZGRMZWFkaW5nU2xhc2giLCJhZGRCYXNlbmFtZSIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsInVybCIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIlN0YXRpY1JvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImJhc2UiLCJTdGF0aWNSb3V0ZXJfc3RyaXBCYXNlbmFtZSIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3RhdGljUm91dGVyIiwiZXNfU3dpdGNoIiwicmVhY3Rfcm91dGVyX2RvbV9lc19nZW5lcmF0ZVBhdGgiLCJlc19tYXRjaFBhdGgiLCJ3aXRoUm91dGVyX2V4dGVuZHMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX3dpdGhSb3V0ZXIiLCJDIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwid2l0aFJvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImVzX1JvdXRlIiwicm91dGVDb21wb25lbnRQcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19janNfZGVmYXVsdCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImxpc3QiLCJrIiwicG9wIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwidmFsdWVFcXVhbCIsImV2ZXJ5IiwiYVR5cGUiLCJhVmFsdWUiLCJ2YWx1ZU9mIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsIk5PVF9JVEVSQVRPUl9FUlJPUiIsIkNIQU5ORUxfRU5EIiwiVEFTS19DQU5DRUwiLCJtYXRjaGVycyIsIndpbGRjYXJkIiwidXRpbHMiLCJkZWZhdWx0IiwiaW5wdXQiLCJwYXR0ZXJucyIsInNvbWUiLCJtYXRjaGVyIiwiX3ByZWRpY2F0ZSIsIndyYXBIZWxwZXIiLCJwcm9jIiwiZ2V0U3RhdGUiLCJwYXJlbnRDb250ZXh0IiwicGFyZW50RWZmZWN0SWQiLCJjb250IiwicnVuUGFyYWxsZWxFZmZlY3QiLCJydW5BbGxFZmZlY3QiLCJzYWdhTW9uaXRvciIsImxvZ2dlciIsIm9uRXJyb3IiLCJsb2dFcnJvciIsInNhZ2FTdGFjayIsInN0ZENoYW5uZWwiLCJpbnRlcm5hbF9jaGFubmVsIiwidGFza0NvbnRleHQiLCJjYW5jZWwiLCJfcmVmOSIsIl9tdXRhdG9yTWFwIiwiX2RlZmVycmVkRW5kIiwiZ2V0IiwiX2lzUnVubmluZyIsImpvaW5lcnMiLCJpc0NhbmNlbGxlZCIsIl9pc0NhbmNlbGxlZCIsImlzQWJvcnRlZCIsIl9pc0Fib3J0ZWQiLCJzZXRDb250ZXh0IiwiZGVzY3MiLCJkZXNjIiwiX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzIiwibmV3VGFzayIsIm1haW5UYXNrIiwidGFza1F1ZXVlIiwiY2IiLCJ0YXNrcyIsImNvbXBsZXRlZCIsImFib3J0IiwiY2FuY2VsQWxsIiwiYWRkVGFzayIsImlzRXJyIiwiZ2V0VGFza3MiLCJ0YXNrTmFtZXMiLCJmb3JrUXVldWUiLCJpc01haW5SdW5uaW5nIiwicnVuRWZmZWN0IiwiZWZmZWN0IiwibGFiZWwiLCJlZmZlY3RJZCIsImVmZmVjdFRyaWdnZXJlZCIsImVmZmVjdFNldHRsZWQiLCJjdXJyQ2IiLCJlZmZlY3RSZWplY3RlZCIsImVmZmVjdFJlc29sdmVkIiwiZWZmZWN0Q2FuY2VsbGVkIiwicmVzb2x2ZVByb21pc2UiLCJydW5Gb3JrRWZmZWN0IiwicmVzb2x2ZUl0ZXJhdG9yIiwiaW8iLCJtYXliZSIsInRha2VDYiIsImlucCIsInJ1blRha2VFZmZlY3QiLCJfcmVmMyIsInNjaGVkdWxlciIsInJ1blB1dEVmZmVjdCIsImFsbCIsInJhY2UiLCJlZmZlY3RzIiwiY2hpbGRDYnMiLCJjaENiQXRLZXkiLCJfcmVzcG9uc2UiLCJyZXNwb25zZSIsInJ1blJhY2VFZmZlY3QiLCJfcmVmNCIsInJ1bkNhbGxFZmZlY3QiLCJjcHMiLCJfcmVmNSIsImNwc0NiIiwicnVuQ1BTRWZmZWN0IiwiZm9yayIsImpvaW5lciIsInJ1bkpvaW5FZmZlY3QiLCJ0YXNrVG9DYW5jZWwiLCJydW5DYW5jZWxFZmZlY3QiLCJzZWxlY3QiLCJfcmVmNyIsInNlbGVjdG9yIiwicnVuU2VsZWN0RWZmZWN0IiwiYWN0aW9uQ2hhbm5lbCIsIl9yZWY4IiwiYnVmZmVycyIsImZpeGVkIiwicnVuQ2hhbm5lbEVmZmVjdCIsImZsdXNoIiwicnVuRmx1c2hFZmZlY3QiLCJjYW5jZWxsZWQiLCJydW5DYW5jZWxsZWRFZmZlY3QiLCJnZXRDb250ZXh0IiwicHJvcCIsInJ1bkdldENvbnRleHRFZmZlY3QiLCJydW5TZXRDb250ZXh0RWZmZWN0IiwiY2FuY2VsUHJvbWlzZSIsIl9yZWY2IiwiZGV0YWNoZWQiLCJ0YXNrSXRlcmF0b3IiLCJwYyIsImVmZiIsInJldCIsImNyZWF0ZVRhc2tJdGVyYXRvciIsIl90YXNrIiwiY29tcGxldGVkQ291bnQiLCJyZXN1bHRzIiwiTk9OX0dFTkVSQVRPUl9FUlIiLCJSVU5fU0FHQV9TSUdOQVRVUkUiLCJydW5TYWdhIiwic3RvcmVJbnRlcmZhY2UiLCJzYWdhIiwiX3N0b3JlSW50ZXJmYWNlIiwiYWN0aW9uRGlzcGF0Y2hlZCIsInJvb3QiLCJzYWdhSGVscGVycyIsImVzX2VmZmVjdHMiLCJ1dGlsc19uYW1lc3BhY2VPYmplY3QiLCJfcmVmJGNvbnRleHQiLCJlbWl0dGVyIiwic2FnYU1pZGRsZXdhcmUiLCJzYWdhRW1pdHRlciIsImVtaXQiLCJydW4iLCJiaW5kIiwiZ2xvYmFsIiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJFTkQiLCJpc0VuZCIsImV2ZW50Q2hhbm5lbCIsIl91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2J1ZmZlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9zY2hlZHVsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInN1YnNjcmliZXJzIiwic3ViIiwibGVuIiwiSU5WQUxJRF9CVUZGRVIiLCJVTkRFRklORURfSU5QVVRfRVJST1IiLCJjbG9zZWQiLCJ0YWtlcnMiLCJjaGVja0ZvcmJpZGRlblN0YXRlcyIsIl9fdGFrZXJzX18iLCJfX2Nsb3NlZF9fIiwibm9uZSIsImNoYW4iLCJ1bnN1YnNjcmliZSIsImZyZWVHbG9iYWwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJmb3IiLCJxIiwidSIsInciLCJ4IiwieSIsInoiLCJCIiwiZyIsImgiLCJsIiwiQSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwiRSIsInJlZnMiLCJ1cGRhdGVyIiwiRiIsIkciLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJIIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiY3VycmVudCIsImN1cnJlbnREaXNwYXRjaGVyIiwiSiIsIksiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIkwiLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJPIiwiUCIsIlEiLCJrZXlQcmVmaXgiLCJSIiwiVSIsIlMiLCJUIiwiPSIsIjoiLCJlc2NhcGUiLCJWIiwiYWEiLCJXIiwiTSIsIlgiLCJ0b0FycmF5IiwiY3JlYXRlUmVmIiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwidW5zdGFibGVfcmVhZCIsIl9jb250ZXh0IiwicmVhZENvbnRleHQiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJ2ZXJzaW9uIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwiYmEiLCJjYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsIm1hIiwibmEiLCJvYSIsInBhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJxYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicmEiLCJyZWdpc3RyYXRpb25OYW1lIiwic2EiLCJ0YSIsImRlcGVuZGVuY2llcyIsInZhIiwid2EiLCJ4YSIsImN1cnJlbnRUYXJnZXQiLCJsYSIsInlhIiwiemEiLCJBYSIsIkJhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJwYXJlbnROb2RlIiwidGFnIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsImRpc3BhdGNoQ29uZmlnIiwiUWEiLCJfdGFyZ2V0SW5zdCIsIlJhIiwiVGEiLCJVYSIsIlZhIiwiV2EiLCJ0b0xvd2VyQ2FzZSIsIllhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWmEiLCIkYSIsImFiIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImJiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwibmIiLCJldmVudFBvb2wiLCJkZXN0cnVjdG9yIiwibWIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImV4dGVuZCIsInBiIiwicWIiLCJyYiIsInNiIiwidGIiLCJkb2N1bWVudE1vZGUiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ5YiIsInpiIiwia2V5Q29kZSIsIkFiIiwiZGV0YWlsIiwiQmIiLCJFYiIsImxvY2FsZSIsIndoaWNoIiwiQ2IiLCJjaGFyIiwiRGIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJSYiIsIm5vZGVOYW1lIiwiU2IiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIlRiIiwic2V0QXR0cmlidXRlIiwiVWIiLCJXYiIsIl92YWx1ZVRyYWNrZXIiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVmIiLCJYYiIsImNoZWNrZWQiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfcmVhY3RTdGF0dXMiLCJfcmVhY3RSZXN1bHQiLCJtYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwibmMiLCJxYyIsInJjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInZjIiwid2MiLCJ4YyIsInRjIiwiaXNOYU4iLCJ1YyIsInNjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ5YyIsInpjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJCYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwidGFiSW5kZXgiLCJHYyIsImNoYW5nZSIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiVmMiLCJ2aWV3IiwiV2MiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiWGMiLCJnZXRNb2RpZmllclN0YXRlIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiZGQiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJlZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZmQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImFsdGVybmF0ZSIsImdkIiwiaGQiLCJqZCIsImVmZmVjdFRhZyIsImtkIiwibWQiLCJjaGlsZCIsInNpYmxpbmciLCJsZCIsIm5kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm9kIiwiY2xpcGJvYXJkRGF0YSIsInBkIiwicWQiLCJjaGFyQ29kZSIsInJkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInNkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInRkIiwidWQiLCJkYXRhVHJhbnNmZXIiLCJ2ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ3ZCIsInhkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsImlzSW50ZXJhY3RpdmUiLCJDZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkRkIiwiRWQiLCJGZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiR2QiLCJIZCIsIklkIiwiSmQiLCJLZCIsIkxkIiwiTWQiLCJOZCIsIlBkIiwiYm9keSIsIlFkIiwiZmlyc3RDaGlsZCIsIlJkIiwibmV4dFNpYmxpbmciLCJUZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiVWQiLCJjb250ZW50RWRpdGFibGUiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJiZSIsIm9uU2VsZWN0IiwiZGUiLCJjZSIsImVlIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJmZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiZ2UiLCJoZSIsImllIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImplIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsImtlIiwibGUiLCJtZSIsIm5lIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJvZSIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInBlIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxZSIsInRyaW0iLCJzZXRQcm9wZXJ0eSIsInNlIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidGUiLCJ1ZSIsInZlIiwiYmx1ciIsImZvY3VzIiwid2UiLCJ4ZSIsInllIiwiemUiLCJhdXRvRm9jdXMiLCJBZSIsIl9faHRtbCIsIkJlIiwiQ2UiLCJTZXQiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiSWUiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJTZSIsInBlbmRpbmdQcm9wcyIsImZpcnN0Q29udGV4dERlcGVuZGVuY3kiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibW9kZSIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJUZSIsIlVlIiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlplIiwiZGlkRXJyb3IiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCIkZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RQaW5nZWRUaW1lIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJhZiIsImJmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJjZiIsImRmIiwicGF5bG9hZCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJrZiIsImxmIiwibWYiLCJuZiIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJvYnNlcnZlZEJpdHMiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiRmYiLCJKZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZiIsIkhmIiwiSWYiLCJLZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxmIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJNZiIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsIk5mIiwiT2YiLCJfc3RyaW5nUmVmIiwiUGYiLCJRZiIsIk1hcCIsImRlbGV0ZSIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJpZyIsImpnIiwicGVuZGluZ0NvbnRleHQiLCJuZyIsInBnIiwiYmciLCJvZyIsImVsZW1lbnQiLCJoeWRyYXRlIiwiaGlkZGVuIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsImluc2VydEJlZm9yZSIsIm9uY2xpY2siLCJCZyIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZyIsIkRnIiwiRWciLCJjb21wb25lbnREaWRDYXRjaCIsIkZnIiwiYWRkIiwiY29tcG9uZW50U3RhY2siLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJSZyIsIlNnIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiVGciLCJoYXMiLCJmaW5pc2hlZFdvcmsiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJVZyIsIlZnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwidW5zdGFibGVfbm93Iiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcmsiLCJ1bnN0YWJsZV9zY2hlZHVsZVdvcmsiLCJwaCIsInRpbWVvdXQiLCJxaCIsImRpZFRpbWVvdXQiLCJfb25Db21wbGV0ZSIsInJoIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJYYSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJ5aCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiU2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJTYSIsIm9jIiwiSWgiLCJKaCIsImtnIiwibGciLCJLaCIsIkFjIiwibWciLCJPZCIsIkxoIiwidGltZVJlbWFpbmluZyIsInNoIiwidGgiLCJ1aCIsIndoIiwidmgiLCJ4aCIsInpoIiwiQmgiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIkNoIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIkRoIiwidGltZW91dEhhbmRsZSIsIl9pbnRlcm5hbFJvb3QiLCJFaCIsIkdoIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIkZoIiwiSGgiLCJBaCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiTWgiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiUmUiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiTmgiLCJPaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicGVyZm9ybWFuY2UiLCJzY2hlZHVsZWRDYWxsYmFjayIsInBvc3RNZXNzYWdlIiwidGltZW91dFRpbWUiLCJwcmV2IiwiSW5maW5pdHkiLCJkZXRhY2giLCJ0YWtlbSIsInNwYXduIiwidGFrZUV2ZXJ5IiwidGFrZUxhdGVzdCIsInRocm90dGxlIiwiYXNFZmZlY3QiLCJfc2FnYUhlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIklPIiwiVEFLRSIsIlBVVCIsIkFMTCIsIlJBQ0UiLCJDQUxMIiwiQ1BTIiwiRk9SSyIsIkpPSU4iLCJTRUxFQ1QiLCJBQ1RJT05fQ0hBTk5FTCIsIkNBTkNFTExFRCIsIkZMVVNIIiwiR0VUX0NPTlRFWFQiLCJTRVRfQ09OVEVYVCIsIlRFU1RfSElOVCIsInBhdHRlcm5PckNoYW5uZWwiLCJnZXRGbkNhbGxEZXNjIiwibWV0aCIsIl9mbiIsIl9mbjIiLCJfbGVuMiIsIl9rZXkyIiwiX2xlbjMiLCJfa2V5MyIsIl9sZW40IiwiX2tleTQiLCJfbGVuNSIsIl9rZXk1IiwiX2xlbjYiLCJfa2V5NiIsIl9sZW43IiwiX2tleTciLCJ3b3JrZXIiLCJfbGVuOCIsIl9rZXk4IiwiX2xlbjkiLCJfa2V5OSIsIl9sZW4xMCIsIl9rZXkxMCIsInN5bmMiLCJjcmVhdGVBc0VmZmVjdFR5cGUiLCJCVUZGRVJfT1ZFUkZMT1ciLCJPTl9PVkVSRkxPV19USFJPVyIsIk9OX09WRVJGTE9XX1NMSURFIiwiT05fT1ZFUkZMT1dfRVhQQU5EIiwiemVyb0J1ZmZlciIsInJpbmdCdWZmZXIiLCJsaW1pdCIsIm92ZXJmbG93QWN0aW9uIiwicHVzaEluZGV4IiwicG9wSW5kZXgiLCJpdGVtcyIsImRvdWJsZWRMaW1pdCIsImRyb3BwaW5nIiwic2xpZGluZyIsImV4cGFuZGluZyIsImluaXRpYWxTaXplIiwic3Vic2NyaXB0aW9uU2hhcGUiLCJ0cnlTdWJzY3JpYmUiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwiY3JlYXRlUHJvdmlkZXIiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJzdG9yZUtleSIsInN1YnNjcmlwdGlvbktleSIsIl9Db21wb25lbnQiLCJzdG9yZSIsInJlYWN0IiwiY29tcG9uZW50c19Qcm92aWRlciIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsIlN1YnNjcmlwdGlvbl9jbGFzc0NhbGxDaGVjayIsImFkZE5lc3RlZFN1YiIsIkJvb2xlYW4iLCJjbGVhciIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIl9yZWYkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZiRzaG91bGRIYW5kbGVTdGF0Iiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZiRzdG9yZUtleSIsIl9yZWYkd2l0aFJlZiIsIndpdGhSZWYiLCJjb25uZWN0T3B0aW9ucyIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJjb25uZWN0QWR2YW5jZWRfY2xhc3NDYWxsQ2hlY2siLCJjb25uZWN0QWR2YW5jZWRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiaW5pdFNlbGVjdG9yIiwiaW5pdFN1YnNjcmlwdGlvbiIsImNvbm5lY3RBZHZhbmNlZF9pbmhlcml0cyIsInN1YnNjcmlwdGlvbiIsImdldFdyYXBwZWRJbnN0YW5jZSIsIndyYXBwZWRJbnN0YW5jZSIsInNvdXJjZVNlbGVjdG9yIiwibWFrZVNlbGVjdG9yU3RhdGVmdWwiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwiRnVuY3Rpb24iLCJvYmplY3RQcm90byIsInRvU3RyaW5nVGFnIiwiZnVuY1Byb3RvIiwiaXNQbGFpbk9iamVjdF9vYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJoYW5kbGVOZXdTdGF0ZSIsImZpcnN0U3RhdGUiLCJmaXJzdE93blByb3BzIiwiaGFuZGxlRmlyc3RDYWxsIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzZWxlY3RvckZhY3Rvcnlfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb25uZWN0X2V4dGVuZHMiLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsImNvbm5lY3RfY29ubmVjdCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRwdXJlIiwiX3JlZjIkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMiRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMiRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMiRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjb25uZWN0X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0Iiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJpbnZhcmlhbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsImludmFyaWFudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJTd2l0Y2giLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwicUVuZCIsInNhZmVOYW1lIiwiZnNtSXRlcmF0b3IiLCJmc20iLCJxMCIsInVwZGF0ZVN0YXRlIiwicU5leHQiLCJfZnNtJHFOZXh0Iiwib3V0cHV0IiwiX3VwZGF0ZVN0YXRlIiwieVRha2UiLCJzZXRBY3Rpb24iLCJxMSIsInEyIiwieUZvcmsiLCJzZXRUYXNrIiwieUNhbmNlbCIsInEzIiwiZGVsYXlMZW5ndGgiLCJ5QWN0aW9uQ2hhbm5lbCIsInlEZWxheSIsInNldENoYW5uZWwiLCJxNCIsInNhZ2FIZWxwZXJzX3Rha2VFdmVyeSIsInNhZ2FIZWxwZXJzX3Rha2VMYXRlc3QiLCJzYWdhSGVscGVyc190aHJvdHRsZSIsImhlbHBlck5hbWUiLCJjcmVhdGVTdG9yZSIsImNvbWJpbmVSZWR1Y2VycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFwcGx5TWlkZGxld2FyZSIsImNvbXBvc2UiLCJBY3Rpb25UeXBlcyIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJJTklUIiwiUkVQTEFDRSIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsImZpbmFsUmVkdWNlcktleXMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIl9pIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImZ1bmNzIiwicmVkdWNlIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicGF0aF90b19yZWdleHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInBhdGhfdG9fcmVnZXhwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInBhcmVudCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJjb21waWxlZFBhdHRlcm4iLCJjb21waWxlUGF0aCIsInZhbHVlcyIsImlzRXhhY3QiLCJtZW1vIiwiX3RoaXMyIiwiYXNhcCIsInN1c3BlbmQiLCJxdWV1ZSIsInNlbWFwaG9yZSIsInNoaWZ0IiwiZXZhbCJdLCJtYXBwaW5ncyI6IndGQUFBQSxFQUFBQyxFQUFBQyxFQUFBLHNCQUFBQyxJQUFBSCxFQUFBQyxFQUFBQyxFQUFB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QyxRQUFBMG1CIiwiZmlsZSI6InZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBzeW0gPSBmdW5jdGlvbiBzeW0oaWQpIHtcbiAgcmV0dXJuICdAQHJlZHV4LXNhZ2EvJyArIGlkO1xufTtcblxuZXhwb3J0IHZhciBUQVNLID0gLyojX19QVVJFX18qL3N5bSgnVEFTSycpO1xuZXhwb3J0IHZhciBIRUxQRVIgPSAvKiNfX1BVUkVfXyovc3ltKCdIRUxQRVInKTtcbmV4cG9ydCB2YXIgTUFUQ0ggPSAvKiNfX1BVUkVfXyovc3ltKCdNQVRDSCcpO1xuZXhwb3J0IHZhciBDQU5DRUwgPSAvKiNfX1BVUkVfXyovc3ltKCdDQU5DRUxfUFJPTUlTRScpO1xuZXhwb3J0IHZhciBTQUdBX0FDVElPTiA9IC8qI19fUFVSRV9fKi9zeW0oJ1NBR0FfQUNUSU9OJyk7XG5leHBvcnQgdmFyIFNFTEZfQ0FOQ0VMTEFUSU9OID0gLyojX19QVVJFX18qL3N5bSgnU0VMRl9DQU5DRUxMQVRJT04nKTtcbmV4cG9ydCB2YXIga29uc3QgPSBmdW5jdGlvbiBrb25zdCh2KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG59O1xuZXhwb3J0IHZhciBrVHJ1ZSA9IC8qI19fUFVSRV9fKi9rb25zdCh0cnVlKTtcbmV4cG9ydCB2YXIga0ZhbHNlID0gLyojX19QVVJFX18qL2tvbnN0KGZhbHNlKTtcbmV4cG9ydCB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcbmV4cG9ydCB2YXIgaWRlbnQgPSBmdW5jdGlvbiBpZGVudCh2KSB7XG4gIHJldHVybiB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrKHZhbHVlLCBwcmVkaWNhdGUsIGVycm9yKSB7XG4gIGlmICghcHJlZGljYXRlKHZhbHVlKSkge1xuICAgIGxvZygnZXJyb3InLCAndW5jYXVnaHQgYXQgY2hlY2snLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmplY3QsIHByb3BlcnR5KSB7XG4gIHJldHVybiBpcy5ub3RVbmRlZihvYmplY3QpICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7XG59XG5cbmV4cG9ydCB2YXIgaXMgPSB7XG4gIHVuZGVmOiBmdW5jdGlvbiB1bmRlZih2KSB7XG4gICAgcmV0dXJuIHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkO1xuICB9LFxuICBub3RVbmRlZjogZnVuY3Rpb24gbm90VW5kZWYodikge1xuICAgIHJldHVybiB2ICE9PSBudWxsICYmIHYgIT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyhmKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBudW1iZXI6IGZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJztcbiAgfSxcbiAgc3RyaW5nOiBmdW5jdGlvbiBzdHJpbmcocykge1xuICAgIHJldHVybiB0eXBlb2YgcyA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGFycmF5OiBBcnJheS5pc0FycmF5LFxuICBvYmplY3Q6IGZ1bmN0aW9uIG9iamVjdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmICFpcy5hcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopKSA9PT0gJ29iamVjdCc7XG4gIH0sXG4gIHByb21pc2U6IGZ1bmN0aW9uIHByb21pc2UocCkge1xuICAgIHJldHVybiBwICYmIGlzLmZ1bmMocC50aGVuKTtcbiAgfSxcbiAgaXRlcmF0b3I6IGZ1bmN0aW9uIGl0ZXJhdG9yKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGlzLmZ1bmMoaXQubmV4dCkgJiYgaXMuZnVuYyhpdC50aHJvdyk7XG4gIH0sXG4gIGl0ZXJhYmxlOiBmdW5jdGlvbiBpdGVyYWJsZShpdCkge1xuICAgIHJldHVybiBpdCAmJiBpcy5mdW5jKFN5bWJvbCkgPyBpcy5mdW5jKGl0W1N5bWJvbC5pdGVyYXRvcl0pIDogaXMuYXJyYXkoaXQpO1xuICB9LFxuICB0YXNrOiBmdW5jdGlvbiB0YXNrKHQpIHtcbiAgICByZXR1cm4gdCAmJiB0W1RBU0tdO1xuICB9LFxuICBvYnNlcnZhYmxlOiBmdW5jdGlvbiBvYnNlcnZhYmxlKG9iKSB7XG4gICAgcmV0dXJuIG9iICYmIGlzLmZ1bmMob2Iuc3Vic2NyaWJlKTtcbiAgfSxcbiAgYnVmZmVyOiBmdW5jdGlvbiBidWZmZXIoYnVmKSB7XG4gICAgcmV0dXJuIGJ1ZiAmJiBpcy5mdW5jKGJ1Zi5pc0VtcHR5KSAmJiBpcy5mdW5jKGJ1Zi50YWtlKSAmJiBpcy5mdW5jKGJ1Zi5wdXQpO1xuICB9LFxuICBwYXR0ZXJuOiBmdW5jdGlvbiBwYXR0ZXJuKHBhdCkge1xuICAgIHJldHVybiBwYXQgJiYgKGlzLnN0cmluZyhwYXQpIHx8ICh0eXBlb2YgcGF0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXQpKSA9PT0gJ3N5bWJvbCcgfHwgaXMuZnVuYyhwYXQpIHx8IGlzLmFycmF5KHBhdCkpO1xuICB9LFxuICBjaGFubmVsOiBmdW5jdGlvbiBjaGFubmVsKGNoKSB7XG4gICAgcmV0dXJuIGNoICYmIGlzLmZ1bmMoY2gudGFrZSkgJiYgaXMuZnVuYyhjaC5jbG9zZSk7XG4gIH0sXG4gIGhlbHBlcjogZnVuY3Rpb24gaGVscGVyKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGl0W0hFTFBFUl07XG4gIH0sXG4gIHN0cmluZ2FibGVGdW5jOiBmdW5jdGlvbiBzdHJpbmdhYmxlRnVuYyhmKSB7XG4gICAgcmV0dXJuIGlzLmZ1bmMoZikgJiYgaGFzT3duKGYsICd0b1N0cmluZycpO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIG9iamVjdCA9IHtcbiAgYXNzaWduOiBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBpIGluIHNvdXJjZSkge1xuICAgICAgaWYgKGhhc093bihzb3VyY2UsIGkpKSB7XG4gICAgICAgIHRhcmdldFtpXSA9IHNvdXJjZVtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoYXJyYXksIGl0ZW0pIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmV4cG9ydCB2YXIgYXJyYXkgPSB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20ob2JqKSB7XG4gICAgdmFyIGFyciA9IEFycmF5KG9iai5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBpZiAoaGFzT3duKG9iaiwgaSkpIHtcbiAgICAgICAgYXJyW2ldID0gb2JqW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmZXJyZWQoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGRlZiA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlZi5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICBkZWYucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiAgZGVmLnByb21pc2UgPSBwcm9taXNlO1xuICByZXR1cm4gZGVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlPZkRlZmZlcmVkKGxlbmd0aCkge1xuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnIucHVzaChkZWZlcnJlZCgpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgdmFyIHZhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICB2YXIgdGltZW91dElkID0gdm9pZCAwO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh2YWwpO1xuICAgIH0sIG1zKTtcbiAgfSk7XG5cbiAgcHJvbWlzZVtDQU5DRUxdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tUYXNrKCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgcnVubmluZyA9IHRydWU7XG4gIHZhciBfcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgX2Vycm9yID0gdm9pZCAwO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbVEFTS10gPSB0cnVlLCBfcmVmLmlzUnVubmluZyA9IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICByZXR1cm4gcnVubmluZztcbiAgfSwgX3JlZi5yZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH0sIF9yZWYuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICByZXR1cm4gX2Vycm9yO1xuICB9LCBfcmVmLnNldFJ1bm5pbmcgPSBmdW5jdGlvbiBzZXRSdW5uaW5nKGIpIHtcbiAgICByZXR1cm4gcnVubmluZyA9IGI7XG4gIH0sIF9yZWYuc2V0UmVzdWx0ID0gZnVuY3Rpb24gc2V0UmVzdWx0KHIpIHtcbiAgICByZXR1cm4gX3Jlc3VsdCA9IHI7XG4gIH0sIF9yZWYuc2V0RXJyb3IgPSBmdW5jdGlvbiBzZXRFcnJvcihlKSB7XG4gICAgcmV0dXJuIF9lcnJvciA9IGU7XG4gIH0sIF9yZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRvSW5jKCkge1xuICB2YXIgc2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiArK3NlZWQ7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgdWlkID0gLyojX19QVVJFX18qL2F1dG9JbmMoKTtcblxudmFyIGtUaHJvdyA9IGZ1bmN0aW9uIGtUaHJvdyhlcnIpIHtcbiAgdGhyb3cgZXJyO1xufTtcbnZhciBrUmV0dXJuID0gZnVuY3Rpb24ga1JldHVybih2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IHRydWUgfTtcbn07XG5leHBvcnQgZnVuY3Rpb24gbWFrZUl0ZXJhdG9yKG5leHQpIHtcbiAgdmFyIHRocm8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGtUaHJvdztcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICB2YXIgaXNIZWxwZXIgPSBhcmd1bWVudHNbM107XG5cbiAgdmFyIGl0ZXJhdG9yID0geyBuYW1lOiBuYW1lLCBuZXh0OiBuZXh0LCB0aHJvdzogdGhybywgcmV0dXJuOiBrUmV0dXJuIH07XG5cbiAgaWYgKGlzSGVscGVyKSB7XG4gICAgaXRlcmF0b3JbSEVMUEVSXSA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9O1xuICB9XG4gIHJldHVybiBpdGVyYXRvcjtcbn1cblxuLyoqXG4gIFByaW50IGVycm9yIGluIGEgdXNlZnVsIHdheSB3aGV0aGVyIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudFxuICAod2l0aCBleHBhbmRhYmxlIGVycm9yIHN0YWNrIHRyYWNlcyksIG9yIGluIGEgbm9kZS5qcyBlbnZpcm9ubWVudFxuICAodGV4dC1vbmx5IGxvZyBvdXRwdXQpXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gbG9nKGxldmVsLCBtZXNzYWdlKSB7XG4gIHZhciBlcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5sb2coJ3JlZHV4LXNhZ2EgJyArIGxldmVsICsgJzogJyArIG1lc3NhZ2UgKyAnXFxuJyArIChlcnJvciAmJiBlcnJvci5zdGFjayB8fCBlcnJvcikpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGVbbGV2ZWxdKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBkZXByZWNhdGlvbldhcm5pbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIGxvZygnd2FybicsIGRlcHJlY2F0aW9uV2FybmluZyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciB1cGRhdGVJbmNlbnRpdmUgPSBmdW5jdGlvbiB1cGRhdGVJbmNlbnRpdmUoZGVwcmVjYXRlZCwgcHJlZmVycmVkKSB7XG4gIHJldHVybiBkZXByZWNhdGVkICsgJyBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mICcgKyBwcmVmZXJyZWQgKyAnLCBwbGVhc2UgdXBkYXRlIHlvdXIgY29kZSc7XG59O1xuXG5leHBvcnQgdmFyIGludGVybmFsRXJyID0gZnVuY3Rpb24gaW50ZXJuYWxFcnIoZXJyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ1xcbiAgcmVkdXgtc2FnYTogRXJyb3IgY2hlY2tpbmcgaG9va3MgZGV0ZWN0ZWQgYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBUaGlzIGlzIGxpa2VseSBhIGJ1Z1xcbiAgaW4gcmVkdXgtc2FnYSBjb2RlIGFuZCBub3QgeW91cnMuIFRoYW5rcyBmb3IgcmVwb3J0aW5nIHRoaXMgaW4gdGhlIHByb2plY3RcXCdzIGdpdGh1YiByZXBvLlxcbiAgRXJyb3I6ICcgKyBlcnIgKyAnXFxuJyk7XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nID0gZnVuY3Rpb24gY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoY3R4LCBwcm9wcykge1xuICByZXR1cm4gKGN0eCA/IGN0eCArICcuJyA6ICcnKSArICdzZXRDb250ZXh0KHByb3BzKTogYXJndW1lbnQgJyArIHByb3BzICsgJyBpcyBub3QgYSBwbGFpbiBvYmplY3QnO1xufTtcblxuZXhwb3J0IHZhciB3cmFwU2FnYURpc3BhdGNoID0gZnVuY3Rpb24gd3JhcFNhZ2FEaXNwYXRjaChkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBkaXNwYXRjaChPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aW9uLCBTQUdBX0FDVElPTiwgeyB2YWx1ZTogdHJ1ZSB9KSk7XG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNsb25lYWJsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNsb25lYWJsZUdlbmVyYXRvcihnZW5lcmF0b3JGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGhpc3RvcnkgPSBbXTtcbiAgICB2YXIgZ2VuID0gZ2VuZXJhdG9yRnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGFyZykge1xuICAgICAgICBoaXN0b3J5LnB1c2goYXJnKTtcbiAgICAgICAgcmV0dXJuIGdlbi5uZXh0KGFyZyk7XG4gICAgICB9LFxuICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgY2xvbmVkR2VuID0gY2xvbmVhYmxlR2VuZXJhdG9yKGdlbmVyYXRvckZ1bmMpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgIGhpc3RvcnkuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lZEdlbi5uZXh0KGFyZyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvbmVkR2VuO1xuICAgICAgfSxcbiAgICAgIHJldHVybjogZnVuY3Rpb24gX3JldHVybih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZ2VuLnJldHVybih2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgdGhyb3c6IGZ1bmN0aW9uIF90aHJvdyhleGNlcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGdlbi50aHJvdyhleGNlcHRpb24pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59OyIsImV4cG9ydCB7IHRha2UsIHRha2VtLCBwdXQsIGFsbCwgcmFjZSwgY2FsbCwgYXBwbHksIGNwcywgZm9yaywgc3Bhd24sIGpvaW4sIGNhbmNlbCwgc2VsZWN0LCBhY3Rpb25DaGFubmVsLCBjYW5jZWxsZWQsIGZsdXNoLCBnZXRDb250ZXh0LCBzZXRDb250ZXh0LCB0YWtlRXZlcnksIHRha2VMYXRlc3QsIHRocm90dGxlIH0gZnJvbSAnLi9pbnRlcm5hbC9pbyc7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3Igd2l0aFJvdXRlcigpIG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gbWF0Y2hQYXRoKHBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIHN0cmljdDogc3RyaWN0LCBleGFjdDogZXhhY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLnJlbmRlciAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIGlmIChjb21wb25lbnQpIHJldHVybiBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHJlbmRlcikgcmV0dXJuIG1hdGNoID8gcmVuZGVyKHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUm91dGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tIFwiaGlzdG9yeVwiO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGludmFyaWFudCh0byAhPT0gdW5kZWZpbmVkLCAnWW91IG11c3Qgc3BlY2lmeSB0aGUgXCJ0b1wiIHByb3BlcnR5Jyk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcblxuICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBoaXN0b3J5LmxvY2F0aW9uKSA6IHRvO1xuXG4gICAgdmFyIGhyZWYgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmtcIjtcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1widG9cIiwgXCJleGFjdFwiLCBcInN0cmljdFwiLCBcImxvY2F0aW9uXCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJzdHlsZVwiLCBcImlzQWN0aXZlXCIsIFwiYXJpYS1jdXJyZW50XCJdKTtcblxuICB2YXIgcGF0aCA9ICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0bykpID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bztcblxuICAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKFwiIFwiKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogXCJhY3RpdmVcIixcbiAgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53aGVuKSB0aGlzLmVuYWJsZSh0aGlzLnByb3BzLm1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy53aGVuKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud2hlbiB8fCB0aGlzLnByb3BzLm1lc3NhZ2UgIT09IG5leHRQcm9wcy5tZXNzYWdlKSB0aGlzLmVuYWJsZShuZXh0UHJvcHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFByb21wdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblByb21wdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdoZW46IHRydWVcbn07XG5Qcm9tcHQuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJsb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFByb21wdCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1Byb21wdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVHZW5lcmF0b3IgPSBmdW5jdGlvbiBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pIHtcbiAgdmFyIGNhY2hlS2V5ID0gcGF0dGVybjtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIgY29tcGlsZWRHZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXR0ZXJuKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkR2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZEdlbmVyYXRvcjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0dGVybiBhbmQgcGFyYW1ldGVycy5cbiAqL1xudmFyIGdlbmVyYXRlUGF0aCA9IGZ1bmN0aW9uIGdlbmVyYXRlUGF0aCgpIHtcbiAgdmFyIHBhdHRlcm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiL1wiO1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAocGF0dGVybiA9PT0gXCIvXCIpIHtcbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICB2YXIgZ2VuZXJhdG9yID0gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKTtcbiAgcmV0dXJuIGdlbmVyYXRvcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91J3JlIGN1cnJlbnRseSBvbjogXCIgKyAoXCJcXFwiXCIgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgXCJcXFwiXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcHV0ZVRvID0gZnVuY3Rpb24gY29tcHV0ZVRvKF9yZWYpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgdG8gPSBfcmVmLnRvO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHtcbiAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBwdXNoID0gdGhpcy5wcm9wcy5wdXNoO1xuXG4gICAgdmFyIHRvID0gdGhpcy5jb21wdXRlVG8odGhpcy5wcm9wcyk7XG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9SZWRpcmVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxudmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlBVU0hcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJSRVBMQUNFXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogXCJcIixcbiAgbG9jYXRpb246IFwiL1wiXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVBhdGg7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tIFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7XG4gICAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCB3aXRoUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsImltcG9ydCBfQnJvd3NlclJvdXRlciBmcm9tIFwiLi9Ccm93c2VyUm91dGVyXCI7XG5leHBvcnQgeyBfQnJvd3NlclJvdXRlciBhcyBCcm93c2VyUm91dGVyIH07XG5pbXBvcnQgX0hhc2hSb3V0ZXIgZnJvbSBcIi4vSGFzaFJvdXRlclwiO1xuZXhwb3J0IHsgX0hhc2hSb3V0ZXIgYXMgSGFzaFJvdXRlciB9O1xuaW1wb3J0IF9MaW5rIGZyb20gXCIuL0xpbmtcIjtcbmV4cG9ydCB7IF9MaW5rIGFzIExpbmsgfTtcbmltcG9ydCBfTWVtb3J5Um91dGVyIGZyb20gXCIuL01lbW9yeVJvdXRlclwiO1xuZXhwb3J0IHsgX01lbW9yeVJvdXRlciBhcyBNZW1vcnlSb3V0ZXIgfTtcbmltcG9ydCBfTmF2TGluayBmcm9tIFwiLi9OYXZMaW5rXCI7XG5leHBvcnQgeyBfTmF2TGluayBhcyBOYXZMaW5rIH07XG5pbXBvcnQgX1Byb21wdCBmcm9tIFwiLi9Qcm9tcHRcIjtcbmV4cG9ydCB7IF9Qcm9tcHQgYXMgUHJvbXB0IH07XG5pbXBvcnQgX1JlZGlyZWN0IGZyb20gXCIuL1JlZGlyZWN0XCI7XG5leHBvcnQgeyBfUmVkaXJlY3QgYXMgUmVkaXJlY3QgfTtcbmltcG9ydCBfUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmV4cG9ydCB7IF9Sb3V0ZSBhcyBSb3V0ZSB9O1xuaW1wb3J0IF9Sb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5leHBvcnQgeyBfUm91dGVyIGFzIFJvdXRlciB9O1xuaW1wb3J0IF9TdGF0aWNSb3V0ZXIgZnJvbSBcIi4vU3RhdGljUm91dGVyXCI7XG5leHBvcnQgeyBfU3RhdGljUm91dGVyIGFzIFN0YXRpY1JvdXRlciB9O1xuaW1wb3J0IF9Td2l0Y2ggZnJvbSBcIi4vU3dpdGNoXCI7XG5leHBvcnQgeyBfU3dpdGNoIGFzIFN3aXRjaCB9O1xuaW1wb3J0IF9nZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5leHBvcnQgeyBfZ2VuZXJhdGVQYXRoIGFzIGdlbmVyYXRlUGF0aCB9O1xuaW1wb3J0IF9tYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5leHBvcnQgeyBfbWF0Y2hQYXRoIGFzIG1hdGNoUGF0aCB9O1xuaW1wb3J0IF93aXRoUm91dGVyIGZyb20gXCIuL3dpdGhSb3V0ZXJcIjtcbmV4cG9ydCB7IF93aXRoUm91dGVyIGFzIHdpdGhSb3V0ZXIgfTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzKG9iaiwgZGVzY3MpIHsgZm9yICh2YXIga2V5IGluIGRlc2NzKSB7IHZhciBkZXNjID0gZGVzY3Nba2V5XTsgZGVzYy5jb25maWd1cmFibGUgPSBkZXNjLmVudW1lcmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIGRlc2Mud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIGRlc2MpOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgbm9vcCwga1RydWUsIGlzLCBsb2cgYXMgX2xvZywgY2hlY2ssIGRlZmVycmVkLCB1aWQgYXMgbmV4dEVmZmVjdElkLCBhcnJheSwgcmVtb3ZlLCBvYmplY3QsIFRBU0ssIENBTkNFTCwgU0VMRl9DQU5DRUxMQVRJT04sIG1ha2VJdGVyYXRvciwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcsIGRlcHJlY2F0ZSwgdXBkYXRlSW5jZW50aXZlIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBhc2FwLCBzdXNwZW5kLCBmbHVzaCB9IGZyb20gJy4vc2NoZWR1bGVyJztcbmltcG9ydCB7IGFzRWZmZWN0IH0gZnJvbSAnLi9pbyc7XG5pbXBvcnQgeyBzdGRDaGFubmVsIGFzIF9zdGRDaGFubmVsLCBldmVudENoYW5uZWwsIGlzRW5kIH0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7IGJ1ZmZlcnMgfSBmcm9tICcuL2J1ZmZlcnMnO1xuXG5leHBvcnQgdmFyIE5PVF9JVEVSQVRPUl9FUlJPUiA9ICdwcm9jIGZpcnN0IGFyZ3VtZW50IChTYWdhIGZ1bmN0aW9uIHJlc3VsdCkgbXVzdCBiZSBhbiBpdGVyYXRvcic7XG5cbmV4cG9ydCB2YXIgQ0hBTk5FTF9FTkQgPSB7XG4gIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ0BAcmVkdXgtc2FnYS9DSEFOTkVMX0VORCc7XG4gIH1cbn07XG5leHBvcnQgdmFyIFRBU0tfQ0FOQ0VMID0ge1xuICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdAQHJlZHV4LXNhZ2EvVEFTS19DQU5DRUwnO1xuICB9XG59O1xuXG52YXIgbWF0Y2hlcnMgPSB7XG4gIHdpbGRjYXJkOiBmdW5jdGlvbiB3aWxkY2FyZCgpIHtcbiAgICByZXR1cm4ga1RydWU7XG4gIH0sXG4gIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KHBhdHRlcm4pIHtcbiAgICByZXR1cm4gKHR5cGVvZiBwYXR0ZXJuID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXR0ZXJuKSkgPT09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICByZXR1cm4gaW5wdXQudHlwZSA9PT0gcGF0dGVybjtcbiAgICB9IDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICByZXR1cm4gaW5wdXQudHlwZSA9PT0gU3RyaW5nKHBhdHRlcm4pO1xuICAgIH07XG4gIH0sXG4gIGFycmF5OiBmdW5jdGlvbiBhcnJheShwYXR0ZXJucykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJucy5zb21lKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVyKHApKGlucHV0KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0sXG4gIHByZWRpY2F0ZTogZnVuY3Rpb24gcHJlZGljYXRlKF9wcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICByZXR1cm4gX3ByZWRpY2F0ZShpbnB1dCk7XG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWF0Y2hlcihwYXR0ZXJuKSB7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICByZXR1cm4gKHBhdHRlcm4gPT09ICcqJyA/IG1hdGNoZXJzLndpbGRjYXJkIDogaXMuYXJyYXkocGF0dGVybikgPyBtYXRjaGVycy5hcnJheSA6IGlzLnN0cmluZ2FibGVGdW5jKHBhdHRlcm4pID8gbWF0Y2hlcnMuZGVmYXVsdCA6IGlzLmZ1bmMocGF0dGVybikgPyBtYXRjaGVycy5wcmVkaWNhdGUgOiBtYXRjaGVycy5kZWZhdWx0KShwYXR0ZXJuKTtcbn1cblxuLyoqXG4gIFVzZWQgdG8gdHJhY2sgYSBwYXJlbnQgdGFzayBhbmQgaXRzIGZvcmtzXG4gIEluIHRoZSBuZXcgZm9yayBtb2RlbCwgZm9ya2VkIHRhc2tzIGFyZSBhdHRhY2hlZCBieSBkZWZhdWx0IHRvIHRoZWlyIHBhcmVudFxuICBXZSBtb2RlbCB0aGlzIHVzaW5nIHRoZSBjb25jZXB0IG9mIFBhcmVudCB0YXNrICYmIG1haW4gVGFza1xuICBtYWluIHRhc2sgaXMgdGhlIG1haW4gZmxvdyBvZiB0aGUgY3VycmVudCBHZW5lcmF0b3IsIHRoZSBwYXJlbnQgdGFza3MgaXMgdGhlXG4gIGFnZ3JlZ2F0aW9uIG9mIHRoZSBtYWluIHRhc2tzICsgYWxsIGl0cyBmb3JrZWQgdGFza3MuXG4gIFRodXMgdGhlIHdob2xlIG1vZGVsIHJlcHJlc2VudHMgYW4gZXhlY3V0aW9uIHRyZWUgd2l0aCBtdWx0aXBsZSBicmFuY2hlcyAodnMgdGhlXG4gIGxpbmVhciBleGVjdXRpb24gdHJlZSBpbiBzZXF1ZW50aWFsIChub24gcGFyYWxsZWwpIHByb2dyYW1taW5nKVxuXG4gIEEgcGFyZW50IHRhc2tzIGhhcyB0aGUgZm9sbG93aW5nIHNlbWFudGljc1xuICAtIEl0IGNvbXBsZXRlcyBpZiBhbGwgaXRzIGZvcmtzIGVpdGhlciBjb21wbGV0ZSBvciBhbGwgY2FuY2VsbGVkXG4gIC0gSWYgaXQncyBjYW5jZWxsZWQsIGFsbCBmb3JrcyBhcmUgY2FuY2VsbGVkIGFzIHdlbGxcbiAgLSBJdCBhYm9ydHMgaWYgYW55IHVuY2F1Z2h0IGVycm9yIGJ1YmJsZXMgdXAgZnJvbSBmb3Jrc1xuICAtIElmIGl0IGNvbXBsZXRlcywgdGhlIHJldHVybiB2YWx1ZSBpcyB0aGUgb25lIHJldHVybmVkIGJ5IHRoZSBtYWluIHRhc2tcbioqL1xuZnVuY3Rpb24gZm9ya1F1ZXVlKG5hbWUsIG1haW5UYXNrLCBjYikge1xuICB2YXIgdGFza3MgPSBbXSxcbiAgICAgIHJlc3VsdCA9IHZvaWQgMCxcbiAgICAgIGNvbXBsZXRlZCA9IGZhbHNlO1xuICBhZGRUYXNrKG1haW5UYXNrKTtcblxuICBmdW5jdGlvbiBhYm9ydChlcnIpIHtcbiAgICBjYW5jZWxBbGwoKTtcbiAgICBjYihlcnIsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkVGFzayh0YXNrKSB7XG4gICAgdGFza3MucHVzaCh0YXNrKTtcbiAgICB0YXNrLmNvbnQgPSBmdW5jdGlvbiAocmVzLCBpc0Vycikge1xuICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZSh0YXNrcywgdGFzayk7XG4gICAgICB0YXNrLmNvbnQgPSBub29wO1xuICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgIGFib3J0KHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFzayA9PT0gbWFpblRhc2spIHtcbiAgICAgICAgICByZXN1bHQgPSByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0YXNrcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgIGNiKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIHRhc2suY29udC5jYW5jZWwgPSB0YXNrLmNhbmNlbFxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQWxsKCkge1xuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICB0LmNvbnQgPSBub29wO1xuICAgICAgdC5jYW5jZWwoKTtcbiAgICB9KTtcbiAgICB0YXNrcyA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRUYXNrOiBhZGRUYXNrLFxuICAgIGNhbmNlbEFsbDogY2FuY2VsQWxsLFxuICAgIGFib3J0OiBhYm9ydCxcbiAgICBnZXRUYXNrczogZnVuY3Rpb24gZ2V0VGFza3MoKSB7XG4gICAgICByZXR1cm4gdGFza3M7XG4gICAgfSxcbiAgICB0YXNrTmFtZXM6IGZ1bmN0aW9uIHRhc2tOYW1lcygpIHtcbiAgICAgIHJldHVybiB0YXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQubmFtZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFza0l0ZXJhdG9yKF9yZWYpIHtcbiAgdmFyIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBmbiA9IF9yZWYuZm4sXG4gICAgICBhcmdzID0gX3JlZi5hcmdzO1xuXG4gIGlmIChpcy5pdGVyYXRvcihmbikpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICAvLyBjYXRjaCBzeW5jaHJvbm91cyBmYWlsdXJlczsgc2VlICMxNTIgYW5kICM0NDFcbiAgdmFyIHJlc3VsdCA9IHZvaWQgMCxcbiAgICAgIGVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIHJlc3VsdCA9IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVycjtcbiAgfVxuXG4gIC8vIGkuZS4gYSBnZW5lcmF0b3IgZnVuY3Rpb24gcmV0dXJucyBhbiBpdGVyYXRvclxuICBpZiAoaXMuaXRlcmF0b3IocmVzdWx0KSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBkbyBub3QgYnViYmxlIHVwIHN5bmNocm9ub3VzIGZhaWx1cmVzIGZvciBkZXRhY2hlZCBmb3Jrc1xuICAvLyBpbnN0ZWFkIGNyZWF0ZSBhIGZhaWxlZCB0YXNrLiBTZWUgIzE1MiBhbmQgIzQ0MVxuICByZXR1cm4gZXJyb3IgPyBtYWtlSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGVycm9yO1xuICB9KSA6IG1ha2VJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBjID0gdm9pZCAwO1xuICAgIHZhciBlZmYgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogcmVzdWx0IH07XG4gICAgdmFyIHJldCA9IGZ1bmN0aW9uIHJldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH07XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgaWYgKCFwYykge1xuICAgICAgICBwYyA9IHRydWU7XG4gICAgICAgIHJldHVybiBlZmY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmV0KGFyZyk7XG4gICAgICB9XG4gICAgfTtcbiAgfSgpKTtcbn1cblxudmFyIHdyYXBIZWxwZXIgPSBmdW5jdGlvbiB3cmFwSGVscGVyKGhlbHBlcikge1xuICByZXR1cm4geyBmbjogaGVscGVyIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9jKGl0ZXJhdG9yKSB7XG4gIHZhciBzdWJzY3JpYmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbm9vcDtcbiAgfTtcbiAgdmFyIGRpc3BhdGNoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBub29wO1xuICB2YXIgZ2V0U3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5vb3A7XG4gIHZhciBwYXJlbnRDb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7fTtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IHt9O1xuICB2YXIgcGFyZW50RWZmZWN0SWQgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IDA7XG4gIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiAnYW5vbnltb3VzJztcbiAgdmFyIGNvbnQgPSBhcmd1bWVudHNbOF07XG5cbiAgY2hlY2soaXRlcmF0b3IsIGlzLml0ZXJhdG9yLCBOT1RfSVRFUkFUT1JfRVJST1IpO1xuXG4gIHZhciBlZmZlY3RzU3RyaW5nID0gJ1suLi5lZmZlY3RzXSc7XG4gIHZhciBydW5QYXJhbGxlbEVmZmVjdCA9IGRlcHJlY2F0ZShydW5BbGxFZmZlY3QsIHVwZGF0ZUluY2VudGl2ZShlZmZlY3RzU3RyaW5nLCAnYWxsKCcgKyBlZmZlY3RzU3RyaW5nICsgJyknKSk7XG5cbiAgdmFyIHNhZ2FNb25pdG9yID0gb3B0aW9ucy5zYWdhTW9uaXRvcixcbiAgICAgIGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyLFxuICAgICAgb25FcnJvciA9IG9wdGlvbnMub25FcnJvcjtcblxuICB2YXIgbG9nID0gbG9nZ2VyIHx8IF9sb2c7XG4gIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uIGxvZ0Vycm9yKGVycikge1xuICAgIHZhciBtZXNzYWdlID0gZXJyLnNhZ2FTdGFjaztcblxuICAgIGlmICghbWVzc2FnZSAmJiBlcnIuc3RhY2spIHtcbiAgICAgIG1lc3NhZ2UgPSBlcnIuc3RhY2suc3BsaXQoJ1xcbicpWzBdLmluZGV4T2YoZXJyLm1lc3NhZ2UpICE9PSAtMSA/IGVyci5zdGFjayA6ICdFcnJvcjogJyArIGVyci5tZXNzYWdlICsgJ1xcbicgKyBlcnIuc3RhY2s7XG4gICAgfVxuXG4gICAgbG9nKCdlcnJvcicsICd1bmNhdWdodCBhdCAnICsgbmFtZSwgbWVzc2FnZSB8fCBlcnIubWVzc2FnZSB8fCBlcnIpO1xuICB9O1xuICB2YXIgc3RkQ2hhbm5lbCA9IF9zdGRDaGFubmVsKHN1YnNjcmliZSk7XG4gIHZhciB0YXNrQ29udGV4dCA9IE9iamVjdC5jcmVhdGUocGFyZW50Q29udGV4dCk7XG4gIC8qKlxuICAgIFRyYWNrcyB0aGUgY3VycmVudCBlZmZlY3QgY2FuY2VsbGF0aW9uXG4gICAgRWFjaCB0aW1lIHRoZSBnZW5lcmF0b3IgcHJvZ3Jlc3Nlcy4gY2FsbGluZyBydW5FZmZlY3Qgd2lsbCBzZXQgYSBuZXcgdmFsdWVcbiAgICBvbiBpdC4gSXQgYWxsb3dzIHByb3BhZ2F0aW5nIGNhbmNlbGxhdGlvbiB0byBjaGlsZCBlZmZlY3RzXG4gICoqL1xuICBuZXh0LmNhbmNlbCA9IG5vb3A7XG5cbiAgLyoqXG4gICAgQ3JlYXRlcyBhIG5ldyB0YXNrIGRlc2NyaXB0b3IgZm9yIHRoaXMgZ2VuZXJhdG9yLCBXZSdsbCBhbHNvIGNyZWF0ZSBhIG1haW4gdGFza1xuICAgIHRvIHRyYWNrIHRoZSBtYWluIGZsb3cgKGJlc2lkZXMgb3RoZXIgZm9ya2VkIHRhc2tzKVxuICAqKi9cbiAgdmFyIHRhc2sgPSBuZXdUYXNrKHBhcmVudEVmZmVjdElkLCBuYW1lLCBpdGVyYXRvciwgY29udCk7XG4gIHZhciBtYWluVGFzayA9IHsgbmFtZTogbmFtZSwgY2FuY2VsOiBjYW5jZWxNYWluLCBpc1J1bm5pbmc6IHRydWUgfTtcbiAgdmFyIHRhc2tRdWV1ZSA9IGZvcmtRdWV1ZShuYW1lLCBtYWluVGFzaywgZW5kKTtcblxuICAvKipcbiAgICBjYW5jZWxsYXRpb24gb2YgdGhlIG1haW4gdGFzay4gV2UnbGwgc2ltcGx5IHJlc3VtZSB0aGUgR2VuZXJhdG9yIHdpdGggYSBDYW5jZWxcbiAgKiovXG4gIGZ1bmN0aW9uIGNhbmNlbE1haW4oKSB7XG4gICAgaWYgKG1haW5UYXNrLmlzUnVubmluZyAmJiAhbWFpblRhc2suaXNDYW5jZWxsZWQpIHtcbiAgICAgIG1haW5UYXNrLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgIG5leHQoVEFTS19DQU5DRUwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgIFRoaXMgbWF5IGJlIGNhbGxlZCBieSBhIHBhcmVudCBnZW5lcmF0b3IgdG8gdHJpZ2dlci9wcm9wYWdhdGUgY2FuY2VsbGF0aW9uXG4gICAgY2FuY2VsIGFsbCBwZW5kaW5nIHRhc2tzIChpbmNsdWRpbmcgdGhlIG1haW4gdGFzayksIHRoZW4gZW5kIHRoZSBjdXJyZW50IHRhc2suXG4gICAgIENhbmNlbGxhdGlvbiBwcm9wYWdhdGVzIGRvd24gdG8gdGhlIHdob2xlIGV4ZWN1dGlvbiB0cmVlIGhvbGRlZCBieSB0aGlzIFBhcmVudCB0YXNrXG4gICAgSXQncyBhbHNvIHByb3BhZ2F0ZWQgdG8gYWxsIGpvaW5lcnMgb2YgdGhpcyB0YXNrIGFuZCB0aGVpciBleGVjdXRpb24gdHJlZS9qb2luZXJzXG4gICAgIENhbmNlbGxhdGlvbiBpcyBub29wIGZvciB0ZXJtaW5hdGVkL0NhbmNlbGxlZCB0YXNrcyB0YXNrc1xuICAqKi9cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIC8qKlxuICAgICAgV2UgbmVlZCB0byBjaGVjayBib3RoIFJ1bm5pbmcgYW5kIENhbmNlbGxlZCBzdGF0dXNcbiAgICAgIFRhc2tzIGNhbiBiZSBDYW5jZWxsZWQgYnV0IHN0aWxsIFJ1bm5pbmdcbiAgICAqKi9cbiAgICBpZiAoaXRlcmF0b3IuX2lzUnVubmluZyAmJiAhaXRlcmF0b3IuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICBpdGVyYXRvci5faXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgdGFza1F1ZXVlLmNhbmNlbEFsbCgpO1xuICAgICAgLyoqXG4gICAgICAgIEVuZGluZyB3aXRoIGEgTmV2ZXIgcmVzdWx0IHdpbGwgcHJvcGFnYXRlIHRoZSBDYW5jZWxsYXRpb24gdG8gYWxsIGpvaW5lcnNcbiAgICAgICoqL1xuICAgICAgZW5kKFRBU0tfQ0FOQ0VMKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAgYXR0YWNoZXMgY2FuY2VsbGF0aW9uIGxvZ2ljIHRvIHRoaXMgdGFzaydzIGNvbnRpbnVhdGlvblxuICAgIHRoaXMgd2lsbCBwZXJtaXQgY2FuY2VsbGF0aW9uIHRvIHByb3BhZ2F0ZSBkb3duIHRoZSBjYWxsIGNoYWluXG4gICoqL1xuICBjb250ICYmIChjb250LmNhbmNlbCA9IGNhbmNlbCk7XG5cbiAgLy8gdHJhY2tzIHRoZSBydW5uaW5nIHN0YXR1c1xuICBpdGVyYXRvci5faXNSdW5uaW5nID0gdHJ1ZTtcblxuICAvLyBraWNrcyB1cCB0aGUgZ2VuZXJhdG9yXG4gIG5leHQoKTtcblxuICAvLyB0aGVuIHJldHVybiB0aGUgdGFzayBkZXNjcmlwdG9yIHRvIHRoZSBjYWxsZXJcbiAgcmV0dXJuIHRhc2s7XG5cbiAgLyoqXG4gICAgVGhpcyBpcyB0aGUgZ2VuZXJhdG9yIGRyaXZlclxuICAgIEl0J3MgYSByZWN1cnNpdmUgYXN5bmMvY29udGludWF0aW9uIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGl0c2VsZlxuICAgIHVudGlsIHRoZSBnZW5lcmF0b3IgdGVybWluYXRlcyBvciB0aHJvd3NcbiAgKiovXG4gIGZ1bmN0aW9uIG5leHQoYXJnLCBpc0Vycikge1xuICAgIC8vIFByZXZlbnRpdmUgbWVhc3VyZS4gSWYgd2UgZW5kIHVwIGhlcmUsIHRoZW4gdGhlcmUgaXMgcmVhbGx5IHNvbWV0aGluZyB3cm9uZ1xuICAgIGlmICghbWFpblRhc2suaXNSdW5uaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyeWluZyB0byByZXN1bWUgYW4gYWxyZWFkeSBmaW5pc2hlZCBnZW5lcmF0b3InKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgIGlmIChpc0Vycikge1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci50aHJvdyhhcmcpO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPT09IFRBU0tfQ0FOQ0VMKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgIGdldHRpbmcgVEFTS19DQU5DRUwgYXV0b21hdGljYWxseSBjYW5jZWxzIHRoZSBtYWluIHRhc2tcbiAgICAgICAgICBXZSBjYW4gZ2V0IHRoaXMgdmFsdWUgaGVyZVxuICAgICAgICAgICAtIEJ5IGNhbmNlbGxpbmcgdGhlIHBhcmVudCB0YXNrIG1hbnVhbGx5XG4gICAgICAgICAgLSBCeSBqb2luaW5nIGEgQ2FuY2VsbGVkIHRhc2tcbiAgICAgICAgKiovXG4gICAgICAgIG1haW5UYXNrLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAgQ2FuY2VscyB0aGUgY3VycmVudCBlZmZlY3Q7IHRoaXMgd2lsbCBwcm9wYWdhdGUgdGhlIGNhbmNlbGxhdGlvbiBkb3duIHRvIGFueSBjYWxsZWQgdGFza3NcbiAgICAgICAgKiovXG4gICAgICAgIG5leHQuY2FuY2VsKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgIElmIHRoaXMgR2VuZXJhdG9yIGhhcyBhIGByZXR1cm5gIG1ldGhvZCB0aGVuIGludm9rZXMgaXRcbiAgICAgICAgICBUaGlzIHdpbGwganVtcCB0byB0aGUgZmluYWxseSBibG9ja1xuICAgICAgICAqKi9cbiAgICAgICAgcmVzdWx0ID0gaXMuZnVuYyhpdGVyYXRvci5yZXR1cm4pID8gaXRlcmF0b3IucmV0dXJuKFRBU0tfQ0FOQ0VMKSA6IHsgZG9uZTogdHJ1ZSwgdmFsdWU6IFRBU0tfQ0FOQ0VMIH07XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PT0gQ0hBTk5FTF9FTkQpIHtcbiAgICAgICAgLy8gV2UgZ2V0IENIQU5ORUxfRU5EIGJ5IHRha2luZyBmcm9tIGEgY2hhbm5lbCB0aGF0IGVuZGVkIHVzaW5nIGB0YWtlYCAoYW5kIG5vdCBgdGFrZW1gIHVzZWQgdG8gdHJhcCBFbmQgb2YgY2hhbm5lbHMpXG4gICAgICAgIHJlc3VsdCA9IGlzLmZ1bmMoaXRlcmF0b3IucmV0dXJuKSA/IGl0ZXJhdG9yLnJldHVybigpIDogeyBkb25lOiB0cnVlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KGFyZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcnVuRWZmZWN0KHJlc3VsdC52YWx1ZSwgcGFyZW50RWZmZWN0SWQsICcnLCBuZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgIFRoaXMgR2VuZXJhdG9yIGhhcyBlbmRlZCwgdGVybWluYXRlIHRoZSBtYWluIHRhc2sgYW5kIG5vdGlmeSB0aGUgZm9yayBxdWV1ZVxuICAgICAgICAqKi9cbiAgICAgICAgbWFpblRhc2suaXNNYWluUnVubmluZyA9IGZhbHNlO1xuICAgICAgICBtYWluVGFzay5jb250ICYmIG1haW5UYXNrLmNvbnQocmVzdWx0LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKG1haW5UYXNrLmlzQ2FuY2VsbGVkKSB7XG4gICAgICAgIGxvZ0Vycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICAgIG1haW5UYXNrLmlzTWFpblJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgIG1haW5UYXNrLmNvbnQoZXJyb3IsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZChyZXN1bHQsIGlzRXJyKSB7XG4gICAgaXRlcmF0b3IuX2lzUnVubmluZyA9IGZhbHNlO1xuICAgIHN0ZENoYW5uZWwuY2xvc2UoKTtcbiAgICBpZiAoIWlzRXJyKSB7XG4gICAgICBpdGVyYXRvci5fcmVzdWx0ID0gcmVzdWx0O1xuICAgICAgaXRlcmF0b3IuX2RlZmVycmVkRW5kICYmIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCAnc2FnYVN0YWNrJywge1xuICAgICAgICAgIHZhbHVlOiAnYXQgJyArIG5hbWUgKyAnIFxcbiAnICsgKHJlc3VsdC5zYWdhU3RhY2sgfHwgcmVzdWx0LnN0YWNrKSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRhc2suY29udCkge1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IgJiYgb25FcnJvcikge1xuICAgICAgICAgIG9uRXJyb3IocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dFcnJvcihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpdGVyYXRvci5fZXJyb3IgPSByZXN1bHQ7XG4gICAgICBpdGVyYXRvci5faXNBYm9ydGVkID0gdHJ1ZTtcbiAgICAgIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCAmJiBpdGVyYXRvci5fZGVmZXJyZWRFbmQucmVqZWN0KHJlc3VsdCk7XG4gICAgfVxuICAgIHRhc2suY29udCAmJiB0YXNrLmNvbnQocmVzdWx0LCBpc0Vycik7XG4gICAgdGFzay5qb2luZXJzLmZvckVhY2goZnVuY3Rpb24gKGopIHtcbiAgICAgIHJldHVybiBqLmNiKHJlc3VsdCwgaXNFcnIpO1xuICAgIH0pO1xuICAgIHRhc2suam9pbmVycyA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBydW5FZmZlY3QoZWZmZWN0LCBwYXJlbnRFZmZlY3RJZCkge1xuICAgIHZhciBsYWJlbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG4gICAgdmFyIGNiID0gYXJndW1lbnRzWzNdO1xuXG4gICAgdmFyIGVmZmVjdElkID0gbmV4dEVmZmVjdElkKCk7XG4gICAgc2FnYU1vbml0b3IgJiYgc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkKHsgZWZmZWN0SWQ6IGVmZmVjdElkLCBwYXJlbnRFZmZlY3RJZDogcGFyZW50RWZmZWN0SWQsIGxhYmVsOiBsYWJlbCwgZWZmZWN0OiBlZmZlY3QgfSk7XG5cbiAgICAvKipcbiAgICAgIGNvbXBsZXRpb24gY2FsbGJhY2sgYW5kIGNhbmNlbCBjYWxsYmFjayBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlXG4gICAgICBXZSBjYW4ndCBjYW5jZWwgYW4gYWxyZWFkeSBjb21wbGV0ZWQgZWZmZWN0XG4gICAgICBBbmQgV2UgY2FuJ3QgY29tcGxldGUgYW4gYWxyZWFkeSBjYW5jZWxsZWQgZWZmZWN0SWRcbiAgICAqKi9cbiAgICB2YXIgZWZmZWN0U2V0dGxlZCA9IHZvaWQgMDtcblxuICAgIC8vIENvbXBsZXRpb24gY2FsbGJhY2sgcGFzc2VkIHRvIHRoZSBhcHByb3ByaWF0ZSBlZmZlY3QgcnVubmVyXG4gICAgZnVuY3Rpb24gY3VyckNiKHJlcywgaXNFcnIpIHtcbiAgICAgIGlmIChlZmZlY3RTZXR0bGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0U2V0dGxlZCA9IHRydWU7XG4gICAgICBjYi5jYW5jZWwgPSBub29wOyAvLyBkZWZlbnNpdmUgbWVhc3VyZVxuICAgICAgaWYgKHNhZ2FNb25pdG9yKSB7XG4gICAgICAgIGlzRXJyID8gc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQoZWZmZWN0SWQsIHJlcykgOiBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZChlZmZlY3RJZCwgcmVzKTtcbiAgICAgIH1cbiAgICAgIGNiKHJlcywgaXNFcnIpO1xuICAgIH1cbiAgICAvLyB0cmFja3MgZG93biB0aGUgY3VycmVudCBjYW5jZWxcbiAgICBjdXJyQ2IuY2FuY2VsID0gbm9vcDtcblxuICAgIC8vIHNldHVwIGNhbmNlbGxhdGlvbiBsb2dpYyBvbiB0aGUgcGFyZW50IGNiXG4gICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcHJldmVudHMgY2FuY2VsbGluZyBhbiBhbHJlYWR5IGNvbXBsZXRlZCBlZmZlY3RcbiAgICAgIGlmIChlZmZlY3RTZXR0bGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0U2V0dGxlZCA9IHRydWU7XG4gICAgICAvKipcbiAgICAgICAgcHJvcGFnYXRlcyBjYW5jZWwgZG93bndhcmRcbiAgICAgICAgY2F0Y2ggdW5jYXVnaHQgY2FuY2VsbGF0aW9ucyBlcnJvcnM7IHNpbmNlIHdlIGNhbiBubyBsb25nZXIgY2FsbCB0aGUgY29tcGxldGlvblxuICAgICAgICBjYWxsYmFjaywgbG9nIGVycm9ycyByYWlzZWQgZHVyaW5nIGNhbmNlbGxhdGlvbnMgaW50byB0aGUgY29uc29sZVxuICAgICAgKiovXG4gICAgICB0cnkge1xuICAgICAgICBjdXJyQ2IuY2FuY2VsKCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICAgIGN1cnJDYi5jYW5jZWwgPSBub29wOyAvLyBkZWZlbnNpdmUgbWVhc3VyZVxuXG4gICAgICBzYWdhTW9uaXRvciAmJiBzYWdhTW9uaXRvci5lZmZlY3RDYW5jZWxsZWQoZWZmZWN0SWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgIGVhY2ggZWZmZWN0IHJ1bm5lciBtdXN0IGF0dGFjaCBpdHMgb3duIGxvZ2ljIG9mIGNhbmNlbGxhdGlvbiB0byB0aGUgcHJvdmlkZWQgY2FsbGJhY2tcbiAgICAgIGl0IGFsbG93cyB0aGlzIGdlbmVyYXRvciB0byBwcm9wYWdhdGUgY2FuY2VsbGF0aW9uIGRvd253YXJkLlxuICAgICAgIEFUVEVOVElPTiEgZWZmZWN0IHJ1bm5lcnMgbXVzdCBzZXR1cCB0aGUgY2FuY2VsIGxvZ2ljIGJ5IHNldHRpbmcgY2IuY2FuY2VsID0gW2NhbmNlbE1ldGhvZF1cbiAgICAgIEFuZCB0aGUgc2V0dXAgbXVzdCBvY2N1ciBiZWZvcmUgY2FsbGluZyB0aGUgY2FsbGJhY2tcbiAgICAgICBUaGlzIGlzIGEgc29ydCBvZiBpbnZlcnNpb24gb2YgY29udHJvbDogY2FsbGVkIGFzeW5jIGZ1bmN0aW9ucyBhcmUgcmVzcG9uc2libGVcbiAgICAgIGZvciBjb21wbGV0aW5nIHRoZSBmbG93IGJ5IGNhbGxpbmcgdGhlIHByb3ZpZGVkIGNvbnRpbnVhdGlvbjsgd2hpbGUgY2FsbGVyIGZ1bmN0aW9uc1xuICAgICAgYXJlIHJlc3BvbnNpYmxlIGZvciBhYm9ydGluZyB0aGUgY3VycmVudCBmbG93IGJ5IGNhbGxpbmcgdGhlIGF0dGFjaGVkIGNhbmNlbCBmdW5jdGlvblxuICAgICAgIExpYnJhcnkgdXNlcnMgY2FuIGF0dGFjaCB0aGVpciBvd24gY2FuY2VsbGF0aW9uIGxvZ2ljIHRvIHByb21pc2VzIGJ5IGRlZmluaW5nIGFcbiAgICAgIHByb21pc2VbQ0FOQ0VMXSBtZXRob2QgaW4gdGhlaXIgcmV0dXJuZWQgcHJvbWlzZXNcbiAgICAgIEFUVEVOVElPTiEgY2FsbGluZyBjYW5jZWwgbXVzdCBoYXZlIG5vIGVmZmVjdCBvbiBhbiBhbHJlYWR5IGNvbXBsZXRlZCBvciBjYW5jZWxsZWQgZWZmZWN0XG4gICAgKiovXG4gICAgdmFyIGRhdGEgPSB2b2lkIDA7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIChcbiAgICAgIC8vIE5vbiBkZWNsYXJhdGl2ZSBlZmZlY3RcbiAgICAgIGlzLnByb21pc2UoZWZmZWN0KSA/IHJlc29sdmVQcm9taXNlKGVmZmVjdCwgY3VyckNiKSA6IGlzLmhlbHBlcihlZmZlY3QpID8gcnVuRm9ya0VmZmVjdCh3cmFwSGVscGVyKGVmZmVjdCksIGVmZmVjdElkLCBjdXJyQ2IpIDogaXMuaXRlcmF0b3IoZWZmZWN0KSA/IHJlc29sdmVJdGVyYXRvcihlZmZlY3QsIGVmZmVjdElkLCBuYW1lLCBjdXJyQ2IpXG5cbiAgICAgIC8vIGRlY2xhcmF0aXZlIGVmZmVjdHNcbiAgICAgIDogaXMuYXJyYXkoZWZmZWN0KSA/IHJ1blBhcmFsbGVsRWZmZWN0KGVmZmVjdCwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnRha2UoZWZmZWN0KSkgPyBydW5UYWtlRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnB1dChlZmZlY3QpKSA/IHJ1blB1dEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5hbGwoZWZmZWN0KSkgPyBydW5BbGxFZmZlY3QoZGF0YSwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnJhY2UoZWZmZWN0KSkgPyBydW5SYWNlRWZmZWN0KGRhdGEsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jYWxsKGVmZmVjdCkpID8gcnVuQ2FsbEVmZmVjdChkYXRhLCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuY3BzKGVmZmVjdCkpID8gcnVuQ1BTRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmZvcmsoZWZmZWN0KSkgPyBydW5Gb3JrRWZmZWN0KGRhdGEsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5qb2luKGVmZmVjdCkpID8gcnVuSm9pbkVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jYW5jZWwoZWZmZWN0KSkgPyBydW5DYW5jZWxFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3Quc2VsZWN0KGVmZmVjdCkpID8gcnVuU2VsZWN0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmFjdGlvbkNoYW5uZWwoZWZmZWN0KSkgPyBydW5DaGFubmVsRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmZsdXNoKGVmZmVjdCkpID8gcnVuRmx1c2hFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuY2FuY2VsbGVkKGVmZmVjdCkpID8gcnVuQ2FuY2VsbGVkRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmdldENvbnRleHQoZWZmZWN0KSkgPyBydW5HZXRDb250ZXh0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnNldENvbnRleHQoZWZmZWN0KSkgPyBydW5TZXRDb250ZXh0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAvKiBhbnl0aGluZyBlbHNlIHJldHVybmVkIGFzIGlzICovY3VyckNiKGVmZmVjdClcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgY2IpIHtcbiAgICB2YXIgY2FuY2VsUHJvbWlzZSA9IHByb21pc2VbQ0FOQ0VMXTtcbiAgICBpZiAoaXMuZnVuYyhjYW5jZWxQcm9taXNlKSkge1xuICAgICAgY2IuY2FuY2VsID0gY2FuY2VsUHJvbWlzZTtcbiAgICB9IGVsc2UgaWYgKGlzLmZ1bmMocHJvbWlzZS5hYm9ydCkpIHtcbiAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UuYWJvcnQoKTtcbiAgICAgIH07XG4gICAgICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBmb3IgdGhlIGZldGNoIEFQSSwgd2hlbmV2ZXIgdGhleSBnZXQgYXJvdW5kIHRvXG4gICAgICAvLyBhZGRpbmcgY2FuY2VsIHN1cHBvcnRcbiAgICB9XG4gICAgcHJvbWlzZS50aGVuKGNiLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjYihlcnJvciwgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlSXRlcmF0b3IoaXRlcmF0b3IsIGVmZmVjdElkLCBuYW1lLCBjYikge1xuICAgIHByb2MoaXRlcmF0b3IsIHN1YnNjcmliZSwgZGlzcGF0Y2gsIGdldFN0YXRlLCB0YXNrQ29udGV4dCwgb3B0aW9ucywgZWZmZWN0SWQsIG5hbWUsIGNiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blRha2VFZmZlY3QoX3JlZjIsIGNiKSB7XG4gICAgdmFyIGNoYW5uZWwgPSBfcmVmMi5jaGFubmVsLFxuICAgICAgICBwYXR0ZXJuID0gX3JlZjIucGF0dGVybixcbiAgICAgICAgbWF5YmUgPSBfcmVmMi5tYXliZTtcblxuICAgIGNoYW5uZWwgPSBjaGFubmVsIHx8IHN0ZENoYW5uZWw7XG4gICAgdmFyIHRha2VDYiA9IGZ1bmN0aW9uIHRha2VDYihpbnApIHtcbiAgICAgIHJldHVybiBpbnAgaW5zdGFuY2VvZiBFcnJvciA/IGNiKGlucCwgdHJ1ZSkgOiBpc0VuZChpbnApICYmICFtYXliZSA/IGNiKENIQU5ORUxfRU5EKSA6IGNiKGlucCk7XG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgY2hhbm5lbC50YWtlKHRha2VDYiwgbWF0Y2hlcihwYXR0ZXJuKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gY2IoZXJyLCB0cnVlKTtcbiAgICB9XG4gICAgY2IuY2FuY2VsID0gdGFrZUNiLmNhbmNlbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blB1dEVmZmVjdChfcmVmMywgY2IpIHtcbiAgICB2YXIgY2hhbm5lbCA9IF9yZWYzLmNoYW5uZWwsXG4gICAgICAgIGFjdGlvbiA9IF9yZWYzLmFjdGlvbixcbiAgICAgICAgcmVzb2x2ZSA9IF9yZWYzLnJlc29sdmU7XG5cbiAgICAvKipcbiAgICAgIFNjaGVkdWxlIHRoZSBwdXQgaW4gY2FzZSBhbm90aGVyIHNhZ2EgaXMgaG9sZGluZyBhIGxvY2suXG4gICAgICBUaGUgcHV0IHdpbGwgYmUgZXhlY3V0ZWQgYXRvbWljYWxseS4gaWUgbmVzdGVkIHB1dHMgd2lsbCBleGVjdXRlIGFmdGVyXG4gICAgICB0aGlzIHB1dCBoYXMgdGVybWluYXRlZC5cbiAgICAqKi9cbiAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSAoY2hhbm5lbCA/IGNoYW5uZWwucHV0IDogZGlzcGF0Y2gpKGFjdGlvbik7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgY2hhbm5lbCBvciBgcHV0LnJlc29sdmVgIHdhcyB1c2VkIHRoZW4gYnViYmxlIHVwIHRoZSBlcnJvci5cbiAgICAgICAgaWYgKGNoYW5uZWwgfHwgcmVzb2x2ZSkgcmV0dXJuIGNiKGVycm9yLCB0cnVlKTtcbiAgICAgICAgbG9nRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzb2x2ZSAmJiBpcy5wcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzdWx0LCBjYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2IocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBQdXQgZWZmZWN0cyBhcmUgbm9uIGNhbmNlbGxhYmxlc1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ2FsbEVmZmVjdChfcmVmNCwgZWZmZWN0SWQsIGNiKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfcmVmNC5jb250ZXh0LFxuICAgICAgICBmbiA9IF9yZWY0LmZuLFxuICAgICAgICBhcmdzID0gX3JlZjQuYXJncztcblxuICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gY2IoZXJyb3IsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gaXMucHJvbWlzZShyZXN1bHQpID8gcmVzb2x2ZVByb21pc2UocmVzdWx0LCBjYikgOiBpcy5pdGVyYXRvcihyZXN1bHQpID8gcmVzb2x2ZUl0ZXJhdG9yKHJlc3VsdCwgZWZmZWN0SWQsIGZuLm5hbWUsIGNiKSA6IGNiKHJlc3VsdCk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5DUFNFZmZlY3QoX3JlZjUsIGNiKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfcmVmNS5jb250ZXh0LFxuICAgICAgICBmbiA9IF9yZWY1LmZuLFxuICAgICAgICBhcmdzID0gX3JlZjUuYXJncztcblxuICAgIC8vIENQUyAoaWUgbm9kZSBzdHlsZSBmdW5jdGlvbnMpIGNhbiBkZWZpbmUgdGhlaXIgb3duIGNhbmNlbGxhdGlvbiBsb2dpY1xuICAgIC8vIGJ5IHNldHRpbmcgY2FuY2VsIGZpZWxkIG9uIHRoZSBjYlxuXG4gICAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyXG4gICAgdHJ5IHtcbiAgICAgIHZhciBjcHNDYiA9IGZ1bmN0aW9uIGNwc0NiKGVyciwgcmVzKSB7XG4gICAgICAgIHJldHVybiBpcy51bmRlZihlcnIpID8gY2IocmVzKSA6IGNiKGVyciwgdHJ1ZSk7XG4gICAgICB9O1xuICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoY3BzQ2IpKTtcbiAgICAgIGlmIChjcHNDYi5jYW5jZWwpIHtcbiAgICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjcHNDYi5jYW5jZWwoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGNiKGVycm9yLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5Gb3JrRWZmZWN0KF9yZWY2LCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIgY29udGV4dCA9IF9yZWY2LmNvbnRleHQsXG4gICAgICAgIGZuID0gX3JlZjYuZm4sXG4gICAgICAgIGFyZ3MgPSBfcmVmNi5hcmdzLFxuICAgICAgICBkZXRhY2hlZCA9IF9yZWY2LmRldGFjaGVkO1xuXG4gICAgdmFyIHRhc2tJdGVyYXRvciA9IGNyZWF0ZVRhc2tJdGVyYXRvcih7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiwgYXJnczogYXJncyB9KTtcblxuICAgIHRyeSB7XG4gICAgICBzdXNwZW5kKCk7XG4gICAgICB2YXIgX3Rhc2sgPSBwcm9jKHRhc2tJdGVyYXRvciwgc3Vic2NyaWJlLCBkaXNwYXRjaCwgZ2V0U3RhdGUsIHRhc2tDb250ZXh0LCBvcHRpb25zLCBlZmZlY3RJZCwgZm4ubmFtZSwgZGV0YWNoZWQgPyBudWxsIDogbm9vcCk7XG5cbiAgICAgIGlmIChkZXRhY2hlZCkge1xuICAgICAgICBjYihfdGFzayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFza0l0ZXJhdG9yLl9pc1J1bm5pbmcpIHtcbiAgICAgICAgICB0YXNrUXVldWUuYWRkVGFzayhfdGFzayk7XG4gICAgICAgICAgY2IoX3Rhc2spO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tJdGVyYXRvci5fZXJyb3IpIHtcbiAgICAgICAgICB0YXNrUXVldWUuYWJvcnQodGFza0l0ZXJhdG9yLl9lcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IoX3Rhc2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGZsdXNoKCk7XG4gICAgfVxuICAgIC8vIEZvcmsgZWZmZWN0cyBhcmUgbm9uIGNhbmNlbGxhYmxlc1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuSm9pbkVmZmVjdCh0LCBjYikge1xuICAgIGlmICh0LmlzUnVubmluZygpKSB7XG4gICAgICB2YXIgam9pbmVyID0geyB0YXNrOiB0YXNrLCBjYjogY2IgfTtcbiAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZSh0LmpvaW5lcnMsIGpvaW5lcik7XG4gICAgICB9O1xuICAgICAgdC5qb2luZXJzLnB1c2goam9pbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdC5pc0Fib3J0ZWQoKSA/IGNiKHQuZXJyb3IoKSwgdHJ1ZSkgOiBjYih0LnJlc3VsdCgpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5DYW5jZWxFZmZlY3QodGFza1RvQ2FuY2VsLCBjYikge1xuICAgIGlmICh0YXNrVG9DYW5jZWwgPT09IFNFTEZfQ0FOQ0VMTEFUSU9OKSB7XG4gICAgICB0YXNrVG9DYW5jZWwgPSB0YXNrO1xuICAgIH1cbiAgICBpZiAodGFza1RvQ2FuY2VsLmlzUnVubmluZygpKSB7XG4gICAgICB0YXNrVG9DYW5jZWwuY2FuY2VsKCk7XG4gICAgfVxuICAgIGNiKCk7XG4gICAgLy8gY2FuY2VsIGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkFsbEVmZmVjdChlZmZlY3RzLCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVmZmVjdHMpO1xuXG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNiKGlzLmFycmF5KGVmZmVjdHMpID8gW10gOiB7fSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbXBsZXRlZENvdW50ID0gMDtcbiAgICB2YXIgY29tcGxldGVkID0gdm9pZCAwO1xuICAgIHZhciByZXN1bHRzID0ge307XG4gICAgdmFyIGNoaWxkQ2JzID0ge307XG5cbiAgICBmdW5jdGlvbiBjaGVja0VmZmVjdEVuZCgpIHtcbiAgICAgIGlmIChjb21wbGV0ZWRDb3VudCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgY2IoaXMuYXJyYXkoZWZmZWN0cykgPyBhcnJheS5mcm9tKF9leHRlbmRzKHt9LCByZXN1bHRzLCB7IGxlbmd0aDoga2V5cy5sZW5ndGggfSkpIDogcmVzdWx0cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBjaENiQXRLZXkgPSBmdW5jdGlvbiBjaENiQXRLZXkocmVzLCBpc0Vycikge1xuICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0VyciB8fCBpc0VuZChyZXMpIHx8IHJlcyA9PT0gQ0hBTk5FTF9FTkQgfHwgcmVzID09PSBUQVNLX0NBTkNFTCkge1xuICAgICAgICAgIGNiLmNhbmNlbCgpO1xuICAgICAgICAgIGNiKHJlcywgaXNFcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdHNba2V5XSA9IHJlcztcbiAgICAgICAgICBjb21wbGV0ZWRDb3VudCsrO1xuICAgICAgICAgIGNoZWNrRWZmZWN0RW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaENiQXRLZXkuY2FuY2VsID0gbm9vcDtcbiAgICAgIGNoaWxkQ2JzW2tleV0gPSBjaENiQXRLZXk7XG4gICAgfSk7XG5cbiAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNvbXBsZXRlZCkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBjaGlsZENic1trZXldLmNhbmNlbCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBydW5FZmZlY3QoZWZmZWN0c1trZXldLCBlZmZlY3RJZCwga2V5LCBjaGlsZENic1trZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blJhY2VFZmZlY3QoZWZmZWN0cywgZWZmZWN0SWQsIGNiKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IHZvaWQgMDtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVmZmVjdHMpO1xuICAgIHZhciBjaGlsZENicyA9IHt9O1xuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBjaENiQXRLZXkgPSBmdW5jdGlvbiBjaENiQXRLZXkocmVzLCBpc0Vycikge1xuICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgICAgLy8gUmFjZSBBdXRvIGNhbmNlbGxhdGlvblxuICAgICAgICAgIGNiLmNhbmNlbCgpO1xuICAgICAgICAgIGNiKHJlcywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRW5kKHJlcykgJiYgcmVzICE9PSBDSEFOTkVMX0VORCAmJiByZXMgIT09IFRBU0tfQ0FOQ0VMKSB7XG4gICAgICAgICAgdmFyIF9yZXNwb25zZTtcblxuICAgICAgICAgIGNiLmNhbmNlbCgpO1xuICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgdmFyIHJlc3BvbnNlID0gKF9yZXNwb25zZSA9IHt9LCBfcmVzcG9uc2Vba2V5XSA9IHJlcywgX3Jlc3BvbnNlKTtcbiAgICAgICAgICBjYihpcy5hcnJheShlZmZlY3RzKSA/IFtdLnNsaWNlLmNhbGwoX2V4dGVuZHMoe30sIHJlc3BvbnNlLCB7IGxlbmd0aDoga2V5cy5sZW5ndGggfSkpIDogcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hDYkF0S2V5LmNhbmNlbCA9IG5vb3A7XG4gICAgICBjaGlsZENic1trZXldID0gY2hDYkF0S2V5O1xuICAgIH0pO1xuXG4gICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcHJldmVudHMgdW5uZWNlc3NhcnkgY2FuY2VsbGF0aW9uXG4gICAgICBpZiAoIWNvbXBsZXRlZCkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBjaGlsZENic1trZXldLmNhbmNlbCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJ1bkVmZmVjdChlZmZlY3RzW2tleV0sIGVmZmVjdElkLCBrZXksIGNoaWxkQ2JzW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuU2VsZWN0RWZmZWN0KF9yZWY3LCBjYikge1xuICAgIHZhciBzZWxlY3RvciA9IF9yZWY3LnNlbGVjdG9yLFxuICAgICAgICBhcmdzID0gX3JlZjcuYXJncztcblxuICAgIHRyeSB7XG4gICAgICB2YXIgc3RhdGUgPSBzZWxlY3Rvci5hcHBseSh1bmRlZmluZWQsIFtnZXRTdGF0ZSgpXS5jb25jYXQoYXJncykpO1xuICAgICAgY2Ioc3RhdGUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYihlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ2hhbm5lbEVmZmVjdChfcmVmOCwgY2IpIHtcbiAgICB2YXIgcGF0dGVybiA9IF9yZWY4LnBhdHRlcm4sXG4gICAgICAgIGJ1ZmZlciA9IF9yZWY4LmJ1ZmZlcjtcblxuICAgIHZhciBtYXRjaCA9IG1hdGNoZXIocGF0dGVybik7XG4gICAgbWF0Y2gucGF0dGVybiA9IHBhdHRlcm47XG4gICAgY2IoZXZlbnRDaGFubmVsKHN1YnNjcmliZSwgYnVmZmVyIHx8IGJ1ZmZlcnMuZml4ZWQoKSwgbWF0Y2gpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNhbmNlbGxlZEVmZmVjdChkYXRhLCBjYikge1xuICAgIGNiKCEhbWFpblRhc2suaXNDYW5jZWxsZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuRmx1c2hFZmZlY3QoY2hhbm5lbCwgY2IpIHtcbiAgICBjaGFubmVsLmZsdXNoKGNiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkdldENvbnRleHRFZmZlY3QocHJvcCwgY2IpIHtcbiAgICBjYih0YXNrQ29udGV4dFtwcm9wXSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5TZXRDb250ZXh0RWZmZWN0KHByb3BzLCBjYikge1xuICAgIG9iamVjdC5hc3NpZ24odGFza0NvbnRleHQsIHByb3BzKTtcbiAgICBjYigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3VGFzayhpZCwgbmFtZSwgaXRlcmF0b3IsIGNvbnQpIHtcbiAgICB2YXIgX2RvbmUsIF9yZWY5LCBfbXV0YXRvck1hcDtcblxuICAgIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCA9IG51bGw7XG4gICAgcmV0dXJuIF9yZWY5ID0ge30sIF9yZWY5W1RBU0tdID0gdHJ1ZSwgX3JlZjkuaWQgPSBpZCwgX3JlZjkubmFtZSA9IG5hbWUsIF9kb25lID0gJ2RvbmUnLCBfbXV0YXRvck1hcCA9IHt9LCBfbXV0YXRvck1hcFtfZG9uZV0gPSBfbXV0YXRvck1hcFtfZG9uZV0gfHwge30sIF9tdXRhdG9yTWFwW19kb25lXS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXRlcmF0b3IuX2RlZmVycmVkRW5kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvci5fZGVmZXJyZWRFbmQucHJvbWlzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkZWYgPSBkZWZlcnJlZCgpO1xuICAgICAgICBpdGVyYXRvci5fZGVmZXJyZWRFbmQgPSBkZWY7XG4gICAgICAgIGlmICghaXRlcmF0b3IuX2lzUnVubmluZykge1xuICAgICAgICAgIGl0ZXJhdG9yLl9lcnJvciA/IGRlZi5yZWplY3QoaXRlcmF0b3IuX2Vycm9yKSA6IGRlZi5yZXNvbHZlKGl0ZXJhdG9yLl9yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWYucHJvbWlzZTtcbiAgICAgIH1cbiAgICB9LCBfcmVmOS5jb250ID0gY29udCwgX3JlZjkuam9pbmVycyA9IFtdLCBfcmVmOS5jYW5jZWwgPSBjYW5jZWwsIF9yZWY5LmlzUnVubmluZyA9IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5faXNSdW5uaW5nO1xuICAgIH0sIF9yZWY5LmlzQ2FuY2VsbGVkID0gZnVuY3Rpb24gaXNDYW5jZWxsZWQoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IuX2lzQ2FuY2VsbGVkO1xuICAgIH0sIF9yZWY5LmlzQWJvcnRlZCA9IGZ1bmN0aW9uIGlzQWJvcnRlZCgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5faXNBYm9ydGVkO1xuICAgIH0sIF9yZWY5LnJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5fcmVzdWx0O1xuICAgIH0sIF9yZWY5LmVycm9yID0gZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IuX2Vycm9yO1xuICAgIH0sIF9yZWY5LnNldENvbnRleHQgPSBmdW5jdGlvbiBzZXRDb250ZXh0KHByb3BzKSB7XG4gICAgICBjaGVjayhwcm9wcywgaXMub2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZygndGFzaycsIHByb3BzKSk7XG4gICAgICBvYmplY3QuYXNzaWduKHRhc2tDb250ZXh0LCBwcm9wcyk7XG4gICAgfSwgX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzKF9yZWY5LCBfbXV0YXRvck1hcCksIF9yZWY5O1xuICB9XG59IiwiaW1wb3J0IHsgaXMsIGNoZWNrLCB1aWQgYXMgbmV4dFNhZ2FJZCwgd3JhcFNhZ2FEaXNwYXRjaCwgbm9vcCwgbG9nIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgcHJvYyBmcm9tICcuL3Byb2MnO1xuXG52YXIgUlVOX1NBR0FfU0lHTkFUVVJFID0gJ3J1blNhZ2Eoc3RvcmVJbnRlcmZhY2UsIHNhZ2EsIC4uLmFyZ3MpJztcbnZhciBOT05fR0VORVJBVE9SX0VSUiA9IFJVTl9TQUdBX1NJR05BVFVSRSArICc6IHNhZ2EgYXJndW1lbnQgbXVzdCBiZSBhIEdlbmVyYXRvciBmdW5jdGlvbiEnO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2FnYShzdG9yZUludGVyZmFjZSwgc2FnYSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBpdGVyYXRvciA9IHZvaWQgMDtcblxuICBpZiAoaXMuaXRlcmF0b3Ioc3RvcmVJbnRlcmZhY2UpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICBsb2coJ3dhcm4nLCAncnVuU2FnYShpdGVyYXRvciwgc3RvcmVJbnRlcmZhY2UpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgJyArIFJVTl9TQUdBX1NJR05BVFVSRSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gc3RvcmVJbnRlcmZhY2U7XG4gICAgc3RvcmVJbnRlcmZhY2UgPSBzYWdhO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKHNhZ2EsIGlzLmZ1bmMsIE5PTl9HRU5FUkFUT1JfRVJSKTtcbiAgICBpdGVyYXRvciA9IHNhZ2EuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICBjaGVjayhpdGVyYXRvciwgaXMuaXRlcmF0b3IsIE5PTl9HRU5FUkFUT1JfRVJSKTtcbiAgfVxuXG4gIHZhciBfc3RvcmVJbnRlcmZhY2UgPSBzdG9yZUludGVyZmFjZSxcbiAgICAgIHN1YnNjcmliZSA9IF9zdG9yZUludGVyZmFjZS5zdWJzY3JpYmUsXG4gICAgICBkaXNwYXRjaCA9IF9zdG9yZUludGVyZmFjZS5kaXNwYXRjaCxcbiAgICAgIGdldFN0YXRlID0gX3N0b3JlSW50ZXJmYWNlLmdldFN0YXRlLFxuICAgICAgY29udGV4dCA9IF9zdG9yZUludGVyZmFjZS5jb250ZXh0LFxuICAgICAgc2FnYU1vbml0b3IgPSBfc3RvcmVJbnRlcmZhY2Uuc2FnYU1vbml0b3IsXG4gICAgICBsb2dnZXIgPSBfc3RvcmVJbnRlcmZhY2UubG9nZ2VyLFxuICAgICAgb25FcnJvciA9IF9zdG9yZUludGVyZmFjZS5vbkVycm9yO1xuXG5cbiAgdmFyIGVmZmVjdElkID0gbmV4dFNhZ2FJZCgpO1xuXG4gIGlmIChzYWdhTW9uaXRvcikge1xuICAgIC8vIG1vbml0b3JzIGFyZSBleHBlY3RlZCB0byBoYXZlIGEgY2VydGFpbiBpbnRlcmZhY2UsIGxldCdzIGZpbGwtaW4gYW55IG1pc3Npbmcgb25lc1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFRyaWdnZXJlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdFRyaWdnZXJlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkID0gc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdFJlamVjdGVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0Q2FuY2VsbGVkID0gc2FnYU1vbml0b3IuZWZmZWN0Q2FuY2VsbGVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZCA9IHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQgfHwgbm9vcDtcblxuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFRyaWdnZXJlZCh7IGVmZmVjdElkOiBlZmZlY3RJZCwgcm9vdDogdHJ1ZSwgcGFyZW50RWZmZWN0SWQ6IDAsIGVmZmVjdDogeyByb290OiB0cnVlLCBzYWdhOiBzYWdhLCBhcmdzOiBhcmdzIH0gfSk7XG4gIH1cblxuICB2YXIgdGFzayA9IHByb2MoaXRlcmF0b3IsIHN1YnNjcmliZSwgd3JhcFNhZ2FEaXNwYXRjaChkaXNwYXRjaCksIGdldFN0YXRlLCBjb250ZXh0LCB7IHNhZ2FNb25pdG9yOiBzYWdhTW9uaXRvciwgbG9nZ2VyOiBsb2dnZXIsIG9uRXJyb3I6IG9uRXJyb3IgfSwgZWZmZWN0SWQsIHNhZ2EubmFtZSk7XG5cbiAgaWYgKHNhZ2FNb25pdG9yKSB7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQoZWZmZWN0SWQsIHRhc2spO1xuICB9XG5cbiAgcmV0dXJuIHRhc2s7XG59IiwiaW1wb3J0IG1pZGRsZXdhcmUgZnJvbSAnLi9pbnRlcm5hbC9taWRkbGV3YXJlJztcbmV4cG9ydCBkZWZhdWx0IG1pZGRsZXdhcmU7XG5cbmV4cG9ydCB7IHJ1blNhZ2EgfSBmcm9tICcuL2ludGVybmFsL3J1blNhZ2EnO1xuZXhwb3J0IHsgRU5ELCBldmVudENoYW5uZWwsIGNoYW5uZWwgfSBmcm9tICcuL2ludGVybmFsL2NoYW5uZWwnO1xuZXhwb3J0IHsgYnVmZmVycyB9IGZyb20gJy4vaW50ZXJuYWwvYnVmZmVycyc7XG5leHBvcnQgeyB0YWtlRXZlcnksIHRha2VMYXRlc3QsIHRocm90dGxlIH0gZnJvbSAnLi9pbnRlcm5hbC9zYWdhSGVscGVycyc7XG5leHBvcnQgeyBkZWxheSwgQ0FOQ0VMIH0gZnJvbSAnLi9pbnRlcm5hbC91dGlscyc7XG5leHBvcnQgeyBkZXRhY2ggfSBmcm9tICcuL2ludGVybmFsL2lvJztcblxuaW1wb3J0ICogYXMgZWZmZWN0cyBmcm9tICcuL2VmZmVjdHMnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCB7IGVmZmVjdHMsIHV0aWxzIH07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgeyBpcywgY2hlY2ssIG9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGVtaXR0ZXIgfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHsgaWRlbnQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IHJ1blNhZ2EgfSBmcm9tICcuL3J1blNhZ2EnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzYWdhTWlkZGxld2FyZUZhY3RvcnkoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgX3JlZiRjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYkY29udGV4dCA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGNvbnRleHQsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnY29udGV4dCddKTtcblxuICB2YXIgc2FnYU1vbml0b3IgPSBvcHRpb25zLnNhZ2FNb25pdG9yLFxuICAgICAgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIsXG4gICAgICBvbkVycm9yID0gb3B0aW9ucy5vbkVycm9yO1xuXG5cbiAgaWYgKGlzLmZ1bmMob3B0aW9ucykpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWdhIG1pZGRsZXdhcmUgbm8gbG9uZ2VyIGFjY2VwdCBHZW5lcmF0b3IgZnVuY3Rpb25zLiBVc2Ugc2FnYU1pZGRsZXdhcmUucnVuIGluc3RlYWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgcGFzc2VkIGEgZnVuY3Rpb24gdG8gdGhlIFNhZ2EgbWlkZGxld2FyZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIHN0YXJ0IGEgICAgICAgIFNhZ2EgYnkgZGlyZWN0bHkgcGFzc2luZyBpdCB0byB0aGUgbWlkZGxld2FyZS4gVGhpcyBpcyBubyBsb25nZXIgcG9zc2libGUgc3RhcnRpbmcgZnJvbSAwLjEwLjAuICAgICAgICBUbyBydW4gYSBTYWdhLCB5b3UgbXVzdCBkbyBpdCBkeW5hbWljYWxseSBBRlRFUiBtb3VudGluZyB0aGUgbWlkZGxld2FyZSBpbnRvIHRoZSBzdG9yZS5cXG4gICAgICAgIEV4YW1wbGU6XFxuICAgICAgICAgIGltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tIFxcJ3JlZHV4LXNhZ2FcXCdcXG4gICAgICAgICAgLi4uIG90aGVyIGltcG9ydHNcXG5cXG4gICAgICAgICAgY29uc3Qgc2FnYU1pZGRsZXdhcmUgPSBjcmVhdGVTYWdhTWlkZGxld2FyZSgpXFxuICAgICAgICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlciwgYXBwbHlNaWRkbGV3YXJlKHNhZ2FNaWRkbGV3YXJlKSlcXG4gICAgICAgICAgc2FnYU1pZGRsZXdhcmUucnVuKHNhZ2EsIC4uLmFyZ3MpXFxuICAgICAgJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxvZ2dlciAmJiAhaXMuZnVuYyhsb2dnZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5sb2dnZXJgIHBhc3NlZCB0byB0aGUgU2FnYSBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIG9wdGlvbnMub25lcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMub25lcnJvcmAgd2FzIHJlbW92ZWQuIFVzZSBgb3B0aW9ucy5vbkVycm9yYCBpbnN0ZWFkLicpO1xuICB9XG5cbiAgaWYgKG9uRXJyb3IgJiYgIWlzLmZ1bmMob25FcnJvcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLm9uRXJyb3JgIHBhc3NlZCB0byB0aGUgU2FnYSBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZW1pdHRlciAmJiAhaXMuZnVuYyhvcHRpb25zLmVtaXR0ZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5lbWl0dGVyYCBwYXNzZWQgdG8gdGhlIFNhZ2EgbWlkZGxld2FyZSBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhZ2FNaWRkbGV3YXJlKF9yZWYyKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZjIuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2g7XG5cbiAgICB2YXIgc2FnYUVtaXR0ZXIgPSBlbWl0dGVyKCk7XG4gICAgc2FnYUVtaXR0ZXIuZW1pdCA9IChvcHRpb25zLmVtaXR0ZXIgfHwgaWRlbnQpKHNhZ2FFbWl0dGVyLmVtaXQpO1xuXG4gICAgc2FnYU1pZGRsZXdhcmUucnVuID0gcnVuU2FnYS5iaW5kKG51bGwsIHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBzdWJzY3JpYmU6IHNhZ2FFbWl0dGVyLnN1YnNjcmliZSxcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICAgIHNhZ2FNb25pdG9yOiBzYWdhTW9uaXRvcixcbiAgICAgIGxvZ2dlcjogbG9nZ2VyLFxuICAgICAgb25FcnJvcjogb25FcnJvclxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoc2FnYU1vbml0b3IgJiYgc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZCkge1xuICAgICAgICAgIHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQoYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pOyAvLyBoaXQgcmVkdWNlcnNcbiAgICAgICAgc2FnYUVtaXR0ZXIuZW1pdChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgc2FnYU1pZGRsZXdhcmUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmVmb3JlIHJ1bm5pbmcgYSBTYWdhLCB5b3UgbXVzdCBtb3VudCB0aGUgU2FnYSBtaWRkbGV3YXJlIG9uIHRoZSBTdG9yZSB1c2luZyBhcHBseU1pZGRsZXdhcmUnKTtcbiAgfTtcblxuICBzYWdhTWlkZGxld2FyZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgY2hlY2socHJvcHMsIGlzLm9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoJ3NhZ2FNaWRkbGV3YXJlJywgcHJvcHMpKTtcbiAgICBvYmplY3QuYXNzaWduKGNvbnRleHQsIHByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gc2FnYU1pZGRsZXdhcmU7XG59IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB7IGlzLCBjaGVjaywgcmVtb3ZlLCBNQVRDSCwgaW50ZXJuYWxFcnIsIFNBR0FfQUNUSU9OIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBidWZmZXJzIH0gZnJvbSAnLi9idWZmZXJzJztcbmltcG9ydCB7IGFzYXAgfSBmcm9tICcuL3NjaGVkdWxlcic7XG5cbnZhciBDSEFOTkVMX0VORF9UWVBFID0gJ0BAcmVkdXgtc2FnYS9DSEFOTkVMX0VORCc7XG5leHBvcnQgdmFyIEVORCA9IHsgdHlwZTogQ0hBTk5FTF9FTkRfVFlQRSB9O1xuZXhwb3J0IHZhciBpc0VuZCA9IGZ1bmN0aW9uIGlzRW5kKGEpIHtcbiAgcmV0dXJuIGEgJiYgYS50eXBlID09PSBDSEFOTkVMX0VORF9UWVBFO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVtaXR0ZXIoKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShzdWIpIHtcbiAgICBzdWJzY3JpYmVycy5wdXNoKHN1Yik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZW1vdmUoc3Vic2NyaWJlcnMsIHN1Yik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQoaXRlbSkge1xuICAgIHZhciBhcnIgPSBzdWJzY3JpYmVycy5zbGljZSgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFycltpXShpdGVtKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGVtaXQ6IGVtaXRcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBJTlZBTElEX0JVRkZFUiA9ICdpbnZhbGlkIGJ1ZmZlciBwYXNzZWQgdG8gY2hhbm5lbCBmYWN0b3J5IGZ1bmN0aW9uJztcbmV4cG9ydCB2YXIgVU5ERUZJTkVEX0lOUFVUX0VSUk9SID0gJ1NhZ2Egd2FzIHByb3ZpZGVkIHdpdGggYW4gdW5kZWZpbmVkIGFjdGlvbic7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFVOREVGSU5FRF9JTlBVVF9FUlJPUiArPSAnXFxuSGludHM6XFxuICAgIC0gY2hlY2sgdGhhdCB5b3VyIEFjdGlvbiBDcmVhdG9yIHJldHVybnMgYSBub24tdW5kZWZpbmVkIHZhbHVlXFxuICAgIC0gaWYgdGhlIFNhZ2Egd2FzIHN0YXJ0ZWQgdXNpbmcgcnVuU2FnYSwgY2hlY2sgdGhhdCB5b3VyIHN1YnNjcmliZSBzb3VyY2UgcHJvdmlkZXMgdGhlIGFjdGlvbiB0byBpdHMgbGlzdGVuZXJzXFxuICAnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hhbm5lbCgpIHtcbiAgdmFyIGJ1ZmZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogYnVmZmVycy5maXhlZCgpO1xuXG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgdmFyIHRha2VycyA9IFtdO1xuXG4gIGNoZWNrKGJ1ZmZlciwgaXMuYnVmZmVyLCBJTlZBTElEX0JVRkZFUik7XG5cbiAgZnVuY3Rpb24gY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKSB7XG4gICAgaWYgKGNsb3NlZCAmJiB0YWtlcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBpbnRlcm5hbEVycignQ2Fubm90IGhhdmUgYSBjbG9zZWQgY2hhbm5lbCB3aXRoIHBlbmRpbmcgdGFrZXJzJyk7XG4gICAgfVxuICAgIGlmICh0YWtlcnMubGVuZ3RoICYmICFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICB0aHJvdyBpbnRlcm5hbEVycignQ2Fubm90IGhhdmUgcGVuZGluZyB0YWtlcnMgd2l0aCBub24gZW1wdHkgYnVmZmVyJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHV0KGlucHV0KSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICBjaGVjayhpbnB1dCwgaXMubm90VW5kZWYsIFVOREVGSU5FRF9JTlBVVF9FUlJPUik7XG4gICAgaWYgKGNsb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRha2Vycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBidWZmZXIucHV0KGlucHV0KTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWtlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjYiA9IHRha2Vyc1tpXTtcbiAgICAgIGlmICghY2JbTUFUQ0hdIHx8IGNiW01BVENIXShpbnB1dCkpIHtcbiAgICAgICAgdGFrZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuIGNiKGlucHV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0YWtlKGNiKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICBjaGVjayhjYiwgaXMuZnVuYywgXCJjaGFubmVsLnRha2UncyBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG5cbiAgICBpZiAoY2xvc2VkICYmIGJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIGNiKEVORCk7XG4gICAgfSBlbHNlIGlmICghYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoYnVmZmVyLnRha2UoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRha2Vycy5wdXNoKGNiKTtcbiAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZSh0YWtlcnMsIGNiKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goY2IpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpOyAvLyBUT0RPOiBjaGVjayBpZiBzb21lIG5ldyBzdGF0ZSBzaG91bGQgYmUgZm9yYmlkZGVuIG5vd1xuICAgIGNoZWNrKGNiLCBpcy5mdW5jLCBcImNoYW5uZWwuZmx1c2gnIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICBpZiAoY2xvc2VkICYmIGJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIGNiKEVORCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNiKGJ1ZmZlci5mbHVzaCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICBpZiAodGFrZXJzLmxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyID0gdGFrZXJzO1xuICAgICAgICB0YWtlcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGFycltpXShFTkQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiB0YWtlLFxuICAgIHB1dDogcHV0LFxuICAgIGZsdXNoOiBmbHVzaCxcbiAgICBjbG9zZTogY2xvc2UsXG4gICAgZ2V0IF9fdGFrZXJzX18oKSB7XG4gICAgICByZXR1cm4gdGFrZXJzO1xuICAgIH0sXG4gICAgZ2V0IF9fY2xvc2VkX18oKSB7XG4gICAgICByZXR1cm4gY2xvc2VkO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50Q2hhbm5lbChzdWJzY3JpYmUpIHtcbiAgdmFyIGJ1ZmZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogYnVmZmVycy5ub25lKCk7XG4gIHZhciBtYXRjaGVyID0gYXJndW1lbnRzWzJdO1xuXG4gIC8qKlxuICAgIHNob3VsZCBiZSBpZih0eXBlb2YgbWF0Y2hlciAhPT0gdW5kZWZpbmVkKSBpbnN0ZWFkP1xuICAgIHNlZSBQUiAjMjczIGZvciBhIGJhY2tncm91bmQgZGlzY3Vzc2lvblxuICAqKi9cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgY2hlY2sobWF0Y2hlciwgaXMuZnVuYywgJ0ludmFsaWQgbWF0Y2ggZnVuY3Rpb24gcGFzc2VkIHRvIGV2ZW50Q2hhbm5lbCcpO1xuICB9XG5cbiAgdmFyIGNoYW4gPSBjaGFubmVsKGJ1ZmZlcik7XG4gIHZhciBjbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGlmICghY2hhbi5fX2Nsb3NlZF9fKSB7XG4gICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICAgIGNoYW4uY2xvc2UoKTtcbiAgICB9XG4gIH07XG4gIHZhciB1bnN1YnNjcmliZSA9IHN1YnNjcmliZShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoaXNFbmQoaW5wdXQpKSB7XG4gICAgICBjbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobWF0Y2hlciAmJiAhbWF0Y2hlcihpbnB1dCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hhbi5wdXQoaW5wdXQpO1xuICB9KTtcbiAgaWYgKGNoYW4uX19jbG9zZWRfXykge1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBpZiAoIWlzLmZ1bmModW5zdWJzY3JpYmUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbiBldmVudENoYW5uZWw6IHN1YnNjcmliZSBzaG91bGQgcmV0dXJuIGEgZnVuY3Rpb24gdG8gdW5zdWJzY3JpYmUnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGFrZTogY2hhbi50YWtlLFxuICAgIGZsdXNoOiBjaGFuLmZsdXNoLFxuICAgIGNsb3NlOiBjbG9zZVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RkQ2hhbm5lbChzdWJzY3JpYmUpIHtcbiAgdmFyIGNoYW4gPSBldmVudENoYW5uZWwoZnVuY3Rpb24gKGNiKSB7XG4gICAgcmV0dXJuIHN1YnNjcmliZShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIGlmIChpbnB1dFtTQUdBX0FDVElPTl0pIHtcbiAgICAgICAgY2IoaW5wdXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNiKGlucHV0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGNoYW4sIHtcbiAgICB0YWtlOiBmdW5jdGlvbiB0YWtlKGNiLCBtYXRjaGVyKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY2hlY2sobWF0Y2hlciwgaXMuZnVuYywgXCJjaGFubmVsLnRha2UncyBtYXRjaGVyIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgY2JbTUFUQ0hdID0gbWF0Y2hlcjtcbiAgICAgIH1cbiAgICAgIGNoYW4udGFrZShjYik7XG4gICAgfVxuICB9KTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNS4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5wbGFjZWhvbGRlclwiKTtcbnZhciB6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEsYixkLGMsZSxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGs9W2QsYyxlLGcsaCxmXSxsPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4ga1tsKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO0EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7bShILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGwsY3VycmVudERpc3BhdGNoZXI6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZS5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2U9YVtoXTt2YXIgZj1iK1QoZSxoKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGgrKyksZys9UyhlLGYsZCxjKTtlbHNlXCJvYmplY3RcIj09PWUmJihkPVwiXCIrYSxCKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZD9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpkLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixkKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsZCl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVihhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPU0oYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsYWEsYik7UihiKX1mdW5jdGlvbiBiYShhLGIpe3ZhciBkPUkuY3VycmVudERpc3BhdGNoZXI7bnVsbD09PWQ/QihcIjI3N1wiKTp2b2lkIDA7cmV0dXJuIGQucmVhZENvbnRleHQoYSxiKX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1coYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLFYsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsdW5zdGFibGVfcmVhZDpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O2EuQ29uc3VtZXI9YTthLnVuc3RhYmxlX3JlYWQ9YmEuYmluZChudWxsLGEpO3JldHVybiBhfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsdW5zdGFibGVfQXN5bmNNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxjcmVhdGVFbGVtZW50OkwsY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPW0oe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9SS5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7XG52YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYoaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09az9rW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7az1BcnJheShjKTtmb3IodmFyIGw9MDtsPGM7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZS5jaGlsZHJlbj1rfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUwuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi41LjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SSxcbmFzc2lnbjptfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi41LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVcIik7ZnVuY3Rpb24gY2EoYSxiLGMsZCxlLGYsZyxrKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgaD1bYyxkLGUsZixnLGtdLGw9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBoW2wrK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiB3KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1hYT92b2lkIDA6dyhcIjIyN1wiKTtmdW5jdGlvbiBkYShhLGIsYyxkLGUsZixnLGssaCl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX1cbnZhciBlYT0hMSxmYT1udWxsLGhhPSExLGlhPW51bGwsamE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZWE9ITA7ZmE9YX19O2Z1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsayxoKXtlYT0hMTtmYT1udWxsO2RhLmFwcGx5KGphLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbGEoYSxiLGMsZCxlLGYsZyxrLGgpe2thLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihlYSl7aWYoZWEpe3ZhciBsPWZhO2VhPSExO2ZhPW51bGx9ZWxzZSB3KFwiMTk4XCIpLGw9dm9pZCAwO2hhfHwoaGE9ITAsaWE9bCl9fXZhciBtYT1udWxsLG5hPXt9O1xuZnVuY3Rpb24gb2EoKXtpZihtYSlmb3IodmFyIGEgaW4gbmEpe3ZhciBiPW5hW2FdLGM9bWEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDp3KFwiOTZcIixhKTtpZighcGFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6dyhcIjk3XCIsYSk7cGFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGs9ZDtxYS5oYXNPd25Qcm9wZXJ0eShrKT93KFwiOTlcIixrKTp2b2lkIDA7cWFba109Zjt2YXIgaD1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGgpe2ZvcihlIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShlKSYmcmEoaFtlXSxnLGspO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHJhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGspLGU9ITApOmU9ITE7ZT92b2lkIDA6dyhcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHJhKGEsYixjKXtzYVthXT93KFwiMTAwXCIsYSk6dm9pZCAwO3NhW2FdPWI7dGFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcGE9W10scWE9e30sc2E9e30sdGE9e30sdWE9bnVsbCx2YT1udWxsLHdhPW51bGw7ZnVuY3Rpb24geGEoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD13YShkKTtsYShiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHlhKGEsYil7bnVsbD09Yj93KFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHphKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBBYT1udWxsO2Z1bmN0aW9uIEJhKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKXhhKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmeGEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQ2EoYSl7cmV0dXJuIEJhKGEsITApfWZ1bmN0aW9uIERhKGEpe3JldHVybiBCYShhLCExKX1cbnZhciBFYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXttYT93KFwiMTAxXCIpOnZvaWQgMDttYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtvYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bmEuaGFzT3duUHJvcGVydHkoYykmJm5hW2NdPT09ZHx8KG5hW2NdP3coXCIxMDJcIixjKTp2b2lkIDAsbmFbY109ZCxiPSEwKX1iJiZvYSgpfX07XG5mdW5jdGlvbiBGYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXVhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3coXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBHYShhLGIpe251bGwhPT1hJiYoQWE9eWEoQWEsYSkpO2E9QWE7QWE9bnVsbDtpZihhJiYoYj96YShhLENhKTp6YShhLERhKSxBYT93KFwiOTVcIik6dm9pZCAwLGhhKSl0aHJvdyBiPWlhLGhhPSExLGlhPW51bGwsYjt9dmFyIEhhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLElhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrSGEsSmE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitIYTtmdW5jdGlvbiBLYShhKXtpZihhW0lhXSlyZXR1cm4gYVtJYV07Zm9yKDshYVtJYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtJYV07cmV0dXJuIDc9PT1hLnRhZ3x8OD09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBMYShhKXthPWFbSWFdO3JldHVybiFhfHw3IT09YS50YWcmJjghPT1hLnRhZz9udWxsOmF9XG5mdW5jdGlvbiBNYShhKXtpZig3PT09YS50YWd8fDg9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dyhcIjMzXCIpfWZ1bmN0aW9uIE5hKGEpe3JldHVybiBhW0phXXx8bnVsbH1mdW5jdGlvbiBPYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjchPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIFBhKGEsYixjKXtpZihiPUZhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBRYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPU9hKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylQYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVBhKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIFJhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUZhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz15YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz15YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gVGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZSYShhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBVYShhKXt6YShhLFFhKX12YXIgVmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBXYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBZYT17YW5pbWF0aW9uZW5kOldhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOldhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6V2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6V2EoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxaYT17fSwkYT17fTtcblZhJiYoJGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgWWEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgWWEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgWWEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgWWEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBhYihhKXtpZihaYVthXSlyZXR1cm4gWmFbYV07aWYoIVlhW2FdKXJldHVybiBhO3ZhciBiPVlhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluICRhKXJldHVybiBaYVthXT1iW2NdO3JldHVybiBhfVxudmFyIGJiPWFiKFwiYW5pbWF0aW9uZW5kXCIpLGNiPWFiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGRiPWFiKFwiYW5pbWF0aW9uc3RhcnRcIiksZWI9YWIoXCJ0cmFuc2l0aW9uZW5kXCIpLGZiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxnYj1udWxsLGhiPW51bGwsaWI9bnVsbDtcbmZ1bmN0aW9uIGpiKCl7aWYoaWIpcmV0dXJuIGliO3ZhciBhLGI9aGIsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gZ2I/Z2IudmFsdWU6Z2IudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gaWI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBrYigpe3JldHVybiEwfWZ1bmN0aW9uIGxiKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBDKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9rYjpsYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWxiO3JldHVybiB0aGlzfVxubihDLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWtiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWtiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWtifSxpc1BlcnNpc3RlbnQ6bGIsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9bGI7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtDLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkMuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7bWIoYyk7cmV0dXJuIGN9O21iKEMpO2Z1bmN0aW9uIG5iKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIG9iKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDp3KFwiMjc5XCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1cbmZ1bmN0aW9uIG1iKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPW5iO2EucmVsZWFzZT1vYn12YXIgcGI9Qy5leHRlbmQoe2RhdGE6bnVsbH0pLHFiPUMuZXh0ZW5kKHtkYXRhOm51bGx9KSxyYj1bOSwxMywyNywzMl0sc2I9VmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHRiPW51bGw7VmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHRiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgdWI9VmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF0Yix2Yj1WYSYmKCFzYnx8dGImJjg8dGImJjExPj10Yiksd2I9U3RyaW5nLmZyb21DaGFyQ29kZSgzMikseGI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0seWI9ITE7XG5mdW5jdGlvbiB6YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PXJiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gQWIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgQmI9ITE7ZnVuY3Rpb24gQ2IoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIEFiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt5Yj0hMDtyZXR1cm4gd2I7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09d2ImJnliP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIERiKGEsYil7aWYoQmIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IXNiJiZ6YihhLGIpPyhhPWpiKCksaWI9aGI9Z2I9bnVsbCxCYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gdmImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEViPXtldmVudFR5cGVzOnhiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihzYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXhiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXhiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT14Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgQmI/emIoYSxjKSYmKGU9eGIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT14Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyh2YiYmXCJrb1wiIT09Yy5sb2NhbGUmJihCYnx8ZSE9PXhiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXhiLmNvbXBvc2l0aW9uRW5kJiZCYiYmKGY9amIoKSk6KGdiPWQsaGI9XCJ2YWx1ZVwiaW4gZ2I/Z2IudmFsdWU6Z2IudGV4dENvbnRlbnQsQmI9XG4hMCkpLGU9cGIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9QWIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFVhKGUpLGY9ZSk6Zj1udWxsOyhhPXViP0NiKGEsYyk6RGIoYSxjKSk/KGI9cWIuZ2V0UG9vbGVkKHhiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxVYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxGYj1udWxsLEdiPW51bGwsSGI9bnVsbDtmdW5jdGlvbiBJYihhKXtpZihhPXZhKGEpKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgRmI/dyhcIjI4MFwiKTp2b2lkIDA7dmFyIGI9dWEoYS5zdGF0ZU5vZGUpO0ZiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gSmIoYSl7R2I/SGI/SGIucHVzaChhKTpIYj1bYV06R2I9YX1mdW5jdGlvbiBLYigpe2lmKEdiKXt2YXIgYT1HYixiPUhiO0hiPUdiPW51bGw7SWIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUliKGJbYV0pfX1cbmZ1bmN0aW9uIExiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gTWIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gTmIoKXt9dmFyIE9iPSExO2Z1bmN0aW9uIFBiKGEsYil7aWYoT2IpcmV0dXJuIGEoYik7T2I9ITA7dHJ5e3JldHVybiBMYihhLGIpfWZpbmFsbHl7aWYoT2I9ITEsbnVsbCE9PUdifHxudWxsIT09SGIpTmIoKSxLYigpfX12YXIgUWI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gUmIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFRYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBTYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gVGIoYSl7aWYoIVZhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFViKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBWYihhKXt2YXIgYj1VYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gV2IoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVZiKGEpKX1mdW5jdGlvbiBYYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VWIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBZYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxaYj0vXiguKilbXFxcXFxcL10vLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvciwkYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGFjPUU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixiYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxjYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxkYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxlYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxmYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGdjPUU/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsaGM9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaWM9RT9TeW1ib2wuZm9yKFwicmVhY3QucGxhY2Vob2xkZXJcIik6XG42MDExMyxqYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24ga2MoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWpjJiZhW2pjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gbGMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBnYzpyZXR1cm5cIkFzeW5jTW9kZVwiO2Nhc2UgYmM6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgYWM6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGRjOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGNjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaWM6cmV0dXJuXCJQbGFjZWhvbGRlclwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSl7c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZmM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGhjOnJldHVybiBhPWEucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwifWlmKFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGEudGhlbiYmKGE9MT09PWEuX3JlYWN0U3RhdHVzP2EuX3JlYWN0UmVzdWx0Om51bGwpKXJldHVybiBsYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBtYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDQ6Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNzpjYXNlIDEwOnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZSxlPWxjKGEudHlwZSk7dmFyIGY9bnVsbDtjJiYoZj1sYyhjLnR5cGUpKTtjPWU7ZT1cIlwiO2Q/ZT1cIiAoYXQgXCIrZC5maWxlTmFtZS5yZXBsYWNlKFpiLFwiXCIpK1wiOlwiK2QubGluZU51bWJlcitcIilcIjpmJiYoZT1cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiKTtmPVwiXFxuICAgIGluIFwiKyhjfHxcIlVua25vd25cIikrZTticmVhayBhO2RlZmF1bHQ6Zj1cIlwifWIrPWY7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBuYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8scGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxxYz17fSxyYz17fTtcbmZ1bmN0aW9uIHNjKGEpe2lmKHBjLmNhbGwocmMsYSkpcmV0dXJuITA7aWYocGMuY2FsbChxYyxhKSlyZXR1cm4hMTtpZihuYy50ZXN0KGEpKXJldHVybiByY1thXT0hMDtxY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiB0YyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHRjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gRihhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEc9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07R1tiXT1uZXcgRihiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIHZjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gd2MoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UodmMsXG53Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UodmMsd2MpO0dbYl09bmV3IEYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UodmMsd2MpO0dbYl09bmV3IEYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtHLnRhYkluZGV4PW5ldyBGKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIHhjKGEsYixjLGQpe3ZhciBlPUcuaGFzT3duUHJvcGVydHkoYik/R1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHVjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9zYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24geWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHpjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXljKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQ2MoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ4YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gRGMoYSxiKXtDYyhhLGIpO3ZhciBjPXljKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0VjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkVjKGEsYi50eXBlLHljKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRmMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7ZD1hLnZhbHVlO2N8fGI9PT1kfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIEVjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgR2M9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gSGMoYSxiLGMpe2E9Qy5nZXRQb29sZWQoR2MuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtKYihjKTtVYShhKTtyZXR1cm4gYX12YXIgSWM9bnVsbCxKYz1udWxsO2Z1bmN0aW9uIEtjKGEpe0dhKGEsITEpfVxuZnVuY3Rpb24gTGMoYSl7dmFyIGI9TWEoYSk7aWYoWGIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gTWMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgTmM9ITE7VmEmJihOYz1UYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBPYygpe0ljJiYoSWMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUGMpLEpjPUljPW51bGwpfWZ1bmN0aW9uIFBjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZMYyhKYykmJihhPUhjKEpjLGEsU2IoYSkpLFBiKEtjLGEpKX1mdW5jdGlvbiBRYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oT2MoKSxJYz1iLEpjPWMsSWMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUGMpKTpcImJsdXJcIj09PWEmJk9jKCl9ZnVuY3Rpb24gUmMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gTGMoSmMpfVxuZnVuY3Rpb24gU2MoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBMYyhiKX1mdW5jdGlvbiBUYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBMYyhiKX1cbnZhciBVYz17ZXZlbnRUeXBlczpHYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOk5jLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9NYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaz1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09ZS50eXBlP2Y9TWM6UmIoZSk/TmM/Zj1UYzooZj1SYyxnPVFjKTooaz1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1TYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gSGMoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZFYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxWYz1DLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksV2M9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gWGMoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1XY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFljKCl7cmV0dXJuIFhjfVxudmFyIFpjPTAsJGM9MCxhZD0hMSxiZD0hMSxjZD1WYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WWMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9WmM7WmM9YS5zY3JlZW5YO3JldHVybiBhZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KGFkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9JGM7JGM9YS5zY3JlZW5ZO3JldHVybiBiZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KGJkPSEwLDApfX0pLGRkPWNkLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxlZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sZmQ9e2V2ZW50VHlwZXM6ZWQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/S2EoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxrPXZvaWQgMCxoPXZvaWQgMCxsPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPWNkLGs9ZWQubW91c2VMZWF2ZSxoPWVkLm1vdXNlRW50ZXIsbD1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWRkLGs9ZWQucG9pbnRlckxlYXZlLGg9ZWQucG9pbnRlckVudGVyLGw9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOk1hKGYpO2U9bnVsbD09Yj9lOk1hKGIpO2E9Zy5nZXRQb29sZWQoayxmLGMsZCk7YS50eXBlPWwrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChoLGIsYyxkKTtjLnR5cGU9bCtcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2w9MDtmb3IoZz1iO2c7Zz1PYShnKSlsKys7Zz0wO2ZvcihoPWU7aDtoPU9hKGgpKWcrKztmb3IoOzA8bC1nOyliPU9hKGIpLGwtLTtmb3IoOzA8Zy1sOyllPU9hKGUpLGctLTtmb3IoO2wtLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPU9hKGIpO2U9T2EoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2w9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9T2EoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtsPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztmLnB1c2goZCk7ZD1PYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKVJhKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KVJhKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX0sZ2Q9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBoZChhLGIpe3JldHVybiBhPT09Yj8wIT09YXx8MCE9PWJ8fDEvYT09PTEvYjphIT09YSYmYiE9PWJ9XG5mdW5jdGlvbiBpZChhLGIpe2lmKGhkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighZ2QuY2FsbChiLGNbZF0pfHwhaGQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBqZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gNT09PWIudGFnPzI6M31mdW5jdGlvbiBrZChhKXsyIT09amQoYSk/dyhcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBsZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1qZChhKSwzPT09Yj93KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBrZChlKSxhO2lmKGc9PT1kKXJldHVybiBrZChlKSxiO2c9Zy5zaWJsaW5nfXcoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGs9ZS5jaGlsZDtrOyl7aWYoaz09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihrPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWs9ay5zaWJsaW5nfWlmKCFnKXtmb3Ioaz1mLmNoaWxkO2s7KXtpZihrPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGs9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9az1rLnNpYmxpbmd9Zz9cbnZvaWQgMDp3KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/dyhcIjE5MFwiKTp2b2lkIDB9NSE9PWMudGFnP3coXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbWQoYSl7YT1sZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig3PT09Yi50YWd8fDg9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBuZD1DLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksb2Q9Qy5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxwZD1WYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIHFkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHJkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxzZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdGQ9VmMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXJkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXFkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9zZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WWMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cWQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cWQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx1ZD1jZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdmQ9VmMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WWN9KSx3ZD1DLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx4ZD1jZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHlkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW2JiLFwiYW5pbWF0aW9uRW5kXCJdLFtjYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbZGIsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFtlYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHpkPXt9LEFkPXt9O2Z1bmN0aW9uIEJkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07emRbYV09YjtBZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0JkKGEsITApfSk7eWQuZm9yRWFjaChmdW5jdGlvbihhKXtCZChhLCExKX0pO1xudmFyIENkPXtldmVudFR5cGVzOnpkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPUFkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1BZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXFkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT10ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9cGQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1jZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT12ZDticmVhaztjYXNlIGJiOmNhc2UgY2I6Y2FzZSBkYjphPW5kO2JyZWFrO2Nhc2UgZWI6YT13ZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1WYzticmVhaztjYXNlIFwid2hlZWxcIjphPXhkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9b2Q7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1kZDticmVhaztkZWZhdWx0OmE9Q31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1VhKGIpO3JldHVybiBifX0sRGQ9Q2QuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuRWQ9W107ZnVuY3Rpb24gRmQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9NSE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9S2EoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9U2IoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaz0wO2s8cGEubGVuZ3RoO2srKyl7dmFyIGg9cGFba107aCYmKGg9aC5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eWEoZyxoKSl9R2EoZywhMSl9fXZhciBHZD0hMDtcbmZ1bmN0aW9uIEgoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRGQoYSk/SGQ6SWQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBKZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9IZDpJZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIEhkKGEsYil7TWIoSWQsYSxiKX1cbmZ1bmN0aW9uIElkKGEsYil7aWYoR2Qpe3ZhciBjPVNiKGIpO2M9S2EoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1qZChjKXx8KGM9bnVsbCk7aWYoRWQubGVuZ3RoKXt2YXIgZD1FZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtQYihGZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkVkLmxlbmd0aCYmRWQucHVzaChhKX19fXZhciBLZD17fSxMZD0wLE1kPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIE5kKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLE1kKXx8KGFbTWRdPUxkKyssS2RbYVtNZF1dPXt9KTtyZXR1cm4gS2RbYVtNZF1dfWZ1bmN0aW9uIFBkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBRZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBSZChhLGIpe3ZhciBjPVFkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVFkKGMpfX1mdW5jdGlvbiBTZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP1NkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIFRkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVBkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7YT1iLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0Vmlld31jYXRjaChjKXticmVha31iPVBkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIFVkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgVmQ9VmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxXZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sWGQ9bnVsbCxZZD1udWxsLFpkPW51bGwsJGQ9ITE7XG5mdW5jdGlvbiBhZShhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKCRkfHxudWxsPT1YZHx8WGQhPT1QZChjKSlyZXR1cm4gbnVsbDtjPVhkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlVkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIFpkJiZpZChaZCxjKT9udWxsOihaZD1jLGE9Qy5nZXRQb29sZWQoV2Quc2VsZWN0LFlkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9WGQsVWEoYSksYSl9XG52YXIgYmU9e2V2ZW50VHlwZXM6V2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9TmQoZSk7Zj10YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGs9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShrKXx8IWVba10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP01hKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUmIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpWGQ9ZSxZZD1iLFpkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpaZD1ZZD1YZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjokZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuICRkPSExLGFlKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFZkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gYWUoYyxkKX1yZXR1cm4gbnVsbH19O0VhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dWE9TmE7dmE9TGE7d2E9TWE7RWEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpDZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46ZmQsQ2hhbmdlRXZlbnRQbHVnaW46VWMsU2VsZWN0RXZlbnRQbHVnaW46YmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpFYn0pO2Z1bmN0aW9uIGNlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gZGUoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1jZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gZWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3ljKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBmZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dyhcIjkxXCIpOnZvaWQgMDtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBnZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP3coXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDp3KFwiOTNcIiksYj1iWzBdKSxjPWIpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp5YyhjKX19XG5mdW5jdGlvbiBoZShhLGIpe3ZhciBjPXljKGIudmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK3ljKGIuZGVmYXVsdFZhbHVlKSl9ZnVuY3Rpb24gaWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGplPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGtlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1lPXZvaWQgMCxuZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1qZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttZT1tZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1tZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFlPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwZSkuZm9yRWFjaChmdW5jdGlvbihhKXtxZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BlW2JdPXBlW2FdfSl9KTtcbmZ1bmN0aW9uIHJlKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fHBlLmhhc093blByb3BlcnR5KGUpJiZwZVtlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBzZT1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdGUoYSxiKXtiJiYoc2VbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3coXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/dyhcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp3KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT93KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gdWUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gdmUoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9TmQoYSk7Yj10YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6SmQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkpkKFwiZm9jdXNcIixhKTtKZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6VGIoZSkmJkpkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWZiLmluZGV4T2YoZSkmJkgoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24gd2UoKXt9dmFyIHhlPW51bGwseWU9bnVsbDtcbmZ1bmN0aW9uIHplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBBZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9ZnVuY3Rpb24gQmUoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1cbmZ1bmN0aW9uIENlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBEZT1bXSxFZT0tMTtmdW5jdGlvbiBJKGEpezA+RWV8fChhLmN1cnJlbnQ9RGVbRWVdLERlW0VlXT1udWxsLEVlLS0pfWZ1bmN0aW9uIEooYSxiKXtFZSsrO0RlW0VlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEZlPXt9LEs9e2N1cnJlbnQ6RmV9LEw9e2N1cnJlbnQ6ITF9LEdlPUZlO1xuZnVuY3Rpb24gSGUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBGZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBNKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gSWUoYSl7SShMLGEpO0koSyxhKX1mdW5jdGlvbiBKZShhKXtJKEwsYSk7SShLLGEpfVxuZnVuY3Rpb24gS2UoYSxiLGMpe0suY3VycmVudCE9PUZlP3coXCIxNjhcIik6dm9pZCAwO0ooSyxiLGEpO0ooTCxjLGEpfWZ1bmN0aW9uIExlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOncoXCIxMDhcIixsYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBNZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEZlO0dlPUsuY3VycmVudDtKKEssYixhKTtKKEwsTC5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gTmUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOncoXCIxNjlcIik7Yz8oYj1MZShhLGIsR2UpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixJKEwsYSksSShLLGEpLEooSyxiLGEpKTpJKEwsYSk7SihMLGMsYSl9dmFyIE9lPW51bGwsUGU9bnVsbDtmdW5jdGlvbiBRZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gUmUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7T2U9UWUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1BlPVFlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBTZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiBUZShhKXthPWEucHJvdG90eXBlO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJlwib2JqZWN0XCI9PT10eXBlb2YgYS5pc1JlYWN0Q29tcG9uZW50JiZudWxsIT09YS5pc1JlYWN0Q29tcG9uZW50fVxuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyBTZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2QuZXhwaXJhdGlvblRpbWU9YiE9PWEucGVuZGluZ1Byb3BzP2M6YS5leHBpcmF0aW9uVGltZTtkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5O2Quc2libGluZz1hLnNpYmxpbmc7XG5kLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBWZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPVRlKGQpPzI6NDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTc7ZWxzZSBhOnN3aXRjaChkKXtjYXNlIGJjOnJldHVybiBXZShhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIGdjOmY9MTA7Ynw9MzticmVhaztjYXNlIGNjOmY9MTA7Ynw9MjticmVhaztjYXNlIGRjOnJldHVybiBkPW5ldyBTZSgxNSxhLGUsYnw0KSxkLnR5cGU9ZGMsZC5leHBpcmF0aW9uVGltZT1jLGQ7Y2FzZSBpYzpmPTE2O2JyZWFrO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZClzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBlYzpmPTEyO2JyZWFrIGE7Y2FzZSBmYzpmPTExO2JyZWFrIGE7Y2FzZSBoYzpmPTEzO2JyZWFrIGE7ZGVmYXVsdDppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC50aGVuKXtmPTQ7YnJlYWsgYX19dyhcIjEzMFwiLFxubnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWI9bmV3IFNlKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBXZShhLGIsYyxkKXthPW5ldyBTZSg5LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gWGUoYSxiLGMpe2E9bmV3IFNlKDgsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBZZShhLGIsYyl7Yj1uZXcgU2UoNixudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBaZShhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6Yz5iP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU8YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7JGUoYixhKX1mdW5jdGlvbiAkZShhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ+YSkmJihlPWQpO2E9ZTswIT09YSYmMCE9PWMmJmM8YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX12YXIgYWY9ITE7XG5mdW5jdGlvbiBiZihhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gY2YoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gZGYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gZWYoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gZmYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWJmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWJmKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWJmKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1jZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1jZihkKSk7bnVsbD09PWV8fGQ9PT1lP2VmKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oZWYoZCxiKSxlZihlLGIpKTooZWYoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBnZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWJmKGEubWVtb2l6ZWRTdGF0ZSk6aGYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBoZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1jZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBqZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSAyOmFmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24ga2YoYSxiLGMsZCxlKXthZj0hMTtiPWhmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxrPTAsaD1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09aDspe3ZhciBtPWguZXhwaXJhdGlvblRpbWU7aWYobT5lKXtpZihudWxsPT09ZyYmKGc9aCxmPWwpLDA9PT1rfHxrPm0paz1tfWVsc2UgbD1qZihhLGIsaCxsLGMsZCksbnVsbCE9PWguY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsaC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1oOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1oLGIubGFzdEVmZmVjdD1oKSk7aD1oLm5leHR9bT1udWxsO2ZvcihoPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09aDspe3ZhciB0PWguZXhwaXJhdGlvblRpbWU7aWYodD5lKXtpZihudWxsPT09bSYmKG09aCxudWxsPT09ZyYmKGY9bCkpLDA9PT1rfHxrPnQpaz10fWVsc2UgbD1qZihhLGIsaCxsLGMsZCksXG5udWxsIT09aC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixoLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWg6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9aCxiLmxhc3RDYXB0dXJlZEVmZmVjdD1oKSk7aD1oLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWs7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiBsZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7bWYoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO21mKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBtZihhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz93KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBuZihhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOm1jKGIpfX12YXIgb2Y9e2N1cnJlbnQ6bnVsbH0scGY9bnVsbCxxZj1udWxsLHJmPW51bGw7ZnVuY3Rpb24gc2YoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SihvZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gdGYoYSl7dmFyIGI9b2YuY3VycmVudDtJKG9mLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gdWYoYSl7cGY9YTtyZj1xZj1udWxsO2EuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1udWxsfVxuZnVuY3Rpb24gdmYoYSxiKXtpZihyZiE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcmY9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PXFmPyhudWxsPT09cGY/dyhcIjI3N1wiKTp2b2lkIDAscGYuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1xZj1iKTpxZj1xZi5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2Y9e30sTj17Y3VycmVudDp3Zn0seGY9e2N1cnJlbnQ6d2Z9LHlmPXtjdXJyZW50OndmfTtmdW5jdGlvbiB6ZihhKXthPT09d2Y/dyhcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBBZihhLGIpe0ooeWYsYixhKTtKKHhmLGEsYSk7SihOLHdmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1sZShiLGMpfUkoTixhKTtKKE4sYixhKX1mdW5jdGlvbiBCZihhKXtJKE4sYSk7SSh4ZixhKTtJKHlmLGEpfWZ1bmN0aW9uIENmKGEpe3pmKHlmLmN1cnJlbnQpO3ZhciBiPXpmKE4uY3VycmVudCk7dmFyIGM9bGUoYixhLnR5cGUpO2IhPT1jJiYoSih4ZixhLGEpLEooTixjLGEpKX1mdW5jdGlvbiBEZihhKXt4Zi5jdXJyZW50PT09YSYmKEkoTixhKSxJKHhmLGEpKX12YXIgRWY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBGZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBKZj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWpkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdmKCk7ZD1IZihkLGEpO3ZhciBlPWRmKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtmZihhLGUpO0lmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdmKCk7ZD1IZihkLGEpO3ZhciBlPWRmKGQpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO2ZmKGEsZSk7SWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2YoKTtjPUhmKGMsYSk7dmFyIGQ9ZGYoYyk7ZC50YWc9Mjt2b2lkIDAhPT1cbmImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtmZihhLGQpO0lmKGEsYyl9fTtmdW5jdGlvbiBLZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFpZChjLGQpfHwhaWQoZSxmKTohMH1mdW5jdGlvbiBMZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBNZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZSxmPU0oYik/R2U6Sy5jdXJyZW50O2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWY7ZS5jb250ZXh0PUhlKGEsZik7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoa2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZcbmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKGtmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgTmY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIE9mKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZyYmMyE9PWMudGFnP3coXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOncoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVmJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3coXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDp3KFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBQZihhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmdyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gUWYoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1VZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsPT09Ynx8OCE9PWIudGFnKXJldHVybiBiPVhlKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPU9mKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZShjLGEubW9kZSxkKTtkLnJlZj1PZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cblllKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8OSE9PWIudGFnKXJldHVybiBiPVdlKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB0KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1YZShcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSAkYjpyZXR1cm4gYz1WZShiLGEubW9kZSxjKSxjLnJlZj1PZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgYWM6cmV0dXJuIGI9WWUoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE5mKGIpfHxrYyhiKSlyZXR1cm4gYj1XZShiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPVxuYSxiO1BmKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmsoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSAkYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWJjP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTpoKGEsYixjLGQpOm51bGw7Y2FzZSBhYzpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihOZihjKXx8a2MoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1BmKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGsoYixhLFwiXCIrZCxlKTtcbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1iYz9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmgoYixhLGQsZSk7Y2FzZSBhYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihOZihkKXx8a2MoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1BmKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxyPW51bGwscD1nLG09Zz0wLHE9bnVsbDtudWxsIT09cCYmbTxoLmxlbmd0aDttKyspe3AuaW5kZXg+bT8ocT1wLHA9bnVsbCk6cT1wLnNpYmxpbmc7dmFyIHY9eChlLHAsaFttXSxrKTtpZihudWxsPT09dil7bnVsbD09PXAmJihwPXEpO2JyZWFrfWEmJnAmJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLFxucCk7Zz1mKHYsZyxtKTtudWxsPT09cj9sPXY6ci5zaWJsaW5nPXY7cj12O3A9cX1pZihtPT09aC5sZW5ndGgpcmV0dXJuIGMoZSxwKSxsO2lmKG51bGw9PT1wKXtmb3IoO208aC5sZW5ndGg7bSsrKWlmKHA9dChlLGhbbV0saykpZz1mKHAsZyxtKSxudWxsPT09cj9sPXA6ci5zaWJsaW5nPXAscj1wO3JldHVybiBsfWZvcihwPWQoZSxwKTttPGgubGVuZ3RoO20rKylpZihxPXoocCxlLG0saFttXSxrKSlhJiZudWxsIT09cS5hbHRlcm5hdGUmJnAuZGVsZXRlKG51bGw9PT1xLmtleT9tOnEua2V5KSxnPWYocSxnLG0pLG51bGw9PT1yP2w9cTpyLnNpYmxpbmc9cSxyPXE7YSYmcC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB1KGUsZyxoLGspe3ZhciBsPWtjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3coXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/dyhcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBtPWw9bnVsbCxwPWcscj1nPVxuMCxxPW51bGwsdj1oLm5leHQoKTtudWxsIT09cCYmIXYuZG9uZTtyKyssdj1oLm5leHQoKSl7cC5pbmRleD5yPyhxPXAscD1udWxsKTpxPXAuc2libGluZzt2YXIgdT14KGUscCx2LnZhbHVlLGspO2lmKG51bGw9PT11KXtwfHwocD1xKTticmVha31hJiZwJiZudWxsPT09dS5hbHRlcm5hdGUmJmIoZSxwKTtnPWYodSxnLHIpO251bGw9PT1tP2w9dTptLnNpYmxpbmc9dTttPXU7cD1xfWlmKHYuZG9uZSlyZXR1cm4gYyhlLHApLGw7aWYobnVsbD09PXApe2Zvcig7IXYuZG9uZTtyKyssdj1oLm5leHQoKSl2PXQoZSx2LnZhbHVlLGspLG51bGwhPT12JiYoZz1mKHYsZyxyKSxudWxsPT09bT9sPXY6bS5zaWJsaW5nPXYsbT12KTtyZXR1cm4gbH1mb3IocD1kKGUscCk7IXYuZG9uZTtyKyssdj1oLm5leHQoKSl2PXoocCxlLHIsdi52YWx1ZSxrKSxudWxsIT09diYmKGEmJm51bGwhPT12LmFsdGVybmF0ZSYmcC5kZWxldGUobnVsbD09PXYua2V5P3I6di5rZXkpLGc9Zih2LGcsciksbnVsbD09PVxubT9sPXY6bS5zaWJsaW5nPXYsbT12KTthJiZwLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1iYyYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSAkYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoOT09PWsudGFnP2YudHlwZT09PWJjOmsudHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YmM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPU9mKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWJjPyhkPVdlKGYucHJvcHMuY2hpbGRyZW4sXG5hLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZlKGYsYS5tb2RlLGgpLGgucmVmPU9mKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBhYzphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig2PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVllKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmOD09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPVxuYSxhPWQpOihjKGEsZCksZD1YZShmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihOZihmKSlyZXR1cm4geShhLGQsZixoKTtpZihrYyhmKSlyZXR1cm4gdShhLGQsZixoKTtsJiZQZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAzOmNhc2UgMDpoPWEudHlwZSx3KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgUmY9UWYoITApLFNmPVFmKCExKSxUZj1udWxsLFVmPW51bGwsVmY9ITE7ZnVuY3Rpb24gV2YoYSxiKXt2YXIgYz1uZXcgU2UoNyxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBYZihhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA3OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA4OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBZZihhKXtpZihWZil7dmFyIGI9VWY7aWYoYil7dmFyIGM9YjtpZighWGYoYSxiKSl7Yj1CZShjKTtpZighYnx8IVhmKGEsYikpe2EuZWZmZWN0VGFnfD0yO1ZmPSExO1RmPWE7cmV0dXJufVdmKFRmLGMpfVRmPWE7VWY9Q2UoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9MixWZj0hMSxUZj1hfX1cbmZ1bmN0aW9uIFpmKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY3IT09YS50YWcmJjUhPT1hLnRhZzspYT1hLnJldHVybjtUZj1hfWZ1bmN0aW9uICRmKGEpe2lmKGEhPT1UZilyZXR1cm4hMTtpZighVmYpcmV0dXJuIFpmKGEpLFZmPSEwLCExO3ZhciBiPWEudHlwZTtpZig3IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhQWUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVVmO2I7KVdmKGEsYiksYj1CZShiKTtaZihhKTtVZj1UZj9CZShhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBhZygpe1VmPVRmPW51bGw7VmY9ITF9XG5mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYS5fcmVhY3RTdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVhY3RSZXN1bHQ7Y2FzZSAyOnRocm93IGEuX3JlYWN0UmVzdWx0O2Nhc2UgMDp0aHJvdyBhO2RlZmF1bHQ6dGhyb3cgYS5fcmVhY3RTdGF0dXM9MCxhLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3JlYWN0U3RhdHVzKXthLl9yZWFjdFN0YXR1cz0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3ZhciBjPWIuZGVmYXVsdDtiPXZvaWQgMCE9PWMmJm51bGwhPT1jP2M6Yn1hLl9yZWFjdFJlc3VsdD1ifX0sZnVuY3Rpb24oYil7MD09PWEuX3JlYWN0U3RhdHVzJiYoYS5fcmVhY3RTdGF0dXM9MixhLl9yZWFjdFJlc3VsdD1iKX0pLGE7fX12YXIgY2c9WWIuUmVhY3RDdXJyZW50T3duZXI7ZnVuY3Rpb24gTyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1NmKGIsbnVsbCxjLGQpOlJmKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO2lmKCFMLmN1cnJlbnQmJmIubWVtb2l6ZWRQcm9wcz09PWQmJmY9PT0obnVsbCE9PWE/YS5yZWY6bnVsbCkpcmV0dXJuIGVnKGEsYixlKTtjPWMoZCxmKTtPKGEsYixjLGUpO2IubWVtb2l6ZWRQcm9wcz1kO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGZnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZ2coYSxiLGMsZCxlKXt2YXIgZj1NKGMpP0dlOksuY3VycmVudDtmPUhlKGIsZik7dWYoYixlKTtjPWMoZCxmKTtiLmVmZmVjdFRhZ3w9MTtPKGEsYixjLGUpO2IubWVtb2l6ZWRQcm9wcz1kO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGcoYSxiLGMsZCxlKXtpZihNKGMpKXt2YXIgZj0hMDtNZShiKX1lbHNlIGY9ITE7dWYoYixlKTtpZihudWxsPT09YSlpZihudWxsPT09Yi5zdGF0ZU5vZGUpe3ZhciBnPU0oYyk/R2U6Sy5jdXJyZW50LGs9Yy5jb250ZXh0VHlwZXMsaD1udWxsIT09ayYmdm9pZCAwIT09aztrPWg/SGUoYixnKTpGZTt2YXIgbD1uZXcgYyhkLGspO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09bC5zdGF0ZSYmdm9pZCAwIT09bC5zdGF0ZT9sLnN0YXRlOm51bGw7bC51cGRhdGVyPUpmO2Iuc3RhdGVOb2RlPWw7bC5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7aCYmKGg9Yi5zdGF0ZU5vZGUsaC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWcsaC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1rKTtNZihiLGMsZCxlKTtkPSEwfWVsc2V7Zz1iLnN0YXRlTm9kZTtrPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWs7dmFyIG09Zy5jb250ZXh0O1xuaD1NKGMpP0dlOksuY3VycmVudDtoPUhlKGIsaCk7dmFyIHQ9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHR8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChrIT09ZHx8bSE9PWgpJiZMZihiLGcsZCxoKTthZj0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7bT1nLnN0YXRlPXg7dmFyIHo9Yi51cGRhdGVRdWV1ZTtudWxsIT09eiYmKGtmKGIseixkLGcsZSksbT1iLm1lbW9pemVkU3RhdGUpO2shPT1kfHx4IT09bXx8TC5jdXJyZW50fHxhZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHQmJihGZihiLGMsdCxkKSxtPWIubWVtb2l6ZWRTdGF0ZSksKGs9YWZ8fEtmKGIsYyxrLGQseCxtLGgpKT8obHx8XCJmdW5jdGlvblwiIT09XG50eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW0pLGcucHJvcHM9ZCxnLnN0YXRlPW0sZy5jb250ZXh0PWgsZD1rKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGs9XG5iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1rLG09Zy5jb250ZXh0LGg9TShjKT9HZTpLLmN1cnJlbnQsaD1IZShiLGgpLHQ9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHR8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChrIT09ZHx8bSE9PWgpJiZMZihiLGcsZCxoKSxhZj0hMSxtPWIubWVtb2l6ZWRTdGF0ZSx4PWcuc3RhdGU9bSx6PWIudXBkYXRlUXVldWUsbnVsbCE9PXomJihrZihiLHosZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlKSxrIT09ZHx8bSE9PXh8fEwuY3VycmVudHx8YWY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB0JiYoRmYoYixjLHQsZCkseD1iLm1lbW9pemVkU3RhdGUpLCh0PWFmfHxLZihiLGMsayxkLFxubSx4LGgpKT8obHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGs9PT1hLm1lbW9pemVkUHJvcHMmJm09PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8az09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1oLGQ9dCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8az09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8az09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBpZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBpZyhhLGIsYyxkLGUsZil7ZmcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJk5lKGIsYywhMSksZWcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7Y2cuY3VycmVudD1iO3ZhciBrPWc/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnJiYoTyhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO08oYSxiLGssZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWQucHJvcHM7ZSYmTmUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBqZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0tlKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJktlKGEsYi5jb250ZXh0LCExKTtBZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBuZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIG9nKGEsYixjLGQpe251bGwhPT1hP3coXCIxNTVcIik6dm9pZCAwO3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnRoZW4pe2M9YmcoYyk7dmFyIGY9YztmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP1RlKGYpPzM6MTp2b2lkIDAhPT1mJiZudWxsIT09ZiYmZi4kJHR5cGVvZj8xNDo0O2Y9Yi50YWc9Zjt2YXIgZz1uZyhjLGUpO3N3aXRjaChmKXtjYXNlIDE6cmV0dXJuIGdnKGEsYixjLGcsZCk7Y2FzZSAzOnJldHVybiBoZyhhLGIsYyxnLGQpO2Nhc2UgMTQ6cmV0dXJuIGRnKGEsYixjLGcsZCk7ZGVmYXVsdDp3KFwiMjgzXCIsYyl9fWY9SGUoYixLLmN1cnJlbnQpO3VmKGIsZCk7Zj1jKGUsZik7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYucmVuZGVyJiZ2b2lkIDA9PT1mLiQkdHlwZW9mKXtiLnRhZz0yO00oYyk/XG4oZz0hMCxNZShiKSk6Zz0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWYuc3RhdGUmJnZvaWQgMCE9PWYuc3RhdGU/Zi5zdGF0ZTpudWxsO3ZhciBrPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBrJiZGZihiLGMsayxlKTtmLnVwZGF0ZXI9SmY7Yi5zdGF0ZU5vZGU9ZjtmLl9yZWFjdEludGVybmFsRmliZXI9YjtNZihiLGMsZSxkKTtyZXR1cm4gaWcoYSxiLGMsITAsZyxkKX1iLnRhZz0wO08oYSxiLGYsZCk7Yi5tZW1vaXplZFByb3BzPWU7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBlZyhhLGIsYyl7bnVsbCE9PWEmJihiLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5KTt2YXIgZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMD09PWR8fGQ+YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dyhcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVVlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVVlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKCFMLmN1cnJlbnQmJigwPT09ZHx8ZD5jKSl7c3dpdGNoKGIudGFnKXtjYXNlIDU6amcoYik7YWcoKTticmVhaztjYXNlIDc6Q2YoYik7YnJlYWs7Y2FzZSAyOk0oYi50eXBlKSYmTWUoYik7YnJlYWs7Y2FzZSAzOk0oYi50eXBlLl9yZWFjdFJlc3VsdCkmJk1lKGIpO2JyZWFrO2Nhc2UgNjpBZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTI6c2YoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpfXJldHVybiBlZyhhLGIsYyl9Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSA0OnJldHVybiBvZyhhLGIsYi50eXBlLGMpO2Nhc2UgMDpyZXR1cm4gZ2coYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE6dmFyIGU9Yi50eXBlLl9yZWFjdFJlc3VsdDtkPWIucGVuZGluZ1Byb3BzO2E9Z2coYSxiLGUsbmcoZSxkKSxjKTtiLm1lbW9pemVkUHJvcHM9ZDtyZXR1cm4gYTtcbmNhc2UgMjpyZXR1cm4gaGcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDM6cmV0dXJuIGU9Yi50eXBlLl9yZWFjdFJlc3VsdCxkPWIucGVuZGluZ1Byb3BzLGE9aGcoYSxiLGUsbmcoZSxkKSxjKSxiLm1lbW9pemVkUHJvcHM9ZCxhO2Nhc2UgNTpqZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/dyhcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDtrZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKWFnKCksYj1lZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSlVZj1DZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxUZj1iLGU9VmY9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1TZihiLG51bGwsZCxjKSk6KE8oYSxiLGQsYyksYWcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO1xuY2FzZSA3OkNmKGIpO251bGw9PT1hJiZZZihiKTtkPWIudHlwZTtlPWIucGVuZGluZ1Byb3BzO3ZhciBmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbjtBZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmQWUoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNik7ZmcoYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWUsYj1udWxsKTooTyhhLGIsZyxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgODpyZXR1cm4gbnVsbD09PWEmJllmKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgMTY6cmV0dXJuIG51bGw7Y2FzZSA2OnJldHVybiBBZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1SZihiLG51bGwsZCxjKTpPKGEsYixkLGMpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5jaGlsZDtjYXNlIDEzOnJldHVybiBkZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLl9yZWFjdFJlc3VsdCxkPWIucGVuZGluZ1Byb3BzLGE9ZGcoYSxiLGUsbmcoZSxkKSxjKSxiLm1lbW9pemVkUHJvcHM9ZCxhO2Nhc2UgOTpyZXR1cm4gZD1iLnBlbmRpbmdQcm9wcyxPKGEsYixkLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixPKGEsYixkLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7Y2FzZSAxNTpyZXR1cm4gZD1iLnBlbmRpbmdQcm9wcyxPKGEsYixkLmNoaWxkcmVuLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7Y2FzZSAxMjphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtzZihiLGYpO2lmKG51bGwhPT1nKXt2YXIgaz1nLnZhbHVlO1xuZj1rPT09ZiYmKDAhPT1rfHwxL2s9PT0xL2YpfHxrIT09ayYmZiE9PWY/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGssZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFMLmN1cnJlbnQpe2I9ZWcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGc9Yi5jaGlsZCxudWxsIT09ZyYmKGcucmV0dXJuPWIpO251bGwhPT1nOyl7az1nLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7aWYobnVsbCE9PWspe2Rve2lmKGsuY29udGV4dD09PWQmJjAhPT0oay5vYnNlcnZlZEJpdHMmZikpe2lmKDI9PT1nLnRhZ3x8Mz09PWcudGFnKXt2YXIgaD1kZihjKTtoLnRhZz0yO2ZmKGcsaCl9aWYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+YylnLmV4cGlyYXRpb25UaW1lPWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKDA9PT1oLmV4cGlyYXRpb25UaW1lfHxcbmguZXhwaXJhdGlvblRpbWU+YykmJihoLmV4cGlyYXRpb25UaW1lPWMpO2Zvcih2YXIgbD1nLnJldHVybjtudWxsIT09bDspe2g9bC5hbHRlcm5hdGU7aWYoMD09PWwuY2hpbGRFeHBpcmF0aW9uVGltZXx8bC5jaGlsZEV4cGlyYXRpb25UaW1lPmMpbC5jaGlsZEV4cGlyYXRpb25UaW1lPWMsbnVsbCE9PWgmJigwPT09aC5jaGlsZEV4cGlyYXRpb25UaW1lfHxoLmNoaWxkRXhwaXJhdGlvblRpbWU+YykmJihoLmNoaWxkRXhwaXJhdGlvblRpbWU9Yyk7ZWxzZSBpZihudWxsIT09aCYmKDA9PT1oLmNoaWxkRXhwaXJhdGlvblRpbWV8fGguY2hpbGRFeHBpcmF0aW9uVGltZT5jKSloLmNoaWxkRXhwaXJhdGlvblRpbWU9YztlbHNlIGJyZWFrO2w9bC5yZXR1cm59fWg9Zy5jaGlsZDtrPWsubmV4dH13aGlsZShudWxsIT09ayl9ZWxzZSBoPTEyPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1oKWgucmV0dXJuPWc7ZWxzZSBmb3IoaD1nO251bGwhPT1cbmg7KXtpZihoPT09Yil7aD1udWxsO2JyZWFrfWc9aC5zaWJsaW5nO2lmKG51bGwhPT1nKXtnLnJldHVybj1oLnJldHVybjtoPWc7YnJlYWt9aD1oLnJldHVybn1nPWh9fU8oYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgMTE6cmV0dXJuIGY9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLHVmKGIsYyksZj12ZihmLGQudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxlPWUoZiksYi5lZmZlY3RUYWd8PTEsTyhhLGIsZSxjKSxiLm1lbW9pemVkUHJvcHM9ZCxiLmNoaWxkO2RlZmF1bHQ6dyhcIjE1NlwiKX19ZnVuY3Rpb24gcWcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIHJnPXZvaWQgMCxzZz12b2lkIDAsdGc9dm9pZCAwO3JnPWZ1bmN0aW9uKCl7fTtzZz1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9YykmJnFnKGIpfTt0Zz1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmcWcoYil9O1xuZnVuY3Rpb24gdWcoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1tYyhjKSk7bnVsbCE9PWMmJmxjKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJmxjKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIHZnKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe3dnKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIHhnKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBQZSYmUGUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAzOnZnKGEpO3ZhciBiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7d2coYSxjKX1icmVhaztjYXNlIDc6dmcoYSk7YnJlYWs7Y2FzZSA2OnlnKGEpfX1mdW5jdGlvbiB6ZyhhKXtyZXR1cm4gNz09PWEudGFnfHw1PT09YS50YWd8fDY9PT1hLnRhZ31cbmZ1bmN0aW9uIEFnKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKHpnKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn13KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA3OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDU6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA2OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dyhcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKG9lKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHx6ZyhjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NyE9PWMudGFnJiY4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8Nj09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDc9PT1lLnRhZ3x8OD09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGs9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsayk6Zi5pbnNlcnRCZWZvcmUoZyxrKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZj1iLGc9ZS5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/KGs9Zi5wYXJlbnROb2RlLGsuaW5zZXJ0QmVmb3JlKGcsZikpOihrPWYsay5hcHBlbmRDaGlsZChnKSksbnVsbD09PWsub25jbGljayYmKGsub25jbGljaz13ZSkpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNiE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49XG5lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIHlnKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP3coXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA3OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgNTpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNjpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig3PT09Yi50YWd8fDg9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZih4ZyhnKSxudWxsIT09Zy5jaGlsZCYmNiE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig2PT09Yi50YWc/KGQ9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxlPSEwKTp4ZyhiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47Nj09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiBCZyhhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMzpicmVhaztjYXNlIDc6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbSmFdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkNjKGMsZCk7dWUoYSxlKTtiPXVlKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saz1mW2UrMV07XCJzdHlsZVwiPT09Zz9yZShjLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/bmUoYyxrKTpcImNoaWxkcmVuXCI9PT1nP29lKGMsayk6eGMoYyxnLGssYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkRjKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsXG5jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2VlKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9lZShjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZWUoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1icmVhaztjYXNlIDg6bnVsbD09PWIuc3RhdGVOb2RlP3coXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSA1OmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OncoXCIxNjNcIil9fWZ1bmN0aW9uIENnKGEsYixjKXtjPWRmKGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0RnKGQpO3VnKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gRWcoYSxiLGMpe2M9ZGYoYyk7Yy50YWc9Mzt2YXIgZD1hLnN0YXRlTm9kZTtudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7bnVsbD09PUZnP0ZnPW5ldyBTZXQoW3RoaXNdKTpGZy5hZGQodGhpcyk7dmFyIGM9Yi52YWx1ZSxkPWIuc3RhY2s7dWcoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1kP2Q6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBHZyhhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpNKGEudHlwZSkmJkllKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIE0oYS50eXBlLl9yZWFjdFJlc3VsdCkmJkllKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBCZihhKSxKZShhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/dyhcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhO2Nhc2UgNzpyZXR1cm4gRGYoYSksbnVsbDtjYXNlIDE2OnJldHVybiBiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNjpyZXR1cm4gQmYoYSksbnVsbDtjYXNlIDEyOnJldHVybiB0ZihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEhnPXtyZWFkQ29udGV4dDp2Zn0sSWc9WWIuUmVhY3RDdXJyZW50T3duZXIsSmc9MCxLZz0wLExnPSExLFA9bnVsbCxNZz1udWxsLFE9MCxOZz0hMSxSPW51bGwsT2c9ITEsRmc9bnVsbDtmdW5jdGlvbiBQZygpe2lmKG51bGwhPT1QKWZvcih2YXIgYT1QLnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGM9Yi50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZJZShiKTticmVhaztjYXNlIDM6Yz1iLnR5cGUuX3JlYWN0UmVzdWx0LmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZJZShiKTticmVhaztjYXNlIDU6QmYoYik7SmUoYik7YnJlYWs7Y2FzZSA3OkRmKGIpO2JyZWFrO2Nhc2UgNjpCZihiKTticmVhaztjYXNlIDEyOnRmKGIpfWE9YS5yZXR1cm59TWc9bnVsbDtRPTA7Tmc9ITE7UD1udWxsfVxuZnVuY3Rpb24gUWcoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7dmFyIGU9YjtiPWE7dmFyIGY9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxOmJyZWFrO2Nhc2UgMjpNKGIudHlwZSkmJkllKGIpO2JyZWFrO2Nhc2UgMzpNKGIudHlwZS5fcmVhY3RSZXN1bHQpJiZJZShiKTticmVhaztjYXNlIDU6QmYoYik7SmUoYik7Zj1iLnN0YXRlTm9kZTtmLnBlbmRpbmdDb250ZXh0JiYoZi5jb250ZXh0PWYucGVuZGluZ0NvbnRleHQsZi5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpJGYoYiksYi5lZmZlY3RUYWcmPS0zO3JnKGIpO2JyZWFrO2Nhc2UgNzpEZihiKTt2YXIgZz16Zih5Zi5jdXJyZW50KSxrPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBoPWUubWVtb2l6ZWRQcm9wcztpZihoIT09Zil7dmFyIGw9XG5iLnN0YXRlTm9kZSxtPXpmKE4uY3VycmVudCksdD1sLHg9azt2YXIgej1oO3ZhciB5PWY7bD1nO3ZhciB1PW51bGw7c3dpdGNoKHgpe2Nhc2UgXCJpbnB1dFwiOno9emModCx6KTt5PXpjKHQseSk7dT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ej1kZSh0LHopO3k9ZGUodCx5KTt1PVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp6PW4oe30seix7dmFsdWU6dm9pZCAwfSk7eT1uKHt9LHkse3ZhbHVlOnZvaWQgMH0pO3U9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ej1mZSh0LHopO3k9ZmUodCx5KTt1PVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIHoub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHkub25DbGljayYmKHQub25jbGljaz13ZSl9dGUoeCx5KTt4PXQ9dm9pZCAwO3ZhciB2PW51bGw7Zm9yKHQgaW4geilpZigheS5oYXNPd25Qcm9wZXJ0eSh0KSYmei5oYXNPd25Qcm9wZXJ0eSh0KSYmbnVsbCE9elt0XSlpZihcInN0eWxlXCI9PT10KXt2YXIgcj16W3RdO2Zvcih4IGluIHIpci5oYXNPd25Qcm9wZXJ0eSh4KSYmXG4odnx8KHY9e30pLHZbeF09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PXQmJlwiY2hpbGRyZW5cIiE9PXQmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT10JiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09dCYmXCJhdXRvRm9jdXNcIiE9PXQmJihzYS5oYXNPd25Qcm9wZXJ0eSh0KT91fHwodT1bXSk6KHU9dXx8W10pLnB1c2godCxudWxsKSk7Zm9yKHQgaW4geSl7dmFyIHA9eVt0XTtyPW51bGwhPXo/elt0XTp2b2lkIDA7aWYoeS5oYXNPd25Qcm9wZXJ0eSh0KSYmcCE9PXImJihudWxsIT1wfHxudWxsIT1yKSlpZihcInN0eWxlXCI9PT10KWlmKHIpe2Zvcih4IGluIHIpIXIuaGFzT3duUHJvcGVydHkoeCl8fHAmJnAuaGFzT3duUHJvcGVydHkoeCl8fCh2fHwodj17fSksdlt4XT1cIlwiKTtmb3IoeCBpbiBwKXAuaGFzT3duUHJvcGVydHkoeCkmJnJbeF0hPT1wW3hdJiYodnx8KHY9e30pLHZbeF09cFt4XSl9ZWxzZSB2fHwodXx8KHU9W10pLHUucHVzaCh0LFxudikpLHY9cDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09dD8ocD1wP3AuX19odG1sOnZvaWQgMCxyPXI/ci5fX2h0bWw6dm9pZCAwLG51bGwhPXAmJnIhPT1wJiYodT11fHxbXSkucHVzaCh0LFwiXCIrcCkpOlwiY2hpbGRyZW5cIj09PXQ/cj09PXB8fFwic3RyaW5nXCIhPT10eXBlb2YgcCYmXCJudW1iZXJcIiE9PXR5cGVvZiBwfHwodT11fHxbXSkucHVzaCh0LFwiXCIrcCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PXQmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT10JiYoc2EuaGFzT3duUHJvcGVydHkodCk/KG51bGwhPXAmJnZlKGwsdCksdXx8cj09PXB8fCh1PVtdKSk6KHU9dXx8W10pLnB1c2godCxwKSl9diYmKHU9dXx8W10pLnB1c2goXCJzdHlsZVwiLHYpO3NnKGUsYix1LGssaCxmLGcsbSl9ZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYoZil7dT16ZihOLmN1cnJlbnQpO2lmKCRmKGIpKXtmPWI7bD1mLnN0YXRlTm9kZTtlPWYudHlwZTtcbmg9Zi5tZW1vaXplZFByb3BzO209ZztsW0lhXT1mO2xbSmFdPWg7az12b2lkIDA7Zz1sO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkgoXCJsb2FkXCIsZyk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGw9MDtsPGZiLmxlbmd0aDtsKyspSChmYltsXSxnKTticmVhaztjYXNlIFwic291cmNlXCI6SChcImVycm9yXCIsZyk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6SChcImVycm9yXCIsZyk7SChcImxvYWRcIixnKTticmVhaztjYXNlIFwiZm9ybVwiOkgoXCJyZXNldFwiLGcpO0goXCJzdWJtaXRcIixnKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkgoXCJ0b2dnbGVcIixnKTticmVhaztjYXNlIFwiaW5wdXRcIjpCYyhnLGgpO0goXCJpbnZhbGlkXCIsZyk7dmUobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpnLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhaC5tdWx0aXBsZX07SChcImludmFsaWRcIixnKTt2ZShtLFwib25DaGFuZ2VcIik7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpnZShnLGgpLEgoXCJpbnZhbGlkXCIsZyksdmUobSxcIm9uQ2hhbmdlXCIpfXRlKGUsaCk7bD1udWxsO2ZvcihrIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShrKSYmKHU9aFtrXSxcImNoaWxkcmVuXCI9PT1rP1wic3RyaW5nXCI9PT10eXBlb2YgdT9nLnRleHRDb250ZW50IT09dSYmKGw9W1wiY2hpbGRyZW5cIix1XSk6XCJudW1iZXJcIj09PXR5cGVvZiB1JiZnLnRleHRDb250ZW50IT09XCJcIit1JiYobD1bXCJjaGlsZHJlblwiLFwiXCIrdV0pOnNhLmhhc093blByb3BlcnR5KGspJiZudWxsIT11JiZ2ZShtLGspKTtzd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6V2IoZyk7RmMoZyxoLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpXYihnKTtpZShnLGgpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoZy5vbmNsaWNrPXdlKX1rPWw7Zi51cGRhdGVRdWV1ZT1rO2Y9bnVsbCE9PWs/ITA6ITE7XG5mJiZxZyhiKX1lbHNle2g9YjtlPWs7bT1mO2w9OT09PWcubm9kZVR5cGU/ZzpnLm93bmVyRG9jdW1lbnQ7dT09PWplLmh0bWwmJih1PWtlKGUpKTt1PT09amUuaHRtbD9cInNjcmlwdFwiPT09ZT8oZT1sLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixsPWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBtLmlzP2w9bC5jcmVhdGVFbGVtZW50KGUse2lzOm0uaXN9KToobD1sLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJm0ubXVsdGlwbGUmJihsLm11bHRpcGxlPSEwKSk6bD1sLmNyZWF0ZUVsZW1lbnROUyh1LGUpO2U9bDtlW0lhXT1oO2VbSmFdPWY7YTpmb3IoaD1lLG09YixsPW0uY2hpbGQ7bnVsbCE9PWw7KXtpZig3PT09bC50YWd8fDg9PT1sLnRhZyloLmFwcGVuZENoaWxkKGwuc3RhdGVOb2RlKTtlbHNlIGlmKDYhPT1sLnRhZyYmbnVsbCE9PWwuY2hpbGQpe2wuY2hpbGQucmV0dXJuPVxubDtsPWwuY2hpbGQ7Y29udGludWV9aWYobD09PW0pYnJlYWs7Zm9yKDtudWxsPT09bC5zaWJsaW5nOyl7aWYobnVsbD09PWwucmV0dXJufHxsLnJldHVybj09PW0pYnJlYWsgYTtsPWwucmV0dXJufWwuc2libGluZy5yZXR1cm49bC5yZXR1cm47bD1sLnNpYmxpbmd9bT1lO2w9aztoPWY7dD1nO3Y9dWUobCxoKTtzd2l0Y2gobCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpIKFwibG9hZFwiLG0pO2c9aDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZz0wO2c8ZmIubGVuZ3RoO2crKylIKGZiW2ddLG0pO2c9aDticmVhaztjYXNlIFwic291cmNlXCI6SChcImVycm9yXCIsbSk7Zz1oO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkgoXCJlcnJvclwiLG0pO0goXCJsb2FkXCIsbSk7Zz1oO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIsbSk7SChcInN1Ym1pdFwiLG0pO2c9aDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkgoXCJ0b2dnbGVcIixtKTtnPWg7YnJlYWs7XG5jYXNlIFwiaW5wdXRcIjpCYyhtLGgpO2c9emMobSxoKTtIKFwiaW52YWxpZFwiLG0pO3ZlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zz1kZShtLGgpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjptLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhaC5tdWx0aXBsZX07Zz1uKHt9LGgse3ZhbHVlOnZvaWQgMH0pO0goXCJpbnZhbGlkXCIsbSk7dmUodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmdlKG0saCk7Zz1mZShtLGgpO0goXCJpbnZhbGlkXCIsbSk7dmUodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zz1ofXRlKGwsZyk7dT12b2lkIDA7ej1sO3k9bTt4PWc7Zm9yKHUgaW4geCl4Lmhhc093blByb3BlcnR5KHUpJiYocj14W3VdLFwic3R5bGVcIj09PXU/cmUoeSxyKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT11PyhyPXI/ci5fX2h0bWw6dm9pZCAwLG51bGwhPXImJm5lKHkscikpOlwiY2hpbGRyZW5cIj09PXU/XCJzdHJpbmdcIj09PXR5cGVvZiByPyhcInRleHRhcmVhXCIhPT1cbnp8fFwiXCIhPT1yKSYmb2UoeSxyKTpcIm51bWJlclwiPT09dHlwZW9mIHImJm9lKHksXCJcIityKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09dSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PXUmJlwiYXV0b0ZvY3VzXCIhPT11JiYoc2EuaGFzT3duUHJvcGVydHkodSk/bnVsbCE9ciYmdmUodCx1KTpudWxsIT1yJiZ4Yyh5LHUscix2KSkpO3N3aXRjaChsKXtjYXNlIFwiaW5wdXRcIjpXYihtKTtGYyhtLGgsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOldiKG0pO2llKG0saCk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWgudmFsdWUmJm0uc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3ljKGgudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6Zz1tO2cubXVsdGlwbGU9ISFoLm11bHRpcGxlO209aC52YWx1ZTtudWxsIT1tP2VlKGcsISFoLm11bHRpcGxlLG0sITEpOm51bGwhPWguZGVmYXVsdFZhbHVlJiZlZShnLCEhaC5tdWx0aXBsZSxoLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7XG5kZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLm9uQ2xpY2smJihtLm9uY2xpY2s9d2UpfShmPXplKGssZikpJiZxZyhiKTtiLnN0YXRlTm9kZT1lfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgbnVsbD09PWIuc3RhdGVOb2RlP3coXCIxNjZcIik6dm9pZCAwO2JyZWFrO2Nhc2UgODplJiZudWxsIT1iLnN0YXRlTm9kZT90ZyhlLGIsZS5tZW1vaXplZFByb3BzLGYpOihcInN0cmluZ1wiIT09dHlwZW9mIGYmJihudWxsPT09Yi5zdGF0ZU5vZGU/dyhcIjE2NlwiKTp2b2lkIDApLGc9emYoeWYuY3VycmVudCksemYoTi5jdXJyZW50KSwkZihiKT8oZj1iLGs9Zi5zdGF0ZU5vZGUsZz1mLm1lbW9pemVkUHJvcHMsa1tJYV09ZiwoZj1rLm5vZGVWYWx1ZSE9PWcpJiZxZyhiKSk6KGs9YixmPSg5PT09Zy5ub2RlVHlwZT9nOmcub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZiksZltJYV09ayxiLnN0YXRlTm9kZT1mKSk7YnJlYWs7Y2FzZSAxMzpjYXNlIDE0OmJyZWFrO1xuY2FzZSAxNjpicmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxMDpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgNjpCZihiKTtyZyhiKTticmVhaztjYXNlIDEyOnRmKGIpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSA0OncoXCIxNjdcIik7ZGVmYXVsdDp3KFwiMTU2XCIpfWI9UD1udWxsO2Y9YTtpZigxMDczNzQxODIzPT09UXx8MTA3Mzc0MTgyMyE9PWYuY2hpbGRFeHBpcmF0aW9uVGltZSl7az0wO2ZvcihnPWYuY2hpbGQ7bnVsbCE9PWc7KXtlPWcuZXhwaXJhdGlvblRpbWU7aD1nLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMD09PWt8fDAhPT1lJiZlPGspaz1lO2lmKDA9PT1rfHwwIT09aCYmaDxrKWs9aDtnPWcuc2libGluZ31mLmNoaWxkRXhwaXJhdGlvblRpbWU9a31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJlxuKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpfWVsc2V7YT1HZyhhLFEpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9NTExLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD01MTIpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPXBnKGEuYWx0ZXJuYXRlLGEsUSk7bnVsbD09PWImJihiPVFnKGEpKTtJZy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7TGc/dyhcIjI0M1wiKTp2b2lkIDA7TGc9ITA7SWcuY3VycmVudERpc3BhdGNoZXI9SGc7dmFyIGQ9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtpZihkIT09UXx8YSE9PU1nfHxudWxsPT09UClQZygpLE1nPWEsUT1kLFA9VWUoTWcuY3VycmVudCxudWxsLFEpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9ITE7ZG97dHJ5e2lmKGIpZm9yKDtudWxsIT09UCYmIVRnKCk7KVA9UmcoUCk7ZWxzZSBmb3IoO251bGwhPT1QOylQPVJnKFApfWNhdGNoKHQpe2lmKG51bGw9PT1QKWU9ITAsRGcodCk7ZWxzZXtudWxsPT09UD93KFwiMjcxXCIpOnZvaWQgMDt2YXIgZj1QLGc9Zi5yZXR1cm47aWYobnVsbD09PWcpZT0hMCxEZyh0KTtlbHNle2E6e3ZhciBrPWcsaD1mLGw9dDtnPVE7aC5lZmZlY3RUYWd8PTUxMjtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO05nPSEwO2w9bmYobCxoKTtkb3tzd2l0Y2goay50YWcpe2Nhc2UgNTprLmVmZmVjdFRhZ3w9XG4xMDI0O2suZXhwaXJhdGlvblRpbWU9ZztnPUNnKGssbCxnKTtnZihrLGcpO2JyZWFrIGE7Y2FzZSAyOmNhc2UgMzpoPWw7dmFyIG09ay5zdGF0ZU5vZGU7aWYoMD09PShrLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1tJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GZ3x8IUZnLmhhcyhtKSkpe2suZWZmZWN0VGFnfD0xMDI0O2suZXhwaXJhdGlvblRpbWU9ZztnPUVnKGssaCxnKTtnZihrLGcpO2JyZWFrIGF9fWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspfVA9UWcoZik7Y29udGludWV9fX1icmVha313aGlsZSgxKTtMZz0hMTtyZj1xZj1wZj1JZy5jdXJyZW50RGlzcGF0Y2hlcj1udWxsO2lmKGUpTWc9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2UgaWYobnVsbCE9PVApYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2I9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09Yj93KFwiMjgxXCIpOnZvaWQgMDtNZz1udWxsO2lmKE5nKXtlPWEubGF0ZXN0UGVuZGluZ1RpbWU7XG5mPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZT5kfHwwIT09ZiYmZj5kfHwwIT09ZyYmZz5kKXthLmRpZEVycm9yPSExO2M9YS5sYXRlc3RQaW5nZWRUaW1lOzAhPT1jJiZjPD1kJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO2M9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO2I9YS5sYXRlc3RQZW5kaW5nVGltZTtjPT09ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9Yj09PWQ/YS5sYXRlc3RQZW5kaW5nVGltZT0wOmI6Yj09PWQmJihhLmxhdGVzdFBlbmRpbmdUaW1lPWMpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7Yj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7MD09PWM/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YS5sYXRlc3RTdXNwZW5kZWRUaW1lPWQ6Yz5kP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWQ6YjxkJiYoYS5sYXRlc3RTdXNwZW5kZWRUaW1lPWQpOyRlKGQsYSk7YS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO3JldHVybn1pZighYS5kaWRFcnJvciYmXG4hYyl7YS5kaWRFcnJvcj0hMDthLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWQ7ZD1hLmV4cGlyYXRpb25UaW1lPTE7YS5leHBpcmF0aW9uVGltZT1kO3JldHVybn19YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZDthLmZpbmlzaGVkV29yaz1ifX1cbmZ1bmN0aW9uIHdnKGEsYil7dmFyIGM7YTp7TGcmJiFPZz93KFwiMjYzXCIpOnZvaWQgMDtmb3IoYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAyOmNhc2UgMzp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmd8fCFGZy5oYXMoZCkpKXthPW5mKGIsYSk7YT1FZyhjLGEsMSk7ZmYoYyxhKTtJZihjLDEpO2M9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSA1OmE9bmYoYixhKTthPUNnKGMsYSwxKTtmZihjLGEpO0lmKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1jPWMucmV0dXJufTU9PT1hLnRhZyYmKGM9bmYoYixhKSxjPUNnKGEsYywxKSxmZihhLGMpLElmKGEsMSkpO2M9dm9pZCAwfXJldHVybiBjfVxuZnVuY3Rpb24gSGYoYSxiKXswIT09S2c/YT1LZzpMZz9hPU9nPzE6UTpiLm1vZGUmMT8oYT1VZz8yKzEwKigoKGEtMisxNSkvMTB8MCkrMSk6MisyNSooKChhLTIrNTAwKS8yNXwwKSsxKSxudWxsIT09TWcmJmE9PT1RJiYoYSs9MSkpOmE9MTtVZyYmKDA9PT1WZ3x8YT5WZykmJihWZz1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElmKGEsYil7YTp7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YilhLmV4cGlyYXRpb25UaW1lPWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJigwPT09Yy5leHBpcmF0aW9uVGltZXx8Yy5leHBpcmF0aW9uVGltZT5iKSYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm47aWYobnVsbD09PWQmJjU9PT1hLnRhZylhPWEuc3RhdGVOb2RlO2Vsc2V7Zm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7aWYoMD09PWQuY2hpbGRFeHBpcmF0aW9uVGltZXx8ZC5jaGlsZEV4cGlyYXRpb25UaW1lPmIpZC5jaGlsZEV4cGlyYXRpb25UaW1lPWI7bnVsbCE9PWMmJigwPT09Yy5jaGlsZEV4cGlyYXRpb25UaW1lfHxjLmNoaWxkRXhwaXJhdGlvblRpbWU+YikmJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiY1PT09ZC50YWcpe2E9ZC5zdGF0ZU5vZGU7YnJlYWsgYX1kPWQucmV0dXJufWE9bnVsbH19aWYobnVsbCE9PVxuYSl7IUxnJiYwIT09USYmYjxRJiZQZygpO1plKGEsYik7aWYoIUxnfHxPZ3x8TWchPT1hKXtiPWE7YT1hLmV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1iLm5leHRTY2hlZHVsZWRSb290KWIuZXhwaXJhdGlvblRpbWU9YSxudWxsPT09VD8oVT1UPWIsYi5uZXh0U2NoZWR1bGVkUm9vdD1iKTooVD1ULm5leHRTY2hlZHVsZWRSb290PWIsVC5uZXh0U2NoZWR1bGVkUm9vdD1VKTtlbHNlIGlmKGM9Yi5leHBpcmF0aW9uVGltZSwwPT09Y3x8YTxjKWIuZXhwaXJhdGlvblRpbWU9YTtWfHwoVz9XZyYmKFk9YixaPTEsWGcoYiwxLCEwKSk6MT09PWE/WWcoMSxudWxsKTpaZyhiLGEpKX0kZz5haCYmKCRnPTAsdyhcIjE4NVwiKSl9fWZ1bmN0aW9uIGJoKGEsYixjLGQsZSl7dmFyIGY9S2c7S2c9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtLZz1mfX1cbnZhciBVPW51bGwsVD1udWxsLGNoPTAsZGg9dm9pZCAwLFY9ITEsWT1udWxsLFo9MCxWZz0wLGVoPSExLGZoPSExLGdoPW51bGwsaGg9bnVsbCxXPSExLFdnPSExLFVnPSExLGloPW51bGwsamg9YmEudW5zdGFibGVfbm93KCksa2g9KGpoLzEwfDApKzIsbGg9a2gsYWg9NTAsJGc9MCxtaD1udWxsLG5oPTE7ZnVuY3Rpb24gb2goKXtraD0oKGJhLnVuc3RhYmxlX25vdygpLWpoKS8xMHwwKSsyfWZ1bmN0aW9uIFpnKGEsYil7aWYoMCE9PWNoKXtpZihiPmNoKXJldHVybjtudWxsIT09ZGgmJmJhLnVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcmsoZGgpfWNoPWI7YT1iYS51bnN0YWJsZV9ub3coKS1qaDtkaD1iYS51bnN0YWJsZV9zY2hlZHVsZVdvcmsocGgse3RpbWVvdXQ6MTAqKGItMiktYX0pfWZ1bmN0aW9uIEdmKCl7aWYoVilyZXR1cm4gbGg7cWgoKTtpZigwPT09Wnx8MTA3Mzc0MTgyMz09PVopb2goKSxsaD1raDtyZXR1cm4gbGh9XG5mdW5jdGlvbiBxaCgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1UKWZvcih2YXIgYz1ULGQ9VTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09VD93KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7VT1UPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1VKVU9ZT1kLm5leHRTY2hlZHVsZWRSb290LFQubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09VCl7VD1jO1QubmV4dFNjaGVkdWxlZFJvb3Q9VTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09VClicmVhaztpZigxPT09YSlicmVhaztcbmM9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fVk9YjtaPWF9ZnVuY3Rpb24gcGgoYSl7aWYoYS5kaWRUaW1lb3V0JiZudWxsIT09VSl7b2goKTt2YXIgYj1VO2Rve3ZhciBjPWIuZXhwaXJhdGlvblRpbWU7MCE9PWMmJmtoPj1jJiYoYi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1raCk7Yj1iLm5leHRTY2hlZHVsZWRSb290fXdoaWxlKGIhPT1VKX1ZZygwLGEpfVxuZnVuY3Rpb24gWWcoYSxiKXtoaD1iO3FoKCk7aWYobnVsbCE9PWhoKWZvcihvaCgpLGxoPWtoO251bGwhPT1ZJiYwIT09WiYmKDA9PT1hfHxhPj1aKSYmKCFlaHx8a2g+PVopOylYZyhZLFosa2g+PVopLHFoKCksb2goKSxsaD1raDtlbHNlIGZvcig7bnVsbCE9PVkmJjAhPT1aJiYoMD09PWF8fGE+PVopOylYZyhZLFosITApLHFoKCk7bnVsbCE9PWhoJiYoY2g9MCxkaD1udWxsKTswIT09WiYmWmcoWSxaKTtoaD1udWxsO2VoPSExOyRnPTA7bWg9bnVsbDtpZihudWxsIT09aWgpZm9yKGE9aWgsaWg9bnVsbCxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtmaHx8KGZoPSEwLGdoPWQpfX1pZihmaCl0aHJvdyBhPWdoLGdoPW51bGwsZmg9ITEsYTt9XG5mdW5jdGlvbiBYZyhhLGIsYyl7Vj93KFwiMjQ1XCIpOnZvaWQgMDtWPSEwO2lmKG51bGw9PT1oaHx8Yyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/cmgoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLFNnKGEsITEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmcmgoYSxkLGIpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/cmgoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLFNnKGEsITAsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmKFRnKCk/YS5maW5pc2hlZFdvcms9ZDpyaChhLGQsYikpKTtWPSExfVxuZnVuY3Rpb24gcmgoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09aWg/aWg9W2RdOmloLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09bWg/JGcrKzoobWg9YSwkZz0wKTtPZz1MZz0hMDthLmN1cnJlbnQ9PT1iP3coXCIxNzdcIik6dm9pZCAwO2M9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWM/dyhcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDtkPWIuZXhwaXJhdGlvblRpbWU7dmFyIGU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2Q9MD09PWR8fDAhPT1lJiZlPGQ/ZTpkO2EuZGlkRXJyb3I9ITE7MD09PWQ/KGEuZWFybGllc3RQZW5kaW5nVGltZT0wLGEubGF0ZXN0UGVuZGluZ1RpbWU9MCxhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT1cbjAsYS5sYXRlc3RQaW5nZWRUaW1lPTApOihlPWEubGF0ZXN0UGVuZGluZ1RpbWUsMCE9PWUmJihlPGQ/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU8ZCYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSksZT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSwwPT09ZT9aZShhLGQpOmQ+YS5sYXRlc3RTdXNwZW5kZWRUaW1lPyhhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wLFplKGEsZCkpOmQ8ZSYmWmUoYSxkKSk7JGUoMCxhKTtJZy5jdXJyZW50PW51bGw7MTxiLmVmZmVjdFRhZz9udWxsIT09Yi5sYXN0RWZmZWN0PyhiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLGQ9Yi5maXJzdEVmZmVjdCk6ZD1iOmQ9Yi5maXJzdEVmZmVjdDt4ZT1HZDtlPVRkKCk7aWYoVWQoZSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGUpdmFyIGY9XG57c3RhcnQ6ZS5zZWxlY3Rpb25TdGFydCxlbmQ6ZS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Zj0oZj1lLm93bmVyRG9jdW1lbnQpJiZmLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGc9Zi5nZXRTZWxlY3Rpb24mJmYuZ2V0U2VsZWN0aW9uKCk7aWYoZyYmMCE9PWcucmFuZ2VDb3VudCl7Zj1nLmFuY2hvck5vZGU7dmFyIGs9Zy5hbmNob3JPZmZzZXQsaD1nLmZvY3VzTm9kZTtnPWcuZm9jdXNPZmZzZXQ7dHJ5e2Yubm9kZVR5cGUsaC5ub2RlVHlwZX1jYXRjaChYYSl7Zj1udWxsO2JyZWFrIGF9dmFyIGw9MCxtPS0xLHQ9LTEseD0wLHo9MCx5PWUsdT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHY7Oyl7eSE9PWZ8fDAhPT1rJiYzIT09eS5ub2RlVHlwZXx8KG09bCtrKTt5IT09aHx8MCE9PWcmJjMhPT15Lm5vZGVUeXBlfHwodD1sK2cpOzM9PT15Lm5vZGVUeXBlJiYobCs9eS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHY9eS5maXJzdENoaWxkKSlicmVhazt1PXk7eT12fWZvcig7Oyl7aWYoeT09PVxuZSlicmVhayBiO3U9PT1mJiYrK3g9PT1rJiYobT1sKTt1PT09aCYmKyt6PT09ZyYmKHQ9bCk7aWYobnVsbCE9PSh2PXkubmV4dFNpYmxpbmcpKWJyZWFrO3k9dTt1PXkucGFyZW50Tm9kZX15PXZ9Zj0tMT09PW18fC0xPT09dD9udWxsOntzdGFydDptLGVuZDp0fX1lbHNlIGY9bnVsbH1mPWZ8fHtzdGFydDowLGVuZDowfX1lbHNlIGY9bnVsbDt5ZT17Zm9jdXNlZEVsZW06ZSxzZWxlY3Rpb25SYW5nZTpmfTtHZD0hMTtmb3IoUj1kO251bGwhPT1SOyl7ZT0hMTtmPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09Ujspe2lmKFIuZWZmZWN0VGFnJjI1Nil7dmFyIHI9Ui5hbHRlcm5hdGU7YTpzd2l0Y2goaz1SLGsudGFnKXtjYXNlIDI6Y2FzZSAzOmlmKGsuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PXIpe3ZhciBwPXIubWVtb2l6ZWRQcm9wcyxEPXIubWVtb2l6ZWRTdGF0ZSxTPWsuc3RhdGVOb2RlO1MucHJvcHM9ay5tZW1vaXplZFByb3BzO1Muc3RhdGU9ay5tZW1vaXplZFN0YXRlO3ZhciB5aD1TLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHAsXG5EKTtTLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXlofWJyZWFrIGE7Y2FzZSA1OmNhc2UgNzpjYXNlIDg6Y2FzZSA2OmJyZWFrIGE7ZGVmYXVsdDp3KFwiMTYzXCIpfX1SPVIubmV4dEVmZmVjdH19Y2F0Y2goWGEpe2U9ITAsZj1YYX1lJiYobnVsbD09PVI/dyhcIjE3OFwiKTp2b2lkIDAsd2coUixmKSxudWxsIT09UiYmKFI9Ui5uZXh0RWZmZWN0KSl9Zm9yKFI9ZDtudWxsIT09Ujspe3I9ITE7cD12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVI7KXt2YXIgQT1SLmVmZmVjdFRhZztBJjE2JiZvZShSLnN0YXRlTm9kZSxcIlwiKTtpZihBJjEyOCl7dmFyIEI9Ui5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciBxPUIucmVmO251bGwhPT1xJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHE/cShudWxsKTpxLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChBJjE0KXtjYXNlIDI6QWcoUik7Ui5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpBZyhSKTtSLmVmZmVjdFRhZyY9LTM7QmcoUi5hbHRlcm5hdGUsXG5SKTticmVhaztjYXNlIDQ6QmcoUi5hbHRlcm5hdGUsUik7YnJlYWs7Y2FzZSA4OkQ9Uix5ZyhEKSxELnJldHVybj1udWxsLEQuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZSYmKEQuYWx0ZXJuYXRlLmNoaWxkPW51bGwsRC5hbHRlcm5hdGUucmV0dXJuPW51bGwpfVI9Ui5uZXh0RWZmZWN0fX1jYXRjaChYYSl7cj0hMCxwPVhhfXImJihudWxsPT09Uj93KFwiMTc4XCIpOnZvaWQgMCx3ZyhSLHApLG51bGwhPT1SJiYoUj1SLm5leHRFZmZlY3QpKX1xPXllO0I9VGQoKTtBPXEuZm9jdXNlZEVsZW07cD1xLnNlbGVjdGlvblJhbmdlO2lmKEIhPT1BJiZBJiZBLm93bmVyRG9jdW1lbnQmJlNkKEEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsQSkpe251bGwhPT1wJiZVZChBKSYmKEI9cC5zdGFydCxxPXAuZW5kLHZvaWQgMD09PXEmJihxPUIpLFwic2VsZWN0aW9uU3RhcnRcImluIEE/KEEuc2VsZWN0aW9uU3RhcnQ9QixBLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihxLEEudmFsdWUubGVuZ3RoKSk6XG4ocj1BLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50LEI9KHI/ci5kZWZhdWx0Vmlldzp3aW5kb3cpLmdldFNlbGVjdGlvbigpLEQ9QS50ZXh0Q29udGVudC5sZW5ndGgscT1NYXRoLm1pbihwLnN0YXJ0LEQpLHA9dm9pZCAwPT09cC5lbmQ/cTpNYXRoLm1pbihwLmVuZCxEKSwhQi5leHRlbmQmJnE+cCYmKEQ9cCxwPXEscT1EKSxEPVJkKEEscSksUz1SZChBLHApLEQmJlMmJigxIT09Qi5yYW5nZUNvdW50fHxCLmFuY2hvck5vZGUhPT1ELm5vZGV8fEIuYW5jaG9yT2Zmc2V0IT09RC5vZmZzZXR8fEIuZm9jdXNOb2RlIT09Uy5ub2RlfHxCLmZvY3VzT2Zmc2V0IT09Uy5vZmZzZXQpJiYocj1yLmNyZWF0ZVJhbmdlKCksci5zZXRTdGFydChELm5vZGUsRC5vZmZzZXQpLEIucmVtb3ZlQWxsUmFuZ2VzKCkscT5wPyhCLmFkZFJhbmdlKHIpLEIuZXh0ZW5kKFMubm9kZSxTLm9mZnNldCkpOihyLnNldEVuZChTLm5vZGUsUy5vZmZzZXQpLEIuYWRkUmFuZ2UocikpKSkpO0I9W107Zm9yKHE9QTtxPXEucGFyZW50Tm9kZTspMT09PVxucS5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OnEsbGVmdDpxLnNjcm9sbExlZnQsdG9wOnEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZm9jdXMmJkEuZm9jdXMoKTtmb3IoQT0wO0E8Qi5sZW5ndGg7QSsrKXE9QltBXSxxLmVsZW1lbnQuc2Nyb2xsTGVmdD1xLmxlZnQscS5lbGVtZW50LnNjcm9sbFRvcD1xLnRvcH15ZT1udWxsO0dkPSEheGU7eGU9bnVsbDthLmN1cnJlbnQ9Yjtmb3IoUj1kO251bGwhPT1SOyl7ZD0hMTtBPXZvaWQgMDt0cnl7Zm9yKEI9YztudWxsIT09Ujspe3ZhciBTYT1SLmVmZmVjdFRhZztpZihTYSYzNil7dmFyIG9jPVIuYWx0ZXJuYXRlO3E9UjtyPUI7c3dpdGNoKHEudGFnKXtjYXNlIDI6Y2FzZSAzOnZhciBYPXEuc3RhdGVOb2RlO2lmKHEuZWZmZWN0VGFnJjQpaWYobnVsbD09PW9jKVgucHJvcHM9cS5tZW1vaXplZFByb3BzLFguc3RhdGU9cS5tZW1vaXplZFN0YXRlLFguY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBJaD1vYy5tZW1vaXplZFByb3BzLFxuSmg9b2MubWVtb2l6ZWRTdGF0ZTtYLnByb3BzPXEubWVtb2l6ZWRQcm9wcztYLnN0YXRlPXEubWVtb2l6ZWRTdGF0ZTtYLmNvbXBvbmVudERpZFVwZGF0ZShJaCxKaCxYLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIga2c9cS51cGRhdGVRdWV1ZTtudWxsIT09a2cmJihYLnByb3BzPXEubWVtb2l6ZWRQcm9wcyxYLnN0YXRlPXEubWVtb2l6ZWRTdGF0ZSxsZihxLGtnLFgscikpO2JyZWFrO2Nhc2UgNTp2YXIgbGc9cS51cGRhdGVRdWV1ZTtpZihudWxsIT09bGcpe3A9bnVsbDtpZihudWxsIT09cS5jaGlsZClzd2l0Y2gocS5jaGlsZC50YWcpe2Nhc2UgNzpwPXEuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMjpjYXNlIDM6cD1xLmNoaWxkLnN0YXRlTm9kZX1sZihxLGxnLHAscil9YnJlYWs7Y2FzZSA3OnZhciBLaD1xLnN0YXRlTm9kZTtudWxsPT09b2MmJnEuZWZmZWN0VGFnJjQmJnplKHEudHlwZSxxLm1lbW9pemVkUHJvcHMpJiZLaC5mb2N1cygpO2JyZWFrO1xuY2FzZSA4OmJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDp3KFwiMTYzXCIpfX1pZihTYSYxMjgpe3ZhciBBYz1SLnJlZjtpZihudWxsIT09QWMpe3ZhciBtZz1SLnN0YXRlTm9kZTtzd2l0Y2goUi50YWcpe2Nhc2UgNzp2YXIgT2Q9bWc7YnJlYWs7ZGVmYXVsdDpPZD1tZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgQWM/QWMoT2QpOkFjLmN1cnJlbnQ9T2R9fXZhciBMaD1SLm5leHRFZmZlY3Q7Ui5uZXh0RWZmZWN0PW51bGw7Uj1MaH19Y2F0Y2goWGEpe2Q9ITAsQT1YYX1kJiYobnVsbD09PVI/dyhcIjE3OFwiKTp2b2lkIDAsd2coUixBKSxudWxsIT09UiYmKFI9Ui5uZXh0RWZmZWN0KSl9TGc9T2c9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIE9lJiZPZShiLnN0YXRlTm9kZSk7U2E9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPTA9PT1TYXx8MCE9PWImJmI8U2E/YjpTYTswPT09YiYmKEZnPW51bGwpO2EuZXhwaXJhdGlvblRpbWU9XG5iO2EuZmluaXNoZWRXb3JrPW51bGx9ZnVuY3Rpb24gVGcoKXtyZXR1cm4gZWg/ITA6bnVsbD09PWhofHxoaC50aW1lUmVtYWluaW5nKCk+bmg/ITE6ZWg9ITB9ZnVuY3Rpb24gRGcoYSl7bnVsbD09PVk/dyhcIjI0NlwiKTp2b2lkIDA7WS5leHBpcmF0aW9uVGltZT0wO2ZofHwoZmg9ITAsZ2g9YSl9ZnVuY3Rpb24gc2goYSxiKXt2YXIgYz1XO1c9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFc9Yyl8fFZ8fFlnKDEsbnVsbCl9fWZ1bmN0aW9uIHRoKGEsYil7aWYoVyYmIVdnKXtXZz0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXZz0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gdWgoYSxiLGMpe2lmKFVnKXJldHVybiBhKGIsYyk7V3x8Vnx8MD09PVZnfHwoWWcoVmcsbnVsbCksVmc9MCk7dmFyIGQ9VWcsZT1XO1c9VWc9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtVZz1kLChXPWUpfHxWfHxZZygxLG51bGwpfX1cbmZ1bmN0aW9uIHZoKGEpe2lmKCFhKXJldHVybiBGZTthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjthOnsyIT09amQoYSl8fDIhPT1hLnRhZyYmMyE9PWEudGFnP3coXCIxNzBcIik6dm9pZCAwO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDU6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAyOmlmKE0oYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfWJyZWFrO2Nhc2UgMzppZihNKGIudHlwZS5fcmVhY3RSZXN1bHQpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3coXCIxNzFcIik7Yj12b2lkIDB9aWYoMj09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoTShjKSlyZXR1cm4gTGUoYSxjLGIpfWVsc2UgaWYoMz09PWEudGFnJiYoYz1hLnR5cGUuX3JlYWN0UmVzdWx0LE0oYykpKXJldHVybiBMZShhLFxuYyxiKTtyZXR1cm4gYn1mdW5jdGlvbiB3aChhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDtjPXZoKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPWRmKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtmZihmLGUpO0lmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24geGgoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2YoKTtlPUhmKGYsZSk7cmV0dXJuIHdoKGEsYixjLGUsZCl9ZnVuY3Rpb24gemgoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDc6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIEFoKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6YWMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5GYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkRjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1OYShkKTtlP3ZvaWQgMDp3KFwiOTBcIik7WGIoZCk7RGMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZlZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gQmgoYSl7dmFyIGI9MisyNSooKChHZigpLTIrNTAwKS8yNXwwKSsxKTtiPD1KZyYmKGI9SmcrMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Smc9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfUJoLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOncoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBDaDt3aChhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5CaC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5CaC5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6dyhcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD93KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO2I9YztWP3coXCIyNTNcIik6dm9pZCAwO1k9YTtaPWI7WGcoYSxiLCEwKTtZZygxLG51bGwpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09XG5iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1udWxsLHRoaXMuX2RlZmVyPSExfTtCaC5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gQ2goKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1DaC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuQ2gucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dyhcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBEaChhLGIsYyl7Yj1uZXcgU2UoNSxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuRGgucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBDaDtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7eGgoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtEaC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgQ2g7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO3hoKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307RGgucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IENoO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTt4aChiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuRGgucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IEJoKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gRWgoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUxiPXNoO01iPXVoO05iPWZ1bmN0aW9uKCl7Vnx8MD09PVZnfHwoWWcoVmcsbnVsbCksVmc9MCl9O1xuZnVuY3Rpb24gRmgoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBEaChhLCExLGIpfVxuZnVuY3Rpb24gR2goYSxiLGMsZCxlKXtFaChjKT92b2lkIDA6dyhcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXpoKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9RmgoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emgoZi5faW50ZXJuYWxSb290KTtrLmNhbGwoYSl9fXRoKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiB6aChmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gSGgoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtFaChiKT92b2lkIDA6dyhcIjIwMFwiKTtyZXR1cm4gQWgoYSxiLG51bGwsYyl9XG52YXIgTWg9e2NyZWF0ZVBvcnRhbDpIaCxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3coXCIxODhcIik6dyhcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1tZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBHaChudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gR2gobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj93KFwiMzhcIik6dm9pZCAwO3JldHVybiBHaChhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtFaChhKT9cbnZvaWQgMDp3KFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8odGgoZnVuY3Rpb24oKXtHaChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBIaC5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6c2gsdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOnVoLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Y/dyhcIjE4N1wiKTp2b2lkIDA7dmFyIGM9VztXPSEwO3RyeXtyZXR1cm4gYmgoYSxiKX1maW5hbGx5e1c9YyxZZygxLG51bGwpfX0sdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVc7Vz0hMDt0cnl7YmgoYSl9ZmluYWxseXsoVz1iKXx8Vnx8WWcoMSxudWxsKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0xhLFxuTWEsTmEscWEsVWEsZnVuY3Rpb24oYSl7emEoYSxUYSl9LEpiLEtiLElkLEdhXX0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe0VoKGEpP3ZvaWQgMDp3KFwiMjc4XCIpO3JldHVybiBuZXcgRGgoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTsoZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gUmUobih7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPW1kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkthLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNS4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIE5oPXtkZWZhdWx0Ok1ofSxPaD1OaCYmTWh8fE5oO1xubW9kdWxlLmV4cG9ydHM9T2guZGVmYXVsdHx8T2g7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNS4wXG4gKiBzY2hlZHVsZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZD0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGY9RGF0ZSxnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLG09XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxuPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3c7XG5leHBvcnRzLnVuc3RhYmxlX25vdz12b2lkIDA7aWYobil7dmFyIHA9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBmLm5vdygpfTtleHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlV29yaz12b2lkIDA7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxTY2hlZHVsZWRXb3JrPXZvaWQgMDtcbmlmKGQpe3ZhciBxPW51bGwscj1udWxsLHQ9LTEsdT0hMSx2PSExLHc9dm9pZCAwLHg9dm9pZCAwLHk9ZnVuY3Rpb24oYSl7dz1sKGZ1bmN0aW9uKGIpe2goeCk7YShiKX0pO3g9ZyhmdW5jdGlvbigpe20odyk7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sMTAwKX0sej0wLEE9MzMsQj0zMyxDPXtkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16LWV4cG9ydHMudW5zdGFibGVfbm93KCk7cmV0dXJuIDA8YT9hOjB9fSxFPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zY2hlZHVsZWRDYWxsYmFjayxlPSExO3RyeXtjKGIpLGU9ITB9ZmluYWxseXtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcmsoYSksZXx8KHU9ITAsd2luZG93LnBvc3RNZXNzYWdlKEQsXCIqXCIpKX19LEQ9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09XG53aW5kb3cmJmEuZGF0YT09PUQmJih1PSExLG51bGwhPT1xKSl7aWYobnVsbCE9PXEpe3ZhciBiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoISgtMT09PXR8fHQ+Yikpe2E9LTE7Zm9yKHZhciBjPVtdLGU9cTtudWxsIT09ZTspe3ZhciBrPWUudGltZW91dFRpbWU7LTEhPT1rJiZrPD1iP2MucHVzaChlKTotMSE9PWsmJigtMT09PWF8fGs8YSkmJihhPWspO2U9ZS5uZXh0fWlmKDA8Yy5sZW5ndGgpZm9yKEMuZGlkVGltZW91dD0hMCxiPTAsZT1jLmxlbmd0aDtiPGU7YisrKUUoY1tiXSxDKTt0PWF9fWZvcihhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7MDx6LWEmJm51bGwhPT1xOylhPXEsQy5kaWRUaW1lb3V0PSExLEUoYSxDKSxhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7bnVsbD09PXF8fHZ8fCh2PSEwLHkoRikpfX0sITEpO3ZhciBGPWZ1bmN0aW9uKGEpe3Y9ITE7dmFyIGI9YS16K0I7YjxCJiZBPEI/KDg+YiYmKGI9OCksQj1iPEE/QTpiKTpBPWI7ej1hK0I7dXx8KHU9ITAsd2luZG93LnBvc3RNZXNzYWdlKEQsXG5cIipcIikpfTtleHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlV29yaz1mdW5jdGlvbihhLGIpe3ZhciBjPS0xO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoYz1leHBvcnRzLnVuc3RhYmxlX25vdygpK2IudGltZW91dCk7aWYoLTE9PT10fHwtMSE9PWMmJmM8dCl0PWM7YT17c2NoZWR1bGVkQ2FsbGJhY2s6YSx0aW1lb3V0VGltZTpjLHByZXY6bnVsbCxuZXh0Om51bGx9O251bGw9PT1xP3E9YTooYj1hLnByZXY9cixudWxsIT09YiYmKGIubmV4dD1hKSk7cj1hO3Z8fCh2PSEwLHkoRikpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcms9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PWEucHJldnx8cT09PWEpe3ZhciBiPWEubmV4dCxjPWEucHJldjthLm5leHQ9bnVsbDthLnByZXY9bnVsbDtudWxsIT09Yj9udWxsIT09Yz8oYy5uZXh0PWIsYi5wcmV2PWMpOihiLnByZXY9bnVsbCxxPWIpOm51bGwhPT1jPyhjLm5leHQ9bnVsbCxyPWMpOnI9XG5xPW51bGx9fX1lbHNle3ZhciBHPW5ldyBNYXA7ZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZVdvcms9ZnVuY3Rpb24oYSl7dmFyIGI9e3NjaGVkdWxlZENhbGxiYWNrOmEsdGltZW91dFRpbWU6MCxuZXh0Om51bGwscHJldjpudWxsfSxjPWcoZnVuY3Rpb24oKXthKHt0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEluZmluaXR5fSxkaWRUaW1lb3V0OiExfSl9KTtHLnNldChhLGMpO3JldHVybiBifTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcms9ZnVuY3Rpb24oYSl7dmFyIGI9Ry5nZXQoYS5zY2hlZHVsZWRDYWxsYmFjayk7Ry5kZWxldGUoYSk7aChiKX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgeyBzeW0sIGlzLCBpZGVudCwgY2hlY2ssIGRlcHJlY2F0ZSwgdXBkYXRlSW5jZW50aXZlLCBjcmVhdGVTZXRDb250ZXh0V2FybmluZywgU0VMRl9DQU5DRUxMQVRJT04gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IHRha2VFdmVyeUhlbHBlciwgdGFrZUxhdGVzdEhlbHBlciwgdGhyb3R0bGVIZWxwZXIgfSBmcm9tICcuL3NhZ2FIZWxwZXJzJztcblxudmFyIElPID0gLyojX19QVVJFX18qL3N5bSgnSU8nKTtcbnZhciBUQUtFID0gJ1RBS0UnO1xudmFyIFBVVCA9ICdQVVQnO1xudmFyIEFMTCA9ICdBTEwnO1xudmFyIFJBQ0UgPSAnUkFDRSc7XG52YXIgQ0FMTCA9ICdDQUxMJztcbnZhciBDUFMgPSAnQ1BTJztcbnZhciBGT1JLID0gJ0ZPUksnO1xudmFyIEpPSU4gPSAnSk9JTic7XG52YXIgQ0FOQ0VMID0gJ0NBTkNFTCc7XG52YXIgU0VMRUNUID0gJ1NFTEVDVCc7XG52YXIgQUNUSU9OX0NIQU5ORUwgPSAnQUNUSU9OX0NIQU5ORUwnO1xudmFyIENBTkNFTExFRCA9ICdDQU5DRUxMRUQnO1xudmFyIEZMVVNIID0gJ0ZMVVNIJztcbnZhciBHRVRfQ09OVEVYVCA9ICdHRVRfQ09OVEVYVCc7XG52YXIgU0VUX0NPTlRFWFQgPSAnU0VUX0NPTlRFWFQnO1xuXG52YXIgVEVTVF9ISU5UID0gJ1xcbihISU5UOiBpZiB5b3UgYXJlIGdldHRpbmcgdGhpcyBlcnJvcnMgaW4gdGVzdHMsIGNvbnNpZGVyIHVzaW5nIGNyZWF0ZU1vY2tUYXNrIGZyb20gcmVkdXgtc2FnYS91dGlscyknO1xuXG52YXIgZWZmZWN0ID0gZnVuY3Rpb24gZWZmZWN0KHR5cGUsIHBheWxvYWQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltJT10gPSB0cnVlLCBfcmVmW3R5cGVdID0gcGF5bG9hZCwgX3JlZjtcbn07XG5cbmV4cG9ydCB2YXIgZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKGVmZikge1xuICBjaGVjayhhc0VmZmVjdC5mb3JrKGVmZiksIGlzLm9iamVjdCwgJ2RldGFjaChlZmYpOiBhcmd1bWVudCBtdXN0IGJlIGEgZm9yayBlZmZlY3QnKTtcbiAgZWZmW0ZPUktdLmRldGFjaGVkID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWtlKCkge1xuICB2YXIgcGF0dGVybk9yQ2hhbm5lbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyonO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2hlY2soYXJndW1lbnRzWzBdLCBpcy5ub3RVbmRlZiwgJ3Rha2UocGF0dGVybk9yQ2hhbm5lbCk6IHBhdHRlcm5PckNoYW5uZWwgaXMgdW5kZWZpbmVkJyk7XG4gIH1cbiAgaWYgKGlzLnBhdHRlcm4ocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gZWZmZWN0KFRBS0UsIHsgcGF0dGVybjogcGF0dGVybk9yQ2hhbm5lbCB9KTtcbiAgfVxuICBpZiAoaXMuY2hhbm5lbChwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBlZmZlY3QoVEFLRSwgeyBjaGFubmVsOiBwYXR0ZXJuT3JDaGFubmVsIH0pO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcigndGFrZShwYXR0ZXJuT3JDaGFubmVsKTogYXJndW1lbnQgJyArIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsKSArICcgaXMgbm90IHZhbGlkIGNoYW5uZWwgb3IgYSB2YWxpZCBwYXR0ZXJuJyk7XG59XG5cbnRha2UubWF5YmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlZmYgPSB0YWtlLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgZWZmW1RBS0VdLm1heWJlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5cbmV4cG9ydCB2YXIgdGFrZW0gPSAvKiNfX1BVUkVfXyovZGVwcmVjYXRlKHRha2UubWF5YmUsIC8qI19fUFVSRV9fKi91cGRhdGVJbmNlbnRpdmUoJ3Rha2VtJywgJ3Rha2UubWF5YmUnKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXQoY2hhbm5lbCwgYWN0aW9uKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGNoZWNrKGNoYW5uZWwsIGlzLm5vdFVuZGVmLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IGNoYW5uZWwgaXMgdW5kZWZpbmVkJyk7XG4gICAgY2hlY2soY2hhbm5lbCwgaXMuY2hhbm5lbCwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCAnICsgY2hhbm5lbCArICcgaXMgbm90IGEgdmFsaWQgY2hhbm5lbCcpO1xuICAgIGNoZWNrKGFjdGlvbiwgaXMubm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKGNoYW5uZWwsIGlzLm5vdFVuZGVmLCAncHV0KGFjdGlvbik6IGFyZ3VtZW50IGFjdGlvbiBpcyB1bmRlZmluZWQnKTtcbiAgICBhY3Rpb24gPSBjaGFubmVsO1xuICAgIGNoYW5uZWwgPSBudWxsO1xuICB9XG4gIHJldHVybiBlZmZlY3QoUFVULCB7IGNoYW5uZWw6IGNoYW5uZWwsIGFjdGlvbjogYWN0aW9uIH0pO1xufVxuXG5wdXQucmVzb2x2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVmZiA9IHB1dC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIGVmZltQVVRdLnJlc29sdmUgPSB0cnVlO1xuICByZXR1cm4gZWZmO1xufTtcblxucHV0LnN5bmMgPSAvKiNfX1BVUkVfXyovZGVwcmVjYXRlKHB1dC5yZXNvbHZlLCAvKiNfX1BVUkVfXyovdXBkYXRlSW5jZW50aXZlKCdwdXQuc3luYycsICdwdXQucmVzb2x2ZScpKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFsbChlZmZlY3RzKSB7XG4gIHJldHVybiBlZmZlY3QoQUxMLCBlZmZlY3RzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2UoZWZmZWN0cykge1xuICByZXR1cm4gZWZmZWN0KFJBQ0UsIGVmZmVjdHMpO1xufVxuXG5mdW5jdGlvbiBnZXRGbkNhbGxEZXNjKG1ldGgsIGZuLCBhcmdzKSB7XG4gIGNoZWNrKGZuLCBpcy5ub3RVbmRlZiwgbWV0aCArICc6IGFyZ3VtZW50IGZuIGlzIHVuZGVmaW5lZCcpO1xuXG4gIHZhciBjb250ZXh0ID0gbnVsbDtcbiAgaWYgKGlzLmFycmF5KGZuKSkge1xuICAgIHZhciBfZm4gPSBmbjtcbiAgICBjb250ZXh0ID0gX2ZuWzBdO1xuICAgIGZuID0gX2ZuWzFdO1xuICB9IGVsc2UgaWYgKGZuLmZuKSB7XG4gICAgdmFyIF9mbjIgPSBmbjtcbiAgICBjb250ZXh0ID0gX2ZuMi5jb250ZXh0O1xuICAgIGZuID0gX2ZuMi5mbjtcbiAgfVxuICBpZiAoY29udGV4dCAmJiBpcy5zdHJpbmcoZm4pICYmIGlzLmZ1bmMoY29udGV4dFtmbl0pKSB7XG4gICAgZm4gPSBjb250ZXh0W2ZuXTtcbiAgfVxuICBjaGVjayhmbiwgaXMuZnVuYywgbWV0aCArICc6IGFyZ3VtZW50ICcgKyBmbiArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblxuICByZXR1cm4geyBjb250ZXh0OiBjb250ZXh0LCBmbjogZm4sIGFyZ3M6IGFyZ3MgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGwoZm4pIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZWZmZWN0KENBTEwsIGdldEZuQ2FsbERlc2MoJ2NhbGwnLCBmbiwgYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoY29udGV4dCwgZm4pIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXG4gIHJldHVybiBlZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzYygnYXBwbHknLCB7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiB9LCBhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcHMoZm4pIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gZWZmZWN0KENQUywgZ2V0Rm5DYWxsRGVzYygnY3BzJywgZm4sIGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcmsoZm4pIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFyZ3NbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICByZXR1cm4gZWZmZWN0KEZPUkssIGdldEZuQ2FsbERlc2MoJ2ZvcmsnLCBmbiwgYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3Bhd24oZm4pIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICByZXR1cm4gZGV0YWNoKGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbZm5dLmNvbmNhdChhcmdzKSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gam9pbigpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCB0YXNrcyA9IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgdGFza3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIGlmICh0YXNrcy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIGFsbCh0YXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBqb2luKHQpO1xuICAgIH0pKTtcbiAgfVxuICB2YXIgdGFzayA9IHRhc2tzWzBdO1xuICBjaGVjayh0YXNrLCBpcy5ub3RVbmRlZiwgJ2pvaW4odGFzayk6IGFyZ3VtZW50IHRhc2sgaXMgdW5kZWZpbmVkJyk7XG4gIGNoZWNrKHRhc2ssIGlzLnRhc2ssICdqb2luKHRhc2spOiBhcmd1bWVudCAnICsgdGFzayArICcgaXMgbm90IGEgdmFsaWQgVGFzayBvYmplY3QgJyArIFRFU1RfSElOVCk7XG4gIHJldHVybiBlZmZlY3QoSk9JTiwgdGFzayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgdGFza3MgPSBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIHRhc2tzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICBpZiAodGFza3MubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBhbGwodGFza3MubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gY2FuY2VsKHQpO1xuICAgIH0pKTtcbiAgfVxuICB2YXIgdGFzayA9IHRhc2tzWzBdO1xuICBpZiAodGFza3MubGVuZ3RoID09PSAxKSB7XG4gICAgY2hlY2sodGFzaywgaXMubm90VW5kZWYsICdjYW5jZWwodGFzayk6IGFyZ3VtZW50IHRhc2sgaXMgdW5kZWZpbmVkJyk7XG4gICAgY2hlY2sodGFzaywgaXMudGFzaywgJ2NhbmNlbCh0YXNrKTogYXJndW1lbnQgJyArIHRhc2sgKyAnIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0ICcgKyBURVNUX0hJTlQpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoQ0FOQ0VMLCB0YXNrIHx8IFNFTEZfQ0FOQ0VMTEFUSU9OKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuNyA+IDEgPyBfbGVuNyAtIDEgOiAwKSwgX2tleTcgPSAxOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgYXJnc1tfa2V5NyAtIDFdID0gYXJndW1lbnRzW19rZXk3XTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgc2VsZWN0b3IgPSBpZGVudDtcbiAgfSBlbHNlIHtcbiAgICBjaGVjayhzZWxlY3RvciwgaXMubm90VW5kZWYsICdzZWxlY3Qoc2VsZWN0b3IsWy4uLl0pOiBhcmd1bWVudCBzZWxlY3RvciBpcyB1bmRlZmluZWQnKTtcbiAgICBjaGVjayhzZWxlY3RvciwgaXMuZnVuYywgJ3NlbGVjdChzZWxlY3RvcixbLi4uXSk6IGFyZ3VtZW50ICcgKyBzZWxlY3RvciArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfVxuICByZXR1cm4gZWZmZWN0KFNFTEVDVCwgeyBzZWxlY3Rvcjogc2VsZWN0b3IsIGFyZ3M6IGFyZ3MgfSk7XG59XG5cbi8qKlxuICBjaGFubmVsKHBhdHRlcm4sIFtidWZmZXJdKSAgICA9PiBjcmVhdGVzIGFuIGV2ZW50IGNoYW5uZWwgZm9yIHN0b3JlIGFjdGlvbnNcbioqL1xuZXhwb3J0IGZ1bmN0aW9uIGFjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKSB7XG4gIGNoZWNrKHBhdHRlcm4sIGlzLm5vdFVuZGVmLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLC4uLik6IGFyZ3VtZW50IHBhdHRlcm4gaXMgdW5kZWZpbmVkJyk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGNoZWNrKGJ1ZmZlciwgaXMubm90VW5kZWYsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcik6IGFyZ3VtZW50IGJ1ZmZlciBpcyB1bmRlZmluZWQnKTtcbiAgICBjaGVjayhidWZmZXIsIGlzLmJ1ZmZlciwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKTogYXJndW1lbnQgJyArIGJ1ZmZlciArICcgaXMgbm90IGEgdmFsaWQgYnVmZmVyJyk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChBQ1RJT05fQ0hBTk5FTCwgeyBwYXR0ZXJuOiBwYXR0ZXJuLCBidWZmZXI6IGJ1ZmZlciB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbGxlZCgpIHtcbiAgcmV0dXJuIGVmZmVjdChDQU5DRUxMRUQsIHt9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKGNoYW5uZWwpIHtcbiAgY2hlY2soY2hhbm5lbCwgaXMuY2hhbm5lbCwgJ2ZsdXNoKGNoYW5uZWwpOiBhcmd1bWVudCAnICsgY2hhbm5lbCArICcgaXMgbm90IHZhbGlkIGNoYW5uZWwnKTtcbiAgcmV0dXJuIGVmZmVjdChGTFVTSCwgY2hhbm5lbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KHByb3ApIHtcbiAgY2hlY2socHJvcCwgaXMuc3RyaW5nLCAnZ2V0Q29udGV4dChwcm9wKTogYXJndW1lbnQgJyArIHByb3AgKyAnIGlzIG5vdCBhIHN0cmluZycpO1xuICByZXR1cm4gZWZmZWN0KEdFVF9DT05URVhULCBwcm9wKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQocHJvcHMpIHtcbiAgY2hlY2socHJvcHMsIGlzLm9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcobnVsbCwgcHJvcHMpKTtcbiAgcmV0dXJuIGVmZmVjdChTRVRfQ09OVEVYVCwgcHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFrZUV2ZXJ5KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuOCA+IDIgPyBfbGVuOCAtIDIgOiAwKSwgX2tleTggPSAyOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgYXJnc1tfa2V5OCAtIDJdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3Rha2VFdmVyeUhlbHBlciwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjkgPiAyID8gX2xlbjkgLSAyIDogMCksIF9rZXk5ID0gMjsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgIGFyZ3NbX2tleTkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFt0YWtlTGF0ZXN0SGVscGVyLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShtcywgcGF0dGVybiwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMTAgPiAzID8gX2xlbjEwIC0gMyA6IDApLCBfa2V5MTAgPSAzOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgYXJnc1tfa2V5MTAgLSAzXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbdGhyb3R0bGVIZWxwZXIsIG1zLCBwYXR0ZXJuLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5cbnZhciBjcmVhdGVBc0VmZmVjdFR5cGUgPSBmdW5jdGlvbiBjcmVhdGVBc0VmZmVjdFR5cGUodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGVmZmVjdCkge1xuICAgIHJldHVybiBlZmZlY3QgJiYgZWZmZWN0W0lPXSAmJiBlZmZlY3RbdHlwZV07XG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGFzRWZmZWN0ID0ge1xuICB0YWtlOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFRBS0UpLFxuICBwdXQ6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoUFVUKSxcbiAgYWxsOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEFMTCksXG4gIHJhY2U6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoUkFDRSksXG4gIGNhbGw6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQ0FMTCksXG4gIGNwczogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShDUFMpLFxuICBmb3JrOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEZPUkspLFxuICBqb2luOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEpPSU4pLFxuICBjYW5jZWw6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQ0FOQ0VMKSxcbiAgc2VsZWN0OiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFNFTEVDVCksXG4gIGFjdGlvbkNoYW5uZWw6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQUNUSU9OX0NIQU5ORUwpLFxuICBjYW5jZWxsZWQ6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQ0FOQ0VMTEVEKSxcbiAgZmx1c2g6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoRkxVU0gpLFxuICBnZXRDb250ZXh0OiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEdFVF9DT05URVhUKSxcbiAgc2V0Q29udGV4dDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShTRVRfQ09OVEVYVClcbn07IiwiaW1wb3J0IHsga1RydWUsIG5vb3AgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IHZhciBCVUZGRVJfT1ZFUkZMT1cgPSBcIkNoYW5uZWwncyBCdWZmZXIgb3ZlcmZsb3chXCI7XG5cbnZhciBPTl9PVkVSRkxPV19USFJPVyA9IDE7XG52YXIgT05fT1ZFUkZMT1dfRFJPUCA9IDI7XG52YXIgT05fT1ZFUkZMT1dfU0xJREUgPSAzO1xudmFyIE9OX09WRVJGTE9XX0VYUEFORCA9IDQ7XG5cbnZhciB6ZXJvQnVmZmVyID0geyBpc0VtcHR5OiBrVHJ1ZSwgcHV0OiBub29wLCB0YWtlOiBub29wIH07XG5cbmZ1bmN0aW9uIHJpbmdCdWZmZXIoKSB7XG4gIHZhciBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTA7XG4gIHZhciBvdmVyZmxvd0FjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgYXJyID0gbmV3IEFycmF5KGxpbWl0KTtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBwdXNoSW5kZXggPSAwO1xuICB2YXIgcG9wSW5kZXggPSAwO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChpdCkge1xuICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgbGVuZ3RoKys7XG4gIH07XG5cbiAgdmFyIHRha2UgPSBmdW5jdGlvbiB0YWtlKCkge1xuICAgIGlmIChsZW5ndGggIT0gMCkge1xuICAgICAgdmFyIGl0ID0gYXJyW3BvcEluZGV4XTtcbiAgICAgIGFycltwb3BJbmRleF0gPSBudWxsO1xuICAgICAgbGVuZ3RoLS07XG4gICAgICBwb3BJbmRleCA9IChwb3BJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICByZXR1cm4gaXQ7XG4gICAgfVxuICB9O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHdoaWxlIChsZW5ndGgpIHtcbiAgICAgIGl0ZW1zLnB1c2godGFrZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBsZW5ndGggPT0gMDtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24gcHV0KGl0KSB7XG4gICAgICBpZiAobGVuZ3RoIDwgbGltaXQpIHtcbiAgICAgICAgcHVzaChpdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZG91YmxlZExpbWl0ID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKG92ZXJmbG93QWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19USFJPVzpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihCVUZGRVJfT1ZFUkZMT1cpO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfU0xJREU6XG4gICAgICAgICAgICBhcnJbcHVzaEluZGV4XSA9IGl0O1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICAgICAgICBwb3BJbmRleCA9IHB1c2hJbmRleDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfRVhQQU5EOlxuICAgICAgICAgICAgZG91YmxlZExpbWl0ID0gMiAqIGxpbWl0O1xuXG4gICAgICAgICAgICBhcnIgPSBmbHVzaCgpO1xuXG4gICAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gMDtcblxuICAgICAgICAgICAgYXJyLmxlbmd0aCA9IGRvdWJsZWRMaW1pdDtcbiAgICAgICAgICAgIGxpbWl0ID0gZG91YmxlZExpbWl0O1xuXG4gICAgICAgICAgICBwdXNoKGl0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gRFJPUFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0YWtlOiB0YWtlLFxuICAgIGZsdXNoOiBmbHVzaFxuICB9O1xufVxuXG5leHBvcnQgdmFyIGJ1ZmZlcnMgPSB7XG4gIG5vbmU6IGZ1bmN0aW9uIG5vbmUoKSB7XG4gICAgcmV0dXJuIHplcm9CdWZmZXI7XG4gIH0sXG4gIGZpeGVkOiBmdW5jdGlvbiBmaXhlZChsaW1pdCkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19USFJPVyk7XG4gIH0sXG4gIGRyb3BwaW5nOiBmdW5jdGlvbiBkcm9wcGluZyhsaW1pdCkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19EUk9QKTtcbiAgfSxcbiAgc2xpZGluZzogZnVuY3Rpb24gc2xpZGluZyhsaW1pdCkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19TTElERSk7XG4gIH0sXG4gIGV4cGFuZGluZzogZnVuY3Rpb24gZXhwYW5kaW5nKGluaXRpYWxTaXplKSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIoaW5pdGlhbFNpemUsIE9OX09WRVJGTE9XX0VYUEFORCk7XG4gIH1cbn07IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IHZhciBzdWJzY3JpcHRpb25TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRyeVN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdHJ5VW5zdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vdGlmeU5lc3RlZFN1YnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzU3Vic2NyaWJlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5cbnZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IHRydWU7XG5cbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKCkge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4O1xuXG4gIHZhciBzdG9yZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3N0b3JlJztcbiAgdmFyIHN1YktleSA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3ViS2V5IHx8IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzW3N0b3JlS2V5XSAhPT0gbmV4dFByb3BzLnN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogc3RvcmVTaGFwZS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gIH07XG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3RvcmVLZXldID0gc3RvcmVTaGFwZS5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBvblN0YXRlQ2hhbmdlO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgfVxuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIGhvdFJlbG9hZGluZ1ZlcnNpb24gPSAwO1xudmFyIGR1bW15U3RhdGUgPSB7fTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHN0b3JlKSB7XG4gIC8vIHdyYXAgdGhlIHNlbGVjdG9yIGluIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBpdHMgcmVzdWx0cyBiZXR3ZWVuIHJ1bnMuXG4gIHZhciBzZWxlY3RvciA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bkNvbXBvbmVudFNlbGVjdG9yKHByb3BzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgICAgICBpZiAobmV4dFByb3BzICE9PSBzZWxlY3Rvci5wcm9wcyB8fCBzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2VsZWN0b3IucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBzZWxlY3Rvci5lcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5KSB7XG4gIHZhciBfY29udGV4dFR5cGVzLCBfY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRnZXREaXNwbGF5TmFtZSA9IF9yZWYuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYkZ2V0RGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICdDb25uZWN0QWR2YW5jZWQoJyArIG5hbWUgKyAnKSc7XG4gIH0gOiBfcmVmJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRtZXRob2ROYW1lID0gX3JlZi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYkbWV0aG9kTmFtZSA9PT0gdW5kZWZpbmVkID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmJHJlbmRlckNvdW50UHJvcCA9IF9yZWYucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZiRyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZiRzaG91bGRIYW5kbGVTdGF0ID0gX3JlZi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJHNob3VsZEhhbmRsZVN0YXQsXG4gICAgICBfcmVmJHN0b3JlS2V5ID0gX3JlZi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZiRzdG9yZUtleSA9PT0gdW5kZWZpbmVkID8gJ3N0b3JlJyA6IF9yZWYkc3RvcmVLZXksXG4gICAgICBfcmVmJHdpdGhSZWYgPSBfcmVmLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZiR3aXRoUmVmID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkd2l0aFJlZixcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnZ2V0RGlzcGxheU5hbWUnLCAnbWV0aG9kTmFtZScsICdyZW5kZXJDb3VudFByb3AnLCAnc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzJywgJ3N0b3JlS2V5JywgJ3dpdGhSZWYnXSk7XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG4gIHZhciB2ZXJzaW9uID0gaG90UmVsb2FkaW5nVmVyc2lvbisrO1xuXG4gIHZhciBjb250ZXh0VHlwZXMgPSAoX2NvbnRleHRUeXBlcyA9IHt9LCBfY29udGV4dFR5cGVzW3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUsIF9jb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY29udGV4dFR5cGVzKTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gKF9jaGlsZENvbnRleHRUeXBlcyA9IHt9LCBfY2hpbGRDb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY2hpbGRDb250ZXh0VHlwZXMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PSAnZnVuY3Rpb24nLCAnWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgJyArIChtZXRob2ROYW1lICsgJy4gSW5zdGVhZCByZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgd2l0aFJlZjogd2l0aFJlZixcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBDb25uZWN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wc1tzdG9yZUtleV0gfHwgY29udGV4dFtzdG9yZUtleV07XG4gICAgICAgIF90aGlzLnByb3BzTW9kZSA9IEJvb2xlYW4ocHJvcHNbc3RvcmVLZXldKTtcbiAgICAgICAgX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlID0gX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIGludmFyaWFudChfdGhpcy5zdG9yZSwgJ0NvdWxkIG5vdCBmaW5kIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiAnICsgKCdcIicgKyBkaXNwbGF5TmFtZSArICdcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgJykgKyAoJ29yIGV4cGxpY2l0bHkgcGFzcyBcIicgKyBzdG9yZUtleSArICdcIiBhcyBhIHByb3AgdG8gXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJykpO1xuXG4gICAgICAgIF90aGlzLmluaXRTZWxlY3RvcigpO1xuICAgICAgICBfdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjI7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX3JlZjJbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjI7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBmaXJlcyBkdXJpbmcgc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBidXQgY29tcG9uZW50RGlkTW91bnQgYW5kXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGRvIG5vdC4gQmVjYXVzZSBvZiB0aGlzLCB0cnlTdWJzY3JpYmUgaGFwcGVucyBkdXJpbmcgLi4uZGlkTW91bnQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdW5zdWJzY3JpcHRpb24gd291bGQgbmV2ZXIgdGFrZSBwbGFjZSBkdXJpbmcgU1NSLCBjYXVzaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNoaWxkIGNvbXBvbmVudCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYSBzdGF0ZSBjaGFuZ2UgYnlcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgYW4gYWN0aW9uIGluIGl0cyBjb21wb25lbnRXaWxsTW91bnQsIHdlIGhhdmUgdG8gcmUtcnVuIHRoZSBzZWxlY3QgYW5kIG1heWJlXG4gICAgICAgIC8vIHJlLXJlbmRlci5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5zdG9yZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuID0gbm9vcDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsICdUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgJyArICgneyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlICcgKyBtZXRob2ROYW1lICsgJygpIGNhbGwuJykpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFNlbGVjdG9yID0gZnVuY3Rpb24gaW5pdFNlbGVjdG9yKCkge1xuICAgICAgICB2YXIgc291cmNlU2VsZWN0b3IgPSBzZWxlY3RvckZhY3RvcnkodGhpcy5zdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3RvciwgdGhpcy5zdG9yZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQodGhpcy5zdWJzY3JpcHRpb24pO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuc3Vic2NyaXB0aW9uKSAmJiB0aGlzLnN1YnNjcmlwdGlvbi5pc1N1YnNjcmliZWQoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7XG4gICAgICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuICAgICAgICB2YXIgd2l0aEV4dHJhcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBzZWxlY3Rvci5lcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLmFkZEV4dHJhUHJvcHMoc2VsZWN0b3IucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENvbm5lY3Q7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTtcblxuICAgICAgICAgIC8vIElmIGFueSBjb25uZWN0ZWQgZGVzY2VuZGFudHMgZG9uJ3QgaG90IHJlbG9hZCAoYW5kIHJlc3Vic2NyaWJlIGluIHRoZSBwcm9jZXNzKSwgdGhlaXJcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMgd2lsbCBiZSBsb3N0IHdoZW4gd2UgdW5zdWJzY3JpYmUuIFVuZm9ydHVuYXRlbHksIGJ5IGNvcHlpbmcgb3ZlciBhbGxcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMsIHRoaXMgZG9lcyBtZWFuIHRoYXQgdGhlIG9sZCB2ZXJzaW9ucyBvZiBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd2lsbCBzdGlsbCBiZVxuICAgICAgICAgIC8vIG5vdGlmaWVkIG9mIHN0YXRlIGNoYW5nZXM7IGhvd2V2ZXIsIHRoZWlyIG9uU3RhdGVDaGFuZ2UgZnVuY3Rpb24gaXMgYSBuby1vcCBzbyB0aGlzXG4gICAgICAgICAgLy8gaXNuJ3QgYSBodWdlIGRlYWwuXG4gICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5cbi8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuXG4vLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9O1xuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHsgZGlzcGF0Y2g6IGRpc3BhdGNoIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcblxuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcblxuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICB2YXIgb3duUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBzdGF0ZVByb3BzID0gdm9pZCAwO1xuICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuXG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydpbml0TWFwU3RhdGVUb1Byb3BzJywgJ2luaXRNYXBEaXNwYXRjaFRvUHJvcHMnLCAnaW5pdE1lcmdlUHJvcHMnXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5JztcblxuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJyArIHR5cGVvZiBhcmcgKyAnIGZvciAnICsgbmFtZSArICcgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCAnICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArICcuJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHVuZGVmaW5lZCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcbiAgICAgICAgX3JlZjIkcHVyZSA9IF9yZWYyLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMiRwdXJlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkcHVyZSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9PT0gdW5kZWZpbmVkID8gc3RyaWN0RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjIkYXJlT3duUHJvcHNFcXVhID0gX3JlZjIuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU93blByb3BzRXF1YSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMi5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMi5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydwdXJlJywgJ2FyZVN0YXRlc0VxdWFsJywgJ2FyZU93blByb3BzRXF1YWwnLCAnYXJlU3RhdGVQcm9wc0VxdWFsJywgJ2FyZU1lcmdlZFByb3BzRXF1YWwnXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG5cbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcblxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdDb25uZWN0KCcgKyBuYW1lICsgJyknO1xuICAgICAgfSxcblxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG5cbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgUHJvdmlkZXIsIHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcblxuZXhwb3J0IHsgUHJvdmlkZXIsIGNyZWF0ZVByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIGNvbm5lY3QgfTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImltcG9ydCB7IGlzLCBtYWtlSXRlcmF0b3IgfSBmcm9tICcuLi91dGlscyc7XG5cbnZhciBkb25lID0geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG5leHBvcnQgdmFyIHFFbmQgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpIHtcbiAgaWYgKGlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gJ2NoYW5uZWwnO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhlbnRyeSk7XG4gICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnNtSXRlcmF0b3IoZnNtLCBxMCkge1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2l0ZXJhdG9yJztcblxuICB2YXIgdXBkYXRlU3RhdGUgPSB2b2lkIDAsXG4gICAgICBxTmV4dCA9IHEwO1xuXG4gIGZ1bmN0aW9uIG5leHQoYXJnLCBlcnJvcikge1xuICAgIGlmIChxTmV4dCA9PT0gcUVuZCkge1xuICAgICAgcmV0dXJuIGRvbmU7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBxTmV4dCA9IHFFbmQ7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlU3RhdGUgJiYgdXBkYXRlU3RhdGUoYXJnKTtcblxuICAgICAgdmFyIF9mc20kcU5leHQgPSBmc21bcU5leHRdKCksXG4gICAgICAgICAgcSA9IF9mc20kcU5leHRbMF0sXG4gICAgICAgICAgb3V0cHV0ID0gX2ZzbSRxTmV4dFsxXSxcbiAgICAgICAgICBfdXBkYXRlU3RhdGUgPSBfZnNtJHFOZXh0WzJdO1xuXG4gICAgICBxTmV4dCA9IHE7XG4gICAgICB1cGRhdGVTdGF0ZSA9IF91cGRhdGVTdGF0ZTtcbiAgICAgIHJldHVybiBxTmV4dCA9PT0gcUVuZCA/IGRvbmUgOiBvdXRwdXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VJdGVyYXRvcihuZXh0LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gbmV4dChudWxsLCBlcnJvcik7XG4gIH0sIG5hbWUsIHRydWUpO1xufSIsImltcG9ydCBmc21JdGVyYXRvciwgeyBxRW5kLCBzYWZlTmFtZSB9IGZyb20gJy4vZnNtSXRlcmF0b3InO1xuaW1wb3J0IHsgdGFrZSwgZm9yayB9IGZyb20gJy4uL2lvJztcbmltcG9ydCB7IEVORCB9IGZyb20gJy4uL2NoYW5uZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0YWtlRXZlcnkocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbCkgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG5cbiAgdmFyIGFjdGlvbiA9IHZvaWQgMCxcbiAgICAgIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeVRha2UsIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiBbJ3ExJywgeUZvcmsoYWN0aW9uKV07XG4gICAgfVxuICB9LCAncTEnLCAndGFrZUV2ZXJ5KCcgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArICcsICcgKyB3b3JrZXIubmFtZSArICcpJyk7XG59IiwiaW1wb3J0IGZzbUl0ZXJhdG9yLCB7IHFFbmQsIHNhZmVOYW1lIH0gZnJvbSAnLi9mc21JdGVyYXRvcic7XG5pbXBvcnQgeyBjYW5jZWwsIHRha2UsIGZvcmsgfSBmcm9tICcuLi9pbyc7XG5pbXBvcnQgeyBFTkQgfSBmcm9tICcuLi9jaGFubmVsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogdGFrZShwYXR0ZXJuT3JDaGFubmVsKSB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZm9yay5hcHBseSh1bmRlZmluZWQsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSkgfTtcbiAgfTtcbiAgdmFyIHlDYW5jZWwgPSBmdW5jdGlvbiB5Q2FuY2VsKHRhc2spIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGNhbmNlbCh0YXNrKSB9O1xuICB9O1xuXG4gIHZhciB0YXNrID0gdm9pZCAwLFxuICAgICAgYWN0aW9uID0gdm9pZCAwO1xuICB2YXIgc2V0VGFzayA9IGZ1bmN0aW9uIHNldFRhc2sodCkge1xuICAgIHJldHVybiB0YXNrID0gdDtcbiAgfTtcbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeVRha2UsIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiB0YXNrID8gWydxMycsIHlDYW5jZWwodGFzayldIDogWydxMScsIHlGb3JrKGFjdGlvbiksIHNldFRhc2tdO1xuICAgIH0sXG4gICAgcTM6IGZ1bmN0aW9uIHEzKCkge1xuICAgICAgcmV0dXJuIFsncTEnLCB5Rm9yayhhY3Rpb24pLCBzZXRUYXNrXTtcbiAgICB9XG4gIH0sICdxMScsICd0YWtlTGF0ZXN0KCcgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArICcsICcgKyB3b3JrZXIubmFtZSArICcpJyk7XG59IiwiaW1wb3J0IGZzbUl0ZXJhdG9yLCB7IHFFbmQsIHNhZmVOYW1lIH0gZnJvbSAnLi9mc21JdGVyYXRvcic7XG5pbXBvcnQgeyB0YWtlLCBmb3JrLCBhY3Rpb25DaGFubmVsLCBjYWxsIH0gZnJvbSAnLi4vaW8nO1xuaW1wb3J0IHsgRU5EIH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQgeyBidWZmZXJzIH0gZnJvbSAnLi4vYnVmZmVycyc7XG5pbXBvcnQgeyBkZWxheSB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyb3R0bGUoZGVsYXlMZW5ndGgsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAzXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBhY3Rpb24gPSB2b2lkIDAsXG4gICAgICBjaGFubmVsID0gdm9pZCAwO1xuXG4gIHZhciB5QWN0aW9uQ2hhbm5lbCA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcnMuc2xpZGluZygxKSkgfTtcbiAgdmFyIHlUYWtlID0gZnVuY3Rpb24geVRha2UoKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiB0YWtlKGNoYW5uZWwpIH07XG4gIH07XG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuICB2YXIgeURlbGF5ID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IGNhbGwoZGVsYXksIGRlbGF5TGVuZ3RoKSB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG4gIHZhciBzZXRDaGFubmVsID0gZnVuY3Rpb24gc2V0Q2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaGFubmVsID0gY2g7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlBY3Rpb25DaGFubmVsLCBzZXRDaGFubmVsXTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiBbJ3EzJywgeVRha2UoKSwgc2V0QWN0aW9uXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBhY3Rpb24gPT09IEVORCA/IFtxRW5kXSA6IFsncTQnLCB5Rm9yayhhY3Rpb24pXTtcbiAgICB9LFxuICAgIHE0OiBmdW5jdGlvbiBxNCgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeURlbGF5XTtcbiAgICB9XG4gIH0sICdxMScsICd0aHJvdHRsZSgnICsgc2FmZU5hbWUocGF0dGVybikgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufSIsImltcG9ydCB0YWtlRXZlcnlIZWxwZXIgZnJvbSAnLi90YWtlRXZlcnknO1xuaW1wb3J0IHRha2VMYXRlc3RIZWxwZXIgZnJvbSAnLi90YWtlTGF0ZXN0JztcbmltcG9ydCB0aHJvdHRsZUhlbHBlciBmcm9tICcuL3Rocm90dGxlJztcblxuaW1wb3J0IHsgZGVwcmVjYXRlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG52YXIgZGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gZGVwcmVjYXRpb25XYXJuaW5nKGhlbHBlck5hbWUpIHtcbiAgcmV0dXJuICdpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2FcXCcgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2EvZWZmZWN0c1xcJy5cXG5UaGUgbGF0dGVyIHdpbGwgbm90IHdvcmsgd2l0aCB5aWVsZCosIGFzIGhlbHBlciBlZmZlY3RzIGFyZSB3cmFwcGVkIGF1dG9tYXRpY2FsbHkgZm9yIHlvdSBpbiBmb3JrIGVmZmVjdC5cXG5UaGVyZWZvcmUgeWllbGQgJyArIGhlbHBlck5hbWUgKyAnIHdpbGwgcmV0dXJuIHRhc2sgZGVzY3JpcHRvciB0byB5b3VyIHNhZ2EgYW5kIGV4ZWN1dGUgbmV4dCBsaW5lcyBvZiBjb2RlLic7XG59O1xuXG52YXIgdGFrZUV2ZXJ5ID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlRXZlcnlIZWxwZXIsIC8qI19fUFVSRV9fKi9kZXByZWNhdGlvbldhcm5pbmcoJ3Rha2VFdmVyeScpKTtcbnZhciB0YWtlTGF0ZXN0ID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlTGF0ZXN0SGVscGVyLCAvKiNfX1BVUkVfXyovZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlTGF0ZXN0JykpO1xudmFyIHRocm90dGxlID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0aHJvdHRsZUhlbHBlciwgLyojX19QVVJFX18qL2RlcHJlY2F0aW9uV2FybmluZygndGhyb3R0bGUnKSk7XG5cbmV4cG9ydCB7IHRha2VFdmVyeSwgdGFrZUxhdGVzdCwgdGhyb3R0bGUsIHRha2VFdmVyeUhlbHBlciwgdGFrZUxhdGVzdEhlbHBlciwgdGhyb3R0bGVIZWxwZXIgfTsiLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCBcIkEgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudFwiKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsInZhciBxdWV1ZSA9IFtdO1xuLyoqXG4gIFZhcmlhYmxlIHRvIGhvbGQgYSBjb3VudGluZyBzZW1hcGhvcmVcbiAgLSBJbmNyZW1lbnRpbmcgYWRkcyBhIGxvY2sgYW5kIHB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGBzdXNwZW5kZWRgIHN0YXRlIChpZiBpdCdzIG5vdFxuICAgIGFscmVhZHkgc3VzcGVuZGVkKVxuICAtIERlY3JlbWVudGluZyByZWxlYXNlcyBhIGxvY2suIFplcm8gbG9ja3MgcHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHJlbGVhc2VkYCBzdGF0ZS4gVGhpc1xuICAgIHRyaWdnZXJzIGZsdXNoaW5nIHRoZSBxdWV1ZWQgdGFza3MuXG4qKi9cbnZhciBzZW1hcGhvcmUgPSAwO1xuXG4vKipcbiAgRXhlY3V0ZXMgYSB0YXNrICdhdG9taWNhbGx5Jy4gVGFza3Mgc2NoZWR1bGVkIGR1cmluZyB0aGlzIGV4ZWN1dGlvbiB3aWxsIGJlIHF1ZXVlZFxuICBhbmQgZmx1c2hlZCBhZnRlciB0aGlzIHRhc2sgaGFzIGZpbmlzaGVkIChhc3N1bWluZyB0aGUgc2NoZWR1bGVyIGVuZHVwIGluIGEgcmVsZWFzZWRcbiAgc3RhdGUpLlxuKiovXG5mdW5jdGlvbiBleGVjKHRhc2spIHtcbiAgdHJ5IHtcbiAgICBzdXNwZW5kKCk7XG4gICAgdGFzaygpO1xuICB9IGZpbmFsbHkge1xuICAgIHJlbGVhc2UoKTtcbiAgfVxufVxuXG4vKipcbiAgRXhlY3V0ZXMgb3IgcXVldWVzIGEgdGFzayBkZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIHRoZSBzY2hlZHVsZXIgKGBzdXNwZW5kZWRgIG9yIGByZWxlYXNlZGApXG4qKi9cbmV4cG9ydCBmdW5jdGlvbiBhc2FwKHRhc2spIHtcbiAgcXVldWUucHVzaCh0YXNrKTtcblxuICBpZiAoIXNlbWFwaG9yZSkge1xuICAgIHN1c3BlbmQoKTtcbiAgICBmbHVzaCgpO1xuICB9XG59XG5cbi8qKlxuICBQdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgc3VzcGVuZGVkYCBzdGF0ZS4gU2NoZWR1bGVkIHRhc2tzIHdpbGwgYmUgcXVldWVkIHVudGlsIHRoZVxuICBzY2hlZHVsZXIgaXMgcmVsZWFzZWQuXG4qKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXNwZW5kKCkge1xuICBzZW1hcGhvcmUrKztcbn1cblxuLyoqXG4gIFB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGByZWxlYXNlZGAgc3RhdGUuXG4qKi9cbmZ1bmN0aW9uIHJlbGVhc2UoKSB7XG4gIHNlbWFwaG9yZS0tO1xufVxuXG4vKipcbiAgUmVsZWFzZXMgdGhlIGN1cnJlbnQgbG9jay4gRXhlY3V0ZXMgYWxsIHF1ZXVlZCB0YXNrcyBpZiB0aGUgc2NoZWR1bGVyIGlzIGluIHRoZSByZWxlYXNlZCBzdGF0ZS5cbioqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKCkge1xuICByZWxlYXNlKCk7XG5cbiAgdmFyIHRhc2sgPSB2b2lkIDA7XG4gIHdoaWxlICghc2VtYXBob3JlICYmICh0YXNrID0gcXVldWUuc2hpZnQoKSkgIT09IHVuZGVmaW5lZCkge1xuICAgIGV4ZWModGFzayk7XG4gIH1cbn0iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=