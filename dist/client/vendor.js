(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{0:function(e,t,n){"use strict";n.d(t,"x",function(){return i}),n.d(t,"e",function(){return a}),n.d(t,"b",function(){return l}),n.d(t,"a",function(){return c}),n.d(t,"c",function(){return s}),n.d(t,"d",function(){return f}),n.d(t,"r",function(){return d}),n.d(t,"u",function(){return h}),n.d(t,"o",function(){return y}),n.d(t,"h",function(){return v}),n.d(t,"q",function(){return b}),n.d(t,"v",function(){return w}),n.d(t,"w",function(){return k}),n.d(t,"f",function(){return x}),n.d(t,"l",function(){return E}),n.d(t,"g",function(){return T}),n.d(t,"m",function(){return O}),n.d(t,"j",function(){return C}),n.d(t,"y",function(){return S}),n.d(t,"t",function(){return j}),n.d(t,"s",function(){return R}),n.d(t,"n",function(){return N}),n.d(t,"z",function(){return A}),n.d(t,"p",function(){return M}),n.d(t,"k",function(){return U}),n.d(t,"A",function(){return I}),n.d(t,"i",function(){return q});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e){return"@@redux-saga/"+e},a=i("TASK"),u=i("HELPER"),l=i("MATCH"),c=i("CANCEL_PROMISE"),s=i("SAGA_ACTION"),f=i("SELF_CANCELLATION"),p=function(e){return function(){return e}},d=p(!0),h=function(){},y=function(e){return e};function v(e,t,n){if(!t(e))throw R("error","uncaught at check",n),new Error(n)}var m=Object.prototype.hasOwnProperty;function g(e,t){return b.notUndef(e)&&m.call(e,t)}var b={undef:function(e){return null===e||void 0===e},notUndef:function(e){return null!==e&&void 0!==e},func:function(e){return"function"==typeof e},number:function(e){return"number"==typeof e},string:function(e){return"string"==typeof e},array:Array.isArray,object:function(e){return e&&!b.array(e)&&"object"===(void 0===e?"undefined":o(e))},promise:function(e){return e&&b.func(e.then)},iterator:function(e){return e&&b.func(e.next)&&b.func(e.throw)},iterable:function(e){return e&&b.func(Symbol)?b.func(e[Symbol.iterator]):b.array(e)},task:function(e){return e&&e[a]},observable:function(e){return e&&b.func(e.subscribe)},buffer:function(e){return e&&b.func(e.isEmpty)&&b.func(e.take)&&b.func(e.put)},pattern:function(e){return e&&(b.string(e)||"symbol"===(void 0===e?"undefined":o(e))||b.func(e)||b.array(e))},channel:function(e){return e&&b.func(e.take)&&b.func(e.close)},helper:function(e){return e&&e[u]},stringableFunc:function(e){return b.func(e)&&g(e,"toString")}},w={assign:function(e,t){for(var n in t)g(t,n)&&(e[n]=t[n])}};function k(e,t){var n=e.indexOf(t);n>=0&&e.splice(n,1)}var x={from:function(e){var t=Array(e.length);for(var n in e)g(e,n)&&(t[n]=e[n]);return t}};function E(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=r({},e),n=new Promise(function(e,n){t.resolve=e,t.reject=n});return t.promise=n,t}function T(e){for(var t=[],n=0;n<e;n++)t.push(E());return t}function O(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=void 0,r=new Promise(function(r){n=setTimeout(function(){return r(t)},e)});return r[c]=function(){return clearTimeout(n)},r}function C(){var e,t=!0,n=void 0,r=void 0;return(e={})[a]=!0,e.isRunning=function(){return t},e.result=function(){return n},e.error=function(){return r},e.setRunning=function(e){return t=e},e.setResult=function(e){return n=e},e.setError=function(e){return r=e},e}var S=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return function(){return++e}}(),_=function(e){throw e},P=function(e){return{value:e,done:!0}};function j(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments[3],o={name:n,next:e,throw:t,return:P};return r&&(o[u]=!0),"undefined"!=typeof Symbol&&(o[Symbol.iterator]=function(){return o}),o}function R(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";"undefined"==typeof window?console.log("redux-saga "+e+": "+t+"\n"+(n&&n.stack||n)):console[e](t,n)}function N(e,t){return function(){return e.apply(void 0,arguments)}}var A=function(e,t){return e+" has been deprecated in favor of "+t+", please update your code"},M=function(e){return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: "+e+"\n")},U=function(e,t){return(e?e+".":"")+"setContext(props): argument "+t+" is not a plain object"},I=function(e){return function(t){return e(Object.defineProperty(t,s,{value:!0}))}},q=function e(t){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=[],a=t.apply(void 0,r);return{next:function(e){return i.push(e),a.next(e)},clone:function(){var n=e(t).apply(void 0,r);return i.forEach(function(e){return n.next(e)}),n},return:function(e){return a.return(e)},throw:function(e){return a.throw(e)}}}}},10:function(e,t,n){"use strict";n.r(t);var r=n(4);n.d(t,"take",function(){return r.s}),n.d(t,"takem",function(){return r.v}),n.d(t,"put",function(){return r.n}),n.d(t,"all",function(){return r.b}),n.d(t,"race",function(){return r.o}),n.d(t,"call",function(){return r.e}),n.d(t,"apply",function(){return r.c}),n.d(t,"cps",function(){return r.h}),n.d(t,"fork",function(){return r.k}),n.d(t,"spawn",function(){return r.r}),n.d(t,"join",function(){return r.m}),n.d(t,"cancel",function(){return r.f}),n.d(t,"select",function(){return r.p}),n.d(t,"actionChannel",function(){return r.a}),n.d(t,"cancelled",function(){return r.g}),n.d(t,"flush",function(){return r.j}),n.d(t,"getContext",function(){return r.l}),n.d(t,"setContext",function(){return r.q}),n.d(t,"takeEvery",function(){return r.t}),n.d(t,"takeLatest",function(){return r.u}),n.d(t,"throttle",function(){return r.w})},102:function(e,t,n){"use strict";var r=n(75);t.a=r.a},103:function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,s=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(s){var p=c(n);p&&p!==s&&e(t,p,f)}var d=a(n);u&&(d=d.concat(u(n)));for(var h=0;h<d.length;++h){var y=d[h];if(!(r[y]||o[y]||f&&f[y])){var v=l(n,y);try{i(t,y,v)}catch(e){}}}return t}return t}},104:function(e,t,n){var r=n(466);e.exports=h,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],y=n[2],v=n[3],m=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var k=null!=y&&null!=h&&h!==y,x="+"===b||"*"===b,E="?"===b||"*"===b,T=n[2]||l,O=m||g;r.push({name:v||i++,prefix:y||"",delimiter:T,optional:E,repeat:x,partial:k,asterisk:!!w,pattern:O?s(O):w?".*":"[^"+c(T)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",l=n||{},c=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var f=e[s];if("string"!=typeof f){var p,d=l[f.name];if(null==d){if(f.optional){f.partial&&(i+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(r(d)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var h=0;h<d.length;h++){if(p=c(d[h]),!t[s].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");i+=(0===h?f.prefix:f.delimiter)+p}}else{if(p=f.asterisk?u(d):c(d),!t[s].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');i+=f.prefix+p}}else i+=f}return i}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function p(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)a+=c(l);else{var s=c(l.prefix),d="(?:"+l.pattern+")";t.push(l),l.repeat&&(d+="(?:"+s+d+")*"),a+=d=l.optional?l.partial?s+"("+d+")?":"(?:"+s+"("+d+"))?":s+"("+d+")"}}var h=c(n.delimiter||"/"),y=a.slice(-h.length)===h;return o||(a=(y?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&y?"":"(?="+h+"|$)",f(new RegExp("^"+a,p(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",p(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},105:function(e,t,n){"use strict";var r=n(15),o=n.n(r),i=n(11),a=n.n(i),u=n(3),l=n.n(u),c=n(2),s=n.n(c),f=n(74),p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){return 0===l.a.Children.count(e)},y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:p({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,u=e.exact,l=e.sensitive;if(n)return n;a()(t,"You should not use <Route> or withRouter() outside a <Router>");var c=t.route,s=(r||c.location).pathname;return Object(f.a)(s,{path:o,strict:i,exact:u,sensitive:l},c.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!h(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!h(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,a=i.history,u=i.route,c=i.staticContext,s={match:e,location:this.props.location||u.location,history:a,staticContext:c};return r?e?l.a.createElement(r,s):null:o?e?o(s):null:"function"==typeof n?n(s):n&&!h(n)?l.a.Children.only(n):null},t}(l.a.Component);y.propTypes={computedMatch:s.a.object,path:s.a.string,exact:s.a.bool,strict:s.a.bool,sensitive:s.a.bool,component:s.a.func,render:s.a.func,children:s.a.oneOfType([s.a.func,s.a.node]),location:s.a.object},y.contextTypes={router:s.a.shape({history:s.a.object.isRequired,route:s.a.object.isRequired,staticContext:s.a.object})},y.childContextTypes={router:s.a.object.isRequired},t.a=y},106:function(e,t,n){"use strict";n.r(t);var r=n(3),o=n(2),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function l(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=a,e),o}var c=l(),s=n(103),f=n.n(s),p=n(11),d=n.n(p);var h=null,y={notify:function(){}};var v=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var g=0,b={};function w(){}function k(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,l=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,s=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,y=o.shouldHandleStateChanges,k=void 0===y||y,x=o.storeKey,E=void 0===x?"store":x,T=o.withRef,O=void 0!==T&&T,C=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),S=E+"Subscription",_=g++,P=((t={})[E]=u,t[S]=a,t),j=((n={})[S]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+s+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),i=m({},C,{getDisplayName:l,methodName:s,renderCountProp:h,shouldHandleStateChanges:k,storeKey:E,withRef:O,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=_,r.state={},r.renderCount=0,r.store=e[E]||t[E],r.propsMode=Boolean(e[E]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+E+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+E+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[S]=t||this.context[S],e},a.prototype.componentDidMount=function(){k&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=w,this.store=null,this.selector.run=w,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(O,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+s+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(k){var e=(this.propsMode?this.props:this.context)[S];this.subscription=new v(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(O||h||this.propsMode&&this.subscription))return e;var t=m({},e);return O&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[S]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=j,a.contextTypes=P,a.propTypes=P,f()(a,t)}}var x=Object.prototype.hasOwnProperty;function E(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function T(e,t){if(E(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!x.call(t,n[o])||!E(e[n[o]],t[n[o]]))return!1;return!0}var O=n(64),C=n(207),S="object"==typeof self&&self&&self.Object===Object&&self,_=(C.a||S||Function("return this")()).Symbol,P=Object.prototype;P.hasOwnProperty,P.toString,_&&_.toStringTag;Object.prototype.toString;_&&_.toStringTag;Object.getPrototypeOf,Object;var j=Function.prototype,R=Object.prototype,N=j.toString;R.hasOwnProperty,N.call(Object);function A(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function M(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function U(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=M(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=M(o),o=r(t,n)),o},r}}var I=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:A(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?A(function(t){return Object(O.bindActionCreators)(e,t)}):void 0}];var q=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:A(function(){return{}})}],L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function D(e,t,n){return L({},n,e,t)}var F=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,u){var l=e(t,n,u);return i?r&&o(l,a)||(a=l):(i=!0,a=l),a}}}(e):void 0},function(e){return e?void 0:function(){return D}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function W(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,c=void 0,s=void 0,f=void 0,p=void 0,d=void 0;function h(o,l){var h=!a(l,s),y=!i(o,c);return c=o,s=l,h&&y?(f=e(c,s),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):h?(e.dependsOnOwnProps&&(f=e(c,s)),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):y?function(){var t=e(c,s),r=!u(t,f);return f=t,r&&(d=n(f,p,s)),d}():d}return function(o,i){return l?h(o,i):function(o,i){return f=e(c=o,s=i),p=t(r,s),d=n(f,p,s),l=!0,d}(o,i)}}function H(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?W:z)(a,u,l,e,i)}var B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function V(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function $(e,t){return e===t}var Y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?k:t,r=e.mapStateToPropsFactories,o=void 0===r?q:r,i=e.mapDispatchToPropsFactories,a=void 0===i?I:i,u=e.mergePropsFactories,l=void 0===u?F:u,c=e.selectorFactory,s=void 0===c?H:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,c=void 0===u||u,f=i.areStatesEqual,p=void 0===f?$:f,d=i.areOwnPropsEqual,h=void 0===d?T:d,y=i.areStatePropsEqual,v=void 0===y?T:y,m=i.areMergedPropsEqual,g=void 0===m?T:m,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=V(e,o,"mapStateToProps"),k=V(t,a,"mapDispatchToProps"),x=V(r,l,"mergeProps");return n(s,B({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:k,initMergeProps:x,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:v,areMergedPropsEqual:g},b))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return k}),n.d(t,"connect",function(){return Y})},11:function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},147:function(e,t,n){"use strict";var r=n(105);t.a=r.a},148:function(e,t,n){"use strict";n.r(t);var r=n(15),o=n.n(r),i=n(3),a=n.n(i),u=n(2),l=n.n(u),c=n(17),s=n.n(c),f=n(11),p=n.n(f),d=n(150),h=n(151),y=function(e){return"/"===e.charAt(0)?e:"/"+e},v=function(e){return"/"===e.charAt(0)?e.substr(1):e},m=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},g=function(e,t){return m(e,t)?e.substr(t.length):e},b=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},w=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},x=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=k({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(d.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},E=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(h.default)(e.state,t.state)},T=function(){var e=null,t=[];return{setPrompt:function(t){return s()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):(s()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},O=!("undefined"==typeof window||!window.document||!window.document.createElement),C=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},S=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},_=function(e,t){return t(window.confirm(e))},P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},R=function(){try{return window.history.state||{}}catch(e){return{}}},N=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e.forceRefresh,i=void 0!==o&&o,a=e.getUserConfirmation,u=void 0===a?_:a,l=e.keyLength,c=void 0===l?6:l,f=e.basename?b(y(e.basename)):"",d=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return s()(!f||m(i,f),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+f+'".'),f&&(i=g(i,f)),x(i,r,n)},h=function(){return Math.random().toString(36).substr(2,c)},v=T(),k=function(e){j(H,e),H.length=t.length,v.notifyListeners(H.location,H.action)},E=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||M(d(e.state))},N=function(){M(d(R()))},A=!1,M=function(e){A?(A=!1,k()):v.confirmTransitionTo(e,"POP",u,function(t){t?k({action:"POP",location:e}):U(e)})},U=function(e){var t=H.location,n=q.indexOf(t.key);-1===n&&(n=0);var r=q.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,D(o))},I=d(R()),q=[I.key],L=function(e){return f+w(e)},D=function(e){t.go(e)},F=0,z=function(e){1===(F+=e)?(C(window,"popstate",E),r&&C(window,"hashchange",N)):0===F&&(S(window,"popstate",E),r&&S(window,"hashchange",N))},W=!1,H={length:t.length,action:"POP",location:I,createHref:L,push:function(e,r){s()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,h(),H.location);v.confirmTransitionTo(o,"PUSH",u,function(e){if(e){var r=L(o),a=o.key,u=o.state;if(n)if(t.pushState({key:a,state:u},null,r),i)window.location.href=r;else{var l=q.indexOf(H.location.key),c=q.slice(0,-1===l?0:l+1);c.push(o.key),q=c,k({action:"PUSH",location:o})}else s()(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){s()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,h(),H.location);v.confirmTransitionTo(o,"REPLACE",u,function(e){if(e){var r=L(o),a=o.key,u=o.state;if(n)if(t.replaceState({key:a,state:u},null,r),i)window.location.replace(r);else{var l=q.indexOf(H.location.key);-1!==l&&(q[l]=o.key),k({action:"REPLACE",location:o})}else s()(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:D,goBack:function(){return D(-1)},goForward:function(){return D(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=v.setPrompt(e);return W||(z(1),W=!0),function(){return W&&(W=!1,z(-1)),t()}},listen:function(e){var t=v.appendListener(e);return z(1),function(){z(-1),t()}}};return H},A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+v(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:v,decodePath:y},slash:{encodePath:y,decodePath:y}},U=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},I=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?_:r,i=e.hashType,a=void 0===i?"slash":i,u=e.basename?b(y(e.basename)):"",l=M[a],c=l.encodePath,f=l.decodePath,d=function(){var e=f(U());return s()(!u||m(e,u),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+u+'".'),u&&(e=g(e,u)),x(e)},h=T(),v=function(e){A(V,e),V.length=t.length,h.notifyListeners(V.location,V.action)},k=!1,P=null,j=function(){var e=U(),t=c(e);if(e!==t)I(t);else{var n=d(),r=V.location;if(!k&&E(r,n))return;if(P===w(n))return;P=null,R(n)}},R=function(e){k?(k=!1,v()):h.confirmTransitionTo(e,"POP",o,function(t){t?v({action:"POP",location:e}):N(e)})},N=function(e){var t=V.location,n=F.lastIndexOf(w(t));-1===n&&(n=0);var r=F.lastIndexOf(w(e));-1===r&&(r=0);var o=n-r;o&&(k=!0,z(o))},q=U(),L=c(q);q!==L&&I(L);var D=d(),F=[w(D)],z=function(e){s()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},W=0,H=function(e){1===(W+=e)?C(window,"hashchange",j):0===W&&S(window,"hashchange",j)},B=!1,V={length:t.length,action:"POP",location:D,createHref:function(e){return"#"+c(u+w(e))},push:function(e,t){s()(void 0===t,"Hash history cannot push state; it is ignored");var n=x(e,void 0,void 0,V.location);h.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=w(n),r=c(u+t);if(U()!==r){P=t,function(e){window.location.hash=e}(r);var o=F.lastIndexOf(w(V.location)),i=F.slice(0,-1===o?0:o+1);i.push(t),F=i,v({action:"PUSH",location:n})}else s()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),v()}})},replace:function(e,t){s()(void 0===t,"Hash history cannot replace state; it is ignored");var n=x(e,void 0,void 0,V.location);h.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=w(n),r=c(u+t);U()!==r&&(P=t,I(r));var o=F.indexOf(w(V.location));-1!==o&&(F[o]=t),v({action:"REPLACE",location:n})}})},go:z,goBack:function(){return z(-1)},goForward:function(){return z(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=h.setPrompt(e);return B||(H(1),B=!0),function(){return B&&(B=!1,H(-1)),t()}},listen:function(e){var t=h.appendListener(e);return H(1),function(){H(-1),t()}}};return V},L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F=function(e,t,n){return Math.min(Math.max(e,t),n)},z=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,o=e.initialIndex,i=void 0===o?0:o,a=e.keyLength,u=void 0===a?6:a,l=T(),c=function(e){D(v,e),v.length=v.entries.length,l.notifyListeners(v.location,v.action)},f=function(){return Math.random().toString(36).substr(2,u)},p=F(i,0,r.length-1),d=r.map(function(e){return x(e,void 0,"string"==typeof e?f():e.key||f())}),h=w,y=function(e){var n=F(v.index+e,0,v.entries.length-1),r=v.entries[n];l.confirmTransitionTo(r,"POP",t,function(e){e?c({action:"POP",location:r,index:n}):c()})},v={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:h,push:function(e,n){s()(!("object"===(void 0===e?"undefined":L(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,f(),v.location);l.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){s()(!("object"===(void 0===e?"undefined":L(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,f(),v.location);l.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(v.entries[v.index]=r,c({action:"REPLACE",location:r}))})},go:y,goBack:function(){return y(-1)},goForward:function(){return y(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return v},W=n(102);function H(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var B=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=H(this,e.call.apply(e,[this].concat(i))),r.history=N(r.props),H(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(W.a,{history:this.history,children:this.props.children})},t}(a.a.Component);B.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var V=B;function $(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=$(this,e.call.apply(e,[this].concat(i))),r.history=q(r.props),$(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(W.a,{history:this.history,children:this.props.children})},t}(a.a.Component);Y.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var K=Y,Q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function X(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var G=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},J=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=X(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!G(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},X(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>"),p()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,i="string"==typeof t?x(t,null,null,o.location):t,u=o.createHref(i);return a.a.createElement("a",Q({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(a.a.Component);J.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},J.defaultProps={replace:!1},J.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var Z=J,ee=n(75);function te(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ne=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=te(this,e.call.apply(e,[this].concat(i))),r.history=z(r.props),te(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(ee.a,{history:this.history,children:this.props.children})},t}(a.a.Component);ne.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var re=ne,oe=n(147),ie=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var ue=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,u=e.className,l=e.activeStyle,c=e.style,s=e.isActive,f=e["aria-current"],p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),d="object"===(void 0===t?"undefined":ae(t))?t.pathname:t,h=d&&d.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return a.a.createElement(oe.a,{path:h,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(s?s(r,n):r);return a.a.createElement(Z,ie({to:t,className:o?[u,i].filter(function(e){return e}).join(" "):u,style:o?ie({},c,l):c,"aria-current":o&&f||null},p))}})};ue.propTypes={to:Z.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,"aria-current":l.a.oneOf(["page","step","location","date","time","true"])},ue.defaultProps={activeClassName:"active","aria-current":"page"};var le=ue;var ce=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);ce.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},ce.defaultProps={when:!0},ce.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var se=ce,fe=n(104),pe=n.n(fe),de={},he=0,ye=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=de[t]||(de[t]={});if(n[e])return n[e];var r=pe.a.compile(e);return he<1e4&&(n[e]=r,he++),r}(e)(t,{pretty:!0})},ve=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var me=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=x(e.to),n=x(this.props.to);E(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?ye(n,t.params):ve({},n,{pathname:ye(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(a.a.Component);me.propTypes={computedMatch:l.a.object,push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},me.defaultProps={push:!1},me.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ge=me,be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function we(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ke=function(e){return"/"===e.charAt(0)?e:"/"+e},xe=function(e,t){return e?be({},t,{pathname:ke(e)+t.pathname}):t},Ee=function(e){return"string"==typeof e?e:w(e)},Te=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},Oe=function(){},Ce=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=we(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return ke(r.props.basename+Ee(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=xe(n,x(e)),o.url=Ee(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=xe(n,x(e)),o.url=Ee(o.location)},r.handleListen=function(){return Oe},r.handleBlock=function(){return Oe},we(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=ke(e);return 0!==t.pathname.indexOf(n)?t:be({},t,{pathname:t.pathname.substr(n.length)})}(t,x(n)),push:this.handlePush,replace:this.handleReplace,go:Te("go"),goBack:Te("goBack"),goForward:Te("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(ee.a,be({},r,{history:o}))},t}(a.a.Component);Ce.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},Ce.defaultProps={basename:"",location:"/"},Ce.childContextTypes={router:l.a.object.isRequired};var Se=Ce,_e=n(465).a,Pe=ye,je=n(74).a,Re=n(103),Ne=n.n(Re),Ae=n(105),Me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ue=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return a.a.createElement(Ae.a,{children:function(t){return a.a.createElement(e,Me({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},Ne()(t,e)};n.d(t,"BrowserRouter",function(){return V}),n.d(t,"HashRouter",function(){return K}),n.d(t,"Link",function(){return Z}),n.d(t,"MemoryRouter",function(){return re}),n.d(t,"NavLink",function(){return le}),n.d(t,"Prompt",function(){return se}),n.d(t,"Redirect",function(){return ge}),n.d(t,"Route",function(){return oe.a}),n.d(t,"Router",function(){return W.a}),n.d(t,"StaticRouter",function(){return Se}),n.d(t,"Switch",function(){return _e}),n.d(t,"generatePath",function(){return Pe}),n.d(t,"matchPath",function(){return je}),n.d(t,"withRouter",function(){return Ue})},149:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(214)},15:function(e,t,n){"use strict";var r=function(){};e.exports=r},150:function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),u=t&&r(t),l=a||u;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var c=void 0;if(i.length){var s=i[i.length-1];c="."===s||".."===s||""===s}else c=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!l)for(;f--;f)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return c&&"/"!==h.substr(-1)&&(h+="/"),h}},151:function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var u=Object.keys(t),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},152:function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"TASK",function(){return o.e}),n.d(r,"SAGA_ACTION",function(){return o.c}),n.d(r,"noop",function(){return o.u}),n.d(r,"is",function(){return o.q}),n.d(r,"deferred",function(){return o.l}),n.d(r,"arrayOfDeffered",function(){return o.g}),n.d(r,"createMockTask",function(){return o.j}),n.d(r,"cloneableGenerator",function(){return o.i}),n.d(r,"asEffect",function(){return u.d}),n.d(r,"CHANNEL_END",function(){return p});var o=n(0),i=n(19),a=n(76),u=n(4),l=n(42),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var f="proc first argument (Saga function result) must be an iterator",p={toString:function(){return"@@redux-saga/CHANNEL_END"}},d={toString:function(){return"@@redux-saga/TASK_CANCEL"}},h={wildcard:function(){return o.r},default:function(e){return"symbol"===(void 0===e?"undefined":s(e))?function(t){return t.type===e}:function(t){return t.type===String(e)}},array:function(e){return function(t){return e.some(function(e){return y(e)(t)})}},predicate:function(e){return function(t){return e(t)}}};function y(e){return("*"===e?h.wildcard:o.q.array(e)?h.array:o.q.stringableFunc(e)?h.default:o.q.func(e)?h.predicate:h.default)(e)}var v=function(e){return{fn:e}};function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return o.u},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.u,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:o.u,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},h=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},g=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,b=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"anonymous",w=arguments[8];Object(o.h)(e,o.q.iterator,f);var k=Object(o.n)(D,Object(o.z)("[...effects]","all([...effects])")),x=h.sagaMonitor,E=h.logger,T=h.onError,O=E||o.s,C=function(e){var t=e.sagaStack;!t&&e.stack&&(t=-1!==e.stack.split("\n")[0].indexOf(e.message)?e.stack:"Error: "+e.message+"\n"+e.stack),O("error","uncaught at "+b,t||e.message||e)},S=Object(i.f)(t),_=Object.create(s);A.cancel=o.u;var P=function(e,t,n,r){var i,a;return n._deferredEnd=null,(i={})[o.e]=!0,i.id=e,i.name=t,"done",(a={}).done=a.done||{},a.done.get=function(){if(n._deferredEnd)return n._deferredEnd.promise;var e=Object(o.l)();return n._deferredEnd=e,n._isRunning||(n._error?e.reject(n._error):e.resolve(n._result)),e.promise},i.cont=r,i.joiners=[],i.cancel=N,i.isRunning=function(){return n._isRunning},i.isCancelled=function(){return n._isCancelled},i.isAborted=function(){return n._isAborted},i.result=function(){return n._result},i.error=function(){return n._error},i.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("task",e)),o.v.assign(_,e)},function(e,t){for(var n in t){var r=t[n];r.configurable=r.enumerable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,n,r)}}(i,a),i}(g,b,e,w),j={name:b,cancel:function(){j.isRunning&&!j.isCancelled&&(j.isCancelled=!0,A(d))},isRunning:!0},R=function(e,t,n){var r=[],i=void 0,a=!1;function u(e){c(),n(e,!0)}function l(e){r.push(e),e.cont=function(l,c){a||(Object(o.w)(r,e),e.cont=o.u,c?u(l):(e===t&&(i=l),r.length||(a=!0,n(i))))}}function c(){a||(a=!0,r.forEach(function(e){e.cont=o.u,e.cancel()}),r=[])}return l(t),{addTask:l,cancelAll:c,abort:u,getTasks:function(){return r},taskNames:function(){return r.map(function(e){return e.name})}}}(0,j,M);function N(){e._isRunning&&!e._isCancelled&&(e._isCancelled=!0,R.cancelAll(),M(d))}return w&&(w.cancel=N),e._isRunning=!0,A(),P;function A(t,n){if(!j.isRunning)throw new Error("Trying to resume an already finished generator");try{var r=void 0;n?r=e.throw(t):t===d?(j.isCancelled=!0,A.cancel(),r=o.q.func(e.return)?e.return(d):{done:!0,value:d}):r=t===p?o.q.func(e.return)?e.return():{done:!0}:e.next(t),r.done?(j.isMainRunning=!1,j.cont&&j.cont(r.value)):U(r.value,g,"",A)}catch(e){j.isCancelled&&C(e),j.isMainRunning=!1,j.cont(e,!0)}}function M(t,n){e._isRunning=!1,S.close(),n?(t instanceof Error&&Object.defineProperty(t,"sagaStack",{value:"at "+b+" \n "+(t.sagaStack||t.stack),configurable:!0}),P.cont||(t instanceof Error&&T?T(t):C(t)),e._error=t,e._isAborted=!0,e._deferredEnd&&e._deferredEnd.reject(t)):(e._result=t,e._deferredEnd&&e._deferredEnd.resolve(t)),P.cont&&P.cont(t,n),P.joiners.forEach(function(e){return e.cb(t,n)}),P.joiners=null}function U(e,s){var f=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",h=arguments[3],m=Object(o.y)();x&&x.effectTriggered({effectId:m,parentEffectId:s,label:f,effect:e});var g=void 0;function w(e,t){g||(g=!0,h.cancel=o.u,x&&(t?x.effectRejected(m,e):x.effectResolved(m,e)),h(e,t))}w.cancel=o.u,h.cancel=function(){if(!g){g=!0;try{w.cancel()}catch(e){C(e)}w.cancel=o.u,x&&x.effectCancelled(m)}};var E=void 0;return o.q.promise(e)?I(e,w):o.q.helper(e)?L(v(e),m,w):o.q.iterator(e)?q(e,m,b,w):o.q.array(e)?k(e,m,w):(E=u.d.take(e))?function(e,t){var n=e.channel,r=e.pattern,o=e.maybe;n=n||S;var a=function(e){return e instanceof Error?t(e,!0):Object(i.e)(e)&&!o?t(p):t(e)};try{n.take(a,y(r))}catch(e){return t(e,!0)}t.cancel=a.cancel}(E,w):(E=u.d.put(e))?function(e,t){var r=e.channel,i=e.action,u=e.resolve;Object(a.a)(function(){var e=void 0;try{e=(r?r.put:n)(i)}catch(e){if(r||u)return t(e,!0);C(e)}if(!u||!o.q.promise(e))return t(e);I(e,t)})}(E,w):(E=u.d.all(e))?D(E,m,w):(E=u.d.race(e))?function(e,t,n){var r=void 0,a=Object.keys(e),u={};a.forEach(function(t){var l=function(u,l){if(!r)if(l)n.cancel(),n(u,!0);else if(!Object(i.e)(u)&&u!==p&&u!==d){var s;n.cancel(),r=!0;var f=((s={})[t]=u,s);n(o.q.array(e)?[].slice.call(c({},f,{length:a.length})):f)}};l.cancel=o.u,u[t]=l}),n.cancel=function(){r||(r=!0,a.forEach(function(e){return u[e].cancel()}))},a.forEach(function(n){r||U(e[n],t,n,u[n])})}(E,m,w):(E=u.d.call(e))?function(e,t,n){var r=e.context,i=e.fn,a=e.args,u=void 0;try{u=i.apply(r,a)}catch(e){return n(e,!0)}return o.q.promise(u)?I(u,n):o.q.iterator(u)?q(u,t,i.name,n):n(u)}(E,m,w):(E=u.d.cps(e))?function(e,t){var n=e.context,r=e.fn,i=e.args;try{var a=function(e,n){return o.q.undef(e)?t(n):t(e,!0)};r.apply(n,i.concat(a)),a.cancel&&(t.cancel=function(){return a.cancel()})}catch(e){return t(e,!0)}}(E,w):(E=u.d.fork(e))?L(E,m,w):(E=u.d.join(e))?function(e,t){if(e.isRunning()){var n={task:P,cb:t};t.cancel=function(){return Object(o.w)(e.joiners,n)},e.joiners.push(n)}else e.isAborted()?t(e.error(),!0):t(e.result())}(E,w):(E=u.d.cancel(e))?function(e,t){e===o.d&&(e=P);e.isRunning()&&e.cancel();t()}(E,w):(E=u.d.select(e))?function(e,t){var n=e.selector,o=e.args;try{var i=n.apply(void 0,[r()].concat(o));t(i)}catch(e){t(e,!0)}}(E,w):(E=u.d.actionChannel(e))?function(e,n){var r=e.pattern,o=e.buffer,a=y(r);a.pattern=r,n(Object(i.d)(t,o||l.a.fixed(),a))}(E,w):(E=u.d.flush(e))?function(e,t){e.flush(t)}(E,w):(E=u.d.cancelled(e))?function(e,t){t(!!j.isCancelled)}(0,w):(E=u.d.getContext(e))?function(e,t){t(_[e])}(E,w):(E=u.d.setContext(e))?function(e,t){o.v.assign(_,e),t()}(E,w):w(e)}function I(e,t){var n=e[o.a];o.q.func(n)?t.cancel=n:o.q.func(e.abort)&&(t.cancel=function(){return e.abort()}),e.then(t,function(e){return t(e,!0)})}function q(e,o,i,a){m(e,t,n,r,_,h,o,i,a)}function L(e,i,u){var l=e.context,c=e.fn,s=e.args,f=e.detached,p=function(e){var t=e.context,n=e.fn,r=e.args;if(o.q.iterator(n))return n;var i=void 0,a=void 0;try{i=n.apply(t,r)}catch(e){a=e}return o.q.iterator(i)?i:a?Object(o.t)(function(){throw a}):Object(o.t)(function(){var e=void 0,t={done:!1,value:i};return function(n){return e?function(e){return{done:!0,value:e}}(n):(e=!0,t)}}())}({context:l,fn:c,args:s});try{Object(a.c)();var d=m(p,t,n,r,_,h,i,c.name,f?null:o.u);f?u(d):p._isRunning?(R.addTask(d),u(d)):p._error?R.abort(p._error):u(d)}finally{Object(a.b)()}}function D(e,t,n){var r=Object.keys(e);if(!r.length)return n(o.q.array(e)?[]:{});var a=0,u=void 0,l={},s={};r.forEach(function(t){var f=function(s,f){u||(f||Object(i.e)(s)||s===p||s===d?(n.cancel(),n(s,f)):(l[t]=s,++a===r.length&&(u=!0,n(o.q.array(e)?o.f.from(c({},l,{length:r.length})):l))))};f.cancel=o.u,s[t]=f}),n.cancel=function(){u||(u=!0,r.forEach(function(e){return s[e].cancel()}))},r.forEach(function(n){return U(e[n],t,n,s[n])})}}var g="runSaga(storeInterface, saga, ...args): saga argument must be a Generator function!";function b(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var a=void 0;o.q.iterator(e)?(a=e,e=t):(Object(o.h)(t,o.q.func,g),a=t.apply(void 0,r),Object(o.h)(a,o.q.iterator,g));var u=e,l=u.subscribe,c=u.dispatch,s=u.getState,f=u.context,p=u.sagaMonitor,d=u.logger,h=u.onError,y=Object(o.y)();p&&(p.effectTriggered=p.effectTriggered||o.u,p.effectResolved=p.effectResolved||o.u,p.effectRejected=p.effectRejected||o.u,p.effectCancelled=p.effectCancelled||o.u,p.actionDispatched=p.actionDispatched||o.u,p.effectTriggered({effectId:y,root:!0,parentEffectId:0,effect:{root:!0,saga:t,args:r}}));var v=m(a,l,Object(o.A)(c),s,f,{sagaMonitor:p,logger:d,onError:h},y,t.name);return p&&p.effectResolved(y,v),v}var w=n(48),k=n(10);n.d(t,"runSaga",function(){return b}),n.d(t,"END",function(){return i.a}),n.d(t,"eventChannel",function(){return i.d}),n.d(t,"channel",function(){return i.b}),n.d(t,"buffers",function(){return l.a}),n.d(t,"takeEvery",function(){return w.a}),n.d(t,"takeLatest",function(){return w.c}),n.d(t,"throttle",function(){return w.e}),n.d(t,"delay",function(){return o.m}),n.d(t,"CANCEL",function(){return o.a}),n.d(t,"detach",function(){return u.i}),n.d(t,"effects",function(){return k}),n.d(t,"utils",function(){return r});t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.context,n=void 0===t?{}:t,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["context"]),a=r.sagaMonitor,u=r.logger,l=r.onError;if(o.q.func(r))throw new Error("Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead");if(u&&!o.q.func(u))throw new Error("`options.logger` passed to the Saga middleware is not a function!");if(l&&!o.q.func(l))throw new Error("`options.onError` passed to the Saga middleware is not a function!");if(r.emitter&&!o.q.func(r.emitter))throw new Error("`options.emitter` passed to the Saga middleware is not a function!");function c(e){var t=e.getState,s=e.dispatch,f=Object(i.c)();return f.emit=(r.emitter||o.o)(f.emit),c.run=b.bind(null,{context:n,subscribe:f.subscribe,dispatch:s,getState:t,sagaMonitor:a,logger:u,onError:l}),function(e){return function(t){a&&a.actionDispatched&&a.actionDispatched(t);var n=e(t);return f.emit(t),n}}}return c.run=function(){throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware")},c.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("sagaMiddleware",e)),o.v.assign(n,e)},c}},153:function(e,t,n){"use strict";(function(e,r){var o,i=n(208);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(81),n(459)(e))},159:function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},17:function(e,t,n){"use strict";e.exports=function(){}},19:function(e,t,n){"use strict";n.d(t,"a",function(){return u}),n.d(t,"e",function(){return l}),n.d(t,"c",function(){return c}),n.d(t,"b",function(){return p}),n.d(t,"d",function(){return d}),n.d(t,"f",function(){return h});var r=n(0),o=n(42),i=n(76),a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u={type:"@@redux-saga/CHANNEL_END"},l=function(e){return e&&"@@redux-saga/CHANNEL_END"===e.type};function c(){var e=[];return{subscribe:function(t){return e.push(t),function(){return Object(r.w)(e,t)}},emit:function(t){for(var n=e.slice(),r=0,o=n.length;r<o;r++)n[r](t)}}}var s="invalid buffer passed to channel factory function",f="Saga was provided with an undefined action";function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.a.fixed(),t=!1,n=[];function i(){if(t&&n.length)throw Object(r.p)("Cannot have a closed channel with pending takers");if(n.length&&!e.isEmpty())throw Object(r.p)("Cannot have pending takers with non empty buffer")}return Object(r.h)(e,r.q.buffer,s),{take:function(o){i(),Object(r.h)(o,r.q.func,"channel.take's callback must be a function"),t&&e.isEmpty()?o(u):e.isEmpty()?(n.push(o),o.cancel=function(){return Object(r.w)(n,o)}):o(e.take())},put:function(o){if(i(),Object(r.h)(o,r.q.notUndef,f),!t){if(!n.length)return e.put(o);for(var a=0;a<n.length;a++){var u=n[a];if(!u[r.b]||u[r.b](o))return n.splice(a,1),u(o)}}},flush:function(n){i(),Object(r.h)(n,r.q.func,"channel.flush' callback must be a function"),t&&e.isEmpty()?n(u):n(e.flush())},close:function(){if(i(),!t&&(t=!0,n.length)){var e=n;n=[];for(var r=0,o=e.length;r<o;r++)e[r](u)}},get __takers__(){return n},get __closed__(){return t}}}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.a.none(),n=arguments[2];arguments.length>2&&Object(r.h)(n,r.q.func,"Invalid match function passed to eventChannel");var i=p(t),a=function(){i.__closed__||(u&&u(),i.close())},u=e(function(e){l(e)?a():n&&!n(e)||i.put(e)});if(i.__closed__&&u(),!r.q.func(u))throw new Error("in eventChannel: subscribe should return a function to unsubscribe");return{take:i.take,flush:i.flush,close:a}}function h(e){var t=d(function(t){return e(function(e){e[r.c]?t(e):Object(i.a)(function(){return t(e)})})});return a({},t,{take:function(e,n){arguments.length>1&&(Object(r.h)(n,r.q.func,"channel.take's matcher argument must be a function"),e[r.b]=n),t.take(e)}})}},2:function(e,t,n){e.exports=n(457)()},207:function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(81))},208:function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},213:function(e,t,n){"use strict";
/** @license React v16.5.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(159),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.async_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112;o&&Symbol.for("react.placeholder");var h="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}function b(){}function w(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=g.prototype;var k=w.prototype=new b;k.constructor=w,r(k,g.prototype),k.isPureReactComponent=!0;var x={current:null,currentDispatcher:null},E=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:x.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var S=/\/+/g,_=[];function P(e,t,n,r){if(_.length){var o=_.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>_.length&&_.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+N(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+N(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=h&&t[h]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+N(u,c++),r,o);else"object"===u&&y("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(S,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(S,"$&/")+"/"),R(e,M,t=P(t,i,r,o)),j(t)}var I={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,A,t=P(null,null,t,n)),j(t)},count:function(e){return R(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return C(e)||y("143"),e}},createRef:function(){return{current:null}},Component:g,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,Provider:null,Consumer:null,unstable_read:null}).Provider={$$typeof:s,_context:e},e.Consumer=e,e.unstable_read=function(e,t){var n=x.currentDispatcher;return null===n&&y("277"),n.readContext(e,t)}.bind(null,e),e},forwardRef:function(e){return{$$typeof:d,render:e}},Fragment:u,StrictMode:l,unstable_AsyncMode:p,unstable_Profiler:c,createElement:O,cloneElement:function(e,t,n){(null===e||void 0===e)&&y("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=x.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)E.call(t,o)&&!T.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:C,version:"16.5.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},q={default:I},L=q&&I||q;e.exports=L.default||L},214:function(e,t,n){"use strict";
/** @license React v16.5.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(3),o=n(159),i=n(215);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,c=!1,s=null,f={onError:function(e){u=!0,l=e}};function p(e,t,n,r,o,i,a,c,s){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function y(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!m[n])for(var r in t.extractEvents||a("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;g.hasOwnProperty(l)&&a("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&v(c[o],u,l);o=!0}else i.registrationName?(v(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function v(e,t,n){b[e]&&a("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var m=[],g={},b={},w={},k=null,x=null,E=null;function T(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=E(r),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),u){if(u){var y=l;u=!1,l=null}else a("198"),y=void 0;c||(c=!0,s=y)}}(t,n,void 0,e),e.currentTarget=null}function O(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var S=null;function _(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)T(e,t,n[o],r[o]);else n&&T(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function P(e){return _(e,!0)}function j(e){return _(e,!1)}var R=function(e){d&&a("101"),d=Array.prototype.slice.call(e),y()},N=function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&y()};function A(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function M(e,t){if(null!==e&&(S=O(S,e)),e=S,S=null,e&&(C(e,t?P:j),S&&a("95"),c))throw t=s,c=!1,s=null,t}var U=Math.random().toString(36).slice(2),I="__reactInternalInstance$"+U,q="__reactEventHandlers$"+U;function L(e){if(e[I])return e[I];for(;!e[I];){if(!e.parentNode)return null;e=e.parentNode}return 7===(e=e[I]).tag||8===e.tag?e:null}function D(e){return!(e=e[I])||7!==e.tag&&8!==e.tag?null:e}function F(e){if(7===e.tag||8===e.tag)return e.stateNode;a("33")}function z(e){return e[q]||null}function W(e){do{e=e.return}while(e&&7!==e.tag);return e||null}function H(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function B(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=W(t);for(t=n.length;0<t--;)H(n[t],"captured",e);for(t=0;t<n.length;t++)H(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function $(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function Y(e){C(e,B)}var K=!("undefined"==typeof window||!window.document||!window.document.createElement);function Q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var X={animationend:Q("Animation","AnimationEnd"),animationiteration:Q("Animation","AnimationIteration"),animationstart:Q("Animation","AnimationStart"),transitionend:Q("Transition","TransitionEnd")},G={},J={};function Z(e){if(G[e])return G[e];if(!X[e])return e;var t,n=X[e];for(t in n)if(n.hasOwnProperty(t)&&t in J)return G[e]=n[t];return e}K&&(J=document.createElement("div").style,"AnimationEvent"in window||(delete X.animationend.animation,delete X.animationiteration.animation,delete X.animationstart.animation),"TransitionEvent"in window||delete X.transitionend.transition);var ee=Z("animationend"),te=Z("animationiteration"),ne=Z("animationstart"),re=Z("transitionend"),oe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ie=null,ae=null,ue=null;function le(){if(ue)return ue;var e,t,n=ae,r=n.length,o="value"in ie?ie.value:ie.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ue=o.slice(e,1<t?1-t:void 0)}function ce(){return!0}function se(){return!1}function fe(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ce:se,this.isPropagationStopped=se,this}function pe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function de(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function he(e){e.eventPool=[],e.getPooled=pe,e.release=de}o(fe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ce)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ce)},persist:function(){this.isPersistent=ce},isPersistent:se,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=se,this._dispatchInstances=this._dispatchListeners=null}}),fe.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},fe.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,he(n),n},he(fe);var ye=fe.extend({data:null}),ve=fe.extend({data:null}),me=[9,13,27,32],ge=K&&"CompositionEvent"in window,be=null;K&&"documentMode"in document&&(be=document.documentMode);var we=K&&"TextEvent"in window&&!be,ke=K&&(!ge||be&&8<be&&11>=be),xe=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Te=!1;function Oe(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ce(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var _e={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"compositionstart":o=Ee.compositionStart;break e;case"compositionend":o=Ee.compositionEnd;break e;case"compositionupdate":o=Ee.compositionUpdate;break e}o=void 0}else Se?Oe(e,n)&&(o=Ee.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(ke&&"ko"!==n.locale&&(Se||o!==Ee.compositionStart?o===Ee.compositionEnd&&Se&&(i=le()):(ae="value"in(ie=r)?ie.value:ie.textContent,Se=!0)),o=ye.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ce(n))&&(o.data=i),Y(o),i=o):i=null,(e=we?function(e,t){switch(e){case"compositionend":return Ce(t);case"keypress":return 32!==t.which?null:(Te=!0,xe);case"textInput":return(e=t.data)===xe&&Te?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!ge&&Oe(e,t)?(e=le(),ue=ae=ie=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ke&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=ve.getPooled(Ee.beforeInput,t,n,r)).data=e,Y(t)):t=null,null===i?t:null===t?i:[i,t]}},Pe=null,je=null,Re=null;function Ne(e){if(e=x(e)){"function"!=typeof Pe&&a("280");var t=k(e.stateNode);Pe(e.stateNode,e.type,t)}}function Ae(e){je?Re?Re.push(e):Re=[e]:je=e}function Me(){if(je){var e=je,t=Re;if(Re=je=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Ue(e,t){return e(t)}function Ie(e,t,n){return e(t,n)}function qe(){}var Le=!1;function De(e,t){if(Le)return e(t);Le=!0;try{return Ue(e,t)}finally{Le=!1,(null!==je||null!==Re)&&(qe(),Me())}}var Fe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fe[e.type]:"textarea"===t}function We(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function He(e){if(!K)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=Be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ye=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ke=/^(.*)[\\\/]/,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Ge=Qe?Symbol.for("react.portal"):60106,Je=Qe?Symbol.for("react.fragment"):60107,Ze=Qe?Symbol.for("react.strict_mode"):60108,et=Qe?Symbol.for("react.profiler"):60114,tt=Qe?Symbol.for("react.provider"):60109,nt=Qe?Symbol.for("react.context"):60110,rt=Qe?Symbol.for("react.async_mode"):60111,ot=Qe?Symbol.for("react.forward_ref"):60112,it=Qe?Symbol.for("react.placeholder"):60113,at="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=at&&e[at]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case rt:return"AsyncMode";case Je:return"Fragment";case Ge:return"Portal";case et:return"Profiler";case Ze:return"StrictMode";case it:return"Placeholder"}if("object"==typeof e){switch(e.$$typeof){case nt:return"Context.Consumer";case tt:return"Context.Provider";case ot:return""!==(e=(e=e.render).displayName||e.name||"")?"ForwardRef("+e+")":"ForwardRef"}if("function"==typeof e.then&&(e=1===e._reactStatus?e._reactResult:null))return lt(e)}return null}function ct(e){var t="";do{e:switch(e.tag){case 4:case 0:case 1:case 2:case 3:case 7:case 10:var n=e._debugOwner,r=e._debugSource,o=lt(e.type),i=null;n&&(i=lt(n.type)),n=o,o="",r?o=" (at "+r.fileName.replace(Ke,"")+":"+r.lineNumber+")":i&&(o=" (created by "+i+")"),i="\n    in "+(n||"Unknown")+o;break e;default:i=""}t+=i,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ft=Object.prototype.hasOwnProperty,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){yt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];yt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){yt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){yt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){yt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){yt[e]=new ht(e,3,!0,e,null)}),["capture","download"].forEach(function(e){yt[e]=new ht(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){yt[e]=new ht(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){yt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function mt(e){return e[1].toUpperCase()}function gt(e,t,n,r){var o=yt.hasOwnProperty(t)?yt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ft.call(dt,e)||!ft.call(pt,e)&&(st.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function wt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function kt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=bt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&gt(e,"checked",t,!1)}function Et(e,t){xt(e,t);var n=bt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ot(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ot(e,t.type,bt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Tt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r=e.value,n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ot(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,mt);yt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,mt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,mt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),yt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function St(e,t,n){return(e=fe.getPooled(Ct.change,e,t,n)).type="change",Ae(n),Y(e),e}var _t=null,Pt=null;function jt(e){M(e,!1)}function Rt(e){if($e(F(e)))return e}function Nt(e,t){if("change"===e)return t}var At=!1;function Mt(){_t&&(_t.detachEvent("onpropertychange",Ut),Pt=_t=null)}function Ut(e){"value"===e.propertyName&&Rt(Pt)&&De(jt,e=St(Pt,e,We(e)))}function It(e,t,n){"focus"===e?(Mt(),Pt=n,(_t=t).attachEvent("onpropertychange",Ut)):"blur"===e&&Mt()}function qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Pt)}function Lt(e,t){if("click"===e)return Rt(t)}function Dt(e,t){if("input"===e||"change"===e)return Rt(t)}K&&(At=He("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Ct,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?F(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Nt:ze(o)?At?i=Dt:(i=qt,a=It):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Lt),i&&(i=i(e,t)))return St(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ot(o,"number",o.value)}},zt=fe.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Ht}var Vt=0,$t=0,Yt=!1,Kt=!1,Qt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Vt;return Vt=e.screenX,Yt?"mousemove"===e.type?e.screenX-t:0:(Yt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=$t;return $t=e.screenY,Kt?"mousemove"===e.type?e.screenY-t:0:(Kt=!0,0)}}),Xt=Qt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Gt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jt={eventTypes:Gt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?L(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Qt,u=Gt.mouseLeave,l=Gt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Xt,u=Gt.pointerLeave,l=Gt.pointerEnter,c="pointer");var s=null==i?o:F(i);if(o=null==t?o:F(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=W(a))c++;for(a=0,l=o;l;l=W(l))a++;for(;0<c-a;)t=W(t),c--;for(;0<a-c;)o=W(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=W(t),o=W(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=W(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=W(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}},Zt=Object.prototype.hasOwnProperty;function en(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function tn(e,t){if(en(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!en(e[n[r]],t[n[r]]))return!1;return!0}function nn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 5===t.tag?2:3}function rn(e){2!==nn(e)&&a("188")}function on(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=nn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return rn(o),e;if(u===r)return rn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 5!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(7===t.tag||8===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var an=fe.extend({animationName:null,elapsedTime:null,pseudoElement:null}),un=fe.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=zt.extend({relatedTarget:null});function cn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pn=zt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=cn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?cn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?cn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Qt.extend({dataTransfer:null}),hn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),yn=fe.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=Qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),mn=[["abort","abort"],[ee,"animationEnd"],[te,"animationIteration"],[ne,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[re,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],gn={},bn={};function wn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},gn[e]=t,bn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){wn(e,!0)}),mn.forEach(function(e){wn(e,!1)});var kn={eventTypes:gn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=bn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=bn[e];if(!o)return null;switch(e){case"keypress":if(0===cn(n))return null;case"keydown":case"keyup":e=pn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Qt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=hn;break;case ee:case te:case ne:e=an;break;case re:e=yn;break;case"scroll":e=zt;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Xt;break;default:e=fe}return Y(t=e.getPooled(o,t,n,r)),t}},xn=kn.isInteractiveTopLevelEventType,En=[];function Tn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=5!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=L(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=We(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<m.length;u++){var l=m[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=O(a,l))}M(a,!1)}}var On=!0;function Cn(e,t){if(!t)return null;var n=(xn(e)?_n:Pn).bind(null,e);t.addEventListener(e,n,!1)}function Sn(e,t){if(!t)return null;var n=(xn(e)?_n:Pn).bind(null,e);t.addEventListener(e,n,!0)}function _n(e,t){Ie(Pn,e,t)}function Pn(e,t){if(On){var n=We(t);if(null===(n=L(n))||"number"!=typeof n.tag||2===nn(n)||(n=null),En.length){var r=En.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{De(Tn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>En.length&&En.push(e)}}}var jn={},Rn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=Rn++,jn[e[Nn]]={}),jn[e[Nn]]}function Mn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Un(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=Un(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Un(r)}}function qn(){for(var e=window,t=Mn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Mn(e.document)}return t}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Dn=K&&"documentMode"in document&&11>=document.documentMode,Fn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},zn=null,Wn=null,Hn=null,Bn=!1;function Vn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Bn||null==zn||zn!==Mn(n)?null:("selectionStart"in(n=zn)&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hn&&tn(Hn,n)?null:(Hn=n,(e=fe.getPooled(Fn.select,Wn,e,t)).type="select",e.target=zn,Y(e),e))}var $n={eventTypes:Fn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?F(t):window,e){case"focus":(ze(i)||"true"===i.contentEditable)&&(zn=i,Wn=t,Hn=null);break;case"blur":Hn=Wn=zn=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,Vn(n,r);case"selectionchange":if(Dn)break;case"keydown":case"keyup":return Vn(n,r)}return null}};function Yn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Qn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Xn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:bt(n)}}function Gn(e,t){var n=bt(t.value);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=""+bt(t.defaultValue))}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}R("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=z,x=D,E=F,N({SimpleEventPlugin:kn,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:Ft,SelectEventPlugin:$n,BeforeInputEventPlugin:_e});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr=void 0,rr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||ir.hasOwnProperty(o)&&ir[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var lr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(lr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function sr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function fr(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Sn("scroll",e);break;case"focus":case"blur":Sn("focus",e),Sn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":He(o)&&Sn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===oe.indexOf(o)&&Cn(o,e)}n[o]=!0}}}function pr(){}var dr=null,hr=null;function yr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function mr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function gr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var br=[],wr=-1;function kr(e){0>wr||(e.current=br[wr],br[wr]=null,wr--)}function xr(e,t){br[++wr]=e.current,e.current=t}var Er={},Tr={current:Er},Or={current:!1},Cr=Er;function Sr(e,t){var n=e.type.contextTypes;if(!n)return Er;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function _r(e){return null!==(e=e.childContextTypes)&&void 0!==e}function Pr(e){kr(Or),kr(Tr)}function jr(e){kr(Or),kr(Tr)}function Rr(e,t,n){Tr.current!==Er&&a("168"),xr(Tr,t),xr(Or,n)}function Nr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",lt(t)||"Unknown",i);return o({},n,r)}function Ar(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Er,Cr=Tr.current,xr(Tr,t),xr(Or,Or.current),!0}function Mr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Nr(e,t,Cr),r.__reactInternalMemoizedMergedChildContext=t,kr(Or),kr(Tr),xr(Tr,t)):kr(Or),xr(Or,n)}var Ur=null,Ir=null;function qr(e){return function(t){try{return e(t)}catch(e){}}}function Lr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Dr(e){return"object"==typeof(e=e.prototype)&&null!==e&&"object"==typeof e.isReactComponent&&null!==e.isReactComponent}function Fr(e,t,n){var r=e.alternate;return null===r?((r=new Lr(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=e.childExpirationTime,r.expirationTime=t!==e.pendingProps?n:e.expirationTime,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.firstContextDependency=e.firstContextDependency,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function zr(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=Dr(r)?2:4;else if("string"==typeof r)i=7;else e:switch(r){case Je:return Wr(e.children,t,n,o);case rt:i=10,t|=3;break;case Ze:i=10,t|=2;break;case et:return(r=new Lr(15,e,o,4|t)).type=et,r.expirationTime=n,r;case it:i=16;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case tt:i=12;break e;case nt:i=11;break e;case ot:i=13;break e;default:if("function"==typeof r.then){i=4;break e}}a("130",null==r?r:typeof r,"")}return(t=new Lr(i,e,o,t)).type=r,t.expirationTime=n,t}function Wr(e,t,n,r){return(e=new Lr(9,e,r,t)).expirationTime=n,e}function Hr(e,t,n){return(e=new Lr(8,e,null,t)).expirationTime=n,e}function Br(e,t,n){return(t=new Lr(6,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n>t?e.earliestPendingTime=t:e.latestPendingTime<t&&(e.latestPendingTime=t),$r(t,e)}function $r(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r>e)&&(o=r),0!==(e=o)&&0!==n&&n<e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var Yr=!1;function Kr(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qr(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Xr(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Gr(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Jr(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Kr(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Kr(e.memoizedState),o=n.updateQueue=Kr(n.memoizedState)):r=e.updateQueue=Qr(o):null===o&&(o=n.updateQueue=Qr(r));null===o||r===o?Gr(r,t):null===r.lastUpdate||null===o.lastUpdate?(Gr(r,t),Gr(o,t)):(Gr(r,t),o.lastUpdate=t)}function Zr(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Kr(e.memoizedState):eo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function eo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Qr(t)),t}function to(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(i="function"==typeof(e=n.payload)?e.call(a,r,i):e)||void 0===i)break;return o({},r,i);case 2:Yr=!0}return r}function no(e,t,n,r,o){Yr=!1;for(var i=(t=eo(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s>o?(null===a&&(a=l,i=c),(0===u||u>s)&&(u=s)):(c=to(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f>o?(null===s&&(s=l,null===a&&(i=c)),(0===u||u>f)&&(u=f)):(c=to(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function ro(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function io(e,t){return{value:e,source:t,stack:ct(t)}}var ao={current:null},uo=null,lo=null,co=null;function so(e,t){var n=e.type._context;xr(ao,n._currentValue),n._currentValue=t}function fo(e){var t=ao.current;kr(ao),e.type._context._currentValue=t}function po(e){uo=e,co=lo=null,e.firstContextDependency=null}function ho(e,t){return co!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(co=e,t=1073741823),t={context:e,observedBits:t,next:null},null===lo?(null===uo&&a("277"),uo.firstContextDependency=lo=t):lo=lo.next=t),e._currentValue}var yo={},vo={current:yo},mo={current:yo},go={current:yo};function bo(e){return e===yo&&a("174"),e}function wo(e,t){xr(go,t),xr(mo,e),xr(vo,yo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}kr(vo),xr(vo,t)}function ko(e){kr(vo),kr(mo),kr(go)}function xo(e){bo(go.current);var t=bo(vo.current),n=tr(t,e.type);t!==n&&(xr(mo,e),xr(vo,n))}function Eo(e){mo.current===e&&(kr(vo),kr(mo))}var To=(new r.Component).refs;function Oo(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Co={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===nn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ua(),o=Xr(r=Ai(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Jr(e,o),Mi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ua(),o=Xr(r=Ai(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Jr(e,o),Mi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ua(),r=Xr(n=Ai(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Jr(e,r),Mi(e,n)}};function So(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!tn(n,r)||!tn(o,i))}function _o(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Co.enqueueReplaceState(t,t.state,null)}function Po(e,t,n,r){var o=e.stateNode,i=_r(t)?Cr:Tr.current;o.props=n,o.state=e.memoizedState,o.refs=To,o.context=Sr(e,i),null!==(i=e.updateQueue)&&(no(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Oo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Co.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(no(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var jo=Array.isArray;function Ro(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&3!==n.tag&&a("110"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===To&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("254",e)}return e}function No(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ao(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Fr(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||8!==t.tag?((t=Hr(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function c(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=Ro(e,t,n),r.return=e,r):((r=zr(n,e.mode,r)).ref=Ro(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||6!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Br(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,i){return null===t||9!==t.tag?((t=Wr(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Hr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=zr(t,e.mode,n)).ref=Ro(e,null,t),n.return=e,n;case Ge:return(t=Br(t,e.mode,n)).return=e,t}if(jo(t)||ut(t))return(t=Wr(t,e.mode,n,null)).return=e,t;No(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===o?n.type===Je?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ge:return n.key===o?s(e,t,n,r):null}if(jo(n)||ut(n))return null!==o?null:f(e,t,n,r,null);No(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xe:return e=e.get(null===r.key?n:r.key)||null,r.type===Je?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ge:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(jo(r)||ut(r))return f(t,e=e.get(n)||null,r,o,null);No(t,r)}return null}function y(o,a,u,l){for(var c=null,s=null,f=a,y=a=0,v=null;null!==f&&y<u.length;y++){f.index>y?(v=f,f=null):v=f.sibling;var m=d(o,f,u[y],l);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,y),null===s?c=m:s.sibling=m,s=m,f=v}if(y===u.length)return n(o,f),c;if(null===f){for(;y<u.length;y++)(f=p(o,u[y],l))&&(a=i(f,a,y),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);y<u.length;y++)(v=h(f,o,y,u[y],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?y:v.key),a=i(v,a,y),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach(function(e){return t(o,e)}),c}function v(o,u,l,c){var s=ut(l);"function"!=typeof s&&a("150"),null==(l=s.call(l))&&a("151");for(var f=s=null,y=u,v=u=0,m=null,g=l.next();null!==y&&!g.done;v++,g=l.next()){y.index>v?(m=y,y=null):m=y.sibling;var b=d(o,y,g.value,c);if(null===b){y||(y=m);break}e&&y&&null===b.alternate&&t(o,y),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,y=m}if(g.done)return n(o,y),s;if(null===y){for(;!g.done;v++,g=l.next())null!==(g=p(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(y=r(o,y);!g.done;v++,g=l.next())null!==(g=h(y,o,v,g.value,c))&&(e&&null!==g.alternate&&y.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&y.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Je&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Xe:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(9===c.tag?i.type===Je:c.type===i.type){n(e,c.sibling),(r=o(c,i.type===Je?i.props.children:i.props,l)).ref=Ro(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Je?((r=Wr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=zr(i,e.mode,l)).ref=Ro(e,r,i),l.return=e,e=l)}return u(e);case Ge:e:{for(c=i.key;null!==r;){if(r.key===c){if(6===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],l)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Br(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&8===r.tag?(n(e,r.sibling),(r=o(r,i,l)).return=e,e=r):(n(e,r),(r=Hr(i,e.mode,l)).return=e,e=r),u(e);if(jo(i))return y(e,r,i,l);if(ut(i))return v(e,r,i,l);if(s&&No(e,i),void 0===i&&!c)switch(e.tag){case 2:case 3:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var Mo=Ao(!0),Uo=Ao(!1),Io=null,qo=null,Lo=!1;function Do(e,t){var n=new Lr(7,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fo(e,t){switch(e.tag){case 7:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 8:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function zo(e){if(Lo){var t=qo;if(t){var n=t;if(!Fo(e,t)){if(!(t=mr(n))||!Fo(e,t))return e.effectTag|=2,Lo=!1,void(Io=e);Do(Io,n)}Io=e,qo=gr(t)}else e.effectTag|=2,Lo=!1,Io=e}}function Wo(e){for(e=e.return;null!==e&&7!==e.tag&&5!==e.tag;)e=e.return;Io=e}function Ho(e){if(e!==Io)return!1;if(!Lo)return Wo(e),Lo=!0,!1;var t=e.type;if(7!==e.tag||"head"!==t&&"body"!==t&&!vr(t,e.memoizedProps))for(t=qo;t;)Do(e,t),t=mr(t);return Wo(e),qo=Io?mr(e.stateNode):null,!0}function Bo(){qo=Io=null,Lo=!1}var Vo=Ye.ReactCurrentOwner;function $o(e,t,n,r){t.child=null===e?Uo(t,null,n,r):Mo(t,e.child,n,r)}function Yo(e,t,n,r,o){n=n.render;var i=t.ref;return Or.current||t.memoizedProps!==r||i!==(null!==e?e.ref:null)?($o(e,t,n=n(r,i),o),t.memoizedProps=r,t.child):ei(e,t,o)}function Ko(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Qo(e,t,n,r,o){var i=_r(n)?Cr:Tr.current;return i=Sr(t,i),po(t),n=n(r,i),t.effectTag|=1,$o(e,t,n,o),t.memoizedProps=r,t.child}function Xo(e,t,n,r,o){if(_r(n)){var i=!0;Ar(t)}else i=!1;if(po(t),null===e)if(null===t.stateNode){var a=_r(n)?Cr:Tr.current,u=n.contextTypes,l=null!==u&&void 0!==u,c=new n(r,u=l?Sr(t,a):Er);t.memoizedState=null!==c.state&&void 0!==c.state?c.state:null,c.updater=Co,t.stateNode=c,c._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,l.__reactInternalMemoizedMaskedChildContext=u),Po(t,n,r,o),r=!0}else{a=t.stateNode,u=t.memoizedProps,a.props=u;var s=a.context;l=Sr(t,l=_r(n)?Cr:Tr.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==l)&&_o(t,a,r,l),Yr=!1;var p=t.memoizedState;s=a.state=p;var d=t.updateQueue;null!==d&&(no(t,d,r,a,o),s=t.memoizedState),u!==r||p!==s||Or.current||Yr?("function"==typeof f&&(Oo(t,n,f,r),s=t.memoizedState),(u=Yr||So(t,n,u,r,p,s,l))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=l,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=u,s=a.context,l=Sr(t,l=_r(n)?Cr:Tr.current),(c="function"==typeof(f=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==l)&&_o(t,a,r,l),Yr=!1,s=t.memoizedState,p=a.state=s,null!==(d=t.updateQueue)&&(no(t,d,r,a,o),p=t.memoizedState),u!==r||s!==p||Or.current||Yr?("function"==typeof f&&(Oo(t,n,f,r),p=t.memoizedState),(f=Yr||So(t,n,u,r,s,p,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=f):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Go(e,t,n,r,i,o)}function Go(e,t,n,r,o,i){Ko(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Mr(t,n,!1),ei(e,t,i);r=t.stateNode,Vo.current=t;var u=a?null:r.render();return t.effectTag|=1,null!==e&&a&&($o(e,t,null,i),t.child=null),$o(e,t,u,i),t.memoizedState=r.state,t.memoizedProps=r.props,o&&Mr(t,n,!0),t.child}function Jo(e){var t=e.stateNode;t.pendingContext?Rr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Rr(0,t.context,!1),wo(e,t.containerInfo)}function Zo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}function ei(e,t,n){null!==e&&(t.firstContextDependency=e.firstContextDependency);var r=t.childExpirationTime;if(0===r||r>n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Fr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ti(e,t,n){var r=t.expirationTime;if(!Or.current&&(0===r||r>n)){switch(t.tag){case 5:Jo(t),Bo();break;case 7:xo(t);break;case 2:_r(t.type)&&Ar(t);break;case 3:_r(t.type._reactResult)&&Ar(t);break;case 6:wo(t,t.stateNode.containerInfo);break;case 12:so(t,t.memoizedProps.value)}return ei(e,t,n)}switch(t.expirationTime=0,t.tag){case 4:return function(e,t,n,r){null!==e&&a("155");var o=t.pendingProps;if("object"==typeof n&&null!==n&&"function"==typeof n.then){var i=n=function(e){switch(e._reactStatus){case 1:return e._reactResult;case 2:throw e._reactResult;case 0:throw e;default:throw e._reactStatus=0,e.then(function(t){if(0===e._reactStatus){if(e._reactStatus=1,"object"==typeof t&&null!==t){var n=t.default;t=void 0!==n&&null!==n?n:t}e._reactResult=t}},function(t){0===e._reactStatus&&(e._reactStatus=2,e._reactResult=t)}),e}}(n);i="function"==typeof i?Dr(i)?3:1:void 0!==i&&null!==i&&i.$$typeof?14:4,i=t.tag=i;var u=Zo(n,o);switch(i){case 1:return Qo(e,t,n,u,r);case 3:return Xo(e,t,n,u,r);case 14:return Yo(e,t,n,u,r);default:a("283",n)}}if(i=Sr(t,Tr.current),po(t),i=n(o,i),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){t.tag=2,_r(n)?(u=!0,Ar(t)):u=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var l=n.getDerivedStateFromProps;return"function"==typeof l&&Oo(t,n,l,o),i.updater=Co,t.stateNode=i,i._reactInternalFiber=t,Po(t,n,o,r),Go(e,t,n,!0,u,r)}return t.tag=0,$o(e,t,i,r),t.memoizedProps=o,t.child}(e,t,t.type,n);case 0:return Qo(e,t,t.type,t.pendingProps,n);case 1:var o=t.type._reactResult;return e=Qo(e,t,o,Zo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 2:return Xo(e,t,t.type,t.pendingProps,n);case 3:return e=Xo(e,t,o=t.type._reactResult,Zo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 5:return Jo(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,no(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(Bo(),t=ei(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(qo=gr(t.stateNode.containerInfo),Io=t,o=Lo=!0),o?(t.effectTag|=2,t.child=Uo(t,null,r,n)):($o(e,t,r,n),Bo()),t=t.child),t;case 7:xo(t),null===e&&zo(t),r=t.type,o=t.pendingProps;var i=null!==e?e.memoizedProps:null,u=o.children;return vr(r,o)?u=null:null!==i&&vr(r,i)&&(t.effectTag|=16),Ko(e,t),1073741823!==n&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,t=null):($o(e,t,u,n),t.memoizedProps=o,t=t.child),t;case 8:return null===e&&zo(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 6:return wo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Mo(t,null,r,n):$o(e,t,r,n),t.memoizedProps=r,t.child;case 13:return Yo(e,t,t.type,t.pendingProps,n);case 14:return e=Yo(e,t,o=t.type._reactResult,Zo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 9:return $o(e,t,r=t.pendingProps,n),t.memoizedProps=r,t.child;case 10:return $o(e,t,r=t.pendingProps.children,n),t.memoizedProps=r,t.child;case 15:return $o(e,t,(r=t.pendingProps).children,n),t.memoizedProps=r,t.child;case 12:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value,t.memoizedProps=o,so(t,i),null!==u){var l=u.value;if(0===(i=l===i&&(0!==l||1/l==1/i)||l!=l&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!Or.current){t=ei(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){if(null!==(l=u.firstContextDependency))do{if(l.context===r&&0!=(l.observedBits&i)){if(2===u.tag||3===u.tag){var c=Xr(n);c.tag=2,Jr(u,c)}(0===u.expirationTime||u.expirationTime>n)&&(u.expirationTime=n),null!==(c=u.alternate)&&(0===c.expirationTime||c.expirationTime>n)&&(c.expirationTime=n);for(var s=u.return;null!==s;){if(c=s.alternate,0===s.childExpirationTime||s.childExpirationTime>n)s.childExpirationTime=n,null!==c&&(0===c.childExpirationTime||c.childExpirationTime>n)&&(c.childExpirationTime=n);else{if(null===c||!(0===c.childExpirationTime||c.childExpirationTime>n))break;c.childExpirationTime=n}s=s.return}}c=u.child,l=l.next}while(null!==l);else c=12===u.tag&&u.type===t.type?null:u.child;if(null!==c)c.return=u;else for(c=u;null!==c;){if(c===t){c=null;break}if(null!==(u=c.sibling)){u.return=c.return,c=u;break}c=c.return}u=c}}$o(e,t,o.children,n),t=t.child}return t;case 11:return i=t.type,o=(r=t.pendingProps).children,po(t),o=o(i=ho(i,r.unstable_observedBits)),t.effectTag|=1,$o(e,t,o,n),t.memoizedProps=r,t.child;default:a("156")}}function ni(e){e.effectTag|=4}var ri=void 0,oi=void 0,ii=void 0;function ai(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ct(n)),null!==n&&lt(n.type),t=t.value,null!==e&&2===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function ui(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ni(e,t)}else t.current=null}function li(e){switch("function"==typeof Ir&&Ir(e),e.tag){case 2:case 3:ui(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ni(e,t)}break;case 7:ui(e);break;case 6:fi(e)}}function ci(e){return 7===e.tag||5===e.tag||6===e.tag}function si(e){e:{for(var t=e.return;null!==t;){if(ci(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 7:t=n.stateNode,r=!1;break;case 5:case 6:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ci(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;7!==n.tag&&8!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||6===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(7===o.tag||8===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(i=t,u=o.stateNode,8===i.nodeType?(l=i.parentNode).insertBefore(u,i):(l=i).appendChild(u),null===l.onclick&&(l.onclick=pr)):t.appendChild(o.stateNode);else if(6!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function fi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 7:r=n.stateNode,o=!1;break e;case 5:case 6:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(7===t.tag||8===t.tag){e:for(var i=t,u=i;;)if(li(u),null!==u.child&&6!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(6===t.tag?(r=t.stateNode.containerInfo,o=!0):li(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;6===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function pi(e,t){switch(t.tag){case 2:case 3:break;case 7:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[q]=r,"input"===e&&"radio"===r.type&&null!=r.name&&xt(n,r),sr(e,o),t=sr(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?ur(n,l):"dangerouslySetInnerHTML"===u?rr(n,l):"children"===u?or(n,l):gt(n,u,l,t)}switch(e){case"input":Et(n,r);break;case"textarea":Gn(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?Kn(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?Kn(n,!!r.multiple,r.defaultValue,!0):Kn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 8:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 5:case 15:case 16:break;default:a("163")}}function di(e,t,n){(n=Xr(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ha(r),ai(e,t)},n}function hi(e,t,n){(n=Xr(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===Si?Si=new Set([this]):Si.add(this);var n=t.value,r=t.stack;ai(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function yi(e){switch(e.tag){case 2:_r(e.type)&&Pr();var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return _r(e.type._reactResult)&&Pr(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return ko(),jr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-1025&t|64,e;case 7:return Eo(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 6:return ko(),null;case 12:return fo(e),null;default:return null}}ri=function(){},oi=function(e,t,n){(t.updateQueue=n)&&ni(t)},ii=function(e,t,n,r){n!==r&&ni(t)};var vi={readContext:ho},mi=Ye.ReactCurrentOwner,gi=0,bi=0,wi=!1,ki=null,xi=null,Ei=0,Ti=!1,Oi=null,Ci=!1,Si=null;function _i(){if(null!==ki)for(var e=ki.return;null!==e;){var t=e;switch(t.tag){case 2:var n=t.type.childContextTypes;null!==n&&void 0!==n&&Pr();break;case 3:null!==(n=t.type._reactResult.childContextTypes)&&void 0!==n&&Pr();break;case 5:ko(),jr();break;case 7:Eo(t);break;case 6:ko();break;case 12:fo(t)}e=e.return}xi=null,Ei=0,Ti=!1,ki=null}function Pi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){var i=t,u=(t=e).pendingProps;switch(t.tag){case 0:case 1:break;case 2:_r(t.type)&&Pr();break;case 3:_r(t.type._reactResult)&&Pr();break;case 5:ko(),jr(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==i&&null!==i.child||(Ho(t),t.effectTag&=-3),ri(t);break;case 7:Eo(t);var l=bo(go.current),c=t.type;if(null!==i&&null!=t.stateNode){var s=i.memoizedProps;if(s!==u){var f=t.stateNode,p=bo(vo.current),d=f,h=c,y=s,v=u;f=l;var m=null;switch(h){case"input":y=wt(d,y),v=wt(d,v),m=[];break;case"option":y=Yn(d,y),v=Yn(d,v),m=[];break;case"select":y=o({},y,{value:void 0}),v=o({},v,{value:void 0}),m=[];break;case"textarea":y=Qn(d,y),v=Qn(d,v),m=[];break;default:"function"!=typeof y.onClick&&"function"==typeof v.onClick&&(d.onclick=pr)}cr(h,v),h=d=void 0;var g=null;for(d in y)if(!v.hasOwnProperty(d)&&y.hasOwnProperty(d)&&null!=y[d])if("style"===d){var w=y[d];for(h in w)w.hasOwnProperty(h)&&(g||(g={}),g[h]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(b.hasOwnProperty(d)?m||(m=[]):(m=m||[]).push(d,null));for(d in v){var k=v[d];if(w=null!=y?y[d]:void 0,v.hasOwnProperty(d)&&k!==w&&(null!=k||null!=w))if("style"===d)if(w){for(h in w)!w.hasOwnProperty(h)||k&&k.hasOwnProperty(h)||(g||(g={}),g[h]="");for(h in k)k.hasOwnProperty(h)&&w[h]!==k[h]&&(g||(g={}),g[h]=k[h])}else g||(m||(m=[]),m.push(d,g)),g=k;else"dangerouslySetInnerHTML"===d?(k=k?k.__html:void 0,w=w?w.__html:void 0,null!=k&&w!==k&&(m=m||[]).push(d,""+k)):"children"===d?w===k||"string"!=typeof k&&"number"!=typeof k||(m=m||[]).push(d,""+k):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(b.hasOwnProperty(d)?(null!=k&&fr(f,d),m||w===k||(m=[])):(m=m||[]).push(d,k))}g&&(m=m||[]).push("style",g),oi(i,t,m,c,s,u,l,p)}i.ref!==t.ref&&(t.effectTag|=128)}else if(u){if(m=bo(vo.current),Ho(t)){switch(f=(u=t).stateNode,i=u.type,s=u.memoizedProps,p=l,f[I]=u,f[q]=s,c=void 0,l=f,i){case"iframe":case"object":Cn("load",l);break;case"video":case"audio":for(f=0;f<oe.length;f++)Cn(oe[f],l);break;case"source":Cn("error",l);break;case"img":case"image":case"link":Cn("error",l),Cn("load",l);break;case"form":Cn("reset",l),Cn("submit",l);break;case"details":Cn("toggle",l);break;case"input":kt(l,s),Cn("invalid",l),fr(p,"onChange");break;case"select":l._wrapperState={wasMultiple:!!s.multiple},Cn("invalid",l),fr(p,"onChange");break;case"textarea":Xn(l,s),Cn("invalid",l),fr(p,"onChange")}for(c in cr(i,s),f=null,s)s.hasOwnProperty(c)&&(m=s[c],"children"===c?"string"==typeof m?l.textContent!==m&&(f=["children",m]):"number"==typeof m&&l.textContent!==""+m&&(f=["children",""+m]):b.hasOwnProperty(c)&&null!=m&&fr(p,c));switch(i){case"input":Ve(l),Tt(l,s,!0);break;case"textarea":Ve(l),Jn(l);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(l.onclick=pr)}c=f,u.updateQueue=c,(u=null!==c)&&ni(t)}else{s=t,i=c,p=u,f=9===l.nodeType?l:l.ownerDocument,m===Zn.html&&(m=er(i)),m===Zn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof p.is?f=f.createElement(i,{is:p.is}):(f=f.createElement(i),"select"===i&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(m,i),(i=f)[I]=s,i[q]=u;e:for(s=i,p=t,f=p.child;null!==f;){if(7===f.tag||8===f.tag)s.appendChild(f.stateNode);else if(6!==f.tag&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===p)break;for(;null===f.sibling;){if(null===f.return||f.return===p)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}switch(p=i,d=l,g=sr(f=c,s=u),f){case"iframe":case"object":Cn("load",p),l=s;break;case"video":case"audio":for(l=0;l<oe.length;l++)Cn(oe[l],p);l=s;break;case"source":Cn("error",p),l=s;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),l=s;break;case"form":Cn("reset",p),Cn("submit",p),l=s;break;case"details":Cn("toggle",p),l=s;break;case"input":kt(p,s),l=wt(p,s),Cn("invalid",p),fr(d,"onChange");break;case"option":l=Yn(p,s);break;case"select":p._wrapperState={wasMultiple:!!s.multiple},l=o({},s,{value:void 0}),Cn("invalid",p),fr(d,"onChange");break;case"textarea":Xn(p,s),l=Qn(p,s),Cn("invalid",p),fr(d,"onChange");break;default:l=s}for(m in cr(f,l),m=void 0,y=f,v=p,h=l)h.hasOwnProperty(m)&&(w=h[m],"style"===m?ur(v,w):"dangerouslySetInnerHTML"===m?null!=(w=w?w.__html:void 0)&&rr(v,w):"children"===m?"string"==typeof w?("textarea"!==y||""!==w)&&or(v,w):"number"==typeof w&&or(v,""+w):"suppressContentEditableWarning"!==m&&"suppressHydrationWarning"!==m&&"autoFocus"!==m&&(b.hasOwnProperty(m)?null!=w&&fr(d,m):null!=w&&gt(v,m,w,g)));switch(f){case"input":Ve(p),Tt(p,s,!1);break;case"textarea":Ve(p),Jn(p);break;case"option":null!=s.value&&p.setAttribute("value",""+bt(s.value));break;case"select":(l=p).multiple=!!s.multiple,null!=(p=s.value)?Kn(l,!!s.multiple,p,!1):null!=s.defaultValue&&Kn(l,!!s.multiple,s.defaultValue,!0);break;default:"function"==typeof l.onClick&&(p.onclick=pr)}(u=yr(c,u))&&ni(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 8:i&&null!=t.stateNode?ii(i,t,i.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&a("166")),l=bo(go.current),bo(vo.current),Ho(t)?(c=(u=t).stateNode,l=u.memoizedProps,c[I]=u,(u=c.nodeValue!==l)&&ni(t)):(c=t,(u=(9===l.nodeType?l:l.ownerDocument).createTextNode(u))[I]=c,t.stateNode=u));break;case 13:case 14:case 16:case 9:case 10:case 15:break;case 6:ko(),ri(t);break;case 12:fo(t);break;case 11:break;case 4:a("167");default:a("156")}if(t=ki=null,u=e,1073741823===Ei||1073741823!==u.childExpirationTime){for(c=0,l=u.child;null!==l;)i=l.expirationTime,s=l.childExpirationTime,(0===c||0!==i&&i<c)&&(c=i),(0===c||0!==s&&s<c)&&(c=s),l=l.sibling;u.childExpirationTime=c}if(null!==t)return t;null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=yi(e)))return e.effectTag&=511,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512)}if(null!==r)return r;if(null===n)break;e=n}return null}function ji(e){var t=ti(e.alternate,e,Ei);return null===t&&(t=Pi(e)),mi.current=null,t}function Ri(e,t,n){wi&&a("243"),wi=!0,mi.currentDispatcher=vi;var r=e.nextExpirationTimeToWorkOn;r===Ei&&e===xi&&null!==ki||(_i(),Ei=r,ki=Fr((xi=e).current,null,Ei),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==ki&&!da();)ki=ji(ki);else for(;null!==ki;)ki=ji(ki)}catch(e){if(null===ki)o=!0,ha(e);else{null===ki&&a("271");var i=ki,u=i.return;if(null!==u){e:{var l=u,c=i,s=e;u=Ei,c.effectTag|=512,c.firstEffect=c.lastEffect=null,Ti=!0,s=io(s,c);do{switch(l.tag){case 5:l.effectTag|=1024,l.expirationTime=u,Zr(l,u=di(l,s,u));break e;case 2:case 3:c=s;var f=l.stateNode;if(0==(64&l.effectTag)&&null!==f&&"function"==typeof f.componentDidCatch&&(null===Si||!Si.has(f))){l.effectTag|=1024,l.expirationTime=u,Zr(l,u=hi(l,c,u));break e}}l=l.return}while(null!==l)}ki=Pi(i);continue}o=!0,ha(e)}}break}if(wi=!1,co=lo=uo=mi.currentDispatcher=null,o)xi=null,e.finishedWork=null;else if(null!==ki)e.finishedWork=null;else{if(null===(t=e.current.alternate)&&a("281"),xi=null,Ti){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o>r||0!==i&&i>r||0!==u&&u>r)return e.didError=!1,0!==(n=e.latestPingedTime)&&n<=r&&(e.latestPingedTime=0),n=e.earliestPendingTime,t=e.latestPendingTime,n===r?e.earliestPendingTime=t===r?e.latestPendingTime=0:t:t===r&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,t=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=r:n>r?e.earliestSuspendedTime=r:t<r&&(e.latestSuspendedTime=r),$r(r,e),void(e.expirationTime=e.expirationTime);if(!e.didError&&!n)return e.didError=!0,e.nextExpirationTimeToWorkOn=r,r=e.expirationTime=1,void(e.expirationTime=r)}e.pendingCommitExpirationTime=r,e.finishedWork=t}}function Ni(e,t){var n;e:{for(wi&&!Ci&&a("263"),n=e.return;null!==n;){switch(n.tag){case 2:case 3:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===Si||!Si.has(r))){Jr(n,e=hi(n,e=io(t,e),1)),Mi(n,1),n=void 0;break e}break;case 5:Jr(n,e=di(n,e=io(t,e),1)),Mi(n,1),n=void 0;break e}n=n.return}5===e.tag&&(Jr(e,n=di(e,n=io(t,e),1)),Mi(e,1)),n=void 0}return n}function Ai(e,t){return 0!==bi?e=bi:wi?e=Ci?1:Ei:1&t.mode?(e=Xi?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)),null!==xi&&e===Ei&&(e+=1)):e=1,Xi&&(0===Hi||e>Hi)&&(Hi=e),e}function Mi(e,t){e:{(0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t);var n=e.alternate;null!==n&&(0===n.expirationTime||n.expirationTime>t)&&(n.expirationTime=t);var r=e.return;if(null===r&&5===e.tag)e=e.stateNode;else{for(;null!==r;){if(n=r.alternate,(0===r.childExpirationTime||r.childExpirationTime>t)&&(r.childExpirationTime=t),null!==n&&(0===n.childExpirationTime||n.childExpirationTime>t)&&(n.childExpirationTime=t),null===r.return&&5===r.tag){e=r.stateNode;break e}r=r.return}e=null}}null!==e&&(!wi&&0!==Ei&&t<Ei&&_i(),Vr(e,t),wi&&!Ci&&xi===e||(t=e,e=e.expirationTime,null===t.nextScheduledRoot?(t.expirationTime=e,null===qi?(Ii=qi=t,t.nextScheduledRoot=t):(qi=qi.nextScheduledRoot=t).nextScheduledRoot=Ii):(0===(n=t.expirationTime)||e<n)&&(t.expirationTime=e),Fi||(Ki?Qi&&(zi=t,Wi=1,fa(t,1,!0)):1===e?sa(1,null):aa(t,e))),na>ta&&(na=0,a("185")))}function Ui(e,t,n,r,o){var i=bi;bi=1;try{return e(t,n,r,o)}finally{bi=i}}var Ii=null,qi=null,Li=0,Di=void 0,Fi=!1,zi=null,Wi=0,Hi=0,Bi=!1,Vi=!1,$i=null,Yi=null,Ki=!1,Qi=!1,Xi=!1,Gi=null,Ji=i.unstable_now(),Zi=2+(Ji/10|0),ea=Zi,ta=50,na=0,ra=null,oa=1;function ia(){Zi=2+((i.unstable_now()-Ji)/10|0)}function aa(e,t){if(0!==Li){if(t>Li)return;null!==Di&&i.unstable_cancelScheduledWork(Di)}Li=t,e=i.unstable_now()-Ji,Di=i.unstable_scheduleWork(ca,{timeout:10*(t-2)-e})}function ua(){return Fi?ea:(la(),0!==Wi&&1073741823!==Wi||(ia(),ea=Zi),ea)}function la(){var e=0,t=null;if(null!==qi)for(var n=qi,r=Ii;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===qi)&&a("244"),r===r.nextScheduledRoot){Ii=qi=r.nextScheduledRoot=null;break}if(r===Ii)Ii=o=r.nextScheduledRoot,qi.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===qi){(qi=n).nextScheduledRoot=Ii,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===qi)break;if(1===e)break;n=r,r=r.nextScheduledRoot}}zi=t,Wi=e}function ca(e){if(e.didTimeout&&null!==Ii){ia();var t=Ii;do{var n=t.expirationTime;0!==n&&Zi>=n&&(t.nextExpirationTimeToWorkOn=Zi),t=t.nextScheduledRoot}while(t!==Ii)}sa(0,e)}function sa(e,t){if(Yi=t,la(),null!==Yi)for(ia(),ea=Zi;null!==zi&&0!==Wi&&(0===e||e>=Wi)&&(!Bi||Zi>=Wi);)fa(zi,Wi,Zi>=Wi),la(),ia(),ea=Zi;else for(;null!==zi&&0!==Wi&&(0===e||e>=Wi);)fa(zi,Wi,!0),la();if(null!==Yi&&(Li=0,Di=null),0!==Wi&&aa(zi,Wi),Yi=null,Bi=!1,na=0,ra=null,null!==Gi)for(e=Gi,Gi=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Vi||(Vi=!0,$i=e)}}if(Vi)throw e=$i,$i=null,Vi=!1,e}function fa(e,t,n){if(Fi&&a("245"),Fi=!0,null===Yi||n){var r=e.finishedWork;null!==r?pa(e,r,t):(e.finishedWork=null,Ri(e,!1,n),null!==(r=e.finishedWork)&&pa(e,r,t))}else null!==(r=e.finishedWork)?pa(e,r,t):(e.finishedWork=null,Ri(e,!0,n),null!==(r=e.finishedWork)&&(da()?e.finishedWork=r:pa(e,r,t)));Fi=!1}function pa(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Gi?Gi=[r]:Gi.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ra?na++:(ra=e,na=0),Ci=wi=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=0===r||0!==o&&o<r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(o=e.latestPendingTime)&&(o<r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime<r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Vr(e,r):r>e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Vr(e,r)):r<o&&Vr(e,r)),$r(0,e),mi.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,dr=On,Ln(o=qn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var u=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(u&&0!==u.rangeCount){i=u.anchorNode;var l=u.anchorOffset,c=u.focusNode;u=u.focusOffset;try{i.nodeType,c.nodeType}catch(e){i=null;break e}var s=0,f=-1,p=-1,d=0,h=0,y=o,v=null;t:for(;;){for(var m;y!==i||0!==l&&3!==y.nodeType||(f=s+l),y!==c||0!==u&&3!==y.nodeType||(p=s+u),3===y.nodeType&&(s+=y.nodeValue.length),null!==(m=y.firstChild);)v=y,y=m;for(;;){if(y===o)break t;if(v===i&&++d===l&&(f=s),v===c&&++h===u&&(p=s),null!==(m=y.nextSibling))break;v=(y=v).parentNode}y=m}i=-1===f||-1===p?null:{start:f,end:p}}else i=null}i=i||{start:0,end:0}}else i=null;for(hr={focusedElem:o,selectionRange:i},On=!1,Oi=r;null!==Oi;){o=!1,i=void 0;try{for(;null!==Oi;){if(256&Oi.effectTag){var g=Oi.alternate;e:switch(l=Oi,l.tag){case 2:case 3:if(256&l.effectTag&&null!==g){var b=g.memoizedProps,w=g.memoizedState,k=l.stateNode;k.props=l.memoizedProps,k.state=l.memoizedState;var x=k.getSnapshotBeforeUpdate(b,w);k.__reactInternalSnapshotBeforeUpdate=x}break e;case 5:case 7:case 8:case 6:break e;default:a("163")}}Oi=Oi.nextEffect}}catch(e){o=!0,i=e}o&&(null===Oi&&a("178"),Ni(Oi,i),null!==Oi&&(Oi=Oi.nextEffect))}for(Oi=r;null!==Oi;){g=!1,b=void 0;try{for(;null!==Oi;){var E=Oi.effectTag;if(16&E&&or(Oi.stateNode,""),128&E){var T=Oi.alternate;if(null!==T){var O=T.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&E){case 2:si(Oi),Oi.effectTag&=-3;break;case 6:si(Oi),Oi.effectTag&=-3,pi(Oi.alternate,Oi);break;case 4:pi(Oi.alternate,Oi);break;case 8:fi(w=Oi),w.return=null,w.child=null,w.alternate&&(w.alternate.child=null,w.alternate.return=null)}Oi=Oi.nextEffect}}catch(e){g=!0,b=e}g&&(null===Oi&&a("178"),Ni(Oi,b),null!==Oi&&(Oi=Oi.nextEffect))}if(O=hr,T=qn(),E=O.focusedElem,b=O.selectionRange,T!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==b&&Ln(E)&&(T=b.start,void 0===(O=b.end)&&(O=T),"selectionStart"in E?(E.selectionStart=T,E.selectionEnd=Math.min(O,E.value.length)):(T=((g=E.ownerDocument||document)?g.defaultView:window).getSelection(),w=E.textContent.length,O=Math.min(b.start,w),b=void 0===b.end?O:Math.min(b.end,w),!T.extend&&O>b&&(w=b,b=O,O=w),w=In(E,O),k=In(E,b),w&&k&&(1!==T.rangeCount||T.anchorNode!==w.node||T.anchorOffset!==w.offset||T.focusNode!==k.node||T.focusOffset!==k.offset)&&((g=g.createRange()).setStart(w.node,w.offset),T.removeAllRanges(),O>b?(T.addRange(g),T.extend(k.node,k.offset)):(g.setEnd(k.node,k.offset),T.addRange(g))))),T=[];for(O=E;O=O.parentNode;)1===O.nodeType&&T.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<T.length;E++)(O=T[E]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(hr=null,On=!!dr,dr=null,e.current=t,Oi=r;null!==Oi;){r=!1,E=void 0;try{for(T=n;null!==Oi;){var C=Oi.effectTag;if(36&C){var S=Oi.alternate;switch(g=T,(O=Oi).tag){case 2:case 3:var _=O.stateNode;if(4&O.effectTag)if(null===S)_.props=O.memoizedProps,_.state=O.memoizedState,_.componentDidMount();else{var P=S.memoizedProps,j=S.memoizedState;_.props=O.memoizedProps,_.state=O.memoizedState,_.componentDidUpdate(P,j,_.__reactInternalSnapshotBeforeUpdate)}var R=O.updateQueue;null!==R&&(_.props=O.memoizedProps,_.state=O.memoizedState,ro(0,R,_));break;case 5:var N=O.updateQueue;if(null!==N){if(b=null,null!==O.child)switch(O.child.tag){case 7:b=O.child.stateNode;break;case 2:case 3:b=O.child.stateNode}ro(0,N,b)}break;case 7:var A=O.stateNode;null===S&&4&O.effectTag&&yr(O.type,O.memoizedProps)&&A.focus();break;case 8:case 6:case 15:case 16:break;default:a("163")}}if(128&C){var M=Oi.ref;if(null!==M){var U=Oi.stateNode;switch(Oi.tag){case 7:var I=U;break;default:I=U}"function"==typeof M?M(I):M.current=I}}var q=Oi.nextEffect;Oi.nextEffect=null,Oi=q}}catch(e){r=!0,E=e}r&&(null===Oi&&a("178"),Ni(Oi,E),null!==Oi&&(Oi=Oi.nextEffect))}wi=Ci=!1,"function"==typeof Ur&&Ur(t.stateNode),C=t.expirationTime,t=t.childExpirationTime,0===(t=0===C||0!==t&&t<C?t:C)&&(Si=null),e.expirationTime=t,e.finishedWork=null}function da(){return!!Bi||!(null===Yi||Yi.timeRemaining()>oa)&&(Bi=!0)}function ha(e){null===zi&&a("246"),zi.expirationTime=0,Vi||(Vi=!0,$i=e)}function ya(e,t){var n=Ki;Ki=!0;try{return e(t)}finally{(Ki=n)||Fi||sa(1,null)}}function va(e,t){if(Ki&&!Qi){Qi=!0;try{return e(t)}finally{Qi=!1}}return e(t)}function ma(e,t,n){if(Xi)return e(t,n);Ki||Fi||0===Hi||(sa(Hi,null),Hi=0);var r=Xi,o=Ki;Ki=Xi=!0;try{return e(t,n)}finally{Xi=r,(Ki=o)||Fi||sa(1,null)}}function ga(e,t,n,r,o){var i=t.current;return n=function(e){if(!e)return Er;e=e._reactInternalFiber;e:{(2!==nn(e)||2!==e.tag&&3!==e.tag)&&a("170");var t=e;do{switch(t.tag){case 5:t=t.stateNode.context;break e;case 2:if(_r(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}break;case 3:if(_r(t.type._reactResult)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);a("171"),t=void 0}if(2===e.tag){var n=e.type;if(_r(n))return Nr(e,n,t)}else if(3===e.tag&&_r(n=e.type._reactResult))return Nr(e,n,t);return t}(n),null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Xr(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Jr(i,o),Mi(i,r),r}function ba(e,t,n,r){var o=t.current;return ga(e,t,n,o=Ai(ua(),o),r)}function wa(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 7:default:return e.child.stateNode}}function ka(e){var t=2+25*(1+((ua()-2+500)/25|0));t<=gi&&(t=gi+1),this._expirationTime=gi=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ea(e,t,n){e={current:t=new Lr(5,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ta(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Oa(e,t,n,r,o){Ta(n)||a("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var u=o;o=function(){var e=wa(i._internalRoot);u.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ea(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=wa(i._internalRoot);l.call(e)}}va(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return wa(i._internalRoot)}function Ca(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ta(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ge,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Pe=function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=z(r);o||a("90"),$e(r),Et(r,o)}}}break;case"textarea":Gn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},ka.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new xa;return ga(e,t,null,n,r._onCommit),r},ka.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ka.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,t=n,Fi&&a("253"),zi=e,Wi=t,fa(e,t,!0),sa(1,null),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ka.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},xa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Ea.prototype.render=function(e,t){var n=this._internalRoot,r=new xa;return null!==(t=void 0===t?null:t)&&r.then(t),ba(e,n,null,r._onCommit),r},Ea.prototype.unmount=function(e){var t=this._internalRoot,n=new xa;return null!==(e=void 0===e?null:e)&&n.then(e),ba(null,t,null,n._onCommit),n},Ea.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new xa;return null!==(n=void 0===n?null:n)&&o.then(n),ba(t,r,e,o._onCommit),o},Ea.prototype.createBatch=function(){var e=new ka(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ue=ya,Ie=ma,qe=function(){Fi||0===Hi||(sa(Hi,null),Hi=0)};var Sa={createPortal:Ca,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=on(t))?null:e.stateNode},hydrate:function(e,t,n){return Oa(null,e,t,!0,n)},render:function(e,t,n){return Oa(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),Oa(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ta(e)||a("40"),!!e._reactRootContainer&&(va(function(){Oa(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ca.apply(void 0,arguments)},unstable_batchedUpdates:ya,unstable_interactiveUpdates:ma,flushSync:function(e,t){Fi&&a("187");var n=Ki;Ki=!0;try{return Ui(e,t)}finally{Ki=n,sa(1,null)}},unstable_flushControlled:function(e){var t=Ki;Ki=!0;try{Ui(e)}finally{(Ki=t)||Fi||sa(1,null)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[D,F,z,g,Y,function(e){C(e,$)},Ae,Me,Pn,M]},unstable_createRoot:function(e,t){return Ta(e)||a("278"),new Ea(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ur=qr(function(e){return t.onCommitFiberRoot(n,e)}),Ir=qr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{findHostInstanceByFiber:function(e){return null===(e=on(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:L,bundleType:0,version:"16.5.0",rendererPackageName:"react-dom"});var _a={default:Sa},Pa=_a&&Sa||_a;e.exports=Pa.default||Pa},215:function(e,t,n){"use strict";e.exports=n(216)},216:function(e,t,n){"use strict";
/** @license React v16.5.0
 * schedule.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o=Date,i="function"==typeof setTimeout?setTimeout:void 0,a="function"==typeof clearTimeout?clearTimeout:void 0,u="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,l="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0,c="object"==typeof performance&&"function"==typeof performance.now;if(t.unstable_now=void 0,c){var s=performance;t.unstable_now=function(){return s.now()}}else t.unstable_now=function(){return o.now()};if(t.unstable_scheduleWork=void 0,t.unstable_cancelScheduledWork=void 0,r){var f=null,p=null,d=-1,h=!1,y=!1,v=void 0,m=void 0,g=function(e){v=u(function(t){a(m),e(t)}),m=i(function(){l(v),e(t.unstable_now())},100)},b=0,w=33,k=33,x={didTimeout:!1,timeRemaining:function(){var e=b-t.unstable_now();return 0<e?e:0}},E=function(e,n){var r=e.scheduledCallback,o=!1;try{r(n),o=!0}finally{t.unstable_cancelScheduledWork(e),o||(h=!0,window.postMessage(T,"*"))}},T="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===T&&(h=!1,null!==f)){if(null!==f){var n=t.unstable_now();if(!(-1===d||d>n)){e=-1;for(var r=[],o=f;null!==o;){var i=o.timeoutTime;-1!==i&&i<=n?r.push(o):-1!==i&&(-1===e||i<e)&&(e=i),o=o.next}if(0<r.length)for(x.didTimeout=!0,n=0,o=r.length;n<o;n++)E(r[n],x);d=e}}for(e=t.unstable_now();0<b-e&&null!==f;)e=f,x.didTimeout=!1,E(e,x),e=t.unstable_now();null===f||y||(y=!0,g(O))}},!1);var O=function(e){y=!1;var t=e-b+k;t<k&&w<k?(8>t&&(t=8),k=t<w?w:t):w=t,b=e+k,h||(h=!0,window.postMessage(T,"*"))};t.unstable_scheduleWork=function(e,n){var r=-1;return null!=n&&"number"==typeof n.timeout&&(r=t.unstable_now()+n.timeout),(-1===d||-1!==r&&r<d)&&(d=r),e={scheduledCallback:e,timeoutTime:r,prev:null,next:null},null===f?f=e:null!==(n=e.prev=p)&&(n.next=e),p=e,y||(y=!0,g(O)),e},t.unstable_cancelScheduledWork=function(e){if(null!==e.prev||f===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,f=t):null!==n?(n.next=null,p=n):p=f=null}}}else{var C=new Map;t.unstable_scheduleWork=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=i(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return C.set(e,n),t},t.unstable_cancelScheduledWork=function(e){var t=C.get(e.scheduledCallback);C.delete(e),a(t)}}},3:function(e,t,n){"use strict";e.exports=n(213)},4:function(e,t,n){"use strict";n.d(t,"i",function(){return E}),n.d(t,"s",function(){return T}),n.d(t,"v",function(){return O}),n.d(t,"n",function(){return C}),n.d(t,"b",function(){return S}),n.d(t,"o",function(){return _}),n.d(t,"e",function(){return j}),n.d(t,"c",function(){return R}),n.d(t,"h",function(){return N}),n.d(t,"k",function(){return A}),n.d(t,"r",function(){return M}),n.d(t,"m",function(){return U}),n.d(t,"f",function(){return I}),n.d(t,"p",function(){return q}),n.d(t,"a",function(){return L}),n.d(t,"g",function(){return D}),n.d(t,"j",function(){return F}),n.d(t,"l",function(){return z}),n.d(t,"q",function(){return W}),n.d(t,"t",function(){return H}),n.d(t,"u",function(){return B}),n.d(t,"w",function(){return V}),n.d(t,"d",function(){return Y});var r=n(0),o=n(48),i=Object(r.x)("IO"),a="TAKE",u="PUT",l="ALL",c="RACE",s="CALL",f="CPS",p="FORK",d="JOIN",h="CANCEL",y="SELECT",v="ACTION_CHANNEL",m="CANCELLED",g="FLUSH",b="GET_CONTEXT",w="SET_CONTEXT",k="\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)",x=function(e,t){var n;return(n={})[i]=!0,n[e]=t,n},E=function(e){return Object(r.h)(Y.fork(e),r.q.object,"detach(eff): argument must be a fork effect"),e[p].detached=!0,e};function T(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"*";if(arguments.length&&Object(r.h)(arguments[0],r.q.notUndef,"take(patternOrChannel): patternOrChannel is undefined"),r.q.pattern(e))return x(a,{pattern:e});if(r.q.channel(e))return x(a,{channel:e});throw new Error("take(patternOrChannel): argument "+String(e)+" is not valid channel or a valid pattern")}T.maybe=function(){var e=T.apply(void 0,arguments);return e[a].maybe=!0,e};var O=Object(r.n)(T.maybe,Object(r.z)("takem","take.maybe"));function C(e,t){return arguments.length>1?(Object(r.h)(e,r.q.notUndef,"put(channel, action): argument channel is undefined"),Object(r.h)(e,r.q.channel,"put(channel, action): argument "+e+" is not a valid channel"),Object(r.h)(t,r.q.notUndef,"put(channel, action): argument action is undefined")):(Object(r.h)(e,r.q.notUndef,"put(action): argument action is undefined"),t=e,e=null),x(u,{channel:e,action:t})}function S(e){return x(l,e)}function _(e){return x(c,e)}function P(e,t,n){Object(r.h)(t,r.q.notUndef,e+": argument fn is undefined");var o=null;if(r.q.array(t)){var i=t;o=i[0],t=i[1]}else if(t.fn){var a=t;o=a.context,t=a.fn}return o&&r.q.string(t)&&r.q.func(o[t])&&(t=o[t]),Object(r.h)(t,r.q.func,e+": argument "+t+" is not a function"),{context:o,fn:t,args:n}}function j(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return x(s,P("call",e,n))}function R(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return x(s,P("apply",{context:e,fn:t},n))}function N(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return x(f,P("cps",e,n))}function A(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return x(p,P("fork",e,n))}function M(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E(A.apply(void 0,[e].concat(n)))}function U(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return S(t.map(function(e){return U(e)}));var o=t[0];return Object(r.h)(o,r.q.notUndef,"join(task): argument task is undefined"),Object(r.h)(o,r.q.task,"join(task): argument "+o+" is not a valid Task object "+k),x(d,o)}function I(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return S(t.map(function(e){return I(e)}));var o=t[0];return 1===t.length&&(Object(r.h)(o,r.q.notUndef,"cancel(task): argument task is undefined"),Object(r.h)(o,r.q.task,"cancel(task): argument "+o+" is not a valid Task object "+k)),x(h,o||r.d)}function q(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return 0===arguments.length?e=r.o:(Object(r.h)(e,r.q.notUndef,"select(selector,[...]): argument selector is undefined"),Object(r.h)(e,r.q.func,"select(selector,[...]): argument "+e+" is not a function")),x(y,{selector:e,args:n})}function L(e,t){return Object(r.h)(e,r.q.notUndef,"actionChannel(pattern,...): argument pattern is undefined"),arguments.length>1&&(Object(r.h)(t,r.q.notUndef,"actionChannel(pattern, buffer): argument buffer is undefined"),Object(r.h)(t,r.q.buffer,"actionChannel(pattern, buffer): argument "+t+" is not a valid buffer")),x(v,{pattern:e,buffer:t})}function D(){return x(m,{})}function F(e){return Object(r.h)(e,r.q.channel,"flush(channel): argument "+e+" is not valid channel"),x(g,e)}function z(e){return Object(r.h)(e,r.q.string,"getContext(prop): argument "+e+" is not a string"),x(b,e)}function W(e){return Object(r.h)(e,r.q.object,Object(r.k)(null,e)),x(w,e)}function H(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return A.apply(void 0,[o.b,e,t].concat(r))}function B(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return A.apply(void 0,[o.d,e,t].concat(r))}function V(e,t,n){for(var r=arguments.length,i=Array(r>3?r-3:0),a=3;a<r;a++)i[a-3]=arguments[a];return A.apply(void 0,[o.f,e,t,n].concat(i))}C.resolve=function(){var e=C.apply(void 0,arguments);return e[u].resolve=!0,e},C.sync=Object(r.n)(C.resolve,Object(r.z)("put.sync","put.resolve"));var $=function(e){return function(t){return t&&t[i]&&t[e]}},Y={take:$(a),put:$(u),all:$(l),race:$(c),call:$(s),cps:$(f),fork:$(p),join:$(d),cancel:$(h),select:$(y),actionChannel:$(v),cancelled:$(m),flush:$(g),getContext:$(b),setContext:$(w)}},42:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),o="Channel's Buffer overflow!",i=1,a=3,u=4,l={isEmpty:r.r,put:r.u,take:r.u};function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=arguments[1],n=new Array(e),r=0,l=0,c=0,s=function(t){n[l]=t,l=(l+1)%e,r++},f=function(){if(0!=r){var t=n[c];return n[c]=null,r--,c=(c+1)%e,t}},p=function(){for(var e=[];r;)e.push(f());return e};return{isEmpty:function(){return 0==r},put:function(f){if(r<e)s(f);else{var d=void 0;switch(t){case i:throw new Error(o);case a:n[l]=f,c=l=(l+1)%e;break;case u:d=2*e,n=p(),r=n.length,l=n.length,c=0,n.length=d,e=d,s(f)}}},take:f,flush:p}}var s={none:function(){return l},fixed:function(e){return c(e,i)},dropping:function(e){return c(e,2)},sliding:function(e){return c(e,a)},expanding:function(e){return c(e,u)}}},457:function(e,t,n){"use strict";var r=n(458);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},458:function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},459:function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},465:function(e,t,n){"use strict";var r=n(3),o=n.n(r),i=n(2),a=n.n(i),u=n(15),l=n.n(u),c=n(11),s=n.n(c),f=n(74);var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){s()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){l()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),l()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.a.Children.forEach(t,function(t){if(null==r&&o.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,c=a.strict,s=a.sensitive,p=a.from,d=u||p;i=t,r=Object(f.a)(n.pathname,{path:d,exact:l,strict:c,sensitive:s},e.match)}}),r?o.a.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.a.Component);p.contextTypes={router:a.a.shape({route:a.a.object.isRequired}).isRequired},p.propTypes={children:a.a.node,location:a.a.object},t.a=p},466:function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},479:function(e,t,n){n(3),n(149),n(148),n(64),n(152),e.exports=n(106)},48:function(e,t,n){"use strict";var r=n(0),o={done:!0,value:void 0},i={};function a(e){return r.q.channel(e)?"channel":Array.isArray(e)?String(e.map(function(e){return String(e)})):String(e)}function u(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"iterator",a=void 0,u=t;function l(t,n){if(u===i)return o;if(n)throw u=i,n;a&&a(t);var r=e[u](),l=r[0],c=r[1],s=r[2];return a=s,(u=l)===i?o:c}return Object(r.t)(l,function(e){return l(null,e)},n,!0)}var l=n(4),c=n(19);function s(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var s={done:!1,value:Object(l.s)(e)},f=void 0,p=function(e){return f=e};return u({q1:function(){return["q2",s,p]},q2:function(){return f===c.a?[i]:["q1",function(e){return{done:!1,value:l.k.apply(void 0,[t].concat(r,[e]))}}(f)]}},"q1","takeEvery("+a(e)+", "+t.name+")")}function f(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var s={done:!1,value:Object(l.s)(e)},f=function(e){return{done:!1,value:l.k.apply(void 0,[t].concat(r,[e]))}},p=void 0,d=void 0,h=function(e){return p=e},y=function(e){return d=e};return u({q1:function(){return["q2",s,y]},q2:function(){return d===c.a?[i]:p?["q3",function(e){return{done:!1,value:Object(l.f)(e)}}(p)]:["q1",f(d),h]},q3:function(){return["q1",f(d),h]}},"q1","takeLatest("+a(e)+", "+t.name+")")}var p=n(42);function d(e,t,n){for(var o=arguments.length,s=Array(o>3?o-3:0),f=3;f<o;f++)s[f-3]=arguments[f];var d=void 0,h=void 0,y={done:!1,value:Object(l.a)(t,p.a.sliding(1))},v={done:!1,value:Object(l.e)(r.m,e)},m=function(e){return d=e},g=function(e){return h=e};return u({q1:function(){return["q2",y,g]},q2:function(){return["q3",{done:!1,value:Object(l.s)(h)},m]},q3:function(){return d===c.a?[i]:["q4",function(e){return{done:!1,value:l.k.apply(void 0,[n].concat(s,[e]))}}(d)]},q4:function(){return["q2",v]}},"q1","throttle("+a(t)+", "+n.name+")")}n.d(t,"a",function(){return y}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return m}),n.d(t,"b",function(){return s}),n.d(t,"d",function(){return f}),n.d(t,"f",function(){return d});var h=function(e){return"import { "+e+" } from 'redux-saga' has been deprecated in favor of import { "+e+" } from 'redux-saga/effects'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield "+e+" will return task descriptor to your saga and execute next lines of code."},y=Object(r.n)(s,h("takeEvery")),v=Object(r.n)(f,h("takeLatest")),m=Object(r.n)(d,h("throttle"))},64:function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return l}),n.d(t,"combineReducers",function(){return s}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(153),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,s=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function y(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function m(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=c(s,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return m({type:o.INIT}),(a={dispatch:m,subscribe:v,getState:y,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,m({type:o.REPLACE})}})[r.a]=function(){var e,t=v;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(y())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var l=a[i],s=n[l],f=e[l],p=s(f,t);if(void 0===p){var d=c(l,t);throw new Error(d)}o[l]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],u=e[a];"function"==typeof u&&(r[a]=f(u,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},l={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},c=t.map(function(e){return e(l)});return u=d.apply(void 0,c)(i.dispatch),a({},i,{dispatch:u})}}}},74:function(e,t,n){"use strict";var r=n(104),o=n.n(r),i={},a=0;t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,u=r.path,l=r.exact,c=void 0!==l&&l,s=r.strict,f=void 0!==s&&s,p=r.sensitive,d=void 0!==p&&p;if(null==u)return n;var h=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=i[n]||(i[n]={});if(r[e])return r[e];var u=[],l={re:o()(e,u,t),keys:u};return a<1e4&&(r[e]=l,a++),l}(u,{end:c,strict:f,sensitive:d}),y=h.re,v=h.keys,m=y.exec(e);if(!m)return null;var g=m[0],b=m.slice(1),w=e===g;return c&&!w?null:{path:u,url:"/"===u&&""===g?"/":g,isExact:w,params:v.reduce(function(e,t,n){return e[t.name]=b[n],e},{})}}},75:function(e,t,n){"use strict";var r=n(15),o=n.n(r),i=n(11),a=n.n(i),u=n(3),l=n.n(u),c=n(2),s=n.n(c),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:f({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;a()(null==n||1===l.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?l.a.Children.only(e):null},t}(l.a.Component);d.propTypes={history:s.a.object.isRequired,children:s.a.node},d.contextTypes={router:s.a.object},d.childContextTypes={router:s.a.object.isRequired},t.a=d},76:function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"c",function(){return u}),n.d(t,"b",function(){return c});var r=[],o=0;function i(e){try{u(),e()}finally{l()}}function a(e){r.push(e),o||(u(),c())}function u(){o++}function l(){o--}function c(){l();for(var e=void 0;!o&&void 0!==(e=r.shift());)i(e)}},81:function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9lZmZlY3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3Byb2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvcnVuU2FnYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9taWRkbGV3YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL2NoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZS9janMvc2NoZWR1bGUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL2lvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL2J1ZmZlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy9mc21JdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy90YWtlRXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2FnYUhlbHBlcnMvdGFrZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwic3ltIiwiVEFTSyIsIk1BVENIIiwiQ0FOQ0VMIiwiU0FHQV9BQ1RJT04iLCJTRUxGX0NBTkNFTExBVElPTiIsImtUcnVlIiwibm9vcCIsImlkZW50IiwiY2hlY2siLCJpcyIsIm9iamVjdCIsInJlbW92ZSIsImFycmF5IiwiZGVmZXJyZWQiLCJhcnJheU9mRGVmZmVyZWQiLCJkZWxheSIsImNyZWF0ZU1vY2tUYXNrIiwidWlkIiwibWFrZUl0ZXJhdG9yIiwibG9nIiwiZGVwcmVjYXRlIiwidXBkYXRlSW5jZW50aXZlIiwiaW50ZXJuYWxFcnIiLCJjcmVhdGVTZXRDb250ZXh0V2FybmluZyIsIndyYXBTYWdhRGlzcGF0Y2giLCJjbG9uZWFibGVHZW5lcmF0b3IiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsImlkIiwiSEVMUEVSIiwia29uc3QiLCJ2IiwidmFsdWUiLCJwcmVkaWNhdGUiLCJlcnJvciIsIkVycm9yIiwiaGFzT3duIiwicHJvcGVydHkiLCJub3RVbmRlZiIsInVuZGVmIiwidW5kZWZpbmVkIiwiZnVuYyIsImYiLCJudW1iZXIiLCJuIiwic3RyaW5nIiwicyIsIkFycmF5IiwiaXNBcnJheSIsInByb21pc2UiLCJwIiwidGhlbiIsIml0IiwibmV4dCIsInRocm93IiwiaXRlcmFibGUiLCJ0YXNrIiwidCIsIm9ic2VydmFibGUiLCJvYiIsInN1YnNjcmliZSIsImJ1ZmZlciIsImJ1ZiIsImlzRW1wdHkiLCJ0YWtlIiwicHV0IiwicGF0dGVybiIsInBhdCIsImNoYW5uZWwiLCJjaCIsImNsb3NlIiwiaGVscGVyIiwic3RyaW5nYWJsZUZ1bmMiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZnJvbSIsImFyciIsInByb3BzIiwiZGVmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwdXNoIiwibXMiLCJ2YWwiLCJ0aW1lb3V0SWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiX3JlZiIsInJ1bm5pbmciLCJfcmVzdWx0IiwiX2Vycm9yIiwiaXNSdW5uaW5nIiwicmVzdWx0Iiwic2V0UnVubmluZyIsImIiLCJzZXRSZXN1bHQiLCJyIiwic2V0RXJyb3IiLCJlIiwic2VlZCIsImF1dG9JbmMiLCJrVGhyb3ciLCJlcnIiLCJrUmV0dXJuIiwiZG9uZSIsInRocm8iLCJuYW1lIiwiaXNIZWxwZXIiLCJyZXR1cm4iLCJsZXZlbCIsIm1lc3NhZ2UiLCJ3aW5kb3ciLCJjb25zb2xlIiwic3RhY2siLCJmbiIsImRlcHJlY2F0aW9uV2FybmluZyIsImFwcGx5IiwiZGVwcmVjYXRlZCIsInByZWZlcnJlZCIsImN0eCIsImRpc3BhdGNoIiwiYWN0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJnZW5lcmF0b3JGdW5jIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiaGlzdG9yeSIsImdlbiIsImFyZyIsImNsb25lIiwiY2xvbmVkR2VuIiwiZm9yRWFjaCIsImV4Y2VwdGlvbiIsIl9pbnRlcm5hbF9pb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicmVhY3Rfcm91dGVyX2VzX1JvdXRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsImRlc2NyaXB0b3IiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJjb21waWxlIiwic3RyIiwib3B0aW9ucyIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwiam9pbiIsInJlcyIsInRva2VucyIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsIm0iLCJlc2NhcGVkIiwib2Zmc2V0Iiwic2xpY2UiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJyZXBsYWNlIiwiYyIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwiZW5jb2RlQXN0ZXJpc2siLCJtYXRjaGVzIiwib3B0cyIsImRhdGEiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJUeXBlRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiaiIsInRlc3QiLCJhdHRhY2hLZXlzIiwicmUiLCJmbGFncyIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJtYXRjaCIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJ3YXJuaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJ3YXJuaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImludmFyaWFudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiaW52YXJpYW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsIl9tYXRjaFBhdGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiaXNFbXB0eUNoaWxkcmVuIiwiY2hpbGRyZW4iLCJhIiwiQ2hpbGRyZW4iLCJjb3VudCIsIlJvdXRlIiwiX1JlYWN0JENvbXBvbmVudCIsIl90ZW1wIiwiX3RoaXMiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsInN0YXRlIiwiY29tcHV0ZU1hdGNoIiwiY29udGV4dCIsInJvdXRlciIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiZ2V0Q2hpbGRDb250ZXh0IiwibG9jYXRpb24iLCJjb21wdXRlZE1hdGNoIiwiZXhhY3QiLCJwYXRobmFtZSIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudCIsInJlbmRlciIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJuZXh0Q29udGV4dCIsInNldFN0YXRlIiwiX3Byb3BzIiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJvbmx5IiwiQ29tcG9uZW50IiwiYm9vbCIsIm9uZU9mVHlwZSIsIm5vZGUiLCJzaGFwZSIsImlzUmVxdWlyZWQiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsImlzU3Vic2NyaWJlZCIsInN0b3JlU2hhcGUiLCJnZXRTdGF0ZSIsImNyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJzdWJzY3JpcHRpb25LZXkiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJzdG9yZSIsInJlYWN0IiwiZWxlbWVudCIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsIm9uU3RhdGVDaGFuZ2UiLCJTdWJzY3JpcHRpb25fY2xhc3NDYWxsQ2hlY2siLCJ1bnN1YnNjcmliZSIsImxpc3RlbmVycyIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJjbGVhciIsImdldCIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJ2ZXJzaW9uIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJjb25uZWN0QWR2YW5jZWRfY2xhc3NDYWxsQ2hlY2siLCJjb25uZWN0QWR2YW5jZWRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiYmluZCIsImluaXRTZWxlY3RvciIsImluaXRTdWJzY3JpcHRpb24iLCJjb25uZWN0QWR2YW5jZWRfaW5oZXJpdHMiLCJfcmVmMiIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudERpZE1vdW50Iiwic2VsZWN0b3IiLCJydW4iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJmb3JjZVVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwid3JhcHBlZEluc3RhbmNlIiwicmVmIiwic291cmNlU2VsZWN0b3IiLCJtYWtlU2VsZWN0b3JTdGF0ZWZ1bCIsImNvbXBvbmVudERpZFVwZGF0ZSIsIm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwiRnVuY3Rpb24iLCJvYmplY3RQcm90byIsInRvU3RyaW5nVGFnIiwiZnVuY1Byb3RvIiwiaXNQbGFpbk9iamVjdF9vYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJoYW5kbGVOZXdTdGF0ZSIsImZpcnN0U3RhdGUiLCJmaXJzdE93blByb3BzIiwiaGFuZGxlRmlyc3RDYWxsIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzZWxlY3RvckZhY3Rvcnlfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb25uZWN0X2V4dGVuZHMiLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsImNvbm5lY3RfY29ubmVjdCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRwdXJlIiwiX3JlZjIkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMiRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMiRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMiRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjb25uZWN0X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsInJlYWN0X3JvdXRlcl9lc19Sb3V0ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYWRkTGVhZGluZ1NsYXNoIiwiY2hhckF0Iiwic3RyaXBMZWFkaW5nU2xhc2giLCJoYXNCYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwic2VhcmNoIiwiaGFzaCIsIkxvY2F0aW9uVXRpbHNfY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwicmVzb2x2ZV9wYXRobmFtZSIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJ2YWx1ZV9lcXVhbCIsImVzX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiY2FsbGJhY2siLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwiZmlsdGVyIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJjcmVhdGVCcm93c2VySGlzdG9yeV9leHRlbmRzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiZXNfY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJpbnZhcmlhbnRfYnJvd3Nlcl9kZWZhdWx0IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInN1cHBvcnRzSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsIk1hdGgiLCJyYW5kb20iLCJ0cmFuc2l0aW9uTWFuYWdlciIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJjcmVhdGVIYXNoSGlzdG9yeV9leHRlbmRzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJlc19jcmVhdGVIYXNoSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfdHlwZW9mIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV9leHRlbmRzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsImVzX2NyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwibWFwIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiQnJvd3NlclJvdXRlcl9Ccm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlciIsIndhcm5pbmdfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJSb3V0ZXIiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJIYXNoUm91dGVyX2luaGVyaXRzIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJMaW5rX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJ0byIsIkxpbmtfaW5oZXJpdHMiLCJpbm5lclJlZiIsImVzX0xpbmsiLCJNZW1vcnlSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIk1lbW9yeVJvdXRlcl9NZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJNZW1vcnlSb3V0ZXJfaW5oZXJpdHMiLCJlc19Sb3V0ZXIiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX01lbW9yeVJvdXRlciIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfdHlwZW9mIiwiTmF2TGlua19OYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJzdHlsZSIsImdldElzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImVzY2FwZWRQYXRoIiwiYXJpYS1jdXJyZW50IiwiZXNfTmF2TGluayIsIlByb21wdF9Qcm9tcHQiLCJQcm9tcHQiLCJQcm9tcHRfY2xhc3NDYWxsQ2hlY2siLCJQcm9tcHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlByb21wdF9pbmhlcml0cyIsImVuYWJsZSIsImRpc2FibGUiLCJ3aGVuIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Qcm9tcHQiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfZ2VuZXJhdGVQYXRoIiwicGFyYW1zIiwiY2FjaGVLZXkiLCJjYWNoZSIsImNvbXBpbGVkR2VuZXJhdG9yIiwicGF0aF90b19yZWdleHBfZGVmYXVsdCIsImdlbmVyYXRlUGF0aF9jb21waWxlR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiUmVkaXJlY3RfZXh0ZW5kcyIsIlJlZGlyZWN0X1JlZGlyZWN0IiwiUmVkaXJlY3QiLCJSZWRpcmVjdF9jbGFzc0NhbGxDaGVjayIsIlJlZGlyZWN0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWRpcmVjdF9pbmhlcml0cyIsImlzU3RhdGljIiwicGVyZm9ybSIsInByZXZQcm9wcyIsInByZXZUbyIsIm5leHRUbyIsImNvbXB1dGVUbyIsInJlYWN0X3JvdXRlcl9kb21fZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZExlYWRpbmdTbGFzaCIsImFkZEJhc2VuYW1lIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwiU3RhdGljUm91dGVyX1N0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlcl9jbGFzc0NhbGxDaGVjayIsImhhbmRsZVB1c2giLCJ1cmwiLCJoYW5kbGVSZXBsYWNlIiwiX3RoaXMkcHJvcHMyIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJTdGF0aWNSb3V0ZXJfaW5oZXJpdHMiLCJTdGF0aWNSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJiYXNlIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N0YXRpY1JvdXRlciIsImVzX1N3aXRjaCIsInJlYWN0X3JvdXRlcl9kb21fZXNfZ2VuZXJhdGVQYXRoIiwiZXNfbWF0Y2hQYXRoIiwid2l0aFJvdXRlcl9leHRlbmRzIiwicmVhY3Rfcm91dGVyX2RvbV9lc193aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIndpdGhSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJlc19Sb3V0ZSIsInJvdXRlQ29tcG9uZW50UHJvcHMiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndhcm5pbmciLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwibGlzdCIsImsiLCJwb3AiLCJ0b1BhcnRzIiwic3BsaXQiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInZhbHVlRXF1YWwiLCJldmVyeSIsImFUeXBlIiwiYVZhbHVlIiwidmFsdWVPZiIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJOT1RfSVRFUkFUT1JfRVJST1IiLCJDSEFOTkVMX0VORCIsIlRBU0tfQ0FOQ0VMIiwibWF0Y2hlcnMiLCJ3aWxkY2FyZCIsInV0aWxzIiwiZGVmYXVsdCIsImlucHV0IiwiU3RyaW5nIiwicGF0dGVybnMiLCJzb21lIiwibWF0Y2hlciIsIl9wcmVkaWNhdGUiLCJ3cmFwSGVscGVyIiwicHJvYyIsInBhcmVudENvbnRleHQiLCJwYXJlbnRFZmZlY3RJZCIsImNvbnQiLCJydW5QYXJhbGxlbEVmZmVjdCIsInJ1bkFsbEVmZmVjdCIsInNhZ2FNb25pdG9yIiwibG9nZ2VyIiwib25FcnJvciIsImxvZ0Vycm9yIiwic2FnYVN0YWNrIiwic3RkQ2hhbm5lbCIsImludGVybmFsX2NoYW5uZWwiLCJ0YXNrQ29udGV4dCIsImNhbmNlbCIsIl9yZWY5IiwiX211dGF0b3JNYXAiLCJfZGVmZXJyZWRFbmQiLCJfaXNSdW5uaW5nIiwiam9pbmVycyIsImlzQ2FuY2VsbGVkIiwiX2lzQ2FuY2VsbGVkIiwiaXNBYm9ydGVkIiwiX2lzQWJvcnRlZCIsInNldENvbnRleHQiLCJkZXNjcyIsImRlc2MiLCJfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMiLCJuZXdUYXNrIiwibWFpblRhc2siLCJ0YXNrUXVldWUiLCJjYiIsInRhc2tzIiwiY29tcGxldGVkIiwiYWJvcnQiLCJjYW5jZWxBbGwiLCJhZGRUYXNrIiwiaXNFcnIiLCJnZXRUYXNrcyIsInRhc2tOYW1lcyIsImZvcmtRdWV1ZSIsImlzTWFpblJ1bm5pbmciLCJydW5FZmZlY3QiLCJlZmZlY3QiLCJsYWJlbCIsImVmZmVjdElkIiwiZWZmZWN0VHJpZ2dlcmVkIiwiZWZmZWN0U2V0dGxlZCIsImN1cnJDYiIsImVmZmVjdFJlamVjdGVkIiwiZWZmZWN0UmVzb2x2ZWQiLCJlZmZlY3RDYW5jZWxsZWQiLCJyZXNvbHZlUHJvbWlzZSIsInJ1bkZvcmtFZmZlY3QiLCJyZXNvbHZlSXRlcmF0b3IiLCJpbyIsIm1heWJlIiwidGFrZUNiIiwiaW5wIiwicnVuVGFrZUVmZmVjdCIsIl9yZWYzIiwic2NoZWR1bGVyIiwicnVuUHV0RWZmZWN0IiwiYWxsIiwicmFjZSIsImVmZmVjdHMiLCJjaGlsZENicyIsImNoQ2JBdEtleSIsIl9yZXNwb25zZSIsInJlc3BvbnNlIiwicnVuUmFjZUVmZmVjdCIsIl9yZWY0IiwicnVuQ2FsbEVmZmVjdCIsImNwcyIsIl9yZWY1IiwiY3BzQ2IiLCJydW5DUFNFZmZlY3QiLCJmb3JrIiwiam9pbmVyIiwicnVuSm9pbkVmZmVjdCIsInRhc2tUb0NhbmNlbCIsInJ1bkNhbmNlbEVmZmVjdCIsInNlbGVjdCIsIl9yZWY3IiwicnVuU2VsZWN0RWZmZWN0IiwiYWN0aW9uQ2hhbm5lbCIsIl9yZWY4IiwiYnVmZmVycyIsImZpeGVkIiwicnVuQ2hhbm5lbEVmZmVjdCIsImZsdXNoIiwicnVuRmx1c2hFZmZlY3QiLCJjYW5jZWxsZWQiLCJydW5DYW5jZWxsZWRFZmZlY3QiLCJnZXRDb250ZXh0IiwicHJvcCIsInJ1bkdldENvbnRleHRFZmZlY3QiLCJydW5TZXRDb250ZXh0RWZmZWN0IiwiY2FuY2VsUHJvbWlzZSIsIl9yZWY2IiwiZGV0YWNoZWQiLCJ0YXNrSXRlcmF0b3IiLCJwYyIsImVmZiIsInJldCIsImNyZWF0ZVRhc2tJdGVyYXRvciIsIl90YXNrIiwiY29tcGxldGVkQ291bnQiLCJyZXN1bHRzIiwiTk9OX0dFTkVSQVRPUl9FUlIiLCJSVU5fU0FHQV9TSUdOQVRVUkUiLCJydW5TYWdhIiwic3RvcmVJbnRlcmZhY2UiLCJzYWdhIiwiX3N0b3JlSW50ZXJmYWNlIiwiYWN0aW9uRGlzcGF0Y2hlZCIsInJvb3QiLCJzYWdhSGVscGVycyIsImVzX2VmZmVjdHMiLCJ1dGlsc19uYW1lc3BhY2VPYmplY3QiLCJfcmVmJGNvbnRleHQiLCJlbWl0dGVyIiwic2FnYU1pZGRsZXdhcmUiLCJzYWdhRW1pdHRlciIsImVtaXQiLCJnbG9iYWwiLCJfcG9ueWZpbGxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJ0b09iamVjdCIsIkVORCIsImlzRW5kIiwiZXZlbnRDaGFubmVsIiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfYnVmZmVyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3NjaGVkdWxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwic3Vic2NyaWJlcnMiLCJzdWIiLCJsZW4iLCJJTlZBTElEX0JVRkZFUiIsIlVOREVGSU5FRF9JTlBVVF9FUlJPUiIsImNsb3NlZCIsInRha2VycyIsImNoZWNrRm9yYmlkZGVuU3RhdGVzIiwiX190YWtlcnNfXyIsIl9fY2xvc2VkX18iLCJub25lIiwiY2hhbiIsImZyZWVHbG9iYWwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJmb3IiLCJxIiwidSIsInciLCJ6IiwiQiIsImciLCJoIiwibCIsIkEiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRCIsIkUiLCJyZWZzIiwidXBkYXRlciIsIkYiLCJHIiwiaXNSZWFjdENvbXBvbmVudCIsIkgiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJjdXJyZW50RGlzcGF0Y2hlciIsIkoiLCJLIiwiX19zZWxmIiwiX19zb3VyY2UiLCJMIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJOIiwiTyIsIlAiLCJRIiwia2V5UHJlZml4IiwiUiIsIlUiLCJTIiwiVCIsIj0iLCI6IiwiZXNjYXBlIiwiViIsImFhIiwiVyIsIk0iLCJYIiwidG9BcnJheSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiQ29uc3VtZXIiLCJ1bnN0YWJsZV9yZWFkIiwiX2NvbnRleHQiLCJyZWFkQ29udGV4dCIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZIiwiWiIsImJhIiwiY2EiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJtYSIsIm5hIiwib2EiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicWEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInJhIiwicmVnaXN0cmF0aW9uTmFtZSIsInNhIiwidGEiLCJkZXBlbmRlbmNpZXMiLCJ2YSIsIndhIiwieGEiLCJjdXJyZW50VGFyZ2V0IiwibGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwicGFyZW50Tm9kZSIsInRhZyIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJkaXNwYXRjaENvbmZpZyIsIlFhIiwiX3RhcmdldEluc3QiLCJSYSIsIlRhIiwiVWEiLCJWYSIsIldhIiwidG9Mb3dlckNhc2UiLCJZYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlphIiwiJGEiLCJhYiIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsIm5iIiwiZXZlbnRQb29sIiwiZGVzdHJ1Y3RvciIsIm1iIiwiZ2V0UG9vbGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJwYiIsInFiIiwicmIiLCJzYiIsInRiIiwiZG9jdW1lbnRNb2RlIiwidWIiLCJ2YiIsIndiIiwieGIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwieWIiLCJ6YiIsImtleUNvZGUiLCJBYiIsImRldGFpbCIsIkJiIiwiRWIiLCJsb2NhbGUiLCJ3aGljaCIsIkNiIiwiY2hhciIsIkRiIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwiUmIiLCJub2RlTmFtZSIsIlNiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJUYiIsInNldEF0dHJpYnV0ZSIsIlViIiwiV2IiLCJfdmFsdWVUcmFja2VyIiwic2V0IiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlZiIiwiWGIiLCJjaGVja2VkIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwiX3JlYWN0U3RhdHVzIiwiX3JlYWN0UmVzdWx0IiwibWMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIm5jIiwicWMiLCJyYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ2YyIsIndjIiwieGMiLCJ0YyIsImlzTmFOIiwidWMiLCJzYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieWMiLCJ6YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQmMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInRhYkluZGV4IiwiR2MiLCJjaGFuZ2UiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIlZjIiwidmlldyIsIldjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlhjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImRkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZWQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImZkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJnZCIsImhkIiwiamQiLCJlZmZlY3RUYWciLCJrZCIsIm1kIiwiY2hpbGQiLCJzaWJsaW5nIiwibGQiLCJuZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJvZCIsImNsaXBib2FyZERhdGEiLCJwZCIsInFkIiwiY2hhckNvZGUiLCJyZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJzZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJ0ZCIsInVkIiwiZGF0YVRyYW5zZmVyIiwidmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwid2QiLCJ4ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJpc0ludGVyYWN0aXZlIiwiQ2QiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJEZCIsIkVkIiwiRmQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJMZCIsIk1kIiwiTmQiLCJQZCIsImJvZHkiLCJRZCIsImZpcnN0Q2hpbGQiLCJSZCIsIm5leHRTaWJsaW5nIiwiVGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsIlVkIiwiY29udGVudEVkaXRhYmxlIiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYmUiLCJvblNlbGVjdCIsImRlIiwiY2UiLCJlZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImdlIiwiaGUiLCJpZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJqZSIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJrZSIsImxlIiwibWUiLCJuZSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwib2UiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJwZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWUiLCJ0cmltIiwic2V0UHJvcGVydHkiLCJzZSIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInRlIiwidWUiLCJ2ZSIsImJsdXIiLCJmb2N1cyIsIndlIiwieGUiLCJ5ZSIsInplIiwiYXV0b0ZvY3VzIiwiQWUiLCJfX2h0bWwiLCJCZSIsIkNlIiwiU2V0IiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJIZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkllIiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIk5lIiwiT2UiLCJQZSIsIlFlIiwiU2UiLCJwZW5kaW5nUHJvcHMiLCJmaXJzdENvbnRleHREZXBlbmRlbmN5IiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsIm1vZGUiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsImV4cGlyYXRpb25UaW1lIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJYZSIsIlllIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJaZSIsImRpZEVycm9yIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiJGUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0UGluZ2VkVGltZSIsIm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uIiwiYWYiLCJiZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwiY2YiLCJkZiIsInBheWxvYWQiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwib2JzZXJ2ZWRCaXRzIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIkZmIiwiSmYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiR2YiLCJIZiIsIklmIiwiS2YiLCJMZiIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTWYiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJOZiIsIk9mIiwiX3N0cmluZ1JlZiIsIlBmIiwiUWYiLCJNYXAiLCJkZWxldGUiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiaWciLCJqZyIsInBlbmRpbmdDb250ZXh0IiwibmciLCJwZyIsImJnIiwib2ciLCJoeWRyYXRlIiwiaGlkZGVuIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsImluc2VydEJlZm9yZSIsIm9uY2xpY2siLCJCZyIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZyIsIkRnIiwiRWciLCJjb21wb25lbnREaWRDYXRjaCIsIkZnIiwiYWRkIiwiY29tcG9uZW50U3RhY2siLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJSZyIsIlNnIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiVGciLCJoYXMiLCJmaW5pc2hlZFdvcmsiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJVZyIsIlZnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwidW5zdGFibGVfbm93Iiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcmsiLCJ1bnN0YWJsZV9zY2hlZHVsZVdvcmsiLCJwaCIsInRpbWVvdXQiLCJxaCIsImRpZFRpbWVvdXQiLCJfb25Db21wbGV0ZSIsInJoIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJYYSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJ5aCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiU2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJTYSIsIm9jIiwiSWgiLCJKaCIsImtnIiwibGciLCJLaCIsIkFjIiwibWciLCJPZCIsIkxoIiwidGltZVJlbWFpbmluZyIsInNoIiwidGgiLCJ1aCIsIndoIiwidmgiLCJ4aCIsInpoIiwiQmgiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIkNoIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIkRoIiwidGltZW91dEhhbmRsZSIsIl9pbnRlcm5hbFJvb3QiLCJFaCIsIkdoIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIkZoIiwiSGgiLCJBaCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiTWgiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiUmUiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiTmgiLCJPaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicGVyZm9ybWFuY2UiLCJzY2hlZHVsZWRDYWxsYmFjayIsInBvc3RNZXNzYWdlIiwidGltZW91dFRpbWUiLCJwcmV2IiwiSW5maW5pdHkiLCJkZXRhY2giLCJ0YWtlbSIsInNwYXduIiwidGFrZUV2ZXJ5IiwidGFrZUxhdGVzdCIsInRocm90dGxlIiwiYXNFZmZlY3QiLCJfc2FnYUhlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIklPIiwiVEFLRSIsIlBVVCIsIkFMTCIsIlJBQ0UiLCJDQUxMIiwiQ1BTIiwiRk9SSyIsIkpPSU4iLCJTRUxFQ1QiLCJBQ1RJT05fQ0hBTk5FTCIsIkNBTkNFTExFRCIsIkZMVVNIIiwiR0VUX0NPTlRFWFQiLCJTRVRfQ09OVEVYVCIsIlRFU1RfSElOVCIsInBhdHRlcm5PckNoYW5uZWwiLCJnZXRGbkNhbGxEZXNjIiwibWV0aCIsIl9mbiIsIl9mbjIiLCJfbGVuMiIsIl9rZXkyIiwiX2xlbjMiLCJfa2V5MyIsIl9sZW40IiwiX2tleTQiLCJfbGVuNSIsIl9rZXk1IiwiX2xlbjYiLCJfa2V5NiIsIl9sZW43IiwiX2tleTciLCJ3b3JrZXIiLCJfbGVuOCIsIl9rZXk4IiwiX2xlbjkiLCJfa2V5OSIsIl9sZW4xMCIsIl9rZXkxMCIsInN5bmMiLCJjcmVhdGVBc0VmZmVjdFR5cGUiLCJCVUZGRVJfT1ZFUkZMT1ciLCJPTl9PVkVSRkxPV19USFJPVyIsIk9OX09WRVJGTE9XX1NMSURFIiwiT05fT1ZFUkZMT1dfRVhQQU5EIiwiemVyb0J1ZmZlciIsInJpbmdCdWZmZXIiLCJsaW1pdCIsIm92ZXJmbG93QWN0aW9uIiwicHVzaEluZGV4IiwicG9wSW5kZXgiLCJpdGVtcyIsImRvdWJsZWRMaW1pdCIsImRyb3BwaW5nIiwic2xpZGluZyIsImV4cGFuZGluZyIsImluaXRpYWxTaXplIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0Iiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJpbnZhcmlhbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsImludmFyaWFudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJTd2l0Y2giLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwicUVuZCIsInNhZmVOYW1lIiwiZnNtSXRlcmF0b3IiLCJmc20iLCJxMCIsInVwZGF0ZVN0YXRlIiwicU5leHQiLCJfZnNtJHFOZXh0Iiwib3V0cHV0IiwiX3VwZGF0ZVN0YXRlIiwieVRha2UiLCJzZXRBY3Rpb24iLCJxMSIsInEyIiwieUZvcmsiLCJzZXRUYXNrIiwieUNhbmNlbCIsInEzIiwiZGVsYXlMZW5ndGgiLCJ5QWN0aW9uQ2hhbm5lbCIsInlEZWxheSIsInNldENoYW5uZWwiLCJxNCIsInNhZ2FIZWxwZXJzX3Rha2VFdmVyeSIsInNhZ2FIZWxwZXJzX3Rha2VMYXRlc3QiLCJzYWdhSGVscGVyc190aHJvdHRsZSIsImhlbHBlck5hbWUiLCJjcmVhdGVTdG9yZSIsImNvbWJpbmVSZWR1Y2VycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFwcGx5TWlkZGxld2FyZSIsImNvbXBvc2UiLCJBY3Rpb25UeXBlcyIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJJTklUIiwiUkVQTEFDRSIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsImZpbmFsUmVkdWNlcktleXMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIl9pIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImZ1bmNzIiwicmVkdWNlIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicGF0aF90b19yZWdleHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInBhdGhfdG9fcmVnZXhwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInBhcmVudCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJjb21waWxlZFBhdHRlcm4iLCJjb21waWxlUGF0aCIsInZhbHVlcyIsImlzRXhhY3QiLCJtZW1vIiwiX3RoaXMyIiwiYXNhcCIsInN1c3BlbmQiLCJxdWV1ZSIsInNlbWFwaG9yZSIsInNoaWZ0IiwiZXZhbCJdLCJtYXBwaW5ncyI6IndGQUFBQSxFQUFBQyxFQUFBQyxFQUFBLHNCQUFBQyxJQUFBSCxFQUFBQyxFQUFBQyxFQUFB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dTJCLEVBR0FBLEVBQUEsV0FDQSxPQUFBNXBCLEtBREEsR0FJQSxJQUVBNHBCLEtBQUF2aEIsU0FBQSxjQUFBQSxLQUFBLEVBQUErbEQsTUFBQSxRQUNDLE1BQUFsNEQsR0FFRCxpQkFBQWEsU0FBQTZ5QixFQUFBN3lCLFFBT0E0QyxFQUFBQyxRQUFBZ3dCIiwiZmlsZSI6InZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBzeW0gPSBmdW5jdGlvbiBzeW0oaWQpIHtcbiAgcmV0dXJuICdAQHJlZHV4LXNhZ2EvJyArIGlkO1xufTtcblxuZXhwb3J0IHZhciBUQVNLID0gLyojX19QVVJFX18qL3N5bSgnVEFTSycpO1xuZXhwb3J0IHZhciBIRUxQRVIgPSAvKiNfX1BVUkVfXyovc3ltKCdIRUxQRVInKTtcbmV4cG9ydCB2YXIgTUFUQ0ggPSAvKiNfX1BVUkVfXyovc3ltKCdNQVRDSCcpO1xuZXhwb3J0IHZhciBDQU5DRUwgPSAvKiNfX1BVUkVfXyovc3ltKCdDQU5DRUxfUFJPTUlTRScpO1xuZXhwb3J0IHZhciBTQUdBX0FDVElPTiA9IC8qI19fUFVSRV9fKi9zeW0oJ1NBR0FfQUNUSU9OJyk7XG5leHBvcnQgdmFyIFNFTEZfQ0FOQ0VMTEFUSU9OID0gLyojX19QVVJFX18qL3N5bSgnU0VMRl9DQU5DRUxMQVRJT04nKTtcbmV4cG9ydCB2YXIga29uc3QgPSBmdW5jdGlvbiBrb25zdCh2KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG59O1xuZXhwb3J0IHZhciBrVHJ1ZSA9IC8qI19fUFVSRV9fKi9rb25zdCh0cnVlKTtcbmV4cG9ydCB2YXIga0ZhbHNlID0gLyojX19QVVJFX18qL2tvbnN0KGZhbHNlKTtcbmV4cG9ydCB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcbmV4cG9ydCB2YXIgaWRlbnQgPSBmdW5jdGlvbiBpZGVudCh2KSB7XG4gIHJldHVybiB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrKHZhbHVlLCBwcmVkaWNhdGUsIGVycm9yKSB7XG4gIGlmICghcHJlZGljYXRlKHZhbHVlKSkge1xuICAgIGxvZygnZXJyb3InLCAndW5jYXVnaHQgYXQgY2hlY2snLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmplY3QsIHByb3BlcnR5KSB7XG4gIHJldHVybiBpcy5ub3RVbmRlZihvYmplY3QpICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7XG59XG5cbmV4cG9ydCB2YXIgaXMgPSB7XG4gIHVuZGVmOiBmdW5jdGlvbiB1bmRlZih2KSB7XG4gICAgcmV0dXJuIHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkO1xuICB9LFxuICBub3RVbmRlZjogZnVuY3Rpb24gbm90VW5kZWYodikge1xuICAgIHJldHVybiB2ICE9PSBudWxsICYmIHYgIT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyhmKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBudW1iZXI6IGZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJztcbiAgfSxcbiAgc3RyaW5nOiBmdW5jdGlvbiBzdHJpbmcocykge1xuICAgIHJldHVybiB0eXBlb2YgcyA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGFycmF5OiBBcnJheS5pc0FycmF5LFxuICBvYmplY3Q6IGZ1bmN0aW9uIG9iamVjdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmICFpcy5hcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopKSA9PT0gJ29iamVjdCc7XG4gIH0sXG4gIHByb21pc2U6IGZ1bmN0aW9uIHByb21pc2UocCkge1xuICAgIHJldHVybiBwICYmIGlzLmZ1bmMocC50aGVuKTtcbiAgfSxcbiAgaXRlcmF0b3I6IGZ1bmN0aW9uIGl0ZXJhdG9yKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGlzLmZ1bmMoaXQubmV4dCkgJiYgaXMuZnVuYyhpdC50aHJvdyk7XG4gIH0sXG4gIGl0ZXJhYmxlOiBmdW5jdGlvbiBpdGVyYWJsZShpdCkge1xuICAgIHJldHVybiBpdCAmJiBpcy5mdW5jKFN5bWJvbCkgPyBpcy5mdW5jKGl0W1N5bWJvbC5pdGVyYXRvcl0pIDogaXMuYXJyYXkoaXQpO1xuICB9LFxuICB0YXNrOiBmdW5jdGlvbiB0YXNrKHQpIHtcbiAgICByZXR1cm4gdCAmJiB0W1RBU0tdO1xuICB9LFxuICBvYnNlcnZhYmxlOiBmdW5jdGlvbiBvYnNlcnZhYmxlKG9iKSB7XG4gICAgcmV0dXJuIG9iICYmIGlzLmZ1bmMob2Iuc3Vic2NyaWJlKTtcbiAgfSxcbiAgYnVmZmVyOiBmdW5jdGlvbiBidWZmZXIoYnVmKSB7XG4gICAgcmV0dXJuIGJ1ZiAmJiBpcy5mdW5jKGJ1Zi5pc0VtcHR5KSAmJiBpcy5mdW5jKGJ1Zi50YWtlKSAmJiBpcy5mdW5jKGJ1Zi5wdXQpO1xuICB9LFxuICBwYXR0ZXJuOiBmdW5jdGlvbiBwYXR0ZXJuKHBhdCkge1xuICAgIHJldHVybiBwYXQgJiYgKGlzLnN0cmluZyhwYXQpIHx8ICh0eXBlb2YgcGF0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXQpKSA9PT0gJ3N5bWJvbCcgfHwgaXMuZnVuYyhwYXQpIHx8IGlzLmFycmF5KHBhdCkpO1xuICB9LFxuICBjaGFubmVsOiBmdW5jdGlvbiBjaGFubmVsKGNoKSB7XG4gICAgcmV0dXJuIGNoICYmIGlzLmZ1bmMoY2gudGFrZSkgJiYgaXMuZnVuYyhjaC5jbG9zZSk7XG4gIH0sXG4gIGhlbHBlcjogZnVuY3Rpb24gaGVscGVyKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGl0W0hFTFBFUl07XG4gIH0sXG4gIHN0cmluZ2FibGVGdW5jOiBmdW5jdGlvbiBzdHJpbmdhYmxlRnVuYyhmKSB7XG4gICAgcmV0dXJuIGlzLmZ1bmMoZikgJiYgaGFzT3duKGYsICd0b1N0cmluZycpO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIG9iamVjdCA9IHtcbiAgYXNzaWduOiBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBpIGluIHNvdXJjZSkge1xuICAgICAgaWYgKGhhc093bihzb3VyY2UsIGkpKSB7XG4gICAgICAgIHRhcmdldFtpXSA9IHNvdXJjZVtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoYXJyYXksIGl0ZW0pIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmV4cG9ydCB2YXIgYXJyYXkgPSB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20ob2JqKSB7XG4gICAgdmFyIGFyciA9IEFycmF5KG9iai5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBpZiAoaGFzT3duKG9iaiwgaSkpIHtcbiAgICAgICAgYXJyW2ldID0gb2JqW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmZXJyZWQoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGRlZiA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlZi5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICBkZWYucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiAgZGVmLnByb21pc2UgPSBwcm9taXNlO1xuICByZXR1cm4gZGVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlPZkRlZmZlcmVkKGxlbmd0aCkge1xuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnIucHVzaChkZWZlcnJlZCgpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgdmFyIHZhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICB2YXIgdGltZW91dElkID0gdm9pZCAwO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh2YWwpO1xuICAgIH0sIG1zKTtcbiAgfSk7XG5cbiAgcHJvbWlzZVtDQU5DRUxdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tUYXNrKCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgcnVubmluZyA9IHRydWU7XG4gIHZhciBfcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgX2Vycm9yID0gdm9pZCAwO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbVEFTS10gPSB0cnVlLCBfcmVmLmlzUnVubmluZyA9IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICByZXR1cm4gcnVubmluZztcbiAgfSwgX3JlZi5yZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH0sIF9yZWYuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICByZXR1cm4gX2Vycm9yO1xuICB9LCBfcmVmLnNldFJ1bm5pbmcgPSBmdW5jdGlvbiBzZXRSdW5uaW5nKGIpIHtcbiAgICByZXR1cm4gcnVubmluZyA9IGI7XG4gIH0sIF9yZWYuc2V0UmVzdWx0ID0gZnVuY3Rpb24gc2V0UmVzdWx0KHIpIHtcbiAgICByZXR1cm4gX3Jlc3VsdCA9IHI7XG4gIH0sIF9yZWYuc2V0RXJyb3IgPSBmdW5jdGlvbiBzZXRFcnJvcihlKSB7XG4gICAgcmV0dXJuIF9lcnJvciA9IGU7XG4gIH0sIF9yZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRvSW5jKCkge1xuICB2YXIgc2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiArK3NlZWQ7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgdWlkID0gLyojX19QVVJFX18qL2F1dG9JbmMoKTtcblxudmFyIGtUaHJvdyA9IGZ1bmN0aW9uIGtUaHJvdyhlcnIpIHtcbiAgdGhyb3cgZXJyO1xufTtcbnZhciBrUmV0dXJuID0gZnVuY3Rpb24ga1JldHVybih2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IHRydWUgfTtcbn07XG5leHBvcnQgZnVuY3Rpb24gbWFrZUl0ZXJhdG9yKG5leHQpIHtcbiAgdmFyIHRocm8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGtUaHJvdztcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICB2YXIgaXNIZWxwZXIgPSBhcmd1bWVudHNbM107XG5cbiAgdmFyIGl0ZXJhdG9yID0geyBuYW1lOiBuYW1lLCBuZXh0OiBuZXh0LCB0aHJvdzogdGhybywgcmV0dXJuOiBrUmV0dXJuIH07XG5cbiAgaWYgKGlzSGVscGVyKSB7XG4gICAgaXRlcmF0b3JbSEVMUEVSXSA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9O1xuICB9XG4gIHJldHVybiBpdGVyYXRvcjtcbn1cblxuLyoqXG4gIFByaW50IGVycm9yIGluIGEgdXNlZnVsIHdheSB3aGV0aGVyIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudFxuICAod2l0aCBleHBhbmRhYmxlIGVycm9yIHN0YWNrIHRyYWNlcyksIG9yIGluIGEgbm9kZS5qcyBlbnZpcm9ubWVudFxuICAodGV4dC1vbmx5IGxvZyBvdXRwdXQpXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gbG9nKGxldmVsLCBtZXNzYWdlKSB7XG4gIHZhciBlcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5sb2coJ3JlZHV4LXNhZ2EgJyArIGxldmVsICsgJzogJyArIG1lc3NhZ2UgKyAnXFxuJyArIChlcnJvciAmJiBlcnJvci5zdGFjayB8fCBlcnJvcikpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGVbbGV2ZWxdKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBkZXByZWNhdGlvbldhcm5pbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIGxvZygnd2FybicsIGRlcHJlY2F0aW9uV2FybmluZyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciB1cGRhdGVJbmNlbnRpdmUgPSBmdW5jdGlvbiB1cGRhdGVJbmNlbnRpdmUoZGVwcmVjYXRlZCwgcHJlZmVycmVkKSB7XG4gIHJldHVybiBkZXByZWNhdGVkICsgJyBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mICcgKyBwcmVmZXJyZWQgKyAnLCBwbGVhc2UgdXBkYXRlIHlvdXIgY29kZSc7XG59O1xuXG5leHBvcnQgdmFyIGludGVybmFsRXJyID0gZnVuY3Rpb24gaW50ZXJuYWxFcnIoZXJyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ1xcbiAgcmVkdXgtc2FnYTogRXJyb3IgY2hlY2tpbmcgaG9va3MgZGV0ZWN0ZWQgYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBUaGlzIGlzIGxpa2VseSBhIGJ1Z1xcbiAgaW4gcmVkdXgtc2FnYSBjb2RlIGFuZCBub3QgeW91cnMuIFRoYW5rcyBmb3IgcmVwb3J0aW5nIHRoaXMgaW4gdGhlIHByb2plY3RcXCdzIGdpdGh1YiByZXBvLlxcbiAgRXJyb3I6ICcgKyBlcnIgKyAnXFxuJyk7XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nID0gZnVuY3Rpb24gY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoY3R4LCBwcm9wcykge1xuICByZXR1cm4gKGN0eCA/IGN0eCArICcuJyA6ICcnKSArICdzZXRDb250ZXh0KHByb3BzKTogYXJndW1lbnQgJyArIHByb3BzICsgJyBpcyBub3QgYSBwbGFpbiBvYmplY3QnO1xufTtcblxuZXhwb3J0IHZhciB3cmFwU2FnYURpc3BhdGNoID0gZnVuY3Rpb24gd3JhcFNhZ2FEaXNwYXRjaChkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBkaXNwYXRjaChPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aW9uLCBTQUdBX0FDVElPTiwgeyB2YWx1ZTogdHJ1ZSB9KSk7XG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNsb25lYWJsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNsb25lYWJsZUdlbmVyYXRvcihnZW5lcmF0b3JGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGhpc3RvcnkgPSBbXTtcbiAgICB2YXIgZ2VuID0gZ2VuZXJhdG9yRnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGFyZykge1xuICAgICAgICBoaXN0b3J5LnB1c2goYXJnKTtcbiAgICAgICAgcmV0dXJuIGdlbi5uZXh0KGFyZyk7XG4gICAgICB9LFxuICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgY2xvbmVkR2VuID0gY2xvbmVhYmxlR2VuZXJhdG9yKGdlbmVyYXRvckZ1bmMpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgIGhpc3RvcnkuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lZEdlbi5uZXh0KGFyZyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvbmVkR2VuO1xuICAgICAgfSxcbiAgICAgIHJldHVybjogZnVuY3Rpb24gX3JldHVybih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZ2VuLnJldHVybih2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgdGhyb3c6IGZ1bmN0aW9uIF90aHJvdyhleGNlcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGdlbi50aHJvdyhleGNlcHRpb24pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59OyIsImV4cG9ydCB7IHRha2UsIHRha2VtLCBwdXQsIGFsbCwgcmFjZSwgY2FsbCwgYXBwbHksIGNwcywgZm9yaywgc3Bhd24sIGpvaW4sIGNhbmNlbCwgc2VsZWN0LCBhY3Rpb25DaGFubmVsLCBjYW5jZWxsZWQsIGZsdXNoLCBnZXRDb250ZXh0LCBzZXRDb250ZXh0LCB0YWtlRXZlcnksIHRha2VMYXRlc3QsIHRocm90dGxlIH0gZnJvbSAnLi9pbnRlcm5hbC9pbyc7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3Igd2l0aFJvdXRlcigpIG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gbWF0Y2hQYXRoKHBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIHN0cmljdDogc3RyaWN0LCBleGFjdDogZXhhY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLnJlbmRlciAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIGlmIChjb21wb25lbnQpIHJldHVybiBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHJlbmRlcikgcmV0dXJuIG1hdGNoID8gcmVuZGVyKHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IHZhciBzdWJzY3JpcHRpb25TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRyeVN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdHJ5VW5zdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vdGlmeU5lc3RlZFN1YnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzU3Vic2NyaWJlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5cbnZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IHRydWU7XG5cbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKCkge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4O1xuXG4gIHZhciBzdG9yZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3N0b3JlJztcbiAgdmFyIHN1YktleSA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3ViS2V5IHx8IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzW3N0b3JlS2V5XSAhPT0gbmV4dFByb3BzLnN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogc3RvcmVTaGFwZS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gIH07XG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3RvcmVLZXldID0gc3RvcmVTaGFwZS5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBvblN0YXRlQ2hhbmdlO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgfVxuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIGhvdFJlbG9hZGluZ1ZlcnNpb24gPSAwO1xudmFyIGR1bW15U3RhdGUgPSB7fTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHN0b3JlKSB7XG4gIC8vIHdyYXAgdGhlIHNlbGVjdG9yIGluIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBpdHMgcmVzdWx0cyBiZXR3ZWVuIHJ1bnMuXG4gIHZhciBzZWxlY3RvciA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bkNvbXBvbmVudFNlbGVjdG9yKHByb3BzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgICAgICBpZiAobmV4dFByb3BzICE9PSBzZWxlY3Rvci5wcm9wcyB8fCBzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2VsZWN0b3IucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBzZWxlY3Rvci5lcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5KSB7XG4gIHZhciBfY29udGV4dFR5cGVzLCBfY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRnZXREaXNwbGF5TmFtZSA9IF9yZWYuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYkZ2V0RGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICdDb25uZWN0QWR2YW5jZWQoJyArIG5hbWUgKyAnKSc7XG4gIH0gOiBfcmVmJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRtZXRob2ROYW1lID0gX3JlZi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYkbWV0aG9kTmFtZSA9PT0gdW5kZWZpbmVkID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmJHJlbmRlckNvdW50UHJvcCA9IF9yZWYucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZiRyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZiRzaG91bGRIYW5kbGVTdGF0ID0gX3JlZi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJHNob3VsZEhhbmRsZVN0YXQsXG4gICAgICBfcmVmJHN0b3JlS2V5ID0gX3JlZi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZiRzdG9yZUtleSA9PT0gdW5kZWZpbmVkID8gJ3N0b3JlJyA6IF9yZWYkc3RvcmVLZXksXG4gICAgICBfcmVmJHdpdGhSZWYgPSBfcmVmLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZiR3aXRoUmVmID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkd2l0aFJlZixcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnZ2V0RGlzcGxheU5hbWUnLCAnbWV0aG9kTmFtZScsICdyZW5kZXJDb3VudFByb3AnLCAnc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzJywgJ3N0b3JlS2V5JywgJ3dpdGhSZWYnXSk7XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG4gIHZhciB2ZXJzaW9uID0gaG90UmVsb2FkaW5nVmVyc2lvbisrO1xuXG4gIHZhciBjb250ZXh0VHlwZXMgPSAoX2NvbnRleHRUeXBlcyA9IHt9LCBfY29udGV4dFR5cGVzW3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUsIF9jb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY29udGV4dFR5cGVzKTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gKF9jaGlsZENvbnRleHRUeXBlcyA9IHt9LCBfY2hpbGRDb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY2hpbGRDb250ZXh0VHlwZXMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PSAnZnVuY3Rpb24nLCAnWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgJyArIChtZXRob2ROYW1lICsgJy4gSW5zdGVhZCByZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgd2l0aFJlZjogd2l0aFJlZixcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBDb25uZWN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wc1tzdG9yZUtleV0gfHwgY29udGV4dFtzdG9yZUtleV07XG4gICAgICAgIF90aGlzLnByb3BzTW9kZSA9IEJvb2xlYW4ocHJvcHNbc3RvcmVLZXldKTtcbiAgICAgICAgX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlID0gX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIGludmFyaWFudChfdGhpcy5zdG9yZSwgJ0NvdWxkIG5vdCBmaW5kIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiAnICsgKCdcIicgKyBkaXNwbGF5TmFtZSArICdcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgJykgKyAoJ29yIGV4cGxpY2l0bHkgcGFzcyBcIicgKyBzdG9yZUtleSArICdcIiBhcyBhIHByb3AgdG8gXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJykpO1xuXG4gICAgICAgIF90aGlzLmluaXRTZWxlY3RvcigpO1xuICAgICAgICBfdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjI7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX3JlZjJbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjI7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBmaXJlcyBkdXJpbmcgc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBidXQgY29tcG9uZW50RGlkTW91bnQgYW5kXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGRvIG5vdC4gQmVjYXVzZSBvZiB0aGlzLCB0cnlTdWJzY3JpYmUgaGFwcGVucyBkdXJpbmcgLi4uZGlkTW91bnQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdW5zdWJzY3JpcHRpb24gd291bGQgbmV2ZXIgdGFrZSBwbGFjZSBkdXJpbmcgU1NSLCBjYXVzaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNoaWxkIGNvbXBvbmVudCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYSBzdGF0ZSBjaGFuZ2UgYnlcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgYW4gYWN0aW9uIGluIGl0cyBjb21wb25lbnRXaWxsTW91bnQsIHdlIGhhdmUgdG8gcmUtcnVuIHRoZSBzZWxlY3QgYW5kIG1heWJlXG4gICAgICAgIC8vIHJlLXJlbmRlci5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5zdG9yZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuID0gbm9vcDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsICdUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgJyArICgneyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlICcgKyBtZXRob2ROYW1lICsgJygpIGNhbGwuJykpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFNlbGVjdG9yID0gZnVuY3Rpb24gaW5pdFNlbGVjdG9yKCkge1xuICAgICAgICB2YXIgc291cmNlU2VsZWN0b3IgPSBzZWxlY3RvckZhY3RvcnkodGhpcy5zdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3RvciwgdGhpcy5zdG9yZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQodGhpcy5zdWJzY3JpcHRpb24pO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuc3Vic2NyaXB0aW9uKSAmJiB0aGlzLnN1YnNjcmlwdGlvbi5pc1N1YnNjcmliZWQoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7XG4gICAgICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuICAgICAgICB2YXIgd2l0aEV4dHJhcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBzZWxlY3Rvci5lcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLmFkZEV4dHJhUHJvcHMoc2VsZWN0b3IucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENvbm5lY3Q7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTtcblxuICAgICAgICAgIC8vIElmIGFueSBjb25uZWN0ZWQgZGVzY2VuZGFudHMgZG9uJ3QgaG90IHJlbG9hZCAoYW5kIHJlc3Vic2NyaWJlIGluIHRoZSBwcm9jZXNzKSwgdGhlaXJcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMgd2lsbCBiZSBsb3N0IHdoZW4gd2UgdW5zdWJzY3JpYmUuIFVuZm9ydHVuYXRlbHksIGJ5IGNvcHlpbmcgb3ZlciBhbGxcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMsIHRoaXMgZG9lcyBtZWFuIHRoYXQgdGhlIG9sZCB2ZXJzaW9ucyBvZiBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd2lsbCBzdGlsbCBiZVxuICAgICAgICAgIC8vIG5vdGlmaWVkIG9mIHN0YXRlIGNoYW5nZXM7IGhvd2V2ZXIsIHRoZWlyIG9uU3RhdGVDaGFuZ2UgZnVuY3Rpb24gaXMgYSBuby1vcCBzbyB0aGlzXG4gICAgICAgICAgLy8gaXNuJ3QgYSBodWdlIGRlYWwuXG4gICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5cbi8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuXG4vLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9O1xuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHsgZGlzcGF0Y2g6IGRpc3BhdGNoIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcblxuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcblxuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICB2YXIgb3duUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBzdGF0ZVByb3BzID0gdm9pZCAwO1xuICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuXG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydpbml0TWFwU3RhdGVUb1Byb3BzJywgJ2luaXRNYXBEaXNwYXRjaFRvUHJvcHMnLCAnaW5pdE1lcmdlUHJvcHMnXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5JztcblxuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJyArIHR5cGVvZiBhcmcgKyAnIGZvciAnICsgbmFtZSArICcgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCAnICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArICcuJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHVuZGVmaW5lZCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcbiAgICAgICAgX3JlZjIkcHVyZSA9IF9yZWYyLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMiRwdXJlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkcHVyZSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9PT0gdW5kZWZpbmVkID8gc3RyaWN0RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjIkYXJlT3duUHJvcHNFcXVhID0gX3JlZjIuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU93blByb3BzRXF1YSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMi5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMi5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydwdXJlJywgJ2FyZVN0YXRlc0VxdWFsJywgJ2FyZU93blByb3BzRXF1YWwnLCAnYXJlU3RhdGVQcm9wc0VxdWFsJywgJ2FyZU1lcmdlZFByb3BzRXF1YWwnXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG5cbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcblxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdDb25uZWN0KCcgKyBuYW1lICsgJyknO1xuICAgICAgfSxcblxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG5cbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgUHJvdmlkZXIsIHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcblxuZXhwb3J0IHsgUHJvdmlkZXIsIGNyZWF0ZVByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIGNvbm5lY3QgfTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUm91dGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tIFwiaGlzdG9yeVwiO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGludmFyaWFudCh0byAhPT0gdW5kZWZpbmVkLCAnWW91IG11c3Qgc3BlY2lmeSB0aGUgXCJ0b1wiIHByb3BlcnR5Jyk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcblxuICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBoaXN0b3J5LmxvY2F0aW9uKSA6IHRvO1xuXG4gICAgdmFyIGhyZWYgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmtcIjtcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1widG9cIiwgXCJleGFjdFwiLCBcInN0cmljdFwiLCBcImxvY2F0aW9uXCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJzdHlsZVwiLCBcImlzQWN0aXZlXCIsIFwiYXJpYS1jdXJyZW50XCJdKTtcblxuICB2YXIgcGF0aCA9ICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0bykpID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bztcblxuICAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKFwiIFwiKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogXCJhY3RpdmVcIixcbiAgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53aGVuKSB0aGlzLmVuYWJsZSh0aGlzLnByb3BzLm1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy53aGVuKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud2hlbiB8fCB0aGlzLnByb3BzLm1lc3NhZ2UgIT09IG5leHRQcm9wcy5tZXNzYWdlKSB0aGlzLmVuYWJsZShuZXh0UHJvcHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFByb21wdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblByb21wdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdoZW46IHRydWVcbn07XG5Qcm9tcHQuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJsb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFByb21wdCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1Byb21wdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVHZW5lcmF0b3IgPSBmdW5jdGlvbiBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pIHtcbiAgdmFyIGNhY2hlS2V5ID0gcGF0dGVybjtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIgY29tcGlsZWRHZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXR0ZXJuKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkR2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZEdlbmVyYXRvcjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0dGVybiBhbmQgcGFyYW1ldGVycy5cbiAqL1xudmFyIGdlbmVyYXRlUGF0aCA9IGZ1bmN0aW9uIGdlbmVyYXRlUGF0aCgpIHtcbiAgdmFyIHBhdHRlcm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiL1wiO1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAocGF0dGVybiA9PT0gXCIvXCIpIHtcbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICB2YXIgZ2VuZXJhdG9yID0gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKTtcbiAgcmV0dXJuIGdlbmVyYXRvcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91J3JlIGN1cnJlbnRseSBvbjogXCIgKyAoXCJcXFwiXCIgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgXCJcXFwiXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcHV0ZVRvID0gZnVuY3Rpb24gY29tcHV0ZVRvKF9yZWYpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgdG8gPSBfcmVmLnRvO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHtcbiAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBwdXNoID0gdGhpcy5wcm9wcy5wdXNoO1xuXG4gICAgdmFyIHRvID0gdGhpcy5jb21wdXRlVG8odGhpcy5wcm9wcyk7XG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9SZWRpcmVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxudmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlBVU0hcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJSRVBMQUNFXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogXCJcIixcbiAgbG9jYXRpb246IFwiL1wiXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVBhdGg7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tIFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7XG4gICAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCB3aXRoUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsImltcG9ydCBfQnJvd3NlclJvdXRlciBmcm9tIFwiLi9Ccm93c2VyUm91dGVyXCI7XG5leHBvcnQgeyBfQnJvd3NlclJvdXRlciBhcyBCcm93c2VyUm91dGVyIH07XG5pbXBvcnQgX0hhc2hSb3V0ZXIgZnJvbSBcIi4vSGFzaFJvdXRlclwiO1xuZXhwb3J0IHsgX0hhc2hSb3V0ZXIgYXMgSGFzaFJvdXRlciB9O1xuaW1wb3J0IF9MaW5rIGZyb20gXCIuL0xpbmtcIjtcbmV4cG9ydCB7IF9MaW5rIGFzIExpbmsgfTtcbmltcG9ydCBfTWVtb3J5Um91dGVyIGZyb20gXCIuL01lbW9yeVJvdXRlclwiO1xuZXhwb3J0IHsgX01lbW9yeVJvdXRlciBhcyBNZW1vcnlSb3V0ZXIgfTtcbmltcG9ydCBfTmF2TGluayBmcm9tIFwiLi9OYXZMaW5rXCI7XG5leHBvcnQgeyBfTmF2TGluayBhcyBOYXZMaW5rIH07XG5pbXBvcnQgX1Byb21wdCBmcm9tIFwiLi9Qcm9tcHRcIjtcbmV4cG9ydCB7IF9Qcm9tcHQgYXMgUHJvbXB0IH07XG5pbXBvcnQgX1JlZGlyZWN0IGZyb20gXCIuL1JlZGlyZWN0XCI7XG5leHBvcnQgeyBfUmVkaXJlY3QgYXMgUmVkaXJlY3QgfTtcbmltcG9ydCBfUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmV4cG9ydCB7IF9Sb3V0ZSBhcyBSb3V0ZSB9O1xuaW1wb3J0IF9Sb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5leHBvcnQgeyBfUm91dGVyIGFzIFJvdXRlciB9O1xuaW1wb3J0IF9TdGF0aWNSb3V0ZXIgZnJvbSBcIi4vU3RhdGljUm91dGVyXCI7XG5leHBvcnQgeyBfU3RhdGljUm91dGVyIGFzIFN0YXRpY1JvdXRlciB9O1xuaW1wb3J0IF9Td2l0Y2ggZnJvbSBcIi4vU3dpdGNoXCI7XG5leHBvcnQgeyBfU3dpdGNoIGFzIFN3aXRjaCB9O1xuaW1wb3J0IF9nZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5leHBvcnQgeyBfZ2VuZXJhdGVQYXRoIGFzIGdlbmVyYXRlUGF0aCB9O1xuaW1wb3J0IF9tYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5leHBvcnQgeyBfbWF0Y2hQYXRoIGFzIG1hdGNoUGF0aCB9O1xuaW1wb3J0IF93aXRoUm91dGVyIGZyb20gXCIuL3dpdGhSb3V0ZXJcIjtcbmV4cG9ydCB7IF93aXRoUm91dGVyIGFzIHdpdGhSb3V0ZXIgfTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhVHlwZSA9IHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKTtcbiAgdmFyIGJUeXBlID0gdHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpO1xuXG4gIGlmIChhVHlwZSAhPT0gYlR5cGUpIHJldHVybiBmYWxzZTtcblxuICBpZiAoYVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IGEudmFsdWVPZigpO1xuICAgIHZhciBiVmFsdWUgPSBiLnZhbHVlT2YoKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9kZWZpbmVFbnVtZXJhYmxlUHJvcGVydGllcyhvYmosIGRlc2NzKSB7IGZvciAodmFyIGtleSBpbiBkZXNjcykgeyB2YXIgZGVzYyA9IGRlc2NzW2tleV07IGRlc2MuY29uZmlndXJhYmxlID0gZGVzYy5lbnVtZXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSBkZXNjLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBkZXNjKTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IG5vb3AsIGtUcnVlLCBpcywgbG9nIGFzIF9sb2csIGNoZWNrLCBkZWZlcnJlZCwgdWlkIGFzIG5leHRFZmZlY3RJZCwgYXJyYXksIHJlbW92ZSwgb2JqZWN0LCBUQVNLLCBDQU5DRUwsIFNFTEZfQ0FOQ0VMTEFUSU9OLCBtYWtlSXRlcmF0b3IsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nLCBkZXByZWNhdGUsIHVwZGF0ZUluY2VudGl2ZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgYXNhcCwgc3VzcGVuZCwgZmx1c2ggfSBmcm9tICcuL3NjaGVkdWxlcic7XG5pbXBvcnQgeyBhc0VmZmVjdCB9IGZyb20gJy4vaW8nO1xuaW1wb3J0IHsgc3RkQ2hhbm5lbCBhcyBfc3RkQ2hhbm5lbCwgZXZlbnRDaGFubmVsLCBpc0VuZCB9IGZyb20gJy4vY2hhbm5lbCc7XG5pbXBvcnQgeyBidWZmZXJzIH0gZnJvbSAnLi9idWZmZXJzJztcblxuZXhwb3J0IHZhciBOT1RfSVRFUkFUT1JfRVJST1IgPSAncHJvYyBmaXJzdCBhcmd1bWVudCAoU2FnYSBmdW5jdGlvbiByZXN1bHQpIG11c3QgYmUgYW4gaXRlcmF0b3InO1xuXG5leHBvcnQgdmFyIENIQU5ORUxfRU5EID0ge1xuICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdAQHJlZHV4LXNhZ2EvQ0hBTk5FTF9FTkQnO1xuICB9XG59O1xuZXhwb3J0IHZhciBUQVNLX0NBTkNFTCA9IHtcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnQEByZWR1eC1zYWdhL1RBU0tfQ0FOQ0VMJztcbiAgfVxufTtcblxudmFyIG1hdGNoZXJzID0ge1xuICB3aWxkY2FyZDogZnVuY3Rpb24gd2lsZGNhcmQoKSB7XG4gICAgcmV0dXJuIGtUcnVlO1xuICB9LFxuICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChwYXR0ZXJuKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcGF0dGVybiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0dGVybikpID09PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgcmV0dXJuIGlucHV0LnR5cGUgPT09IHBhdHRlcm47XG4gICAgfSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgcmV0dXJuIGlucHV0LnR5cGUgPT09IFN0cmluZyhwYXR0ZXJuKTtcbiAgICB9O1xuICB9LFxuICBhcnJheTogZnVuY3Rpb24gYXJyYXkocGF0dGVybnMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICByZXR1cm4gcGF0dGVybnMuc29tZShmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlcihwKShpbnB1dCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9LFxuICBwcmVkaWNhdGU6IGZ1bmN0aW9uIHByZWRpY2F0ZShfcHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgcmV0dXJuIF9wcmVkaWNhdGUoaW5wdXQpO1xuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hdGNoZXIocGF0dGVybikge1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgcmV0dXJuIChwYXR0ZXJuID09PSAnKicgPyBtYXRjaGVycy53aWxkY2FyZCA6IGlzLmFycmF5KHBhdHRlcm4pID8gbWF0Y2hlcnMuYXJyYXkgOiBpcy5zdHJpbmdhYmxlRnVuYyhwYXR0ZXJuKSA/IG1hdGNoZXJzLmRlZmF1bHQgOiBpcy5mdW5jKHBhdHRlcm4pID8gbWF0Y2hlcnMucHJlZGljYXRlIDogbWF0Y2hlcnMuZGVmYXVsdCkocGF0dGVybik7XG59XG5cbi8qKlxuICBVc2VkIHRvIHRyYWNrIGEgcGFyZW50IHRhc2sgYW5kIGl0cyBmb3Jrc1xuICBJbiB0aGUgbmV3IGZvcmsgbW9kZWwsIGZvcmtlZCB0YXNrcyBhcmUgYXR0YWNoZWQgYnkgZGVmYXVsdCB0byB0aGVpciBwYXJlbnRcbiAgV2UgbW9kZWwgdGhpcyB1c2luZyB0aGUgY29uY2VwdCBvZiBQYXJlbnQgdGFzayAmJiBtYWluIFRhc2tcbiAgbWFpbiB0YXNrIGlzIHRoZSBtYWluIGZsb3cgb2YgdGhlIGN1cnJlbnQgR2VuZXJhdG9yLCB0aGUgcGFyZW50IHRhc2tzIGlzIHRoZVxuICBhZ2dyZWdhdGlvbiBvZiB0aGUgbWFpbiB0YXNrcyArIGFsbCBpdHMgZm9ya2VkIHRhc2tzLlxuICBUaHVzIHRoZSB3aG9sZSBtb2RlbCByZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiB0cmVlIHdpdGggbXVsdGlwbGUgYnJhbmNoZXMgKHZzIHRoZVxuICBsaW5lYXIgZXhlY3V0aW9uIHRyZWUgaW4gc2VxdWVudGlhbCAobm9uIHBhcmFsbGVsKSBwcm9ncmFtbWluZylcblxuICBBIHBhcmVudCB0YXNrcyBoYXMgdGhlIGZvbGxvd2luZyBzZW1hbnRpY3NcbiAgLSBJdCBjb21wbGV0ZXMgaWYgYWxsIGl0cyBmb3JrcyBlaXRoZXIgY29tcGxldGUgb3IgYWxsIGNhbmNlbGxlZFxuICAtIElmIGl0J3MgY2FuY2VsbGVkLCBhbGwgZm9ya3MgYXJlIGNhbmNlbGxlZCBhcyB3ZWxsXG4gIC0gSXQgYWJvcnRzIGlmIGFueSB1bmNhdWdodCBlcnJvciBidWJibGVzIHVwIGZyb20gZm9ya3NcbiAgLSBJZiBpdCBjb21wbGV0ZXMsIHRoZSByZXR1cm4gdmFsdWUgaXMgdGhlIG9uZSByZXR1cm5lZCBieSB0aGUgbWFpbiB0YXNrXG4qKi9cbmZ1bmN0aW9uIGZvcmtRdWV1ZShuYW1lLCBtYWluVGFzaywgY2IpIHtcbiAgdmFyIHRhc2tzID0gW10sXG4gICAgICByZXN1bHQgPSB2b2lkIDAsXG4gICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgYWRkVGFzayhtYWluVGFzayk7XG5cbiAgZnVuY3Rpb24gYWJvcnQoZXJyKSB7XG4gICAgY2FuY2VsQWxsKCk7XG4gICAgY2IoZXJyLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFRhc2sodGFzaykge1xuICAgIHRhc2tzLnB1c2godGFzayk7XG4gICAgdGFzay5jb250ID0gZnVuY3Rpb24gKHJlcywgaXNFcnIpIHtcbiAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZW1vdmUodGFza3MsIHRhc2spO1xuICAgICAgdGFzay5jb250ID0gbm9vcDtcbiAgICAgIGlmIChpc0Vycikge1xuICAgICAgICBhYm9ydChyZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhc2sgPT09IG1haW5UYXNrKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGFza3MubGVuZ3RoKSB7XG4gICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICBjYihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyB0YXNrLmNvbnQuY2FuY2VsID0gdGFzay5jYW5jZWxcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbEFsbCgpIHtcbiAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgdGFza3MuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgdC5jb250ID0gbm9vcDtcbiAgICAgIHQuY2FuY2VsKCk7XG4gICAgfSk7XG4gICAgdGFza3MgPSBbXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYWRkVGFzazogYWRkVGFzayxcbiAgICBjYW5jZWxBbGw6IGNhbmNlbEFsbCxcbiAgICBhYm9ydDogYWJvcnQsXG4gICAgZ2V0VGFza3M6IGZ1bmN0aW9uIGdldFRhc2tzKCkge1xuICAgICAgcmV0dXJuIHRhc2tzO1xuICAgIH0sXG4gICAgdGFza05hbWVzOiBmdW5jdGlvbiB0YXNrTmFtZXMoKSB7XG4gICAgICByZXR1cm4gdGFza3MubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0Lm5hbWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhc2tJdGVyYXRvcihfcmVmKSB7XG4gIHZhciBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgZm4gPSBfcmVmLmZuLFxuICAgICAgYXJncyA9IF9yZWYuYXJncztcblxuICBpZiAoaXMuaXRlcmF0b3IoZm4pKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyIGFuZCAjNDQxXG4gIHZhciByZXN1bHQgPSB2b2lkIDAsXG4gICAgICBlcnJvciA9IHZvaWQgMDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnI7XG4gIH1cblxuICAvLyBpLmUuIGEgZ2VuZXJhdG9yIGZ1bmN0aW9uIHJldHVybnMgYW4gaXRlcmF0b3JcbiAgaWYgKGlzLml0ZXJhdG9yKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gZG8gbm90IGJ1YmJsZSB1cCBzeW5jaHJvbm91cyBmYWlsdXJlcyBmb3IgZGV0YWNoZWQgZm9ya3NcbiAgLy8gaW5zdGVhZCBjcmVhdGUgYSBmYWlsZWQgdGFzay4gU2VlICMxNTIgYW5kICM0NDFcbiAgcmV0dXJuIGVycm9yID8gbWFrZUl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSkgOiBtYWtlSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYyA9IHZvaWQgMDtcbiAgICB2YXIgZWZmID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IHJlc3VsdCB9O1xuICAgIHZhciByZXQgPSBmdW5jdGlvbiByZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIGlmICghcGMpIHtcbiAgICAgICAgcGMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZWZmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJldChhcmcpO1xuICAgICAgfVxuICAgIH07XG4gIH0oKSk7XG59XG5cbnZhciB3cmFwSGVscGVyID0gZnVuY3Rpb24gd3JhcEhlbHBlcihoZWxwZXIpIHtcbiAgcmV0dXJuIHsgZm46IGhlbHBlciB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvYyhpdGVyYXRvcikge1xuICB2YXIgc3Vic2NyaWJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH07XG4gIHZhciBkaXNwYXRjaCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbm9vcDtcbiAgdmFyIGdldFN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBub29wO1xuICB2YXIgcGFyZW50Q29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB7fTtcbiAgdmFyIHBhcmVudEVmZmVjdElkID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiAwO1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogJ2Fub255bW91cyc7XG4gIHZhciBjb250ID0gYXJndW1lbnRzWzhdO1xuXG4gIGNoZWNrKGl0ZXJhdG9yLCBpcy5pdGVyYXRvciwgTk9UX0lURVJBVE9SX0VSUk9SKTtcblxuICB2YXIgZWZmZWN0c1N0cmluZyA9ICdbLi4uZWZmZWN0c10nO1xuICB2YXIgcnVuUGFyYWxsZWxFZmZlY3QgPSBkZXByZWNhdGUocnVuQWxsRWZmZWN0LCB1cGRhdGVJbmNlbnRpdmUoZWZmZWN0c1N0cmluZywgJ2FsbCgnICsgZWZmZWN0c1N0cmluZyArICcpJykpO1xuXG4gIHZhciBzYWdhTW9uaXRvciA9IG9wdGlvbnMuc2FnYU1vbml0b3IsXG4gICAgICBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlcixcbiAgICAgIG9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3I7XG5cbiAgdmFyIGxvZyA9IGxvZ2dlciB8fCBfbG9nO1xuICB2YXIgbG9nRXJyb3IgPSBmdW5jdGlvbiBsb2dFcnJvcihlcnIpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGVyci5zYWdhU3RhY2s7XG5cbiAgICBpZiAoIW1lc3NhZ2UgJiYgZXJyLnN0YWNrKSB7XG4gICAgICBtZXNzYWdlID0gZXJyLnN0YWNrLnNwbGl0KCdcXG4nKVswXS5pbmRleE9mKGVyci5tZXNzYWdlKSAhPT0gLTEgPyBlcnIuc3RhY2sgOiAnRXJyb3I6ICcgKyBlcnIubWVzc2FnZSArICdcXG4nICsgZXJyLnN0YWNrO1xuICAgIH1cblxuICAgIGxvZygnZXJyb3InLCAndW5jYXVnaHQgYXQgJyArIG5hbWUsIG1lc3NhZ2UgfHwgZXJyLm1lc3NhZ2UgfHwgZXJyKTtcbiAgfTtcbiAgdmFyIHN0ZENoYW5uZWwgPSBfc3RkQ2hhbm5lbChzdWJzY3JpYmUpO1xuICB2YXIgdGFza0NvbnRleHQgPSBPYmplY3QuY3JlYXRlKHBhcmVudENvbnRleHQpO1xuICAvKipcbiAgICBUcmFja3MgdGhlIGN1cnJlbnQgZWZmZWN0IGNhbmNlbGxhdGlvblxuICAgIEVhY2ggdGltZSB0aGUgZ2VuZXJhdG9yIHByb2dyZXNzZXMuIGNhbGxpbmcgcnVuRWZmZWN0IHdpbGwgc2V0IGEgbmV3IHZhbHVlXG4gICAgb24gaXQuIEl0IGFsbG93cyBwcm9wYWdhdGluZyBjYW5jZWxsYXRpb24gdG8gY2hpbGQgZWZmZWN0c1xuICAqKi9cbiAgbmV4dC5jYW5jZWwgPSBub29wO1xuXG4gIC8qKlxuICAgIENyZWF0ZXMgYSBuZXcgdGFzayBkZXNjcmlwdG9yIGZvciB0aGlzIGdlbmVyYXRvciwgV2UnbGwgYWxzbyBjcmVhdGUgYSBtYWluIHRhc2tcbiAgICB0byB0cmFjayB0aGUgbWFpbiBmbG93IChiZXNpZGVzIG90aGVyIGZvcmtlZCB0YXNrcylcbiAgKiovXG4gIHZhciB0YXNrID0gbmV3VGFzayhwYXJlbnRFZmZlY3RJZCwgbmFtZSwgaXRlcmF0b3IsIGNvbnQpO1xuICB2YXIgbWFpblRhc2sgPSB7IG5hbWU6IG5hbWUsIGNhbmNlbDogY2FuY2VsTWFpbiwgaXNSdW5uaW5nOiB0cnVlIH07XG4gIHZhciB0YXNrUXVldWUgPSBmb3JrUXVldWUobmFtZSwgbWFpblRhc2ssIGVuZCk7XG5cbiAgLyoqXG4gICAgY2FuY2VsbGF0aW9uIG9mIHRoZSBtYWluIHRhc2suIFdlJ2xsIHNpbXBseSByZXN1bWUgdGhlIEdlbmVyYXRvciB3aXRoIGEgQ2FuY2VsXG4gICoqL1xuICBmdW5jdGlvbiBjYW5jZWxNYWluKCkge1xuICAgIGlmIChtYWluVGFzay5pc1J1bm5pbmcgJiYgIW1haW5UYXNrLmlzQ2FuY2VsbGVkKSB7XG4gICAgICBtYWluVGFzay5pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICBuZXh0KFRBU0tfQ0FOQ0VMKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICBUaGlzIG1heSBiZSBjYWxsZWQgYnkgYSBwYXJlbnQgZ2VuZXJhdG9yIHRvIHRyaWdnZXIvcHJvcGFnYXRlIGNhbmNlbGxhdGlvblxuICAgIGNhbmNlbCBhbGwgcGVuZGluZyB0YXNrcyAoaW5jbHVkaW5nIHRoZSBtYWluIHRhc2spLCB0aGVuIGVuZCB0aGUgY3VycmVudCB0YXNrLlxuICAgICBDYW5jZWxsYXRpb24gcHJvcGFnYXRlcyBkb3duIHRvIHRoZSB3aG9sZSBleGVjdXRpb24gdHJlZSBob2xkZWQgYnkgdGhpcyBQYXJlbnQgdGFza1xuICAgIEl0J3MgYWxzbyBwcm9wYWdhdGVkIHRvIGFsbCBqb2luZXJzIG9mIHRoaXMgdGFzayBhbmQgdGhlaXIgZXhlY3V0aW9uIHRyZWUvam9pbmVyc1xuICAgICBDYW5jZWxsYXRpb24gaXMgbm9vcCBmb3IgdGVybWluYXRlZC9DYW5jZWxsZWQgdGFza3MgdGFza3NcbiAgKiovXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAvKipcbiAgICAgIFdlIG5lZWQgdG8gY2hlY2sgYm90aCBSdW5uaW5nIGFuZCBDYW5jZWxsZWQgc3RhdHVzXG4gICAgICBUYXNrcyBjYW4gYmUgQ2FuY2VsbGVkIGJ1dCBzdGlsbCBSdW5uaW5nXG4gICAgKiovXG4gICAgaWYgKGl0ZXJhdG9yLl9pc1J1bm5pbmcgJiYgIWl0ZXJhdG9yLl9pc0NhbmNlbGxlZCkge1xuICAgICAgaXRlcmF0b3IuX2lzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgIHRhc2tRdWV1ZS5jYW5jZWxBbGwoKTtcbiAgICAgIC8qKlxuICAgICAgICBFbmRpbmcgd2l0aCBhIE5ldmVyIHJlc3VsdCB3aWxsIHByb3BhZ2F0ZSB0aGUgQ2FuY2VsbGF0aW9uIHRvIGFsbCBqb2luZXJzXG4gICAgICAqKi9cbiAgICAgIGVuZChUQVNLX0NBTkNFTCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgIGF0dGFjaGVzIGNhbmNlbGxhdGlvbiBsb2dpYyB0byB0aGlzIHRhc2sncyBjb250aW51YXRpb25cbiAgICB0aGlzIHdpbGwgcGVybWl0IGNhbmNlbGxhdGlvbiB0byBwcm9wYWdhdGUgZG93biB0aGUgY2FsbCBjaGFpblxuICAqKi9cbiAgY29udCAmJiAoY29udC5jYW5jZWwgPSBjYW5jZWwpO1xuXG4gIC8vIHRyYWNrcyB0aGUgcnVubmluZyBzdGF0dXNcbiAgaXRlcmF0b3IuX2lzUnVubmluZyA9IHRydWU7XG5cbiAgLy8ga2lja3MgdXAgdGhlIGdlbmVyYXRvclxuICBuZXh0KCk7XG5cbiAgLy8gdGhlbiByZXR1cm4gdGhlIHRhc2sgZGVzY3JpcHRvciB0byB0aGUgY2FsbGVyXG4gIHJldHVybiB0YXNrO1xuXG4gIC8qKlxuICAgIFRoaXMgaXMgdGhlIGdlbmVyYXRvciBkcml2ZXJcbiAgICBJdCdzIGEgcmVjdXJzaXZlIGFzeW5jL2NvbnRpbnVhdGlvbiBmdW5jdGlvbiB3aGljaCBjYWxscyBpdHNlbGZcbiAgICB1bnRpbCB0aGUgZ2VuZXJhdG9yIHRlcm1pbmF0ZXMgb3IgdGhyb3dzXG4gICoqL1xuICBmdW5jdGlvbiBuZXh0KGFyZywgaXNFcnIpIHtcbiAgICAvLyBQcmV2ZW50aXZlIG1lYXN1cmUuIElmIHdlIGVuZCB1cCBoZXJlLCB0aGVuIHRoZXJlIGlzIHJlYWxseSBzb21ldGhpbmcgd3JvbmdcbiAgICBpZiAoIW1haW5UYXNrLmlzUnVubmluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gcmVzdW1lIGFuIGFscmVhZHkgZmluaXNoZWQgZ2VuZXJhdG9yJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgICBpZiAoaXNFcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IudGhyb3coYXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09PSBUQVNLX0NBTkNFTCkge1xuICAgICAgICAvKipcbiAgICAgICAgICBnZXR0aW5nIFRBU0tfQ0FOQ0VMIGF1dG9tYXRpY2FsbHkgY2FuY2VscyB0aGUgbWFpbiB0YXNrXG4gICAgICAgICAgV2UgY2FuIGdldCB0aGlzIHZhbHVlIGhlcmVcbiAgICAgICAgICAgLSBCeSBjYW5jZWxsaW5nIHRoZSBwYXJlbnQgdGFzayBtYW51YWxseVxuICAgICAgICAgIC0gQnkgam9pbmluZyBhIENhbmNlbGxlZCB0YXNrXG4gICAgICAgICoqL1xuICAgICAgICBtYWluVGFzay5pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgIENhbmNlbHMgdGhlIGN1cnJlbnQgZWZmZWN0OyB0aGlzIHdpbGwgcHJvcGFnYXRlIHRoZSBjYW5jZWxsYXRpb24gZG93biB0byBhbnkgY2FsbGVkIHRhc2tzXG4gICAgICAgICoqL1xuICAgICAgICBuZXh0LmNhbmNlbCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICBJZiB0aGlzIEdlbmVyYXRvciBoYXMgYSBgcmV0dXJuYCBtZXRob2QgdGhlbiBpbnZva2VzIGl0XG4gICAgICAgICAgVGhpcyB3aWxsIGp1bXAgdG8gdGhlIGZpbmFsbHkgYmxvY2tcbiAgICAgICAgKiovXG4gICAgICAgIHJlc3VsdCA9IGlzLmZ1bmMoaXRlcmF0b3IucmV0dXJuKSA/IGl0ZXJhdG9yLnJldHVybihUQVNLX0NBTkNFTCkgOiB7IGRvbmU6IHRydWUsIHZhbHVlOiBUQVNLX0NBTkNFTCB9O1xuICAgICAgfSBlbHNlIGlmIChhcmcgPT09IENIQU5ORUxfRU5EKSB7XG4gICAgICAgIC8vIFdlIGdldCBDSEFOTkVMX0VORCBieSB0YWtpbmcgZnJvbSBhIGNoYW5uZWwgdGhhdCBlbmRlZCB1c2luZyBgdGFrZWAgKGFuZCBub3QgYHRha2VtYCB1c2VkIHRvIHRyYXAgRW5kIG9mIGNoYW5uZWxzKVxuICAgICAgICByZXN1bHQgPSBpcy5mdW5jKGl0ZXJhdG9yLnJldHVybikgPyBpdGVyYXRvci5yZXR1cm4oKSA6IHsgZG9uZTogdHJ1ZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dChhcmcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJ1bkVmZmVjdChyZXN1bHQudmFsdWUsIHBhcmVudEVmZmVjdElkLCAnJywgbmV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICBUaGlzIEdlbmVyYXRvciBoYXMgZW5kZWQsIHRlcm1pbmF0ZSB0aGUgbWFpbiB0YXNrIGFuZCBub3RpZnkgdGhlIGZvcmsgcXVldWVcbiAgICAgICAgKiovXG4gICAgICAgIG1haW5UYXNrLmlzTWFpblJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgbWFpblRhc2suY29udCAmJiBtYWluVGFzay5jb250KHJlc3VsdC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChtYWluVGFzay5pc0NhbmNlbGxlZCkge1xuICAgICAgICBsb2dFcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgICBtYWluVGFzay5pc01haW5SdW5uaW5nID0gZmFsc2U7XG4gICAgICBtYWluVGFzay5jb250KGVycm9yLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbmQocmVzdWx0LCBpc0Vycikge1xuICAgIGl0ZXJhdG9yLl9pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICBzdGRDaGFubmVsLmNsb3NlKCk7XG4gICAgaWYgKCFpc0Vycikge1xuICAgICAgaXRlcmF0b3IuX3Jlc3VsdCA9IHJlc3VsdDtcbiAgICAgIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCAmJiBpdGVyYXRvci5fZGVmZXJyZWRFbmQucmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCwgJ3NhZ2FTdGFjaycsIHtcbiAgICAgICAgICB2YWx1ZTogJ2F0ICcgKyBuYW1lICsgJyBcXG4gJyArIChyZXN1bHQuc2FnYVN0YWNrIHx8IHJlc3VsdC5zdGFjayksXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCF0YXNrLmNvbnQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yICYmIG9uRXJyb3IpIHtcbiAgICAgICAgICBvbkVycm9yKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nRXJyb3IocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXRlcmF0b3IuX2Vycm9yID0gcmVzdWx0O1xuICAgICAgaXRlcmF0b3IuX2lzQWJvcnRlZCA9IHRydWU7XG4gICAgICBpdGVyYXRvci5fZGVmZXJyZWRFbmQgJiYgaXRlcmF0b3IuX2RlZmVycmVkRW5kLnJlamVjdChyZXN1bHQpO1xuICAgIH1cbiAgICB0YXNrLmNvbnQgJiYgdGFzay5jb250KHJlc3VsdCwgaXNFcnIpO1xuICAgIHRhc2suam9pbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChqKSB7XG4gICAgICByZXR1cm4gai5jYihyZXN1bHQsIGlzRXJyKTtcbiAgICB9KTtcbiAgICB0YXNrLmpvaW5lcnMgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuRWZmZWN0KGVmZmVjdCwgcGFyZW50RWZmZWN0SWQpIHtcbiAgICB2YXIgbGFiZWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICAgIHZhciBjYiA9IGFyZ3VtZW50c1szXTtcblxuICAgIHZhciBlZmZlY3RJZCA9IG5leHRFZmZlY3RJZCgpO1xuICAgIHNhZ2FNb25pdG9yICYmIHNhZ2FNb25pdG9yLmVmZmVjdFRyaWdnZXJlZCh7IGVmZmVjdElkOiBlZmZlY3RJZCwgcGFyZW50RWZmZWN0SWQ6IHBhcmVudEVmZmVjdElkLCBsYWJlbDogbGFiZWwsIGVmZmVjdDogZWZmZWN0IH0pO1xuXG4gICAgLyoqXG4gICAgICBjb21wbGV0aW9uIGNhbGxiYWNrIGFuZCBjYW5jZWwgY2FsbGJhY2sgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZVxuICAgICAgV2UgY2FuJ3QgY2FuY2VsIGFuIGFscmVhZHkgY29tcGxldGVkIGVmZmVjdFxuICAgICAgQW5kIFdlIGNhbid0IGNvbXBsZXRlIGFuIGFscmVhZHkgY2FuY2VsbGVkIGVmZmVjdElkXG4gICAgKiovXG4gICAgdmFyIGVmZmVjdFNldHRsZWQgPSB2b2lkIDA7XG5cbiAgICAvLyBDb21wbGV0aW9uIGNhbGxiYWNrIHBhc3NlZCB0byB0aGUgYXBwcm9wcmlhdGUgZWZmZWN0IHJ1bm5lclxuICAgIGZ1bmN0aW9uIGN1cnJDYihyZXMsIGlzRXJyKSB7XG4gICAgICBpZiAoZWZmZWN0U2V0dGxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVmZmVjdFNldHRsZWQgPSB0cnVlO1xuICAgICAgY2IuY2FuY2VsID0gbm9vcDsgLy8gZGVmZW5zaXZlIG1lYXN1cmVcbiAgICAgIGlmIChzYWdhTW9uaXRvcikge1xuICAgICAgICBpc0VyciA/IHNhZ2FNb25pdG9yLmVmZmVjdFJlamVjdGVkKGVmZmVjdElkLCByZXMpIDogc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQoZWZmZWN0SWQsIHJlcyk7XG4gICAgICB9XG4gICAgICBjYihyZXMsIGlzRXJyKTtcbiAgICB9XG4gICAgLy8gdHJhY2tzIGRvd24gdGhlIGN1cnJlbnQgY2FuY2VsXG4gICAgY3VyckNiLmNhbmNlbCA9IG5vb3A7XG5cbiAgICAvLyBzZXR1cCBjYW5jZWxsYXRpb24gbG9naWMgb24gdGhlIHBhcmVudCBjYlxuICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHByZXZlbnRzIGNhbmNlbGxpbmcgYW4gYWxyZWFkeSBjb21wbGV0ZWQgZWZmZWN0XG4gICAgICBpZiAoZWZmZWN0U2V0dGxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVmZmVjdFNldHRsZWQgPSB0cnVlO1xuICAgICAgLyoqXG4gICAgICAgIHByb3BhZ2F0ZXMgY2FuY2VsIGRvd253YXJkXG4gICAgICAgIGNhdGNoIHVuY2F1Z2h0IGNhbmNlbGxhdGlvbnMgZXJyb3JzOyBzaW5jZSB3ZSBjYW4gbm8gbG9uZ2VyIGNhbGwgdGhlIGNvbXBsZXRpb25cbiAgICAgICAgY2FsbGJhY2ssIGxvZyBlcnJvcnMgcmFpc2VkIGR1cmluZyBjYW5jZWxsYXRpb25zIGludG8gdGhlIGNvbnNvbGVcbiAgICAgICoqL1xuICAgICAgdHJ5IHtcbiAgICAgICAgY3VyckNiLmNhbmNlbCgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGVycik7XG4gICAgICB9XG4gICAgICBjdXJyQ2IuY2FuY2VsID0gbm9vcDsgLy8gZGVmZW5zaXZlIG1lYXN1cmVcblxuICAgICAgc2FnYU1vbml0b3IgJiYgc2FnYU1vbml0b3IuZWZmZWN0Q2FuY2VsbGVkKGVmZmVjdElkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICBlYWNoIGVmZmVjdCBydW5uZXIgbXVzdCBhdHRhY2ggaXRzIG93biBsb2dpYyBvZiBjYW5jZWxsYXRpb24gdG8gdGhlIHByb3ZpZGVkIGNhbGxiYWNrXG4gICAgICBpdCBhbGxvd3MgdGhpcyBnZW5lcmF0b3IgdG8gcHJvcGFnYXRlIGNhbmNlbGxhdGlvbiBkb3dud2FyZC5cbiAgICAgICBBVFRFTlRJT04hIGVmZmVjdCBydW5uZXJzIG11c3Qgc2V0dXAgdGhlIGNhbmNlbCBsb2dpYyBieSBzZXR0aW5nIGNiLmNhbmNlbCA9IFtjYW5jZWxNZXRob2RdXG4gICAgICBBbmQgdGhlIHNldHVwIG11c3Qgb2NjdXIgYmVmb3JlIGNhbGxpbmcgdGhlIGNhbGxiYWNrXG4gICAgICAgVGhpcyBpcyBhIHNvcnQgb2YgaW52ZXJzaW9uIG9mIGNvbnRyb2w6IGNhbGxlZCBhc3luYyBmdW5jdGlvbnMgYXJlIHJlc3BvbnNpYmxlXG4gICAgICBmb3IgY29tcGxldGluZyB0aGUgZmxvdyBieSBjYWxsaW5nIHRoZSBwcm92aWRlZCBjb250aW51YXRpb247IHdoaWxlIGNhbGxlciBmdW5jdGlvbnNcbiAgICAgIGFyZSByZXNwb25zaWJsZSBmb3IgYWJvcnRpbmcgdGhlIGN1cnJlbnQgZmxvdyBieSBjYWxsaW5nIHRoZSBhdHRhY2hlZCBjYW5jZWwgZnVuY3Rpb25cbiAgICAgICBMaWJyYXJ5IHVzZXJzIGNhbiBhdHRhY2ggdGhlaXIgb3duIGNhbmNlbGxhdGlvbiBsb2dpYyB0byBwcm9taXNlcyBieSBkZWZpbmluZyBhXG4gICAgICBwcm9taXNlW0NBTkNFTF0gbWV0aG9kIGluIHRoZWlyIHJldHVybmVkIHByb21pc2VzXG4gICAgICBBVFRFTlRJT04hIGNhbGxpbmcgY2FuY2VsIG11c3QgaGF2ZSBubyBlZmZlY3Qgb24gYW4gYWxyZWFkeSBjb21wbGV0ZWQgb3IgY2FuY2VsbGVkIGVmZmVjdFxuICAgICoqL1xuICAgIHZhciBkYXRhID0gdm9pZCAwO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiAoXG4gICAgICAvLyBOb24gZGVjbGFyYXRpdmUgZWZmZWN0XG4gICAgICBpcy5wcm9taXNlKGVmZmVjdCkgPyByZXNvbHZlUHJvbWlzZShlZmZlY3QsIGN1cnJDYikgOiBpcy5oZWxwZXIoZWZmZWN0KSA/IHJ1bkZvcmtFZmZlY3Qod3JhcEhlbHBlcihlZmZlY3QpLCBlZmZlY3RJZCwgY3VyckNiKSA6IGlzLml0ZXJhdG9yKGVmZmVjdCkgPyByZXNvbHZlSXRlcmF0b3IoZWZmZWN0LCBlZmZlY3RJZCwgbmFtZSwgY3VyckNiKVxuXG4gICAgICAvLyBkZWNsYXJhdGl2ZSBlZmZlY3RzXG4gICAgICA6IGlzLmFycmF5KGVmZmVjdCkgPyBydW5QYXJhbGxlbEVmZmVjdChlZmZlY3QsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC50YWtlKGVmZmVjdCkpID8gcnVuVGFrZUVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5wdXQoZWZmZWN0KSkgPyBydW5QdXRFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuYWxsKGVmZmVjdCkpID8gcnVuQWxsRWZmZWN0KGRhdGEsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5yYWNlKGVmZmVjdCkpID8gcnVuUmFjZUVmZmVjdChkYXRhLCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuY2FsbChlZmZlY3QpKSA/IHJ1bkNhbGxFZmZlY3QoZGF0YSwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmNwcyhlZmZlY3QpKSA/IHJ1bkNQU0VmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5mb3JrKGVmZmVjdCkpID8gcnVuRm9ya0VmZmVjdChkYXRhLCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3Quam9pbihlZmZlY3QpKSA/IHJ1bkpvaW5FZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuY2FuY2VsKGVmZmVjdCkpID8gcnVuQ2FuY2VsRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LnNlbGVjdChlZmZlY3QpKSA/IHJ1blNlbGVjdEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5hY3Rpb25DaGFubmVsKGVmZmVjdCkpID8gcnVuQ2hhbm5lbEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5mbHVzaChlZmZlY3QpKSA/IHJ1bkZsdXNoRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmNhbmNlbGxlZChlZmZlY3QpKSA/IHJ1bkNhbmNlbGxlZEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5nZXRDb250ZXh0KGVmZmVjdCkpID8gcnVuR2V0Q29udGV4dEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5zZXRDb250ZXh0KGVmZmVjdCkpID8gcnVuU2V0Q29udGV4dEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogLyogYW55dGhpbmcgZWxzZSByZXR1cm5lZCBhcyBpcyAqL2N1cnJDYihlZmZlY3QpXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHByb21pc2UsIGNiKSB7XG4gICAgdmFyIGNhbmNlbFByb21pc2UgPSBwcm9taXNlW0NBTkNFTF07XG4gICAgaWYgKGlzLmZ1bmMoY2FuY2VsUHJvbWlzZSkpIHtcbiAgICAgIGNiLmNhbmNlbCA9IGNhbmNlbFByb21pc2U7XG4gICAgfSBlbHNlIGlmIChpcy5mdW5jKHByb21pc2UuYWJvcnQpKSB7XG4gICAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlLmFib3J0KCk7XG4gICAgICB9O1xuICAgICAgLy8gVE9ETzogYWRkIHN1cHBvcnQgZm9yIHRoZSBmZXRjaCBBUEksIHdoZW5ldmVyIHRoZXkgZ2V0IGFyb3VuZCB0b1xuICAgICAgLy8gYWRkaW5nIGNhbmNlbCBzdXBwb3J0XG4gICAgfVxuICAgIHByb21pc2UudGhlbihjYiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gY2IoZXJyb3IsIHRydWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUl0ZXJhdG9yKGl0ZXJhdG9yLCBlZmZlY3RJZCwgbmFtZSwgY2IpIHtcbiAgICBwcm9jKGl0ZXJhdG9yLCBzdWJzY3JpYmUsIGRpc3BhdGNoLCBnZXRTdGF0ZSwgdGFza0NvbnRleHQsIG9wdGlvbnMsIGVmZmVjdElkLCBuYW1lLCBjYik7XG4gIH1cblxuICBmdW5jdGlvbiBydW5UYWtlRWZmZWN0KF9yZWYyLCBjYikge1xuICAgIHZhciBjaGFubmVsID0gX3JlZjIuY2hhbm5lbCxcbiAgICAgICAgcGF0dGVybiA9IF9yZWYyLnBhdHRlcm4sXG4gICAgICAgIG1heWJlID0gX3JlZjIubWF5YmU7XG5cbiAgICBjaGFubmVsID0gY2hhbm5lbCB8fCBzdGRDaGFubmVsO1xuICAgIHZhciB0YWtlQ2IgPSBmdW5jdGlvbiB0YWtlQ2IoaW5wKSB7XG4gICAgICByZXR1cm4gaW5wIGluc3RhbmNlb2YgRXJyb3IgPyBjYihpbnAsIHRydWUpIDogaXNFbmQoaW5wKSAmJiAhbWF5YmUgPyBjYihDSEFOTkVMX0VORCkgOiBjYihpbnApO1xuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIGNoYW5uZWwudGFrZSh0YWtlQ2IsIG1hdGNoZXIocGF0dGVybikpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGNiKGVyciwgdHJ1ZSk7XG4gICAgfVxuICAgIGNiLmNhbmNlbCA9IHRha2VDYi5jYW5jZWw7XG4gIH1cblxuICBmdW5jdGlvbiBydW5QdXRFZmZlY3QoX3JlZjMsIGNiKSB7XG4gICAgdmFyIGNoYW5uZWwgPSBfcmVmMy5jaGFubmVsLFxuICAgICAgICBhY3Rpb24gPSBfcmVmMy5hY3Rpb24sXG4gICAgICAgIHJlc29sdmUgPSBfcmVmMy5yZXNvbHZlO1xuXG4gICAgLyoqXG4gICAgICBTY2hlZHVsZSB0aGUgcHV0IGluIGNhc2UgYW5vdGhlciBzYWdhIGlzIGhvbGRpbmcgYSBsb2NrLlxuICAgICAgVGhlIHB1dCB3aWxsIGJlIGV4ZWN1dGVkIGF0b21pY2FsbHkuIGllIG5lc3RlZCBwdXRzIHdpbGwgZXhlY3V0ZSBhZnRlclxuICAgICAgdGhpcyBwdXQgaGFzIHRlcm1pbmF0ZWQuXG4gICAgKiovXG4gICAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gKGNoYW5uZWwgPyBjaGFubmVsLnB1dCA6IGRpc3BhdGNoKShhY3Rpb24pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGNoYW5uZWwgb3IgYHB1dC5yZXNvbHZlYCB3YXMgdXNlZCB0aGVuIGJ1YmJsZSB1cCB0aGUgZXJyb3IuXG4gICAgICAgIGlmIChjaGFubmVsIHx8IHJlc29sdmUpIHJldHVybiBjYihlcnJvciwgdHJ1ZSk7XG4gICAgICAgIGxvZ0Vycm9yKGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc29sdmUgJiYgaXMucHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgY2IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNiKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gUHV0IGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNhbGxFZmZlY3QoX3JlZjQsIGVmZmVjdElkLCBjYikge1xuICAgIHZhciBjb250ZXh0ID0gX3JlZjQuY29udGV4dCxcbiAgICAgICAgZm4gPSBfcmVmNC5mbixcbiAgICAgICAgYXJncyA9IF9yZWY0LmFyZ3M7XG5cbiAgICB2YXIgcmVzdWx0ID0gdm9pZCAwO1xuICAgIC8vIGNhdGNoIHN5bmNocm9ub3VzIGZhaWx1cmVzOyBzZWUgIzE1MlxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGNiKGVycm9yLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzLnByb21pc2UocmVzdWx0KSA/IHJlc29sdmVQcm9taXNlKHJlc3VsdCwgY2IpIDogaXMuaXRlcmF0b3IocmVzdWx0KSA/IHJlc29sdmVJdGVyYXRvcihyZXN1bHQsIGVmZmVjdElkLCBmbi5uYW1lLCBjYikgOiBjYihyZXN1bHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ1BTRWZmZWN0KF9yZWY1LCBjYikge1xuICAgIHZhciBjb250ZXh0ID0gX3JlZjUuY29udGV4dCxcbiAgICAgICAgZm4gPSBfcmVmNS5mbixcbiAgICAgICAgYXJncyA9IF9yZWY1LmFyZ3M7XG5cbiAgICAvLyBDUFMgKGllIG5vZGUgc3R5bGUgZnVuY3Rpb25zKSBjYW4gZGVmaW5lIHRoZWlyIG93biBjYW5jZWxsYXRpb24gbG9naWNcbiAgICAvLyBieSBzZXR0aW5nIGNhbmNlbCBmaWVsZCBvbiB0aGUgY2JcblxuICAgIC8vIGNhdGNoIHN5bmNocm9ub3VzIGZhaWx1cmVzOyBzZWUgIzE1MlxuICAgIHRyeSB7XG4gICAgICB2YXIgY3BzQ2IgPSBmdW5jdGlvbiBjcHNDYihlcnIsIHJlcykge1xuICAgICAgICByZXR1cm4gaXMudW5kZWYoZXJyKSA/IGNiKHJlcykgOiBjYihlcnIsIHRydWUpO1xuICAgICAgfTtcbiAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KGNwc0NiKSk7XG4gICAgICBpZiAoY3BzQ2IuY2FuY2VsKSB7XG4gICAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY3BzQ2IuY2FuY2VsKCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjYihlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcnVuRm9ya0VmZmVjdChfcmVmNiwgZWZmZWN0SWQsIGNiKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfcmVmNi5jb250ZXh0LFxuICAgICAgICBmbiA9IF9yZWY2LmZuLFxuICAgICAgICBhcmdzID0gX3JlZjYuYXJncyxcbiAgICAgICAgZGV0YWNoZWQgPSBfcmVmNi5kZXRhY2hlZDtcblxuICAgIHZhciB0YXNrSXRlcmF0b3IgPSBjcmVhdGVUYXNrSXRlcmF0b3IoeyBjb250ZXh0OiBjb250ZXh0LCBmbjogZm4sIGFyZ3M6IGFyZ3MgfSk7XG5cbiAgICB0cnkge1xuICAgICAgc3VzcGVuZCgpO1xuICAgICAgdmFyIF90YXNrID0gcHJvYyh0YXNrSXRlcmF0b3IsIHN1YnNjcmliZSwgZGlzcGF0Y2gsIGdldFN0YXRlLCB0YXNrQ29udGV4dCwgb3B0aW9ucywgZWZmZWN0SWQsIGZuLm5hbWUsIGRldGFjaGVkID8gbnVsbCA6IG5vb3ApO1xuXG4gICAgICBpZiAoZGV0YWNoZWQpIHtcbiAgICAgICAgY2IoX3Rhc2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhc2tJdGVyYXRvci5faXNSdW5uaW5nKSB7XG4gICAgICAgICAgdGFza1F1ZXVlLmFkZFRhc2soX3Rhc2spO1xuICAgICAgICAgIGNiKF90YXNrKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrSXRlcmF0b3IuX2Vycm9yKSB7XG4gICAgICAgICAgdGFza1F1ZXVlLmFib3J0KHRhc2tJdGVyYXRvci5fZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKF90YXNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICAvLyBGb3JrIGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkpvaW5FZmZlY3QodCwgY2IpIHtcbiAgICBpZiAodC5pc1J1bm5pbmcoKSkge1xuICAgICAgdmFyIGpvaW5lciA9IHsgdGFzazogdGFzaywgY2I6IGNiIH07XG4gICAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZW1vdmUodC5qb2luZXJzLCBqb2luZXIpO1xuICAgICAgfTtcbiAgICAgIHQuam9pbmVycy5wdXNoKGpvaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQuaXNBYm9ydGVkKCkgPyBjYih0LmVycm9yKCksIHRydWUpIDogY2IodC5yZXN1bHQoKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ2FuY2VsRWZmZWN0KHRhc2tUb0NhbmNlbCwgY2IpIHtcbiAgICBpZiAodGFza1RvQ2FuY2VsID09PSBTRUxGX0NBTkNFTExBVElPTikge1xuICAgICAgdGFza1RvQ2FuY2VsID0gdGFzaztcbiAgICB9XG4gICAgaWYgKHRhc2tUb0NhbmNlbC5pc1J1bm5pbmcoKSkge1xuICAgICAgdGFza1RvQ2FuY2VsLmNhbmNlbCgpO1xuICAgIH1cbiAgICBjYigpO1xuICAgIC8vIGNhbmNlbCBlZmZlY3RzIGFyZSBub24gY2FuY2VsbGFibGVzXG4gIH1cblxuICBmdW5jdGlvbiBydW5BbGxFZmZlY3QoZWZmZWN0cywgZWZmZWN0SWQsIGNiKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlZmZlY3RzKTtcblxuICAgIGlmICgha2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjYihpcy5hcnJheShlZmZlY3RzKSA/IFtdIDoge30pO1xuICAgIH1cblxuICAgIHZhciBjb21wbGV0ZWRDb3VudCA9IDA7XG4gICAgdmFyIGNvbXBsZXRlZCA9IHZvaWQgMDtcbiAgICB2YXIgcmVzdWx0cyA9IHt9O1xuICAgIHZhciBjaGlsZENicyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gY2hlY2tFZmZlY3RFbmQoKSB7XG4gICAgICBpZiAoY29tcGxldGVkQ291bnQgPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGNiKGlzLmFycmF5KGVmZmVjdHMpID8gYXJyYXkuZnJvbShfZXh0ZW5kcyh7fSwgcmVzdWx0cywgeyBsZW5ndGg6IGtleXMubGVuZ3RoIH0pKSA6IHJlc3VsdHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgY2hDYkF0S2V5ID0gZnVuY3Rpb24gY2hDYkF0S2V5KHJlcywgaXNFcnIpIHtcbiAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNFcnIgfHwgaXNFbmQocmVzKSB8fCByZXMgPT09IENIQU5ORUxfRU5EIHx8IHJlcyA9PT0gVEFTS19DQU5DRUwpIHtcbiAgICAgICAgICBjYi5jYW5jZWwoKTtcbiAgICAgICAgICBjYihyZXMsIGlzRXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRzW2tleV0gPSByZXM7XG4gICAgICAgICAgY29tcGxldGVkQ291bnQrKztcbiAgICAgICAgICBjaGVja0VmZmVjdEVuZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hDYkF0S2V5LmNhbmNlbCA9IG5vb3A7XG4gICAgICBjaGlsZENic1trZXldID0gY2hDYkF0S2V5O1xuICAgIH0pO1xuXG4gICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRDYnNba2V5XS5jYW5jZWwoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gcnVuRWZmZWN0KGVmZmVjdHNba2V5XSwgZWZmZWN0SWQsIGtleSwgY2hpbGRDYnNba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5SYWNlRWZmZWN0KGVmZmVjdHMsIGVmZmVjdElkLCBjYikge1xuICAgIHZhciBjb21wbGV0ZWQgPSB2b2lkIDA7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlZmZlY3RzKTtcbiAgICB2YXIgY2hpbGRDYnMgPSB7fTtcblxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgY2hDYkF0S2V5ID0gZnVuY3Rpb24gY2hDYkF0S2V5KHJlcywgaXNFcnIpIHtcbiAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Vycikge1xuICAgICAgICAgIC8vIFJhY2UgQXV0byBjYW5jZWxsYXRpb25cbiAgICAgICAgICBjYi5jYW5jZWwoKTtcbiAgICAgICAgICBjYihyZXMsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0VuZChyZXMpICYmIHJlcyAhPT0gQ0hBTk5FTF9FTkQgJiYgcmVzICE9PSBUQVNLX0NBTkNFTCkge1xuICAgICAgICAgIHZhciBfcmVzcG9uc2U7XG5cbiAgICAgICAgICBjYi5jYW5jZWwoKTtcbiAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHZhciByZXNwb25zZSA9IChfcmVzcG9uc2UgPSB7fSwgX3Jlc3BvbnNlW2tleV0gPSByZXMsIF9yZXNwb25zZSk7XG4gICAgICAgICAgY2IoaXMuYXJyYXkoZWZmZWN0cykgPyBbXS5zbGljZS5jYWxsKF9leHRlbmRzKHt9LCByZXNwb25zZSwgeyBsZW5ndGg6IGtleXMubGVuZ3RoIH0pKSA6IHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNoQ2JBdEtleS5jYW5jZWwgPSBub29wO1xuICAgICAgY2hpbGRDYnNba2V5XSA9IGNoQ2JBdEtleTtcbiAgICB9KTtcblxuICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHByZXZlbnRzIHVubmVjZXNzYXJ5IGNhbmNlbGxhdGlvblxuICAgICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRDYnNba2V5XS5jYW5jZWwoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBydW5FZmZlY3QoZWZmZWN0c1trZXldLCBlZmZlY3RJZCwga2V5LCBjaGlsZENic1trZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blNlbGVjdEVmZmVjdChfcmVmNywgY2IpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBfcmVmNy5zZWxlY3RvcixcbiAgICAgICAgYXJncyA9IF9yZWY3LmFyZ3M7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHN0YXRlID0gc2VsZWN0b3IuYXBwbHkodW5kZWZpbmVkLCBbZ2V0U3RhdGUoKV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgIGNiKHN0YXRlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2IoZXJyb3IsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNoYW5uZWxFZmZlY3QoX3JlZjgsIGNiKSB7XG4gICAgdmFyIHBhdHRlcm4gPSBfcmVmOC5wYXR0ZXJuLFxuICAgICAgICBidWZmZXIgPSBfcmVmOC5idWZmZXI7XG5cbiAgICB2YXIgbWF0Y2ggPSBtYXRjaGVyKHBhdHRlcm4pO1xuICAgIG1hdGNoLnBhdHRlcm4gPSBwYXR0ZXJuO1xuICAgIGNiKGV2ZW50Q2hhbm5lbChzdWJzY3JpYmUsIGJ1ZmZlciB8fCBidWZmZXJzLmZpeGVkKCksIG1hdGNoKSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5DYW5jZWxsZWRFZmZlY3QoZGF0YSwgY2IpIHtcbiAgICBjYighIW1haW5UYXNrLmlzQ2FuY2VsbGVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkZsdXNoRWZmZWN0KGNoYW5uZWwsIGNiKSB7XG4gICAgY2hhbm5lbC5mbHVzaChjYik7XG4gIH1cblxuICBmdW5jdGlvbiBydW5HZXRDb250ZXh0RWZmZWN0KHByb3AsIGNiKSB7XG4gICAgY2IodGFza0NvbnRleHRbcHJvcF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuU2V0Q29udGV4dEVmZmVjdChwcm9wcywgY2IpIHtcbiAgICBvYmplY3QuYXNzaWduKHRhc2tDb250ZXh0LCBwcm9wcyk7XG4gICAgY2IoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1Rhc2soaWQsIG5hbWUsIGl0ZXJhdG9yLCBjb250KSB7XG4gICAgdmFyIF9kb25lLCBfcmVmOSwgX211dGF0b3JNYXA7XG5cbiAgICBpdGVyYXRvci5fZGVmZXJyZWRFbmQgPSBudWxsO1xuICAgIHJldHVybiBfcmVmOSA9IHt9LCBfcmVmOVtUQVNLXSA9IHRydWUsIF9yZWY5LmlkID0gaWQsIF9yZWY5Lm5hbWUgPSBuYW1lLCBfZG9uZSA9ICdkb25lJywgX211dGF0b3JNYXAgPSB7fSwgX211dGF0b3JNYXBbX2RvbmVdID0gX211dGF0b3JNYXBbX2RvbmVdIHx8IHt9LCBfbXV0YXRvck1hcFtfZG9uZV0uZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3IuX2RlZmVycmVkRW5kLnByb21pc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGVmID0gZGVmZXJyZWQoKTtcbiAgICAgICAgaXRlcmF0b3IuX2RlZmVycmVkRW5kID0gZGVmO1xuICAgICAgICBpZiAoIWl0ZXJhdG9yLl9pc1J1bm5pbmcpIHtcbiAgICAgICAgICBpdGVyYXRvci5fZXJyb3IgPyBkZWYucmVqZWN0KGl0ZXJhdG9yLl9lcnJvcikgOiBkZWYucmVzb2x2ZShpdGVyYXRvci5fcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmLnByb21pc2U7XG4gICAgICB9XG4gICAgfSwgX3JlZjkuY29udCA9IGNvbnQsIF9yZWY5LmpvaW5lcnMgPSBbXSwgX3JlZjkuY2FuY2VsID0gY2FuY2VsLCBfcmVmOS5pc1J1bm5pbmcgPSBmdW5jdGlvbiBpc1J1bm5pbmcoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IuX2lzUnVubmluZztcbiAgICB9LCBfcmVmOS5pc0NhbmNlbGxlZCA9IGZ1bmN0aW9uIGlzQ2FuY2VsbGVkKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9pc0NhbmNlbGxlZDtcbiAgICB9LCBfcmVmOS5pc0Fib3J0ZWQgPSBmdW5jdGlvbiBpc0Fib3J0ZWQoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IuX2lzQWJvcnRlZDtcbiAgICB9LCBfcmVmOS5yZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IuX3Jlc3VsdDtcbiAgICB9LCBfcmVmOS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9lcnJvcjtcbiAgICB9LCBfcmVmOS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gc2V0Q29udGV4dChwcm9wcykge1xuICAgICAgY2hlY2socHJvcHMsIGlzLm9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoJ3Rhc2snLCBwcm9wcykpO1xuICAgICAgb2JqZWN0LmFzc2lnbih0YXNrQ29udGV4dCwgcHJvcHMpO1xuICAgIH0sIF9kZWZpbmVFbnVtZXJhYmxlUHJvcGVydGllcyhfcmVmOSwgX211dGF0b3JNYXApLCBfcmVmOTtcbiAgfVxufSIsImltcG9ydCB7IGlzLCBjaGVjaywgdWlkIGFzIG5leHRTYWdhSWQsIHdyYXBTYWdhRGlzcGF0Y2gsIG5vb3AsIGxvZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHByb2MgZnJvbSAnLi9wcm9jJztcblxudmFyIFJVTl9TQUdBX1NJR05BVFVSRSA9ICdydW5TYWdhKHN0b3JlSW50ZXJmYWNlLCBzYWdhLCAuLi5hcmdzKSc7XG52YXIgTk9OX0dFTkVSQVRPUl9FUlIgPSBSVU5fU0FHQV9TSUdOQVRVUkUgKyAnOiBzYWdhIGFyZ3VtZW50IG11c3QgYmUgYSBHZW5lcmF0b3IgZnVuY3Rpb24hJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1blNhZ2Eoc3RvcmVJbnRlcmZhY2UsIHNhZ2EpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgaXRlcmF0b3IgPSB2b2lkIDA7XG5cbiAgaWYgKGlzLml0ZXJhdG9yKHN0b3JlSW50ZXJmYWNlKSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgbG9nKCd3YXJuJywgJ3J1blNhZ2EoaXRlcmF0b3IsIHN0b3JlSW50ZXJmYWNlKSBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mICcgKyBSVU5fU0FHQV9TSUdOQVRVUkUpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IHN0b3JlSW50ZXJmYWNlO1xuICAgIHN0b3JlSW50ZXJmYWNlID0gc2FnYTtcbiAgfSBlbHNlIHtcbiAgICBjaGVjayhzYWdhLCBpcy5mdW5jLCBOT05fR0VORVJBVE9SX0VSUik7XG4gICAgaXRlcmF0b3IgPSBzYWdhLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgY2hlY2soaXRlcmF0b3IsIGlzLml0ZXJhdG9yLCBOT05fR0VORVJBVE9SX0VSUik7XG4gIH1cblxuICB2YXIgX3N0b3JlSW50ZXJmYWNlID0gc3RvcmVJbnRlcmZhY2UsXG4gICAgICBzdWJzY3JpYmUgPSBfc3RvcmVJbnRlcmZhY2Uuc3Vic2NyaWJlLFxuICAgICAgZGlzcGF0Y2ggPSBfc3RvcmVJbnRlcmZhY2UuZGlzcGF0Y2gsXG4gICAgICBnZXRTdGF0ZSA9IF9zdG9yZUludGVyZmFjZS5nZXRTdGF0ZSxcbiAgICAgIGNvbnRleHQgPSBfc3RvcmVJbnRlcmZhY2UuY29udGV4dCxcbiAgICAgIHNhZ2FNb25pdG9yID0gX3N0b3JlSW50ZXJmYWNlLnNhZ2FNb25pdG9yLFxuICAgICAgbG9nZ2VyID0gX3N0b3JlSW50ZXJmYWNlLmxvZ2dlcixcbiAgICAgIG9uRXJyb3IgPSBfc3RvcmVJbnRlcmZhY2Uub25FcnJvcjtcblxuXG4gIHZhciBlZmZlY3RJZCA9IG5leHRTYWdhSWQoKTtcblxuICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICAvLyBtb25pdG9ycyBhcmUgZXhwZWN0ZWQgdG8gaGF2ZSBhIGNlcnRhaW4gaW50ZXJmYWNlLCBsZXQncyBmaWxsLWluIGFueSBtaXNzaW5nIG9uZXNcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQgPSBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkIHx8IG5vb3A7XG5cbiAgICBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQoeyBlZmZlY3RJZDogZWZmZWN0SWQsIHJvb3Q6IHRydWUsIHBhcmVudEVmZmVjdElkOiAwLCBlZmZlY3Q6IHsgcm9vdDogdHJ1ZSwgc2FnYTogc2FnYSwgYXJnczogYXJncyB9IH0pO1xuICB9XG5cbiAgdmFyIHRhc2sgPSBwcm9jKGl0ZXJhdG9yLCBzdWJzY3JpYmUsIHdyYXBTYWdhRGlzcGF0Y2goZGlzcGF0Y2gpLCBnZXRTdGF0ZSwgY29udGV4dCwgeyBzYWdhTW9uaXRvcjogc2FnYU1vbml0b3IsIGxvZ2dlcjogbG9nZ2VyLCBvbkVycm9yOiBvbkVycm9yIH0sIGVmZmVjdElkLCBzYWdhLm5hbWUpO1xuXG4gIGlmIChzYWdhTW9uaXRvcikge1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkKGVmZmVjdElkLCB0YXNrKTtcbiAgfVxuXG4gIHJldHVybiB0YXNrO1xufSIsImltcG9ydCBtaWRkbGV3YXJlIGZyb20gJy4vaW50ZXJuYWwvbWlkZGxld2FyZSc7XG5leHBvcnQgZGVmYXVsdCBtaWRkbGV3YXJlO1xuXG5leHBvcnQgeyBydW5TYWdhIH0gZnJvbSAnLi9pbnRlcm5hbC9ydW5TYWdhJztcbmV4cG9ydCB7IEVORCwgZXZlbnRDaGFubmVsLCBjaGFubmVsIH0gZnJvbSAnLi9pbnRlcm5hbC9jaGFubmVsJztcbmV4cG9ydCB7IGJ1ZmZlcnMgfSBmcm9tICcuL2ludGVybmFsL2J1ZmZlcnMnO1xuZXhwb3J0IHsgdGFrZUV2ZXJ5LCB0YWtlTGF0ZXN0LCB0aHJvdHRsZSB9IGZyb20gJy4vaW50ZXJuYWwvc2FnYUhlbHBlcnMnO1xuZXhwb3J0IHsgZGVsYXksIENBTkNFTCB9IGZyb20gJy4vaW50ZXJuYWwvdXRpbHMnO1xuZXhwb3J0IHsgZGV0YWNoIH0gZnJvbSAnLi9pbnRlcm5hbC9pbyc7XG5cbmltcG9ydCAqIGFzIGVmZmVjdHMgZnJvbSAnLi9lZmZlY3RzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgeyBlZmZlY3RzLCB1dGlscyB9OyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHsgaXMsIGNoZWNrLCBvYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBlbWl0dGVyIH0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7IGlkZW50IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBydW5TYWdhIH0gZnJvbSAnLi9ydW5TYWdhJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2FnYU1pZGRsZXdhcmVGYWN0b3J5KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIF9yZWYkY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmJGNvbnRleHQgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRjb250ZXh0LFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2NvbnRleHQnXSk7XG5cbiAgdmFyIHNhZ2FNb25pdG9yID0gb3B0aW9ucy5zYWdhTW9uaXRvcixcbiAgICAgIGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyLFxuICAgICAgb25FcnJvciA9IG9wdGlvbnMub25FcnJvcjtcblxuXG4gIGlmIChpcy5mdW5jKG9wdGlvbnMpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2FnYSBtaWRkbGV3YXJlIG5vIGxvbmdlciBhY2NlcHQgR2VuZXJhdG9yIGZ1bmN0aW9ucy4gVXNlIHNhZ2FNaWRkbGV3YXJlLnJ1biBpbnN0ZWFkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IHBhc3NlZCBhIGZ1bmN0aW9uIHRvIHRoZSBTYWdhIG1pZGRsZXdhcmUuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBzdGFydCBhICAgICAgICBTYWdhIGJ5IGRpcmVjdGx5IHBhc3NpbmcgaXQgdG8gdGhlIG1pZGRsZXdhcmUuIFRoaXMgaXMgbm8gbG9uZ2VyIHBvc3NpYmxlIHN0YXJ0aW5nIGZyb20gMC4xMC4wLiAgICAgICAgVG8gcnVuIGEgU2FnYSwgeW91IG11c3QgZG8gaXQgZHluYW1pY2FsbHkgQUZURVIgbW91bnRpbmcgdGhlIG1pZGRsZXdhcmUgaW50byB0aGUgc3RvcmUuXFxuICAgICAgICBFeGFtcGxlOlxcbiAgICAgICAgICBpbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmUgZnJvbSBcXCdyZWR1eC1zYWdhXFwnXFxuICAgICAgICAgIC4uLiBvdGhlciBpbXBvcnRzXFxuXFxuICAgICAgICAgIGNvbnN0IHNhZ2FNaWRkbGV3YXJlID0gY3JlYXRlU2FnYU1pZGRsZXdhcmUoKVxcbiAgICAgICAgICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIsIGFwcGx5TWlkZGxld2FyZShzYWdhTWlkZGxld2FyZSkpXFxuICAgICAgICAgIHNhZ2FNaWRkbGV3YXJlLnJ1bihzYWdhLCAuLi5hcmdzKVxcbiAgICAgICcpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsb2dnZXIgJiYgIWlzLmZ1bmMobG9nZ2VyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMubG9nZ2VyYCBwYXNzZWQgdG8gdGhlIFNhZ2EgbWlkZGxld2FyZSBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyAmJiBvcHRpb25zLm9uZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLm9uZXJyb3JgIHdhcyByZW1vdmVkLiBVc2UgYG9wdGlvbnMub25FcnJvcmAgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIGlmIChvbkVycm9yICYmICFpcy5mdW5jKG9uRXJyb3IpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5vbkVycm9yYCBwYXNzZWQgdG8gdGhlIFNhZ2EgbWlkZGxld2FyZSBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmVtaXR0ZXIgJiYgIWlzLmZ1bmMob3B0aW9ucy5lbWl0dGVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMuZW1pdHRlcmAgcGFzc2VkIHRvIHRoZSBTYWdhIG1pZGRsZXdhcmUgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIH1cblxuICBmdW5jdGlvbiBzYWdhTWlkZGxld2FyZShfcmVmMikge1xuICAgIHZhciBnZXRTdGF0ZSA9IF9yZWYyLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaCA9IF9yZWYyLmRpc3BhdGNoO1xuXG4gICAgdmFyIHNhZ2FFbWl0dGVyID0gZW1pdHRlcigpO1xuICAgIHNhZ2FFbWl0dGVyLmVtaXQgPSAob3B0aW9ucy5lbWl0dGVyIHx8IGlkZW50KShzYWdhRW1pdHRlci5lbWl0KTtcblxuICAgIHNhZ2FNaWRkbGV3YXJlLnJ1biA9IHJ1blNhZ2EuYmluZChudWxsLCB7XG4gICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgc3Vic2NyaWJlOiBzYWdhRW1pdHRlci5zdWJzY3JpYmUsXG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgICBzYWdhTW9uaXRvcjogc2FnYU1vbml0b3IsXG4gICAgICBsb2dnZXI6IGxvZ2dlcixcbiAgICAgIG9uRXJyb3I6IG9uRXJyb3JcbiAgICB9KTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHNhZ2FNb25pdG9yICYmIHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQpIHtcbiAgICAgICAgICBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkKGFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHQoYWN0aW9uKTsgLy8gaGl0IHJlZHVjZXJzXG4gICAgICAgIHNhZ2FFbWl0dGVyLmVtaXQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHNhZ2FNaWRkbGV3YXJlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JlZm9yZSBydW5uaW5nIGEgU2FnYSwgeW91IG11c3QgbW91bnQgdGhlIFNhZ2EgbWlkZGxld2FyZSBvbiB0aGUgU3RvcmUgdXNpbmcgYXBwbHlNaWRkbGV3YXJlJyk7XG4gIH07XG5cbiAgc2FnYU1pZGRsZXdhcmUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGNoZWNrKHByb3BzLCBpcy5vYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nKCdzYWdhTWlkZGxld2FyZScsIHByb3BzKSk7XG4gICAgb2JqZWN0LmFzc2lnbihjb250ZXh0LCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIHNhZ2FNaWRkbGV3YXJlO1xufSIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHsgaXMsIGNoZWNrLCByZW1vdmUsIE1BVENILCBpbnRlcm5hbEVyciwgU0FHQV9BQ1RJT04gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGJ1ZmZlcnMgfSBmcm9tICcuL2J1ZmZlcnMnO1xuaW1wb3J0IHsgYXNhcCB9IGZyb20gJy4vc2NoZWR1bGVyJztcblxudmFyIENIQU5ORUxfRU5EX1RZUEUgPSAnQEByZWR1eC1zYWdhL0NIQU5ORUxfRU5EJztcbmV4cG9ydCB2YXIgRU5EID0geyB0eXBlOiBDSEFOTkVMX0VORF9UWVBFIH07XG5leHBvcnQgdmFyIGlzRW5kID0gZnVuY3Rpb24gaXNFbmQoYSkge1xuICByZXR1cm4gYSAmJiBhLnR5cGUgPT09IENIQU5ORUxfRU5EX1RZUEU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZW1pdHRlcigpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKHN1Yikge1xuICAgIHN1YnNjcmliZXJzLnB1c2goc3ViKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlbW92ZShzdWJzY3JpYmVycywgc3ViKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW1pdChpdGVtKSB7XG4gICAgdmFyIGFyciA9IHN1YnNjcmliZXJzLnNsaWNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyW2ldKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZW1pdDogZW1pdFxuICB9O1xufVxuXG5leHBvcnQgdmFyIElOVkFMSURfQlVGRkVSID0gJ2ludmFsaWQgYnVmZmVyIHBhc3NlZCB0byBjaGFubmVsIGZhY3RvcnkgZnVuY3Rpb24nO1xuZXhwb3J0IHZhciBVTkRFRklORURfSU5QVVRfRVJST1IgPSAnU2FnYSB3YXMgcHJvdmlkZWQgd2l0aCBhbiB1bmRlZmluZWQgYWN0aW9uJztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVU5ERUZJTkVEX0lOUFVUX0VSUk9SICs9ICdcXG5IaW50czpcXG4gICAgLSBjaGVjayB0aGF0IHlvdXIgQWN0aW9uIENyZWF0b3IgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWVcXG4gICAgLSBpZiB0aGUgU2FnYSB3YXMgc3RhcnRlZCB1c2luZyBydW5TYWdhLCBjaGVjayB0aGF0IHlvdXIgc3Vic2NyaWJlIHNvdXJjZSBwcm92aWRlcyB0aGUgYWN0aW9uIHRvIGl0cyBsaXN0ZW5lcnNcXG4gICc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsKCkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBidWZmZXJzLmZpeGVkKCk7XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgdGFrZXJzID0gW107XG5cbiAgY2hlY2soYnVmZmVyLCBpcy5idWZmZXIsIElOVkFMSURfQlVGRkVSKTtcblxuICBmdW5jdGlvbiBjaGVja0ZvcmJpZGRlblN0YXRlcygpIHtcbiAgICBpZiAoY2xvc2VkICYmIHRha2Vycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBhIGNsb3NlZCBjaGFubmVsIHdpdGggcGVuZGluZyB0YWtlcnMnKTtcbiAgICB9XG4gICAgaWYgKHRha2Vycy5sZW5ndGggJiYgIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBwZW5kaW5nIHRha2VycyB3aXRoIG5vbiBlbXB0eSBidWZmZXInKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdXQoaW5wdXQpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGlucHV0LCBpcy5ub3RVbmRlZiwgVU5ERUZJTkVEX0lOUFVUX0VSUk9SKTtcbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGFrZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5wdXQoaW5wdXQpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRha2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNiID0gdGFrZXJzW2ldO1xuICAgICAgaWYgKCFjYltNQVRDSF0gfHwgY2JbTUFUQ0hdKGlucHV0KSkge1xuICAgICAgICB0YWtlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2UoY2IpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGNiLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICB9IGVsc2UgaWYgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICBjYihidWZmZXIudGFrZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFrZXJzLnB1c2goY2IpO1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKHRha2VycywgY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaChjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7IC8vIFRPRE86IGNoZWNrIGlmIHNvbWUgbmV3IHN0YXRlIHNob3VsZCBiZSBmb3JiaWRkZW4gbm93XG4gICAgY2hlY2soY2IsIGlzLmZ1bmMsIFwiY2hhbm5lbC5mbHVzaCcgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2IoYnVmZmVyLmZsdXNoKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGlmICh0YWtlcnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnIgPSB0YWtlcnM7XG4gICAgICAgIHRha2VycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYXJyW2ldKEVORCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRha2U6IHRha2UsXG4gICAgcHV0OiBwdXQsXG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIGNsb3NlOiBjbG9zZSxcbiAgICBnZXQgX190YWtlcnNfXygpIHtcbiAgICAgIHJldHVybiB0YWtlcnM7XG4gICAgfSxcbiAgICBnZXQgX19jbG9zZWRfXygpIHtcbiAgICAgIHJldHVybiBjbG9zZWQ7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBidWZmZXJzLm5vbmUoKTtcbiAgdmFyIG1hdGNoZXIgPSBhcmd1bWVudHNbMl07XG5cbiAgLyoqXG4gICAgc2hvdWxkIGJlIGlmKHR5cGVvZiBtYXRjaGVyICE9PSB1bmRlZmluZWQpIGluc3RlYWQ/XG4gICAgc2VlIFBSICMyNzMgZm9yIGEgYmFja2dyb3VuZCBkaXNjdXNzaW9uXG4gICoqL1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCAnSW52YWxpZCBtYXRjaCBmdW5jdGlvbiBwYXNzZWQgdG8gZXZlbnRDaGFubmVsJyk7XG4gIH1cblxuICB2YXIgY2hhbiA9IGNoYW5uZWwoYnVmZmVyKTtcbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKCFjaGFuLl9fY2xvc2VkX18pIHtcbiAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgY2hhbi5jbG9zZSgpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmIChpc0VuZChpbnB1dCkpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtYXRjaGVyICYmICFtYXRjaGVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGFuLnB1dChpbnB1dCk7XG4gIH0pO1xuICBpZiAoY2hhbi5fX2Nsb3NlZF9fKSB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGlmICghaXMuZnVuYyh1bnN1YnNjcmliZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2luIGV2ZW50Q2hhbm5lbDogc3Vic2NyaWJlIHNob3VsZCByZXR1cm4gYSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZScpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiBjaGFuLnRha2UsXG4gICAgZmx1c2g6IGNoYW4uZmx1c2gsXG4gICAgY2xvc2U6IGNsb3NlXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgY2hhbiA9IGV2ZW50Q2hhbm5lbChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgaWYgKGlucHV0W1NBR0FfQUNUSU9OXSkge1xuICAgICAgICBjYihpbnB1dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2hhbiwge1xuICAgIHRha2U6IGZ1bmN0aW9uIHRha2UoY2IsIG1hdGNoZXIpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIG1hdGNoZXIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICBjYltNQVRDSF0gPSBtYXRjaGVyO1xuICAgICAgfVxuICAgICAgY2hhbi50YWtlKGNiKTtcbiAgICB9XG4gIH0pO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi41LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTI7biYmU3ltYm9sLmZvcihcInJlYWN0LnBsYWNlaG9sZGVyXCIpO1xudmFyIHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgaz1bZCxjLGUsZyxoLGZdLGw9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBrW2wrK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7QSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGQpfXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0IoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbCxjdXJyZW50RGlzcGF0Y2hlcjpudWxsfSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTChhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbD0wO2w8ZjtsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtlLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpJLmN1cnJlbnR9fVxuZnVuY3Rpb24gTShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZT1hW2hdO3ZhciBmPWIrVChlLGgpO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaCsrKSxnKz1TKGUsZixkLGMpO2Vsc2VcIm9iamVjdFwiPT09ZSYmKGQ9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBWKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1coYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9TShhLGUrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2QpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFcoYSxiLGQsYyxlKXt2YXIgZz1cIlwiO251bGwhPWQmJihnPShcIlwiK2QpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGUpO1UoYSxhYSxiKTtSKGIpfWZ1bmN0aW9uIGJhKGEsYil7dmFyIGQ9SS5jdXJyZW50RGlzcGF0Y2hlcjtudWxsPT09ZD9CKFwiMjc3XCIpOnZvaWQgMDtyZXR1cm4gZC5yZWFkQ29udGV4dChhLGIpfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VyhhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsVixiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpCKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCx1bnN0YWJsZV9yZWFkOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07YS5Db25zdW1lcj1hO2EudW5zdGFibGVfcmVhZD1iYS5iaW5kKG51bGwsYSk7cmV0dXJuIGF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCx1bnN0YWJsZV9Bc3luY01vZGU6eCx1bnN0YWJsZV9Qcm9maWxlcjp1LGNyZWF0ZUVsZW1lbnQ6TCxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe251bGw9PT1hfHx2b2lkIDA9PT1hP0IoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGU9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1JLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTtcbnZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihrPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtlLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TC5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjUuMFwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpJLFxuYXNzaWduOm19fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjUuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLGJhPXJlcXVpcmUoXCJzY2hlZHVsZVwiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGspe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBoPVtjLGQsZSxmLGcsa10sbD0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGhbbCsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHcoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp3KFwiMjI3XCIpO2Z1bmN0aW9uIGRhKGEsYixjLGQsZSxmLGcsayxoKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGVhPSExLGZhPW51bGwsaGE9ITEsaWE9bnVsbCxqYT17b25FcnJvcjpmdW5jdGlvbihhKXtlYT0hMDtmYT1hfX07ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxrLGgpe2VhPSExO2ZhPW51bGw7ZGEuYXBwbHkoamEsYXJndW1lbnRzKX1mdW5jdGlvbiBsYShhLGIsYyxkLGUsZixnLGssaCl7a2EuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGVhKXtpZihlYSl7dmFyIGw9ZmE7ZWE9ITE7ZmE9bnVsbH1lbHNlIHcoXCIxOThcIiksbD12b2lkIDA7aGF8fChoYT0hMCxpYT1sKX19dmFyIG1hPW51bGwsbmE9e307XG5mdW5jdGlvbiBvYSgpe2lmKG1hKWZvcih2YXIgYSBpbiBuYSl7dmFyIGI9bmFbYV0sYz1tYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOncoXCI5NlwiLGEpO2lmKCFwYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp3KFwiOTdcIixhKTtwYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaz1kO3FhLmhhc093blByb3BlcnR5KGspP3coXCI5OVwiLGspOnZvaWQgMDtxYVtrXT1mO3ZhciBoPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoaCl7Zm9yKGUgaW4gaCloLmhhc093blByb3BlcnR5KGUpJiZyYShoW2VdLGcsayk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocmEoZi5yZWdpc3RyYXRpb25OYW1lLGcsayksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp3KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcmEoYSxiLGMpe3NhW2FdP3coXCIxMDBcIixhKTp2b2lkIDA7c2FbYV09Yjt0YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBwYT1bXSxxYT17fSxzYT17fSx0YT17fSx1YT1udWxsLHZhPW51bGwsd2E9bnVsbDtmdW5jdGlvbiB4YShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXdhKGQpO2xhKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geWEoYSxiKXtudWxsPT1iP3coXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24gemEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEFhPW51bGw7ZnVuY3Rpb24gQmEoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspeGEoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZ4YShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBDYShhKXtyZXR1cm4gQmEoYSwhMCl9ZnVuY3Rpb24gRGEoYSl7cmV0dXJuIEJhKGEsITEpfVxudmFyIEVhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe21hP3coXCIxMDFcIik6dm9pZCAwO21hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO29hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtuYS5oYXNPd25Qcm9wZXJ0eShjKSYmbmFbY109PT1kfHwobmFbY10/dyhcIjEwMlwiLGMpOnZvaWQgMCxuYVtjXT1kLGI9ITApfWImJm9hKCl9fTtcbmZ1bmN0aW9uIEZhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dWEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dyhcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIEdhKGEsYil7bnVsbCE9PWEmJihBYT15YShBYSxhKSk7YT1BYTtBYT1udWxsO2lmKGEmJihiP3phKGEsQ2EpOnphKGEsRGEpLEFhP3coXCI5NVwiKTp2b2lkIDAsaGEpKXRocm93IGI9aWEsaGE9ITEsaWE9bnVsbCxiO312YXIgSGE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksSWE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitIYSxKYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0hhO2Z1bmN0aW9uIEthKGEpe2lmKGFbSWFdKXJldHVybiBhW0lhXTtmb3IoOyFhW0lhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0lhXTtyZXR1cm4gNz09PWEudGFnfHw4PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIExhKGEpe2E9YVtJYV07cmV0dXJuIWF8fDchPT1hLnRhZyYmOCE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIE1hKGEpe2lmKDc9PT1hLnRhZ3x8OD09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt3KFwiMzNcIil9ZnVuY3Rpb24gTmEoYSl7cmV0dXJuIGFbSmFdfHxudWxsfWZ1bmN0aW9uIE9hKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNyE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gUGEoYSxiLGMpe2lmKGI9RmEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz15YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz15YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIFFhKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9T2EoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVBhKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspUGEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gUmEoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RmEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXlhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXlhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBUYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlJhKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFVhKGEpe3phKGEsUWEpfXZhciBWYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFdhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFlhPXthbmltYXRpb25lbmQ6V2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246V2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpXYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpXYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFphPXt9LCRhPXt9O1xuVmEmJigkYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBZYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBZYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBZYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBZYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIGFiKGEpe2lmKFphW2FdKXJldHVybiBaYVthXTtpZighWWFbYV0pcmV0dXJuIGE7dmFyIGI9WWFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gJGEpcmV0dXJuIFphW2FdPWJbY107cmV0dXJuIGF9XG52YXIgYmI9YWIoXCJhbmltYXRpb25lbmRcIiksY2I9YWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksZGI9YWIoXCJhbmltYXRpb25zdGFydFwiKSxlYj1hYihcInRyYW5zaXRpb25lbmRcIiksZmI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGdiPW51bGwsaGI9bnVsbCxpYj1udWxsO1xuZnVuY3Rpb24gamIoKXtpZihpYilyZXR1cm4gaWI7dmFyIGEsYj1oYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBnYj9nYi52YWx1ZTpnYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBpYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGtiKCl7cmV0dXJuITB9ZnVuY3Rpb24gbGIoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEMoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2tiOmxiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9bGI7cmV0dXJuIHRoaXN9XG5uKEMucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9a2IpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9a2IpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9a2J9LGlzUGVyc2lzdGVudDpsYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1sYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0MuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuQy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDttYihjKTtyZXR1cm4gY307bWIoQyk7ZnVuY3Rpb24gbmIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gb2IoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOncoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gbWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9bmI7YS5yZWxlYXNlPW9ifXZhciBwYj1DLmV4dGVuZCh7ZGF0YTpudWxsfSkscWI9Qy5leHRlbmQoe2RhdGE6bnVsbH0pLHJiPVs5LDEzLDI3LDMyXSxzYj1WYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csdGI9bnVsbDtWYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYodGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB1Yj1WYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXRiLHZiPVZhJiYoIXNifHx0YiYmODx0YiYmMTE+PXRiKSx3Yj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSx4Yj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx5Yj0hMTtcbmZ1bmN0aW9uIHpiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09cmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBBYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBCYj0hMTtmdW5jdGlvbiBDYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gQWIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3liPSEwO3JldHVybiB3YjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT13YiYmeWI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gRGIoYSxiKXtpZihCYilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhc2ImJnpiKGEsYik/KGE9amIoKSxpYj1oYj1nYj1udWxsLEJiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB2YiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgRWI9e2V2ZW50VHlwZXM6eGIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHNiKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9eGIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9eGIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXhiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBCYj96YihhLGMpJiYoZT14Yi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXhiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHZiJiZcImtvXCIhPT1jLmxvY2FsZSYmKEJifHxlIT09eGIuY29tcG9zaXRpb25TdGFydD9lPT09eGIuY29tcG9zaXRpb25FbmQmJkJiJiYoZj1qYigpKTooZ2I9ZCxoYj1cInZhbHVlXCJpbiBnYj9nYi52YWx1ZTpnYi50ZXh0Q29udGVudCxCYj1cbiEwKSksZT1wYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj1BYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksVWEoZSksZj1lKTpmPW51bGw7KGE9dWI/Q2IoYSxjKTpEYihhLGMpKT8oYj1xYi5nZXRQb29sZWQoeGIuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFVhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEZiPW51bGwsR2I9bnVsbCxIYj1udWxsO2Z1bmN0aW9uIEliKGEpe2lmKGE9dmEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBGYj93KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj11YShhLnN0YXRlTm9kZSk7RmIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBKYihhKXtHYj9IYj9IYi5wdXNoKGEpOkhiPVthXTpHYj1hfWZ1bmN0aW9uIEtiKCl7aWYoR2Ipe3ZhciBhPUdiLGI9SGI7SGI9R2I9bnVsbDtJYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspSWIoYlthXSl9fVxuZnVuY3Rpb24gTGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBNYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBOYigpe312YXIgT2I9ITE7ZnVuY3Rpb24gUGIoYSxiKXtpZihPYilyZXR1cm4gYShiKTtPYj0hMDt0cnl7cmV0dXJuIExiKGEsYil9ZmluYWxseXtpZihPYj0hMSxudWxsIT09R2J8fG51bGwhPT1IYilOYigpLEtiKCl9fXZhciBRYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBSYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVFiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIFNiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBUYihhKXtpZighVmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gVWIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFZiKGEpe3ZhciBiPVViKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBXYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VmIoYSkpfWZ1bmN0aW9uIFhiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1VYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIFliPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELFpiPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLCRiPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsYWM9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGJjPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGNjPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGRjPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGVjPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGZjPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZ2M9RT9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxoYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixpYz1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wbGFjZWhvbGRlclwiKTpcbjYwMTEzLGpjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBrYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9amMmJmFbamNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBsYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGdjOnJldHVyblwiQXN5bmNNb2RlXCI7Y2FzZSBiYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBhYzpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgZGM6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgY2M6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBpYzpyZXR1cm5cIlBsYWNlaG9sZGVyXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXtzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGVjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgaGM6cmV0dXJuIGE9YS5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9aWYoXCJmdW5jdGlvblwiPT09XG50eXBlb2YgYS50aGVuJiYoYT0xPT09YS5fcmVhY3RTdGF0dXM/YS5fcmVhY3RSZXN1bHQ6bnVsbCkpcmV0dXJuIGxjKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIG1jKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgNDpjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA3OmNhc2UgMTA6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlLGU9bGMoYS50eXBlKTt2YXIgZj1udWxsO2MmJihmPWxjKGMudHlwZSkpO2M9ZTtlPVwiXCI7ZD9lPVwiIChhdCBcIitkLmZpbGVOYW1lLnJlcGxhY2UoWmIsXCJcIikrXCI6XCIrZC5saW5lTnVtYmVyK1wiKVwiOmYmJihlPVwiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCIpO2Y9XCJcXG4gICAgaW4gXCIrKGN8fFwiVW5rbm93blwiKStlO2JyZWFrIGE7ZGVmYXVsdDpmPVwiXCJ9Yis9ZjthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIG5jPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxwYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHFjPXt9LHJjPXt9O1xuZnVuY3Rpb24gc2MoYSl7aWYocGMuY2FsbChyYyxhKSlyZXR1cm4hMDtpZihwYy5jYWxsKHFjLGEpKXJldHVybiExO2lmKG5jLnRlc3QoYSkpcmV0dXJuIHJjW2FdPSEwO3FjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHRjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gdWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBGKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtHW2JdPW5ldyBGKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgdmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB3YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2YyxcbndjKTtHW2JdPW5ldyBGKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0cudGFiSW5kZXg9bmV3IEYoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24geGMoYSxiLGMsZCl7dmFyIGU9Ry5oYXNPd25Qcm9wZXJ0eShiKT9HW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwodWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3NjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB5YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gemMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9eWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBDYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnhjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBEYyhhLGIpe0NjKGEsYik7dmFyIGM9eWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RWMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRWMoYSxiLnR5cGUseWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBGYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtkPWEudmFsdWU7Y3x8Yj09PWR8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRWMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBHYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBIYyhhLGIsYyl7YT1DLmdldFBvb2xlZChHYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0piKGMpO1VhKGEpO3JldHVybiBhfXZhciBJYz1udWxsLEpjPW51bGw7ZnVuY3Rpb24gS2MoYSl7R2EoYSwhMSl9XG5mdW5jdGlvbiBMYyhhKXt2YXIgYj1NYShhKTtpZihYYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBNYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBOYz0hMTtWYSYmKE5jPVRiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIE9jKCl7SWMmJihJYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixQYyksSmM9SWM9bnVsbCl9ZnVuY3Rpb24gUGMoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkxjKEpjKSYmKGE9SGMoSmMsYSxTYihhKSksUGIoS2MsYSkpfWZ1bmN0aW9uIFFjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhPYygpLEljPWIsSmM9YyxJYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixQYykpOlwiYmx1clwiPT09YSYmT2MoKX1mdW5jdGlvbiBSYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBMYyhKYyl9XG5mdW5jdGlvbiBTYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIExjKGIpfWZ1bmN0aW9uIFRjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIExjKGIpfVxudmFyIFVjPXtldmVudFR5cGVzOkdjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6TmMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP01hKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxrPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1NYzpSYihlKT9OYz9mPVRjOihmPVJjLGc9UWMpOihrPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVNjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBIYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkVjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFZjPUMuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxXYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBYYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVdjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gWWMoKXtyZXR1cm4gWGN9XG52YXIgWmM9MCwkYz0wLGFkPSExLGJkPSExLGNkPVZjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpZYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1aYztaYz1hLnNjcmVlblg7cmV0dXJuIGFkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooYWQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj0kYzskYz1hLnNjcmVlblk7cmV0dXJuIGJkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooYmQ9ITAsMCl9fSksZGQ9Y2QuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGVkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxmZD17ZXZlbnRUeXBlczplZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9LYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGs9dm9pZCAwLGg9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9Y2Qsaz1lZC5tb3VzZUxlYXZlLGg9ZWQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9ZGQsaz1lZC5wb2ludGVyTGVhdmUsaD1lZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6TWEoZik7ZT1udWxsPT1iP2U6TWEoYik7YT1nLmdldFBvb2xlZChrLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGgsYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihnPWI7ZztnPU9hKGcpKWwrKztnPTA7Zm9yKGg9ZTtoO2g9T2EoaCkpZysrO2Zvcig7MDxsLWc7KWI9T2EoYiksbC0tO2Zvcig7MDxnLWw7KWU9T2EoZSksZy0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9T2EoYik7ZT1PYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1PYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPU9hKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspUmEoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspUmEoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fSxnZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIGhkKGEsYil7cmV0dXJuIGE9PT1iPzAhPT1hfHwwIT09Ynx8MS9hPT09MS9iOmEhPT1hJiZiIT09Yn1cbmZ1bmN0aW9uIGlkKGEsYil7aWYoaGQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFnZC5jYWxsKGIsY1tkXSl8fCFoZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGpkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiA1PT09Yi50YWc/MjozfWZ1bmN0aW9uIGtkKGEpezIhPT1qZChhKT93KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGxkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWpkKGEpLDM9PT1iP3coXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGtkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGtkKGUpLGI7Zz1nLnNpYmxpbmd9dyhcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaz1lLmNoaWxkO2s7KXtpZihrPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGs9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9az1rLnNpYmxpbmd9aWYoIWcpe2ZvcihrPWYuY2hpbGQ7azspe2lmKGs9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaz09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31rPWsuc2libGluZ31nP1xudm9pZCAwOncoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD93KFwiMTkwXCIpOnZvaWQgMH01IT09Yy50YWc/dyhcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBtZChhKXthPWxkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDc9PT1iLnRhZ3x8OD09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIG5kPUMuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxvZD1DLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHBkPVZjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gcWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHNkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx0ZD1WYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3NkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpZYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9xZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9xZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHVkPWNkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx2ZD1WYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpZY30pLHdkPUMuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHhkPWNkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSkseWQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbYmIsXCJhbmltYXRpb25FbmRcIl0sW2NiLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtkYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2ViLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0semQ9e30sQWQ9e307ZnVuY3Rpb24gQmQoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt6ZFthXT1iO0FkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7QmQoYSwhMCl9KTt5ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0JkKGEsITEpfSk7XG52YXIgQ2Q9e2V2ZW50VHlwZXM6emQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QWRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUFkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cWQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXRkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1wZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWNkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG51ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXZkO2JyZWFrO2Nhc2UgYmI6Y2FzZSBjYjpjYXNlIGRiOmE9bmQ7YnJlYWs7Y2FzZSBlYjphPXdkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVZjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eGQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1vZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWRkO2JyZWFrO2RlZmF1bHQ6YT1DfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7VWEoYik7cmV0dXJuIGJ9fSxEZD1DZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5FZD1bXTtmdW5jdGlvbiBGZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD01IT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1LYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1TYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxrPTA7azxwYS5sZW5ndGg7aysrKXt2YXIgaD1wYVtrXTtoJiYoaD1oLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz15YShnLGgpKX1HYShnLCExKX19dmFyIEdkPSEwO1xuZnVuY3Rpb24gSChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9IZDpJZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEpkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KERkKGEpP0hkOklkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gSGQoYSxiKXtNYihJZCxhLGIpfVxuZnVuY3Rpb24gSWQoYSxiKXtpZihHZCl7dmFyIGM9U2IoYik7Yz1LYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWpkKGMpfHwoYz1udWxsKTtpZihFZC5sZW5ndGgpe3ZhciBkPUVkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e1BiKEZkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RWQubGVuZ3RoJiZFZC5wdXNoKGEpfX19dmFyIEtkPXt9LExkPTAsTWQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gTmQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsTWQpfHwoYVtNZF09TGQrKyxLZFthW01kXV09e30pO3JldHVybiBLZFthW01kXV19ZnVuY3Rpb24gUGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIFFkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJkKGEsYil7dmFyIGM9UWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9UWQoYyl9fWZ1bmN0aW9uIFNkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/U2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gVGQoKXtmb3IodmFyIGE9d2luZG93LGI9UGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXthPWIuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3fWNhdGNoKGMpe2JyZWFrfWI9UGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1WYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxYZD1udWxsLFlkPW51bGwsWmQ9bnVsbCwkZD0hMTtcbmZ1bmN0aW9uIGFlKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoJGR8fG51bGw9PVhkfHxYZCE9PVBkKGMpKXJldHVybiBudWxsO2M9WGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmVWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gWmQmJmlkKFpkLGMpP251bGw6KFpkPWMsYT1DLmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxVYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1OZChlKTtmPXRhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaz1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGspfHwhZVtrXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/TWEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihSYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gJGQ9ITEsYWUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoVmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBhZShjLGQpfXJldHVybiBudWxsfX07RWEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt1YT1OYTt2YT1MYTt3YT1NYTtFYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkNkLEVudGVyTGVhdmVFdmVudFBsdWdpbjpmZCxDaGFuZ2VFdmVudFBsdWdpbjpVYyxTZWxlY3RFdmVudFBsdWdpbjpiZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOkVifSk7ZnVuY3Rpb24gY2UoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkZShhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWNlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBlZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIreWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGZlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD93KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGdlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/dyhcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOncoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnljKGMpfX1cbmZ1bmN0aW9uIGhlKGEsYil7dmFyIGM9eWMoYi52YWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPVwiXCIreWMoYi5kZWZhdWx0VmFsdWUpKX1mdW5jdGlvbiBpZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgamU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24ga2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBsZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWU9dm9pZCAwLG5lPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWplLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21lPW1lfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21lLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPW1lLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9lKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FlLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGVbYl09cGVbYV19KX0pO1xuZnVuY3Rpb24gcmUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8cGUuaGFzT3duUHJvcGVydHkoZSkmJnBlW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHNlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB0ZShhLGIpe2ImJihzZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dyhcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj93KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOncoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3coXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiB1ZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiB2ZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1OZChhKTtiPXRhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpKZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6SmQoXCJmb2N1c1wiLGEpO0pkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpUYihlKSYmSmQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09ZmIuaW5kZXhPZihlKSYmSChlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB3ZSgpe312YXIgeGU9bnVsbCx5ZT1udWxsO1xuZnVuY3Rpb24gemUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIEFlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1mdW5jdGlvbiBCZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfVxuZnVuY3Rpb24gQ2UoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIERlPVtdLEVlPS0xO2Z1bmN0aW9uIEkoYSl7MD5FZXx8KGEuY3VycmVudD1EZVtFZV0sRGVbRWVdPW51bGwsRWUtLSl9ZnVuY3Rpb24gSihhLGIpe0VlKys7RGVbRWVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgRmU9e30sSz17Y3VycmVudDpGZX0sTD17Y3VycmVudDohMX0sR2U9RmU7XG5mdW5jdGlvbiBIZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEZlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIE0oYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBJZShhKXtJKEwsYSk7SShLLGEpfWZ1bmN0aW9uIEplKGEpe0koTCxhKTtJKEssYSl9XG5mdW5jdGlvbiBLZShhLGIsYyl7Sy5jdXJyZW50IT09RmU/dyhcIjE2OFwiKTp2b2lkIDA7SihLLGIsYSk7SihMLGMsYSl9ZnVuY3Rpb24gTGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6dyhcIjEwOFwiLGxjKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIE1lKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8RmU7R2U9Sy5jdXJyZW50O0ooSyxiLGEpO0ooTCxMLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6dyhcIjE2OVwiKTtjPyhiPUxlKGEsYixHZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEkoTCxhKSxJKEssYSksSihLLGIsYSkpOkkoTCxhKTtKKEwsYyxhKX12YXIgT2U9bnVsbCxQZT1udWxsO2Z1bmN0aW9uIFFlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBSZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtPZT1RZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7UGU9UWUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFNlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIFRlKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmXCJvYmplY3RcIj09PXR5cGVvZiBhLmlzUmVhY3RDb21wb25lbnQmJm51bGwhPT1hLmlzUmVhY3RDb21wb25lbnR9XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IFNlKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7ZC5leHBpcmF0aW9uVGltZT1iIT09YS5wZW5kaW5nUHJvcHM/YzphLmV4cGlyYXRpb25UaW1lO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2QuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7ZC5zaWJsaW5nPWEuc2libGluZztcbmQuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIFZlKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7dmFyIGY9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKWY9VGUoZCk/Mjo0O2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NztlbHNlIGE6c3dpdGNoKGQpe2Nhc2UgYmM6cmV0dXJuIFdlKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2UgZ2M6Zj0xMDtifD0zO2JyZWFrO2Nhc2UgY2M6Zj0xMDtifD0yO2JyZWFrO2Nhc2UgZGM6cmV0dXJuIGQ9bmV3IFNlKDE1LGEsZSxifDQpLGQudHlwZT1kYyxkLmV4cGlyYXRpb25UaW1lPWMsZDtjYXNlIGljOmY9MTY7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIGVjOmY9MTI7YnJlYWsgYTtjYXNlIGZjOmY9MTE7YnJlYWsgYTtjYXNlIGhjOmY9MTM7YnJlYWsgYTtkZWZhdWx0OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnRoZW4pe2Y9NDticmVhayBhfX13KFwiMTMwXCIsXG5udWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgU2UoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIFdlKGEsYixjLGQpe2E9bmV3IFNlKDksYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBYZShhLGIsYyl7YT1uZXcgU2UoOCxhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFllKGEsYixjKXtiPW5ldyBTZSg2LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFplKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPmI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZTxiJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTskZShiLGEpfWZ1bmN0aW9uICRlKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZD5hKSYmKGU9ZCk7YT1lOzAhPT1hJiYwIT09YyYmYzxhJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfXZhciBhZj0hMTtcbmZ1bmN0aW9uIGJmKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBjZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBkZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBlZihhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBmZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9YmYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9YmYoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9YmYoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPWNmKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPWNmKGQpKTtudWxsPT09ZXx8ZD09PWU/ZWYoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhlZihkLGIpLGVmKGUsYikpOihlZihkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9YmYoYS5tZW1vaXplZFN0YXRlKTpoZihhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIGhmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPWNmKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGpmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6YWY9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBrZihhLGIsYyxkLGUpe2FmPSExO2I9aGYoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGs9MCxoPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1oOyl7dmFyIG09aC5leHBpcmF0aW9uVGltZTtpZihtPmUpe2lmKG51bGw9PT1nJiYoZz1oLGY9bCksMD09PWt8fGs+bSlrPW19ZWxzZSBsPWpmKGEsYixoLGwsYyxkKSxudWxsIT09aC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixoLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWg6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWgsYi5sYXN0RWZmZWN0PWgpKTtoPWgubmV4dH1tPW51bGw7Zm9yKGg9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1oOyl7dmFyIHQ9aC5leHBpcmF0aW9uVGltZTtpZih0PmUpe2lmKG51bGw9PT1tJiYobT1oLG51bGw9PT1nJiYoZj1sKSksMD09PWt8fGs+dClrPXR9ZWxzZSBsPWpmKGEsYixoLGwsYyxkKSxcbm51bGwhPT1oLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGgubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aDooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1oLGIubGFzdENhcHR1cmVkRWZmZWN0PWgpKTtoPWgubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9azthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIGxmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTttZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7bWYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIG1mKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3coXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6bWMoYil9fXZhciBvZj17Y3VycmVudDpudWxsfSxwZj1udWxsLHFmPW51bGwscmY9bnVsbDtmdW5jdGlvbiBzZihhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtKKG9mLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB0ZihhKXt2YXIgYj1vZi5jdXJyZW50O0kob2YsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB1ZihhKXtwZj1hO3JmPXFmPW51bGw7YS5maXJzdENvbnRleHREZXBlbmRlbmN5PW51bGx9XG5mdW5jdGlvbiB2ZihhLGIpe2lmKHJmIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilyZj1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09cWY/KG51bGw9PT1wZj93KFwiMjc3XCIpOnZvaWQgMCxwZi5maXJzdENvbnRleHREZXBlbmRlbmN5PXFmPWIpOnFmPXFmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zj17fSxOPXtjdXJyZW50OndmfSx4Zj17Y3VycmVudDp3Zn0seWY9e2N1cnJlbnQ6d2Z9O2Z1bmN0aW9uIHpmKGEpe2E9PT13Zj93KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEFmKGEsYil7Sih5ZixiLGEpO0ooeGYsYSxhKTtKKE4sd2YsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPWxlKGIsYyl9SShOLGEpO0ooTixiLGEpfWZ1bmN0aW9uIEJmKGEpe0koTixhKTtJKHhmLGEpO0koeWYsYSl9ZnVuY3Rpb24gQ2YoYSl7emYoeWYuY3VycmVudCk7dmFyIGI9emYoTi5jdXJyZW50KTt2YXIgYz1sZShiLGEudHlwZSk7YiE9PWMmJihKKHhmLGEsYSksSihOLGMsYSkpfWZ1bmN0aW9uIERmKGEpe3hmLmN1cnJlbnQ9PT1hJiYoSShOLGEpLEkoeGYsYSkpfXZhciBFZj0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEZmKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIEpmPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09amQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2YoKTtkPUhmKGQsYSk7dmFyIGU9ZGYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO2ZmKGEsZSk7SWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2YoKTtkPUhmKGQsYSk7dmFyIGU9ZGYoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7ZmYoYSxlKTtJZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZigpO2M9SGYoYyxhKTt2YXIgZD1kZihjKTtkLnRhZz0yO3ZvaWQgMCE9PVxuYiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO2ZmKGEsZCk7SWYoYSxjKX19O2Z1bmN0aW9uIEtmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWlkKGMsZCl8fCFpZChlLGYpOiEwfWZ1bmN0aW9uIExmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE1mKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlLGY9TShiKT9HZTpLLmN1cnJlbnQ7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZjtlLmNvbnRleHQ9SGUoYSxmKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihrZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmYoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJlxuZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoa2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBOZj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gT2YoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnJiYzIT09Yy50YWc/dyhcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6dyhcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWYmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/dyhcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOncoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFBmKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ3KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBRZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVVlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGw9PT1ifHw4IT09Yi50YWcpcmV0dXJuIGI9WGUoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9T2YoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZlKGMsYS5tb2RlLGQpO2QucmVmPU9mKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuWWUoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw5IT09Yi50YWcpcmV0dXJuIGI9V2UoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHQoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVhlKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlICRiOnJldHVybiBjPVZlKGIsYS5tb2RlLGMpLGMucmVmPU9mKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBhYzpyZXR1cm4gYj1ZZShiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoTmYoYil8fGtjKGIpKXJldHVybiBiPVdlKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49XG5hLGI7UGYoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ayhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlICRiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YmM/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmgoYSxiLGMsZCk6bnVsbDtjYXNlIGFjOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE5mKGMpfHxrYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UGYoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsayhiLGEsXCJcIitkLGUpO1xuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWJjP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6aChiLGEsZCxlKTtjYXNlIGFjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE5mKGQpfHxrYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UGYoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHI9bnVsbCxwPWcsbT1nPTAscT1udWxsO251bGwhPT1wJiZtPGgubGVuZ3RoO20rKyl7cC5pbmRleD5tPyhxPXAscD1udWxsKTpxPXAuc2libGluZzt2YXIgdj14KGUscCxoW21dLGspO2lmKG51bGw9PT12KXtudWxsPT09cCYmKHA9cSk7YnJlYWt9YSYmcCYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUsXG5wKTtnPWYodixnLG0pO251bGw9PT1yP2w9djpyLnNpYmxpbmc9djtyPXY7cD1xfWlmKG09PT1oLmxlbmd0aClyZXR1cm4gYyhlLHApLGw7aWYobnVsbD09PXApe2Zvcig7bTxoLmxlbmd0aDttKyspaWYocD10KGUsaFttXSxrKSlnPWYocCxnLG0pLG51bGw9PT1yP2w9cDpyLnNpYmxpbmc9cCxyPXA7cmV0dXJuIGx9Zm9yKHA9ZChlLHApO208aC5sZW5ndGg7bSsrKWlmKHE9eihwLGUsbSxoW21dLGspKWEmJm51bGwhPT1xLmFsdGVybmF0ZSYmcC5kZWxldGUobnVsbD09PXEua2V5P206cS5rZXkpLGc9ZihxLGcsbSksbnVsbD09PXI/bD1xOnIuc2libGluZz1xLHI9cTthJiZwLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHUoZSxnLGgsayl7dmFyIGw9a2MoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/dyhcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD93KFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIG09bD1udWxsLHA9ZyxyPWc9XG4wLHE9bnVsbCx2PWgubmV4dCgpO251bGwhPT1wJiYhdi5kb25lO3IrKyx2PWgubmV4dCgpKXtwLmluZGV4PnI/KHE9cCxwPW51bGwpOnE9cC5zaWJsaW5nO3ZhciB1PXgoZSxwLHYudmFsdWUsayk7aWYobnVsbD09PXUpe3B8fChwPXEpO2JyZWFrfWEmJnAmJm51bGw9PT11LmFsdGVybmF0ZSYmYihlLHApO2c9Zih1LGcscik7bnVsbD09PW0/bD11Om0uc2libGluZz11O209dTtwPXF9aWYodi5kb25lKXJldHVybiBjKGUscCksbDtpZihudWxsPT09cCl7Zm9yKDshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9dChlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHIpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO3JldHVybiBsfWZvcihwPWQoZSxwKTshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9eihwLGUscix2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZwLmRlbGV0ZShudWxsPT09di5rZXk/cjp2LmtleSksZz1mKHYsZyxyKSxudWxsPT09XG5tP2w9djptLnNpYmxpbmc9dixtPXYpO2EmJnAuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWJjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlICRiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig5PT09ay50YWc/Zi50eXBlPT09YmM6ay50eXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1iYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9T2YoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YmM/KGQ9V2UoZi5wcm9wcy5jaGlsZHJlbixcbmEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmUoZixhLm1vZGUsaCksaC5yZWY9T2YoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIGFjOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDY9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9WWUoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY4PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49XG5hLGE9ZCk6KGMoYSxkKSxkPVhlKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE5mKGYpKXJldHVybiB5KGEsZCxmLGgpO2lmKGtjKGYpKXJldHVybiB1KGEsZCxmLGgpO2wmJlBmKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDM6Y2FzZSAwOmg9YS50eXBlLHcoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBSZj1RZighMCksU2Y9UWYoITEpLFRmPW51bGwsVWY9bnVsbCxWZj0hMTtmdW5jdGlvbiBXZihhLGIpe3ZhciBjPW5ldyBTZSg3LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFhmKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDc6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDg6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIFlmKGEpe2lmKFZmKXt2YXIgYj1VZjtpZihiKXt2YXIgYz1iO2lmKCFYZihhLGIpKXtiPUJlKGMpO2lmKCFifHwhWGYoYSxiKSl7YS5lZmZlY3RUYWd8PTI7VmY9ITE7VGY9YTtyZXR1cm59V2YoVGYsYyl9VGY9YTtVZj1DZShiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLFZmPSExLFRmPWF9fVxuZnVuY3Rpb24gWmYoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjchPT1hLnRhZyYmNSE9PWEudGFnOylhPWEucmV0dXJuO1RmPWF9ZnVuY3Rpb24gJGYoYSl7aWYoYSE9PVRmKXJldHVybiExO2lmKCFWZilyZXR1cm4gWmYoYSksVmY9ITAsITE7dmFyIGI9YS50eXBlO2lmKDchPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFBZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9VWY7YjspV2YoYSxiKSxiPUJlKGIpO1pmKGEpO1VmPVRmP0JlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIGFnKCl7VWY9VGY9bnVsbDtWZj0hMX1cbmZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhLl9yZWFjdFN0YXR1cyl7Y2FzZSAxOnJldHVybiBhLl9yZWFjdFJlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVhY3RSZXN1bHQ7Y2FzZSAwOnRocm93IGE7ZGVmYXVsdDp0aHJvdyBhLl9yZWFjdFN0YXR1cz0wLGEudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fcmVhY3RTdGF0dXMpe2EuX3JlYWN0U3RhdHVzPTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7dmFyIGM9Yi5kZWZhdWx0O2I9dm9pZCAwIT09YyYmbnVsbCE9PWM/YzpifWEuX3JlYWN0UmVzdWx0PWJ9fSxmdW5jdGlvbihiKXswPT09YS5fcmVhY3RTdGF0dXMmJihhLl9yZWFjdFN0YXR1cz0yLGEuX3JlYWN0UmVzdWx0PWIpfSksYTt9fXZhciBjZz1ZYi5SZWFjdEN1cnJlbnRPd25lcjtmdW5jdGlvbiBPKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/U2YoYixudWxsLGMsZCk6UmYoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBkZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7aWYoIUwuY3VycmVudCYmYi5tZW1vaXplZFByb3BzPT09ZCYmZj09PShudWxsIT09YT9hLnJlZjpudWxsKSlyZXR1cm4gZWcoYSxiLGUpO2M9YyhkLGYpO08oYSxiLGMsZSk7Yi5tZW1vaXplZFByb3BzPWQ7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gZmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBnZyhhLGIsYyxkLGUpe3ZhciBmPU0oYyk/R2U6Sy5jdXJyZW50O2Y9SGUoYixmKTt1ZihiLGUpO2M9YyhkLGYpO2IuZWZmZWN0VGFnfD0xO08oYSxiLGMsZSk7Yi5tZW1vaXplZFByb3BzPWQ7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoZyhhLGIsYyxkLGUpe2lmKE0oYykpe3ZhciBmPSEwO01lKGIpfWVsc2UgZj0hMTt1ZihiLGUpO2lmKG51bGw9PT1hKWlmKG51bGw9PT1iLnN0YXRlTm9kZSl7dmFyIGc9TShjKT9HZTpLLmN1cnJlbnQsaz1jLmNvbnRleHRUeXBlcyxoPW51bGwhPT1rJiZ2b2lkIDAhPT1rO2s9aD9IZShiLGcpOkZlO3ZhciBsPW5ldyBjKGQsayk7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1sLnN0YXRlJiZ2b2lkIDAhPT1sLnN0YXRlP2wuc3RhdGU6bnVsbDtsLnVwZGF0ZXI9SmY7Yi5zdGF0ZU5vZGU9bDtsLl9yZWFjdEludGVybmFsRmliZXI9YjtoJiYoaD1iLnN0YXRlTm9kZSxoLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZyxoLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWspO01mKGIsYyxkLGUpO2Q9ITB9ZWxzZXtnPWIuc3RhdGVOb2RlO2s9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9azt2YXIgbT1nLmNvbnRleHQ7XG5oPU0oYyk/R2U6Sy5jdXJyZW50O2g9SGUoYixoKTt2YXIgdD1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGshPT1kfHxtIT09aCkmJkxmKGIsZyxkLGgpO2FmPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTttPWcuc3RhdGU9eDt2YXIgej1iLnVwZGF0ZVF1ZXVlO251bGwhPT16JiYoa2YoYix6LGQsZyxlKSxtPWIubWVtb2l6ZWRTdGF0ZSk7ayE9PWR8fHghPT1tfHxMLmN1cnJlbnR8fGFmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgdCYmKEZmKGIsYyx0LGQpLG09Yi5tZW1vaXplZFN0YXRlKSwoaz1hZnx8S2YoYixjLGssZCx4LG0saCkpPyhsfHxcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9bSksZy5wcm9wcz1kLGcuc3RhdGU9bSxnLmNvbnRleHQ9aCxkPWspOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaz1cbmIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWssbT1nLmNvbnRleHQsaD1NKGMpP0dlOksuY3VycmVudCxoPUhlKGIsaCksdD1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGshPT1kfHxtIT09aCkmJkxmKGIsZyxkLGgpLGFmPSExLG09Yi5tZW1vaXplZFN0YXRlLHg9Zy5zdGF0ZT1tLHo9Yi51cGRhdGVRdWV1ZSxudWxsIT09eiYmKGtmKGIseixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUpLGshPT1kfHxtIT09eHx8TC5jdXJyZW50fHxhZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHQmJihGZihiLGMsdCxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKHQ9YWZ8fEtmKGIsYyxrLGQsXG5tLHgsaCkpPyhsfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8az09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZtPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWgsZD10KTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZtPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZtPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGlnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGlnKGEsYixjLGQsZSxmKXtmZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmTmUoYixjLCExKSxlZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtjZy5jdXJyZW50PWI7dmFyIGs9Zz9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmcmJihPKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7TyhhLGIsayxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9ZC5wcm9wcztlJiZOZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGpnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/S2UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmS2UoYSxiLmNvbnRleHQsITEpO0FmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG5nKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gb2coYSxiLGMsZCl7bnVsbCE9PWE/dyhcIjE1NVwiKTp2b2lkIDA7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudGhlbil7Yz1iZyhjKTt2YXIgZj1jO2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/VGUoZik/MzoxOnZvaWQgMCE9PWYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPzE0OjQ7Zj1iLnRhZz1mO3ZhciBnPW5nKGMsZSk7c3dpdGNoKGYpe2Nhc2UgMTpyZXR1cm4gZ2coYSxiLGMsZyxkKTtjYXNlIDM6cmV0dXJuIGhnKGEsYixjLGcsZCk7Y2FzZSAxNDpyZXR1cm4gZGcoYSxiLGMsZyxkKTtkZWZhdWx0OncoXCIyODNcIixjKX19Zj1IZShiLEsuY3VycmVudCk7dWYoYixkKTtmPWMoZSxmKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5yZW5kZXImJnZvaWQgMD09PWYuJCR0eXBlb2Ype2IudGFnPTI7TShjKT9cbihnPSEwLE1lKGIpKTpnPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09Zi5zdGF0ZSYmdm9pZCAwIT09Zi5zdGF0ZT9mLnN0YXRlOm51bGw7dmFyIGs9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGsmJkZmKGIsYyxrLGUpO2YudXBkYXRlcj1KZjtiLnN0YXRlTm9kZT1mO2YuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO01mKGIsYyxlLGQpO3JldHVybiBpZyhhLGIsYywhMCxnLGQpfWIudGFnPTA7TyhhLGIsZixkKTtiLm1lbW9pemVkUHJvcHM9ZTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGVnKGEsYixjKXtudWxsIT09YSYmKGIuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3kpO3ZhciBkPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwPT09ZHx8ZD5jKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD93KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYoIUwuY3VycmVudCYmKDA9PT1kfHxkPmMpKXtzd2l0Y2goYi50YWcpe2Nhc2UgNTpqZyhiKTthZygpO2JyZWFrO2Nhc2UgNzpDZihiKTticmVhaztjYXNlIDI6TShiLnR5cGUpJiZNZShiKTticmVhaztjYXNlIDM6TShiLnR5cGUuX3JlYWN0UmVzdWx0KSYmTWUoYik7YnJlYWs7Y2FzZSA2OkFmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMjpzZihiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSl9cmV0dXJuIGVnKGEsYixjKX1iLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDQ6cmV0dXJuIG9nKGEsYixiLnR5cGUsYyk7Y2FzZSAwOnJldHVybiBnZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTp2YXIgZT1iLnR5cGUuX3JlYWN0UmVzdWx0O2Q9Yi5wZW5kaW5nUHJvcHM7YT1nZyhhLGIsZSxuZyhlLGQpLGMpO2IubWVtb2l6ZWRQcm9wcz1kO3JldHVybiBhO1xuY2FzZSAyOnJldHVybiBoZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMzpyZXR1cm4gZT1iLnR5cGUuX3JlYWN0UmVzdWx0LGQ9Yi5wZW5kaW5nUHJvcHMsYT1oZyhhLGIsZSxuZyhlLGQpLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGE7Y2FzZSA1OmpnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD93KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO2tmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpYWcoKSxiPWVnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKVVmPUNlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFRmPWIsZT1WZj0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVNmKGIsbnVsbCxkLGMpKTooTyhhLGIsZCxjKSxhZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7XG5jYXNlIDc6Q2YoYik7bnVsbD09PWEmJllmKGIpO2Q9Yi50eXBlO2U9Yi5wZW5kaW5nUHJvcHM7dmFyIGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuO0FlKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZBZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTtmZyhhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZSxiPW51bGwpOihPKGEsYixnLGMpLGIubWVtb2l6ZWRQcm9wcz1lLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSA4OnJldHVybiBudWxsPT09YSYmWWYoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDY6cmV0dXJuIEFmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVJmKGIsbnVsbCxkLGMpOk8oYSxiLGQsYyksYi5tZW1vaXplZFByb3BzPVxuZCxiLmNoaWxkO2Nhc2UgMTM6cmV0dXJuIGRnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUuX3JlYWN0UmVzdWx0LGQ9Yi5wZW5kaW5nUHJvcHMsYT1kZyhhLGIsZSxuZyhlLGQpLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGE7Y2FzZSA5OnJldHVybiBkPWIucGVuZGluZ1Byb3BzLE8oYSxiLGQsYyksYi5tZW1vaXplZFByb3BzPWQsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLE8oYSxiLGQsYyksYi5tZW1vaXplZFByb3BzPWQsYi5jaGlsZDtjYXNlIDE1OnJldHVybiBkPWIucGVuZGluZ1Byb3BzLE8oYSxiLGQuY2hpbGRyZW4sYyksYi5tZW1vaXplZFByb3BzPWQsYi5jaGlsZDtjYXNlIDEyOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO3NmKGIsZik7aWYobnVsbCE9PWcpe3ZhciBrPWcudmFsdWU7XG5mPWs9PT1mJiYoMCE9PWt8fDEvaz09PTEvZil8fGshPT1rJiZmIT09Zj8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoayxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUwuY3VycmVudCl7Yj1lZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZz1iLmNoaWxkLG51bGwhPT1nJiYoZy5yZXR1cm49Yik7bnVsbCE9PWc7KXtrPWcuZmlyc3RDb250ZXh0RGVwZW5kZW5jeTtpZihudWxsIT09ayl7ZG97aWYoay5jb250ZXh0PT09ZCYmMCE9PShrLm9ic2VydmVkQml0cyZmKSl7aWYoMj09PWcudGFnfHwzPT09Zy50YWcpe3ZhciBoPWRmKGMpO2gudGFnPTI7ZmYoZyxoKX1pZigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5jKWcuZXhwaXJhdGlvblRpbWU9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoMD09PWguZXhwaXJhdGlvblRpbWV8fFxuaC5leHBpcmF0aW9uVGltZT5jKSYmKGguZXhwaXJhdGlvblRpbWU9Yyk7Zm9yKHZhciBsPWcucmV0dXJuO251bGwhPT1sOyl7aD1sLmFsdGVybmF0ZTtpZigwPT09bC5jaGlsZEV4cGlyYXRpb25UaW1lfHxsLmNoaWxkRXhwaXJhdGlvblRpbWU+YylsLmNoaWxkRXhwaXJhdGlvblRpbWU9YyxudWxsIT09aCYmKDA9PT1oLmNoaWxkRXhwaXJhdGlvblRpbWV8fGguY2hpbGRFeHBpcmF0aW9uVGltZT5jKSYmKGguY2hpbGRFeHBpcmF0aW9uVGltZT1jKTtlbHNlIGlmKG51bGwhPT1oJiYoMD09PWguY2hpbGRFeHBpcmF0aW9uVGltZXx8aC5jaGlsZEV4cGlyYXRpb25UaW1lPmMpKWguY2hpbGRFeHBpcmF0aW9uVGltZT1jO2Vsc2UgYnJlYWs7bD1sLnJldHVybn19aD1nLmNoaWxkO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rKX1lbHNlIGg9MTI9PT1nLnRhZz9nLnR5cGU9PT1iLnR5cGU/bnVsbDpnLmNoaWxkOmcuY2hpbGQ7aWYobnVsbCE9PWgpaC5yZXR1cm49ZztlbHNlIGZvcihoPWc7bnVsbCE9PVxuaDspe2lmKGg9PT1iKXtoPW51bGw7YnJlYWt9Zz1oLnNpYmxpbmc7aWYobnVsbCE9PWcpe2cucmV0dXJuPWgucmV0dXJuO2g9ZzticmVha31oPWgucmV0dXJufWc9aH19TyhhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAxMTpyZXR1cm4gZj1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sdWYoYixjKSxmPXZmKGYsZC51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGU9ZShmKSxiLmVmZmVjdFRhZ3w9MSxPKGEsYixlLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7ZGVmYXVsdDp3KFwiMTU2XCIpfX1mdW5jdGlvbiBxZyhhKXthLmVmZmVjdFRhZ3w9NH12YXIgcmc9dm9pZCAwLHNnPXZvaWQgMCx0Zz12b2lkIDA7cmc9ZnVuY3Rpb24oKXt9O3NnPWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1jKSYmcWcoYil9O3RnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZxZyhiKX07XG5mdW5jdGlvbiB1ZyhhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPW1jKGMpKTtudWxsIT09YyYmbGMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmbGMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gdmcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7d2coYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24geGcoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFBlJiZQZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDM6dmcoYSk7dmFyIGI9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXt3ZyhhLGMpfWJyZWFrO2Nhc2UgNzp2ZyhhKTticmVhaztjYXNlIDY6eWcoYSl9fWZ1bmN0aW9uIHpnKGEpe3JldHVybiA3PT09YS50YWd8fDU9PT1hLnRhZ3x8Nj09PWEudGFnfVxuZnVuY3Rpb24gQWcoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoemcoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXcoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDc6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgNTpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDY6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp3KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYob2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fHpnKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs3IT09Yy50YWcmJjghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw2PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNz09PWUudGFnfHw4PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaz1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxrKTpmLmluc2VydEJlZm9yZShnLGspfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhmPWIsZz1lLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT8oaz1mLnBhcmVudE5vZGUsay5pbnNlcnRCZWZvcmUoZyxmKSk6KGs9ZixrLmFwcGVuZENoaWxkKGcpKSxudWxsPT09ay5vbmNsaWNrJiYoay5vbmNsaWNrPXdlKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7ZWxzZSBpZig2IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1cbmU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24geWcoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/dyhcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDc6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA2OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDc9PT1iLnRhZ3x8OD09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKHhnKGcpLG51bGwhPT1nLmNoaWxkJiY2IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDY9PT1iLnRhZz8oZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGU9ITApOnhnKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs2PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIEJnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAzOmJyZWFrO2Nhc2UgNzp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tKYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQ2MoYyxkKTt1ZShhLGUpO2I9dWUoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxrPWZbZSsxXTtcInN0eWxlXCI9PT1nP3JlKGMsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9uZShjLGspOlwiY2hpbGRyZW5cIj09PWc/b2UoYyxrKTp4YyhjLGcsayxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RGMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxcbmMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZWUoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2VlKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTplZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgODpudWxsPT09Yi5zdGF0ZU5vZGU/dyhcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDU6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO2RlZmF1bHQ6dyhcIjE2M1wiKX19ZnVuY3Rpb24gQ2coYSxiLGMpe2M9ZGYoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGcoZCk7dWcoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFZyhhLGIsYyl7Yz1kZihjKTtjLnRhZz0zO3ZhciBkPWEuc3RhdGVOb2RlO251bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtudWxsPT09Rmc/Rmc9bmV3IFNldChbdGhpc10pOkZnLmFkZCh0aGlzKTt2YXIgYz1iLnZhbHVlLGQ9Yi5zdGFjazt1ZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWQ/ZDpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEdnKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOk0oYS50eXBlKSYmSWUoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gTShhLnR5cGUuX3JlYWN0UmVzdWx0KSYmSWUoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIEJmKGEpLEplKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT93KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGE7Y2FzZSA3OnJldHVybiBEZihhKSxudWxsO2Nhc2UgMTY6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA2OnJldHVybiBCZihhKSxudWxsO2Nhc2UgMTI6cmV0dXJuIHRmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSGc9e3JlYWRDb250ZXh0OnZmfSxJZz1ZYi5SZWFjdEN1cnJlbnRPd25lcixKZz0wLEtnPTAsTGc9ITEsUD1udWxsLE1nPW51bGwsUT0wLE5nPSExLFI9bnVsbCxPZz0hMSxGZz1udWxsO2Z1bmN0aW9uIFBnKCl7aWYobnVsbCE9PVApZm9yKHZhciBhPVAucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJkllKGIpO2JyZWFrO2Nhc2UgMzpjPWIudHlwZS5fcmVhY3RSZXN1bHQuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJkllKGIpO2JyZWFrO2Nhc2UgNTpCZihiKTtKZShiKTticmVhaztjYXNlIDc6RGYoYik7YnJlYWs7Y2FzZSA2OkJmKGIpO2JyZWFrO2Nhc2UgMTI6dGYoYil9YT1hLnJldHVybn1NZz1udWxsO1E9MDtOZz0hMTtQPW51bGx9XG5mdW5jdGlvbiBRZyhhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXt2YXIgZT1iO2I9YTt2YXIgZj1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDE6YnJlYWs7Y2FzZSAyOk0oYi50eXBlKSYmSWUoYik7YnJlYWs7Y2FzZSAzOk0oYi50eXBlLl9yZWFjdFJlc3VsdCkmJkllKGIpO2JyZWFrO2Nhc2UgNTpCZihiKTtKZShiKTtmPWIuc3RhdGVOb2RlO2YucGVuZGluZ0NvbnRleHQmJihmLmNvbnRleHQ9Zi5wZW5kaW5nQ29udGV4dCxmLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZCkkZihiKSxiLmVmZmVjdFRhZyY9LTM7cmcoYik7YnJlYWs7Y2FzZSA3OkRmKGIpO3ZhciBnPXpmKHlmLmN1cnJlbnQpLGs9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIGg9ZS5tZW1vaXplZFByb3BzO2lmKGghPT1mKXt2YXIgbD1cbmIuc3RhdGVOb2RlLG09emYoTi5jdXJyZW50KSx0PWwseD1rO3ZhciB6PWg7dmFyIHk9ZjtsPWc7dmFyIHU9bnVsbDtzd2l0Y2goeCl7Y2FzZSBcImlucHV0XCI6ej16Yyh0LHopO3k9emModCx5KTt1PVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjp6PWRlKHQseik7eT1kZSh0LHkpO3U9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOno9bih7fSx6LHt2YWx1ZTp2b2lkIDB9KTt5PW4oe30seSx7dmFsdWU6dm9pZCAwfSk7dT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp6PWZlKHQseik7eT1mZSh0LHkpO3U9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2Ygei5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgeS5vbkNsaWNrJiYodC5vbmNsaWNrPXdlKX10ZSh4LHkpO3g9dD12b2lkIDA7dmFyIHY9bnVsbDtmb3IodCBpbiB6KWlmKCF5Lmhhc093blByb3BlcnR5KHQpJiZ6Lmhhc093blByb3BlcnR5KHQpJiZudWxsIT16W3RdKWlmKFwic3R5bGVcIj09PXQpe3ZhciByPXpbdF07Zm9yKHggaW4gcilyLmhhc093blByb3BlcnR5KHgpJiZcbih2fHwodj17fSksdlt4XT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09dCYmXCJjaGlsZHJlblwiIT09dCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PXQmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT10JiZcImF1dG9Gb2N1c1wiIT09dCYmKHNhLmhhc093blByb3BlcnR5KHQpP3V8fCh1PVtdKToodT11fHxbXSkucHVzaCh0LG51bGwpKTtmb3IodCBpbiB5KXt2YXIgcD15W3RdO3I9bnVsbCE9ej96W3RdOnZvaWQgMDtpZih5Lmhhc093blByb3BlcnR5KHQpJiZwIT09ciYmKG51bGwhPXB8fG51bGwhPXIpKWlmKFwic3R5bGVcIj09PXQpaWYocil7Zm9yKHggaW4gcikhci5oYXNPd25Qcm9wZXJ0eSh4KXx8cCYmcC5oYXNPd25Qcm9wZXJ0eSh4KXx8KHZ8fCh2PXt9KSx2W3hdPVwiXCIpO2Zvcih4IGluIHApcC5oYXNPd25Qcm9wZXJ0eSh4KSYmclt4XSE9PXBbeF0mJih2fHwodj17fSksdlt4XT1wW3hdKX1lbHNlIHZ8fCh1fHwodT1bXSksdS5wdXNoKHQsXG52KSksdj1wO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT10PyhwPXA/cC5fX2h0bWw6dm9pZCAwLHI9cj9yLl9faHRtbDp2b2lkIDAsbnVsbCE9cCYmciE9PXAmJih1PXV8fFtdKS5wdXNoKHQsXCJcIitwKSk6XCJjaGlsZHJlblwiPT09dD9yPT09cHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBwJiZcIm51bWJlclwiIT09dHlwZW9mIHB8fCh1PXV8fFtdKS5wdXNoKHQsXCJcIitwKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09dCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PXQmJihzYS5oYXNPd25Qcm9wZXJ0eSh0KT8obnVsbCE9cCYmdmUobCx0KSx1fHxyPT09cHx8KHU9W10pKToodT11fHxbXSkucHVzaCh0LHApKX12JiYodT11fHxbXSkucHVzaChcInN0eWxlXCIsdik7c2coZSxiLHUsayxoLGYsZyxtKX1lLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBpZihmKXt1PXpmKE4uY3VycmVudCk7aWYoJGYoYikpe2Y9YjtsPWYuc3RhdGVOb2RlO2U9Zi50eXBlO1xuaD1mLm1lbW9pemVkUHJvcHM7bT1nO2xbSWFdPWY7bFtKYV09aDtrPXZvaWQgMDtnPWw7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixnKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IobD0wO2w8ZmIubGVuZ3RoO2wrKylIKGZiW2xdLGcpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpIKFwiZXJyb3JcIixnKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixnKTtIKFwibG9hZFwiLGcpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIsZyk7SChcInN1Ym1pdFwiLGcpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SChcInRvZ2dsZVwiLGcpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJjKGcsaCk7SChcImludmFsaWRcIixnKTt2ZShtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmcuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFoLm11bHRpcGxlfTtIKFwiaW52YWxpZFwiLGcpO3ZlKG0sXCJvbkNoYW5nZVwiKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmdlKGcsaCksSChcImludmFsaWRcIixnKSx2ZShtLFwib25DaGFuZ2VcIil9dGUoZSxoKTtsPW51bGw7Zm9yKGsgaW4gaCloLmhhc093blByb3BlcnR5KGspJiYodT1oW2tdLFwiY2hpbGRyZW5cIj09PWs/XCJzdHJpbmdcIj09PXR5cGVvZiB1P2cudGV4dENvbnRlbnQhPT11JiYobD1bXCJjaGlsZHJlblwiLHVdKTpcIm51bWJlclwiPT09dHlwZW9mIHUmJmcudGV4dENvbnRlbnQhPT1cIlwiK3UmJihsPVtcImNoaWxkcmVuXCIsXCJcIit1XSk6c2EuaGFzT3duUHJvcGVydHkoaykmJm51bGwhPXUmJnZlKG0saykpO3N3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjpXYihnKTtGYyhnLGgsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOldiKGcpO2llKGcsaCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihnLm9uY2xpY2s9d2UpfWs9bDtmLnVwZGF0ZVF1ZXVlPWs7Zj1udWxsIT09az8hMDohMTtcbmYmJnFnKGIpfWVsc2V7aD1iO2U9azttPWY7bD05PT09Zy5ub2RlVHlwZT9nOmcub3duZXJEb2N1bWVudDt1PT09amUuaHRtbCYmKHU9a2UoZSkpO3U9PT1qZS5odG1sP1wic2NyaXB0XCI9PT1lPyhlPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGw9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIG0uaXM/bD1sLmNyZWF0ZUVsZW1lbnQoZSx7aXM6bS5pc30pOihsPWwuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmbS5tdWx0aXBsZSYmKGwubXVsdGlwbGU9ITApKTpsPWwuY3JlYXRlRWxlbWVudE5TKHUsZSk7ZT1sO2VbSWFdPWg7ZVtKYV09ZjthOmZvcihoPWUsbT1iLGw9bS5jaGlsZDtudWxsIT09bDspe2lmKDc9PT1sLnRhZ3x8OD09PWwudGFnKWguYXBwZW5kQ2hpbGQobC5zdGF0ZU5vZGUpO2Vsc2UgaWYoNiE9PWwudGFnJiZudWxsIT09bC5jaGlsZCl7bC5jaGlsZC5yZXR1cm49XG5sO2w9bC5jaGlsZDtjb250aW51ZX1pZihsPT09bSlicmVhaztmb3IoO251bGw9PT1sLnNpYmxpbmc7KXtpZihudWxsPT09bC5yZXR1cm58fGwucmV0dXJuPT09bSlicmVhayBhO2w9bC5yZXR1cm59bC5zaWJsaW5nLnJldHVybj1sLnJldHVybjtsPWwuc2libGluZ31tPWU7bD1rO2g9Zjt0PWc7dj11ZShsLGgpO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkgoXCJsb2FkXCIsbSk7Zz1oO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihnPTA7ZzxmYi5sZW5ndGg7ZysrKUgoZmJbZ10sbSk7Zz1oO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpIKFwiZXJyb3JcIixtKTtnPWg7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6SChcImVycm9yXCIsbSk7SChcImxvYWRcIixtKTtnPWg7YnJlYWs7Y2FzZSBcImZvcm1cIjpIKFwicmVzZXRcIixtKTtIKFwic3VibWl0XCIsbSk7Zz1oO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SChcInRvZ2dsZVwiLG0pO2c9aDticmVhaztcbmNhc2UgXCJpbnB1dFwiOkJjKG0saCk7Zz16YyhtLGgpO0goXCJpbnZhbGlkXCIsbSk7dmUodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpnPWRlKG0saCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOm0uX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFoLm11bHRpcGxlfTtnPW4oe30saCx7dmFsdWU6dm9pZCAwfSk7SChcImludmFsaWRcIixtKTt2ZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Z2UobSxoKTtnPWZlKG0saCk7SChcImludmFsaWRcIixtKTt2ZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpnPWh9dGUobCxnKTt1PXZvaWQgMDt6PWw7eT1tO3g9Zztmb3IodSBpbiB4KXguaGFzT3duUHJvcGVydHkodSkmJihyPXhbdV0sXCJzdHlsZVwiPT09dT9yZSh5LHIpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PXU/KHI9cj9yLl9faHRtbDp2b2lkIDAsbnVsbCE9ciYmbmUoeSxyKSk6XCJjaGlsZHJlblwiPT09dT9cInN0cmluZ1wiPT09dHlwZW9mIHI/KFwidGV4dGFyZWFcIiE9PVxuenx8XCJcIiE9PXIpJiZvZSh5LHIpOlwibnVtYmVyXCI9PT10eXBlb2YgciYmb2UoeSxcIlwiK3IpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT11JiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09dSYmXCJhdXRvRm9jdXNcIiE9PXUmJihzYS5oYXNPd25Qcm9wZXJ0eSh1KT9udWxsIT1yJiZ2ZSh0LHUpOm51bGwhPXImJnhjKHksdSxyLHYpKSk7c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOldiKG0pO0ZjKG0saCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6V2IobSk7aWUobSxoKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9aC52YWx1ZSYmbS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIreWMoaC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpnPW07Zy5tdWx0aXBsZT0hIWgubXVsdGlwbGU7bT1oLnZhbHVlO251bGwhPW0/ZWUoZywhIWgubXVsdGlwbGUsbSwhMSk6bnVsbCE9aC5kZWZhdWx0VmFsdWUmJmVlKGcsISFoLm11bHRpcGxlLGguZGVmYXVsdFZhbHVlLCEwKTticmVhaztcbmRlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGcub25DbGljayYmKG0ub25jbGljaz13ZSl9KGY9emUoayxmKSkmJnFnKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/dyhcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA4OmUmJm51bGwhPWIuc3RhdGVOb2RlP3RnKGUsYixlLm1lbW9pemVkUHJvcHMsZik6KFwic3RyaW5nXCIhPT10eXBlb2YgZiYmKG51bGw9PT1iLnN0YXRlTm9kZT93KFwiMTY2XCIpOnZvaWQgMCksZz16Zih5Zi5jdXJyZW50KSx6ZihOLmN1cnJlbnQpLCRmKGIpPyhmPWIsaz1mLnN0YXRlTm9kZSxnPWYubWVtb2l6ZWRQcm9wcyxrW0lhXT1mLChmPWsubm9kZVZhbHVlIT09ZykmJnFnKGIpKTooaz1iLGY9KDk9PT1nLm5vZGVUeXBlP2c6Zy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShmKSxmW0lhXT1rLGIuc3RhdGVOb2RlPWYpKTticmVhaztjYXNlIDEzOmNhc2UgMTQ6YnJlYWs7XG5jYXNlIDE2OmJyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDEwOmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSA2OkJmKGIpO3JnKGIpO2JyZWFrO2Nhc2UgMTI6dGYoYik7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDQ6dyhcIjE2N1wiKTtkZWZhdWx0OncoXCIxNTZcIil9Yj1QPW51bGw7Zj1hO2lmKDEwNzM3NDE4MjM9PT1RfHwxMDczNzQxODIzIT09Zi5jaGlsZEV4cGlyYXRpb25UaW1lKXtrPTA7Zm9yKGc9Zi5jaGlsZDtudWxsIT09Zzspe2U9Zy5leHBpcmF0aW9uVGltZTtoPWcuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwPT09a3x8MCE9PWUmJmU8aylrPWU7aWYoMD09PWt8fDAhPT1oJiZoPGspaz1oO2c9Zy5zaWJsaW5nfWYuY2hpbGRFeHBpcmF0aW9uVGltZT1rfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmXG4obnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPUdnKGEsUSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj01MTEsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTUxMil9aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9cGcoYS5hbHRlcm5hdGUsYSxRKTtudWxsPT09YiYmKGI9UWcoYSkpO0lnLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtMZz93KFwiMjQzXCIpOnZvaWQgMDtMZz0hMDtJZy5jdXJyZW50RGlzcGF0Y2hlcj1IZzt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1RfHxhIT09TWd8fG51bGw9PT1QKVBnKCksTWc9YSxRPWQsUD1VZShNZy5jdXJyZW50LG51bGwsUSksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1QJiYhVGcoKTspUD1SZyhQKTtlbHNlIGZvcig7bnVsbCE9PVA7KVA9UmcoUCl9Y2F0Y2godCl7aWYobnVsbD09PVApZT0hMCxEZyh0KTtlbHNle251bGw9PT1QP3coXCIyNzFcIik6dm9pZCAwO3ZhciBmPVAsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLERnKHQpO2Vsc2V7YTp7dmFyIGs9ZyxoPWYsbD10O2c9UTtoLmVmZmVjdFRhZ3w9NTEyO2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7Tmc9ITA7bD1uZihsLGgpO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSA1OmsuZWZmZWN0VGFnfD1cbjEwMjQ7ay5leHBpcmF0aW9uVGltZT1nO2c9Q2coayxsLGcpO2dmKGssZyk7YnJlYWsgYTtjYXNlIDI6Y2FzZSAzOmg9bDt2YXIgbT1rLnN0YXRlTm9kZTtpZigwPT09KGsuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PW0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZnfHwhRmcuaGFzKG0pKSl7ay5lZmZlY3RUYWd8PTEwMjQ7ay5leHBpcmF0aW9uVGltZT1nO2c9RWcoayxoLGcpO2dmKGssZyk7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9UD1RZyhmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO0xnPSExO3JmPXFmPXBmPUlnLmN1cnJlbnREaXNwYXRjaGVyPW51bGw7aWYoZSlNZz1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09UClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yj1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1iP3coXCIyODFcIik6dm9pZCAwO01nPW51bGw7aWYoTmcpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtcbmY9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPmR8fDAhPT1mJiZmPmR8fDAhPT1nJiZnPmQpe2EuZGlkRXJyb3I9ITE7Yz1hLmxhdGVzdFBpbmdlZFRpbWU7MCE9PWMmJmM8PWQmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7Yz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7Yj1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1kP2EuZWFybGllc3RQZW5kaW5nVGltZT1iPT09ZD9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YjpiPT09ZCYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtiPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9ZDpjPmQ/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9ZDpiPGQmJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9ZCk7JGUoZCxhKTthLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZcbiFjKXthLmRpZEVycm9yPSEwO2EubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtkPWEuZXhwaXJhdGlvblRpbWU9MTthLmV4cGlyYXRpb25UaW1lPWQ7cmV0dXJufX1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1kO2EuZmluaXNoZWRXb3JrPWJ9fVxuZnVuY3Rpb24gd2coYSxiKXt2YXIgYzthOntMZyYmIU9nP3coXCIyNjNcIik6dm9pZCAwO2ZvcihjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6Y2FzZSAzOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GZ3x8IUZnLmhhcyhkKSkpe2E9bmYoYixhKTthPUVnKGMsYSwxKTtmZihjLGEpO0lmKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDU6YT1uZihiLGEpO2E9Q2coYyxhLDEpO2ZmKGMsYSk7SWYoYywxKTtjPXZvaWQgMDticmVhayBhfWM9Yy5yZXR1cm59NT09PWEudGFnJiYoYz1uZihiLGEpLGM9Q2coYSxjLDEpLGZmKGEsYyksSWYoYSwxKSk7Yz12b2lkIDB9cmV0dXJuIGN9XG5mdW5jdGlvbiBIZihhLGIpezAhPT1LZz9hPUtnOkxnP2E9T2c/MTpROmIubW9kZSYxPyhhPVVnPzIrMTAqKCgoYS0yKzE1KS8xMHwwKSsxKToyKzI1KigoKGEtMis1MDApLzI1fDApKzEpLG51bGwhPT1NZyYmYT09PVEmJihhKz0xKSk6YT0xO1VnJiYoMD09PVZnfHxhPlZnKSYmKFZnPWEpO3JldHVybiBhfVxuZnVuY3Rpb24gSWYoYSxiKXthOntpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKDA9PT1jLmV4cGlyYXRpb25UaW1lfHxjLmV4cGlyYXRpb25UaW1lPmIpJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybjtpZihudWxsPT09ZCYmNT09PWEudGFnKWE9YS5zdGF0ZU5vZGU7ZWxzZXtmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtpZigwPT09ZC5jaGlsZEV4cGlyYXRpb25UaW1lfHxkLmNoaWxkRXhwaXJhdGlvblRpbWU+YilkLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtudWxsIT09YyYmKDA9PT1jLmNoaWxkRXhwaXJhdGlvblRpbWV8fGMuY2hpbGRFeHBpcmF0aW9uVGltZT5iKSYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjU9PT1kLnRhZyl7YT1kLnN0YXRlTm9kZTticmVhayBhfWQ9ZC5yZXR1cm59YT1udWxsfX1pZihudWxsIT09XG5hKXshTGcmJjAhPT1RJiZiPFEmJlBnKCk7WmUoYSxiKTtpZighTGd8fE9nfHxNZyE9PWEpe2I9YTthPWEuZXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWIubmV4dFNjaGVkdWxlZFJvb3QpYi5leHBpcmF0aW9uVGltZT1hLG51bGw9PT1UPyhVPVQ9YixiLm5leHRTY2hlZHVsZWRSb290PWIpOihUPVQubmV4dFNjaGVkdWxlZFJvb3Q9YixULm5leHRTY2hlZHVsZWRSb290PVUpO2Vsc2UgaWYoYz1iLmV4cGlyYXRpb25UaW1lLDA9PT1jfHxhPGMpYi5leHBpcmF0aW9uVGltZT1hO1Z8fChXP1dnJiYoWT1iLFo9MSxYZyhiLDEsITApKToxPT09YT9ZZygxLG51bGwpOlpnKGIsYSkpfSRnPmFoJiYoJGc9MCx3KFwiMTg1XCIpKX19ZnVuY3Rpb24gYmgoYSxiLGMsZCxlKXt2YXIgZj1LZztLZz0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e0tnPWZ9fVxudmFyIFU9bnVsbCxUPW51bGwsY2g9MCxkaD12b2lkIDAsVj0hMSxZPW51bGwsWj0wLFZnPTAsZWg9ITEsZmg9ITEsZ2g9bnVsbCxoaD1udWxsLFc9ITEsV2c9ITEsVWc9ITEsaWg9bnVsbCxqaD1iYS51bnN0YWJsZV9ub3coKSxraD0oamgvMTB8MCkrMixsaD1raCxhaD01MCwkZz0wLG1oPW51bGwsbmg9MTtmdW5jdGlvbiBvaCgpe2toPSgoYmEudW5zdGFibGVfbm93KCktamgpLzEwfDApKzJ9ZnVuY3Rpb24gWmcoYSxiKXtpZigwIT09Y2gpe2lmKGI+Y2gpcmV0dXJuO251bGwhPT1kaCYmYmEudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yayhkaCl9Y2g9YjthPWJhLnVuc3RhYmxlX25vdygpLWpoO2RoPWJhLnVuc3RhYmxlX3NjaGVkdWxlV29yayhwaCx7dGltZW91dDoxMCooYi0yKS1hfSl9ZnVuY3Rpb24gR2YoKXtpZihWKXJldHVybiBsaDtxaCgpO2lmKDA9PT1afHwxMDczNzQxODIzPT09WilvaCgpLGxoPWtoO3JldHVybiBsaH1cbmZ1bmN0aW9uIHFoKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVQpZm9yKHZhciBjPVQsZD1VO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1UP3coXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtVPVQ9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PVUpVT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVC5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1UKXtUPWM7VC5uZXh0U2NoZWR1bGVkUm9vdD1VO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1UKWJyZWFrO2lmKDE9PT1hKWJyZWFrO1xuYz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19WT1iO1o9YX1mdW5jdGlvbiBwaChhKXtpZihhLmRpZFRpbWVvdXQmJm51bGwhPT1VKXtvaCgpO3ZhciBiPVU7ZG97dmFyIGM9Yi5leHBpcmF0aW9uVGltZTswIT09YyYma2g+PWMmJihiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWtoKTtiPWIubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYiE9PVUpfVlnKDAsYSl9XG5mdW5jdGlvbiBZZyhhLGIpe2hoPWI7cWgoKTtpZihudWxsIT09aGgpZm9yKG9oKCksbGg9a2g7bnVsbCE9PVkmJjAhPT1aJiYoMD09PWF8fGE+PVopJiYoIWVofHxraD49Wik7KVhnKFksWixraD49WikscWgoKSxvaCgpLGxoPWtoO2Vsc2UgZm9yKDtudWxsIT09WSYmMCE9PVomJigwPT09YXx8YT49Wik7KVhnKFksWiwhMCkscWgoKTtudWxsIT09aGgmJihjaD0wLGRoPW51bGwpOzAhPT1aJiZaZyhZLFopO2hoPW51bGw7ZWg9ITE7JGc9MDttaD1udWxsO2lmKG51bGwhPT1paClmb3IoYT1paCxpaD1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe2ZofHwoZmg9ITAsZ2g9ZCl9fWlmKGZoKXRocm93IGE9Z2gsZ2g9bnVsbCxmaD0hMSxhO31cbmZ1bmN0aW9uIFhnKGEsYixjKXtWP3coXCIyNDVcIik6dm9pZCAwO1Y9ITA7aWYobnVsbD09PWhofHxjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9yaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsU2coYSwhMSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiZyaChhLGQsYikpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9yaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsU2coYSwhMCxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoVGcoKT9hLmZpbmlzaGVkV29yaz1kOnJoKGEsZCxiKSkpO1Y9ITF9XG5mdW5jdGlvbiByaChhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1paD9paD1bZF06aWgucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT1taD8kZysrOihtaD1hLCRnPTApO09nPUxnPSEwO2EuY3VycmVudD09PWI/dyhcIjE3N1wiKTp2b2lkIDA7Yz1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09Yz93KFwiMjYxXCIpOnZvaWQgMDthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO2Q9Yi5leHBpcmF0aW9uVGltZTt2YXIgZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU7ZD0wPT09ZHx8MCE9PWUmJmU8ZD9lOmQ7YS5kaWRFcnJvcj0hMTswPT09ZD8oYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPVxuMCxhLmxhdGVzdFBpbmdlZFRpbWU9MCk6KGU9YS5sYXRlc3RQZW5kaW5nVGltZSwwIT09ZSYmKGU8ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZTxkJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKSxlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLDA9PT1lP1plKGEsZCk6ZD5hLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsWmUoYSxkKSk6ZDxlJiZaZShhLGQpKTskZSgwLGEpO0lnLmN1cnJlbnQ9bnVsbDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3hlPUdkO2U9VGQoKTtpZihVZChlKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZSl2YXIgZj1cbntzdGFydDplLnNlbGVjdGlvblN0YXJ0LGVuZDplLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntmPShmPWUub3duZXJEb2N1bWVudCkmJmYuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZz1mLmdldFNlbGVjdGlvbiYmZi5nZXRTZWxlY3Rpb24oKTtpZihnJiYwIT09Zy5yYW5nZUNvdW50KXtmPWcuYW5jaG9yTm9kZTt2YXIgaz1nLmFuY2hvck9mZnNldCxoPWcuZm9jdXNOb2RlO2c9Zy5mb2N1c09mZnNldDt0cnl7Zi5ub2RlVHlwZSxoLm5vZGVUeXBlfWNhdGNoKFhhKXtmPW51bGw7YnJlYWsgYX12YXIgbD0wLG09LTEsdD0tMSx4PTAsej0wLHk9ZSx1PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdjs7KXt5IT09Znx8MCE9PWsmJjMhPT15Lm5vZGVUeXBlfHwobT1sK2spO3khPT1ofHwwIT09ZyYmMyE9PXkubm9kZVR5cGV8fCh0PWwrZyk7Mz09PXkubm9kZVR5cGUmJihsKz15Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odj15LmZpcnN0Q2hpbGQpKWJyZWFrO3U9eTt5PXZ9Zm9yKDs7KXtpZih5PT09XG5lKWJyZWFrIGI7dT09PWYmJisreD09PWsmJihtPWwpO3U9PT1oJiYrK3o9PT1nJiYodD1sKTtpZihudWxsIT09KHY9eS5uZXh0U2libGluZykpYnJlYWs7eT11O3U9eS5wYXJlbnROb2RlfXk9dn1mPS0xPT09bXx8LTE9PT10P251bGw6e3N0YXJ0Om0sZW5kOnR9fWVsc2UgZj1udWxsfWY9Znx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZj1udWxsO3llPXtmb2N1c2VkRWxlbTplLHNlbGVjdGlvblJhbmdlOmZ9O0dkPSExO2ZvcihSPWQ7bnVsbCE9PVI7KXtlPSExO2Y9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1SOyl7aWYoUi5lZmZlY3RUYWcmMjU2KXt2YXIgcj1SLmFsdGVybmF0ZTthOnN3aXRjaChrPVIsay50YWcpe2Nhc2UgMjpjYXNlIDM6aWYoay5lZmZlY3RUYWcmMjU2JiZudWxsIT09cil7dmFyIHA9ci5tZW1vaXplZFByb3BzLEQ9ci5tZW1vaXplZFN0YXRlLFM9ay5zdGF0ZU5vZGU7Uy5wcm9wcz1rLm1lbW9pemVkUHJvcHM7Uy5zdGF0ZT1rLm1lbW9pemVkU3RhdGU7dmFyIHloPVMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocCxcbkQpO1MuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9eWh9YnJlYWsgYTtjYXNlIDU6Y2FzZSA3OmNhc2UgODpjYXNlIDY6YnJlYWsgYTtkZWZhdWx0OncoXCIxNjNcIil9fVI9Ui5uZXh0RWZmZWN0fX1jYXRjaChYYSl7ZT0hMCxmPVhhfWUmJihudWxsPT09Uj93KFwiMTc4XCIpOnZvaWQgMCx3ZyhSLGYpLG51bGwhPT1SJiYoUj1SLm5leHRFZmZlY3QpKX1mb3IoUj1kO251bGwhPT1SOyl7cj0hMTtwPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09Ujspe3ZhciBBPVIuZWZmZWN0VGFnO0EmMTYmJm9lKFIuc3RhdGVOb2RlLFwiXCIpO2lmKEEmMTI4KXt2YXIgQj1SLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHE9Qi5yZWY7bnVsbCE9PXEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgcT9xKG51bGwpOnEuY3VycmVudD1udWxsKX19c3dpdGNoKEEmMTQpe2Nhc2UgMjpBZyhSKTtSLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OkFnKFIpO1IuZWZmZWN0VGFnJj0tMztCZyhSLmFsdGVybmF0ZSxcblIpO2JyZWFrO2Nhc2UgNDpCZyhSLmFsdGVybmF0ZSxSKTticmVhaztjYXNlIDg6RD1SLHlnKEQpLEQucmV0dXJuPW51bGwsRC5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlJiYoRC5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZS5yZXR1cm49bnVsbCl9Uj1SLm5leHRFZmZlY3R9fWNhdGNoKFhhKXtyPSEwLHA9WGF9ciYmKG51bGw9PT1SP3coXCIxNzhcIik6dm9pZCAwLHdnKFIscCksbnVsbCE9PVImJihSPVIubmV4dEVmZmVjdCkpfXE9eWU7Qj1UZCgpO0E9cS5mb2N1c2VkRWxlbTtwPXEuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PUEmJkEmJkEub3duZXJEb2N1bWVudCYmU2QoQS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxBKSl7bnVsbCE9PXAmJlVkKEEpJiYoQj1wLnN0YXJ0LHE9cC5lbmQsdm9pZCAwPT09cSYmKHE9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gQT8oQS5zZWxlY3Rpb25TdGFydD1CLEEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHEsQS52YWx1ZS5sZW5ndGgpKTpcbihyPUEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQsQj0ocj9yLmRlZmF1bHRWaWV3OndpbmRvdykuZ2V0U2VsZWN0aW9uKCksRD1BLnRleHRDb250ZW50Lmxlbmd0aCxxPU1hdGgubWluKHAuc3RhcnQsRCkscD12b2lkIDA9PT1wLmVuZD9xOk1hdGgubWluKHAuZW5kLEQpLCFCLmV4dGVuZCYmcT5wJiYoRD1wLHA9cSxxPUQpLEQ9UmQoQSxxKSxTPVJkKEEscCksRCYmUyYmKDEhPT1CLnJhbmdlQ291bnR8fEIuYW5jaG9yTm9kZSE9PUQubm9kZXx8Qi5hbmNob3JPZmZzZXQhPT1ELm9mZnNldHx8Qi5mb2N1c05vZGUhPT1TLm5vZGV8fEIuZm9jdXNPZmZzZXQhPT1TLm9mZnNldCkmJihyPXIuY3JlYXRlUmFuZ2UoKSxyLnNldFN0YXJ0KEQubm9kZSxELm9mZnNldCksQi5yZW1vdmVBbGxSYW5nZXMoKSxxPnA/KEIuYWRkUmFuZ2UociksQi5leHRlbmQoUy5ub2RlLFMub2Zmc2V0KSk6KHIuc2V0RW5kKFMubm9kZSxTLm9mZnNldCksQi5hZGRSYW5nZShyKSkpKSk7Qj1bXTtmb3IocT1BO3E9cS5wYXJlbnROb2RlOykxPT09XG5xLm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6cSxsZWZ0OnEuc2Nyb2xsTGVmdCx0b3A6cS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5mb2N1cyYmQS5mb2N1cygpO2ZvcihBPTA7QTxCLmxlbmd0aDtBKyspcT1CW0FdLHEuZWxlbWVudC5zY3JvbGxMZWZ0PXEubGVmdCxxLmVsZW1lbnQuc2Nyb2xsVG9wPXEudG9wfXllPW51bGw7R2Q9ISF4ZTt4ZT1udWxsO2EuY3VycmVudD1iO2ZvcihSPWQ7bnVsbCE9PVI7KXtkPSExO0E9dm9pZCAwO3RyeXtmb3IoQj1jO251bGwhPT1SOyl7dmFyIFNhPVIuZWZmZWN0VGFnO2lmKFNhJjM2KXt2YXIgb2M9Ui5hbHRlcm5hdGU7cT1SO3I9Qjtzd2l0Y2gocS50YWcpe2Nhc2UgMjpjYXNlIDM6dmFyIFg9cS5zdGF0ZU5vZGU7aWYocS5lZmZlY3RUYWcmNClpZihudWxsPT09b2MpWC5wcm9wcz1xLm1lbW9pemVkUHJvcHMsWC5zdGF0ZT1xLm1lbW9pemVkU3RhdGUsWC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIEloPW9jLm1lbW9pemVkUHJvcHMsXG5KaD1vYy5tZW1vaXplZFN0YXRlO1gucHJvcHM9cS5tZW1vaXplZFByb3BzO1guc3RhdGU9cS5tZW1vaXplZFN0YXRlO1guY29tcG9uZW50RGlkVXBkYXRlKEloLEpoLFguX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBrZz1xLnVwZGF0ZVF1ZXVlO251bGwhPT1rZyYmKFgucHJvcHM9cS5tZW1vaXplZFByb3BzLFguc3RhdGU9cS5tZW1vaXplZFN0YXRlLGxmKHEsa2csWCxyKSk7YnJlYWs7Y2FzZSA1OnZhciBsZz1xLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sZyl7cD1udWxsO2lmKG51bGwhPT1xLmNoaWxkKXN3aXRjaChxLmNoaWxkLnRhZyl7Y2FzZSA3OnA9cS5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAyOmNhc2UgMzpwPXEuY2hpbGQuc3RhdGVOb2RlfWxmKHEsbGcscCxyKX1icmVhaztjYXNlIDc6dmFyIEtoPXEuc3RhdGVOb2RlO251bGw9PT1vYyYmcS5lZmZlY3RUYWcmNCYmemUocS50eXBlLHEubWVtb2l6ZWRQcm9wcykmJktoLmZvY3VzKCk7YnJlYWs7XG5jYXNlIDg6YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OncoXCIxNjNcIil9fWlmKFNhJjEyOCl7dmFyIEFjPVIucmVmO2lmKG51bGwhPT1BYyl7dmFyIG1nPVIuc3RhdGVOb2RlO3N3aXRjaChSLnRhZyl7Y2FzZSA3OnZhciBPZD1tZzticmVhaztkZWZhdWx0Ok9kPW1nfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBBYz9BYyhPZCk6QWMuY3VycmVudD1PZH19dmFyIExoPVIubmV4dEVmZmVjdDtSLm5leHRFZmZlY3Q9bnVsbDtSPUxofX1jYXRjaChYYSl7ZD0hMCxBPVhhfWQmJihudWxsPT09Uj93KFwiMTc4XCIpOnZvaWQgMCx3ZyhSLEEpLG51bGwhPT1SJiYoUj1SLm5leHRFZmZlY3QpKX1MZz1PZz0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgT2UmJk9lKGIuc3RhdGVOb2RlKTtTYT1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9MD09PVNhfHwwIT09YiYmYjxTYT9iOlNhOzA9PT1iJiYoRmc9bnVsbCk7YS5leHBpcmF0aW9uVGltZT1cbmI7YS5maW5pc2hlZFdvcms9bnVsbH1mdW5jdGlvbiBUZygpe3JldHVybiBlaD8hMDpudWxsPT09aGh8fGhoLnRpbWVSZW1haW5pbmcoKT5uaD8hMTplaD0hMH1mdW5jdGlvbiBEZyhhKXtudWxsPT09WT93KFwiMjQ2XCIpOnZvaWQgMDtZLmV4cGlyYXRpb25UaW1lPTA7Zmh8fChmaD0hMCxnaD1hKX1mdW5jdGlvbiBzaChhLGIpe3ZhciBjPVc7Vz0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoVz1jKXx8Vnx8WWcoMSxudWxsKX19ZnVuY3Rpb24gdGgoYSxiKXtpZihXJiYhV2cpe1dnPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1dnPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiB1aChhLGIsYyl7aWYoVWcpcmV0dXJuIGEoYixjKTtXfHxWfHwwPT09Vmd8fChZZyhWZyxudWxsKSxWZz0wKTt2YXIgZD1VZyxlPVc7Vz1VZz0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e1VnPWQsKFc9ZSl8fFZ8fFlnKDEsbnVsbCl9fVxuZnVuY3Rpb24gdmgoYSl7aWYoIWEpcmV0dXJuIEZlO2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2E6ezIhPT1qZChhKXx8MiE9PWEudGFnJiYzIT09YS50YWc/dyhcIjE3MFwiKTp2b2lkIDA7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgNTpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDI6aWYoTShiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmlmKE0oYi50eXBlLl9yZWFjdFJlc3VsdCkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dyhcIjE3MVwiKTtiPXZvaWQgMH1pZigyPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihNKGMpKXJldHVybiBMZShhLGMsYil9ZWxzZSBpZigzPT09YS50YWcmJihjPWEudHlwZS5fcmVhY3RSZXN1bHQsTShjKSkpcmV0dXJuIExlKGEsXG5jLGIpO3JldHVybiBifWZ1bmN0aW9uIHdoKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2M9dmgoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9ZGYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2ZmKGYsZSk7SWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiB4aChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZigpO2U9SGYoZixlKTtyZXR1cm4gd2goYSxiLGMsZSxkKX1mdW5jdGlvbiB6aChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNzpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gQWgoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjphYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkZiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RGMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPU5hKGQpO2U/dm9pZCAwOncoXCI5MFwiKTtYYihkKTtEYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmVlKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBCaChhKXt2YXIgYj0yKzI1KigoKEdmKCktMis1MDApLzI1fDApKzEpO2I8PUpnJiYoYj1KZysxKTt0aGlzLl9leHBpcmF0aW9uVGltZT1KZz1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9QmgucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6dyhcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IENoO3doKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbkJoLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbkJoLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDp3KFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP3coXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7Yj1jO1Y/dyhcIjI1M1wiKTp2b2lkIDA7WT1hO1o9YjtYZyhhLGIsITApO1lnKDEsbnVsbCk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1cbmImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PW51bGwsdGhpcy5fZGVmZXI9ITF9O0JoLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBDaCgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfUNoLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5DaC5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz93KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIERoKGEsYixjKXtiPW5ldyBTZSg1LG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLGRpZEVycm9yOiExLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLHRpbWVvdXRIYW5kbGU6LTEsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOjAsZXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07dGhpcy5faW50ZXJuYWxSb290PWIuc3RhdGVOb2RlPWF9XG5EaC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IENoO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTt4aChhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O0RoLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBDaDthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7eGgobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtEaC5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgQ2g7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO3hoKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5EaC5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgQmgodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBFaChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9TGI9c2g7TWI9dWg7TmI9ZnVuY3Rpb24oKXtWfHwwPT09Vmd8fChZZyhWZyxudWxsKSxWZz0wKX07XG5mdW5jdGlvbiBGaChhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IERoKGEsITEsYil9XG5mdW5jdGlvbiBHaChhLGIsYyxkLGUpe0VoKGMpP3ZvaWQgMDp3KFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emgoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1GaChjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT16aChmLl9pbnRlcm5hbFJvb3QpO2suY2FsbChhKX19dGgoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIHpoKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBIaChhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO0VoKGIpP3ZvaWQgMDp3KFwiMjAwXCIpO3JldHVybiBBaChhLGIsbnVsbCxjKX1cbnZhciBNaD17Y3JlYXRlUG9ydGFsOkhoLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/dyhcIjE4OFwiKTp3KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW1kKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEdoKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBHaChudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP3coXCIzOFwiKTp2b2lkIDA7cmV0dXJuIEdoKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe0VoKGEpP1xudm9pZCAwOncoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyh0aChmdW5jdGlvbigpe0doKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEhoLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpzaCx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6dWgsZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vj93KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1XO1c9ITA7dHJ5e3JldHVybiBiaChhLGIpfWZpbmFsbHl7Vz1jLFlnKDEsbnVsbCl9fSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9VztXPSEwO3RyeXtiaChhKX1maW5hbGx5eyhXPWIpfHxWfHxZZygxLG51bGwpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbTGEsXG5NYSxOYSxxYSxVYSxmdW5jdGlvbihhKXt6YShhLFRhKX0sSmIsS2IsSWQsR2FdfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7RWgoYSk/dm9pZCAwOncoXCIyNzhcIik7cmV0dXJuIG5ldyBEaChhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19OyhmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBSZShuKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9bWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6S2EsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi41LjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgTmg9e2RlZmF1bHQ6TWh9LE9oPU5oJiZNaHx8Tmg7XG5tb2R1bGUuZXhwb3J0cz1PaC5kZWZhdWx0fHxPaDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi41LjBcbiAqIHNjaGVkdWxlLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksZj1EYXRlLGc9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsbT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLG49XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdztcbmV4cG9ydHMudW5zdGFibGVfbm93PXZvaWQgMDtpZihuKXt2YXIgcD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGYubm93KCl9O2V4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVXb3JrPXZvaWQgMDtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcms9dm9pZCAwO1xuaWYoZCl7dmFyIHE9bnVsbCxyPW51bGwsdD0tMSx1PSExLHY9ITEsdz12b2lkIDAseD12b2lkIDAseT1mdW5jdGlvbihhKXt3PWwoZnVuY3Rpb24oYil7aCh4KTthKGIpfSk7eD1nKGZ1bmN0aW9uKCl7bSh3KTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfSx6PTAsQT0zMyxCPTMzLEM9e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXotZXhwb3J0cy51bnN0YWJsZV9ub3coKTtyZXR1cm4gMDxhP2E6MH19LEU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnNjaGVkdWxlZENhbGxiYWNrLGU9ITE7dHJ5e2MoYiksZT0hMH1maW5hbGx5e2V4cG9ydHMudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yayhhKSxlfHwodT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRCxcIipcIikpfX0sRD1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT1cbndpbmRvdyYmYS5kYXRhPT09RCYmKHU9ITEsbnVsbCE9PXEpKXtpZihudWxsIT09cSl7dmFyIGI9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZighKC0xPT09dHx8dD5iKSl7YT0tMTtmb3IodmFyIGM9W10sZT1xO251bGwhPT1lOyl7dmFyIGs9ZS50aW1lb3V0VGltZTstMSE9PWsmJms8PWI/Yy5wdXNoKGUpOi0xIT09ayYmKC0xPT09YXx8azxhKSYmKGE9ayk7ZT1lLm5leHR9aWYoMDxjLmxlbmd0aClmb3IoQy5kaWRUaW1lb3V0PSEwLGI9MCxlPWMubGVuZ3RoO2I8ZTtiKyspRShjW2JdLEMpO3Q9YX19Zm9yKGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTswPHotYSYmbnVsbCE9PXE7KWE9cSxDLmRpZFRpbWVvdXQ9ITEsRShhLEMpLGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtudWxsPT09cXx8dnx8KHY9ITAseShGKSl9fSwhMSk7dmFyIEY9ZnVuY3Rpb24oYSl7dj0hMTt2YXIgYj1hLXorQjtiPEImJkE8Qj8oOD5iJiYoYj04KSxCPWI8QT9BOmIpOkE9Yjt6PWErQjt1fHwodT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRCxcblwiKlwiKSl9O2V4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVXb3JrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJihjPWV4cG9ydHMudW5zdGFibGVfbm93KCkrYi50aW1lb3V0KTtpZigtMT09PXR8fC0xIT09YyYmYzx0KXQ9YzthPXtzY2hlZHVsZWRDYWxsYmFjazphLHRpbWVvdXRUaW1lOmMscHJldjpudWxsLG5leHQ6bnVsbH07bnVsbD09PXE/cT1hOihiPWEucHJldj1yLG51bGwhPT1iJiYoYi5uZXh0PWEpKTtyPWE7dnx8KHY9ITAseShGKSk7cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yaz1mdW5jdGlvbihhKXtpZihudWxsIT09YS5wcmV2fHxxPT09YSl7dmFyIGI9YS5uZXh0LGM9YS5wcmV2O2EubmV4dD1udWxsO2EucHJldj1udWxsO251bGwhPT1iP251bGwhPT1jPyhjLm5leHQ9YixiLnByZXY9Yyk6KGIucHJldj1udWxsLHE9Yik6bnVsbCE9PWM/KGMubmV4dD1udWxsLHI9Yyk6cj1cbnE9bnVsbH19fWVsc2V7dmFyIEc9bmV3IE1hcDtleHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlV29yaz1mdW5jdGlvbihhKXt2YXIgYj17c2NoZWR1bGVkQ2FsbGJhY2s6YSx0aW1lb3V0VGltZTowLG5leHQ6bnVsbCxwcmV2Om51bGx9LGM9ZyhmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pO0cuc2V0KGEsYyk7cmV0dXJuIGJ9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yaz1mdW5jdGlvbihhKXt2YXIgYj1HLmdldChhLnNjaGVkdWxlZENhbGxiYWNrKTtHLmRlbGV0ZShhKTtoKGIpfX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCB7IHN5bSwgaXMsIGlkZW50LCBjaGVjaywgZGVwcmVjYXRlLCB1cGRhdGVJbmNlbnRpdmUsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nLCBTRUxGX0NBTkNFTExBVElPTiB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgdGFrZUV2ZXJ5SGVscGVyLCB0YWtlTGF0ZXN0SGVscGVyLCB0aHJvdHRsZUhlbHBlciB9IGZyb20gJy4vc2FnYUhlbHBlcnMnO1xuXG52YXIgSU8gPSAvKiNfX1BVUkVfXyovc3ltKCdJTycpO1xudmFyIFRBS0UgPSAnVEFLRSc7XG52YXIgUFVUID0gJ1BVVCc7XG52YXIgQUxMID0gJ0FMTCc7XG52YXIgUkFDRSA9ICdSQUNFJztcbnZhciBDQUxMID0gJ0NBTEwnO1xudmFyIENQUyA9ICdDUFMnO1xudmFyIEZPUksgPSAnRk9SSyc7XG52YXIgSk9JTiA9ICdKT0lOJztcbnZhciBDQU5DRUwgPSAnQ0FOQ0VMJztcbnZhciBTRUxFQ1QgPSAnU0VMRUNUJztcbnZhciBBQ1RJT05fQ0hBTk5FTCA9ICdBQ1RJT05fQ0hBTk5FTCc7XG52YXIgQ0FOQ0VMTEVEID0gJ0NBTkNFTExFRCc7XG52YXIgRkxVU0ggPSAnRkxVU0gnO1xudmFyIEdFVF9DT05URVhUID0gJ0dFVF9DT05URVhUJztcbnZhciBTRVRfQ09OVEVYVCA9ICdTRVRfQ09OVEVYVCc7XG5cbnZhciBURVNUX0hJTlQgPSAnXFxuKEhJTlQ6IGlmIHlvdSBhcmUgZ2V0dGluZyB0aGlzIGVycm9ycyBpbiB0ZXN0cywgY29uc2lkZXIgdXNpbmcgY3JlYXRlTW9ja1Rhc2sgZnJvbSByZWR1eC1zYWdhL3V0aWxzKSc7XG5cbnZhciBlZmZlY3QgPSBmdW5jdGlvbiBlZmZlY3QodHlwZSwgcGF5bG9hZCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW0lPXSA9IHRydWUsIF9yZWZbdHlwZV0gPSBwYXlsb2FkLCBfcmVmO1xufTtcblxuZXhwb3J0IHZhciBkZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goZWZmKSB7XG4gIGNoZWNrKGFzRWZmZWN0LmZvcmsoZWZmKSwgaXMub2JqZWN0LCAnZGV0YWNoKGVmZik6IGFyZ3VtZW50IG11c3QgYmUgYSBmb3JrIGVmZmVjdCcpO1xuICBlZmZbRk9SS10uZGV0YWNoZWQgPSB0cnVlO1xuICByZXR1cm4gZWZmO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRha2UoKSB7XG4gIHZhciBwYXR0ZXJuT3JDaGFubmVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnKic7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjaGVjayhhcmd1bWVudHNbMF0sIGlzLm5vdFVuZGVmLCAndGFrZShwYXR0ZXJuT3JDaGFubmVsKTogcGF0dGVybk9yQ2hhbm5lbCBpcyB1bmRlZmluZWQnKTtcbiAgfVxuICBpZiAoaXMucGF0dGVybihwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBlZmZlY3QoVEFLRSwgeyBwYXR0ZXJuOiBwYXR0ZXJuT3JDaGFubmVsIH0pO1xuICB9XG4gIGlmIChpcy5jaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIGVmZmVjdChUQUtFLCB7IGNoYW5uZWw6IHBhdHRlcm5PckNoYW5uZWwgfSk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCd0YWtlKHBhdHRlcm5PckNoYW5uZWwpOiBhcmd1bWVudCAnICsgU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwpICsgJyBpcyBub3QgdmFsaWQgY2hhbm5lbCBvciBhIHZhbGlkIHBhdHRlcm4nKTtcbn1cblxudGFrZS5tYXliZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVmZiA9IHRha2UuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICBlZmZbVEFLRV0ubWF5YmUgPSB0cnVlO1xuICByZXR1cm4gZWZmO1xufTtcblxuZXhwb3J0IHZhciB0YWtlbSA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGFrZS5tYXliZSwgLyojX19QVVJFX18qL3VwZGF0ZUluY2VudGl2ZSgndGFrZW0nLCAndGFrZS5tYXliZScpKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHB1dChjaGFubmVsLCBhY3Rpb24pIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgY2hlY2soY2hhbm5lbCwgaXMubm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgY2hhbm5lbCBpcyB1bmRlZmluZWQnKTtcbiAgICBjaGVjayhjaGFubmVsLCBpcy5jaGFubmVsLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50ICcgKyBjaGFubmVsICsgJyBpcyBub3QgYSB2YWxpZCBjaGFubmVsJyk7XG4gICAgY2hlY2soYWN0aW9uLCBpcy5ub3RVbmRlZiwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCBhY3Rpb24gaXMgdW5kZWZpbmVkJyk7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2soY2hhbm5lbCwgaXMubm90VW5kZWYsICdwdXQoYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICAgIGFjdGlvbiA9IGNoYW5uZWw7XG4gICAgY2hhbm5lbCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChQVVQsIHsgY2hhbm5lbDogY2hhbm5lbCwgYWN0aW9uOiBhY3Rpb24gfSk7XG59XG5cbnB1dC5yZXNvbHZlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWZmID0gcHV0LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgZWZmW1BVVF0ucmVzb2x2ZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG5wdXQuc3luYyA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUocHV0LnJlc29sdmUsIC8qI19fUFVSRV9fKi91cGRhdGVJbmNlbnRpdmUoJ3B1dC5zeW5jJywgJ3B1dC5yZXNvbHZlJykpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWxsKGVmZmVjdHMpIHtcbiAgcmV0dXJuIGVmZmVjdChBTEwsIGVmZmVjdHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFjZShlZmZlY3RzKSB7XG4gIHJldHVybiBlZmZlY3QoUkFDRSwgZWZmZWN0cyk7XG59XG5cbmZ1bmN0aW9uIGdldEZuQ2FsbERlc2MobWV0aCwgZm4sIGFyZ3MpIHtcbiAgY2hlY2soZm4sIGlzLm5vdFVuZGVmLCBtZXRoICsgJzogYXJndW1lbnQgZm4gaXMgdW5kZWZpbmVkJyk7XG5cbiAgdmFyIGNvbnRleHQgPSBudWxsO1xuICBpZiAoaXMuYXJyYXkoZm4pKSB7XG4gICAgdmFyIF9mbiA9IGZuO1xuICAgIGNvbnRleHQgPSBfZm5bMF07XG4gICAgZm4gPSBfZm5bMV07XG4gIH0gZWxzZSBpZiAoZm4uZm4pIHtcbiAgICB2YXIgX2ZuMiA9IGZuO1xuICAgIGNvbnRleHQgPSBfZm4yLmNvbnRleHQ7XG4gICAgZm4gPSBfZm4yLmZuO1xuICB9XG4gIGlmIChjb250ZXh0ICYmIGlzLnN0cmluZyhmbikgJiYgaXMuZnVuYyhjb250ZXh0W2ZuXSkpIHtcbiAgICBmbiA9IGNvbnRleHRbZm5dO1xuICB9XG4gIGNoZWNrKGZuLCBpcy5mdW5jLCBtZXRoICsgJzogYXJndW1lbnQgJyArIGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXG4gIHJldHVybiB7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiwgYXJnczogYXJncyB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsbChmbikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzYygnY2FsbCcsIGZuLCBhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseShjb250ZXh0LCBmbikge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG5cbiAgcmV0dXJuIGVmZmVjdChDQUxMLCBnZXRGbkNhbGxEZXNjKCdhcHBseScsIHsgY29udGV4dDogY29udGV4dCwgZm46IGZuIH0sIGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNwcyhmbikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ1BTLCBnZXRGbkNhbGxEZXNjKCdjcHMnLCBmbiwgYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yayhmbikge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoRk9SSywgZ2V0Rm5DYWxsRGVzYygnZm9yaycsIGZuLCBhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGF3bihmbikge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHJldHVybiBkZXRhY2goZm9yay5hcHBseSh1bmRlZmluZWQsIFtmbl0uY29uY2F0KGFyZ3MpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luKCkge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIHRhc2tzID0gQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICB0YXNrc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgaWYgKHRhc2tzLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYWxsKHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIGpvaW4odCk7XG4gICAgfSkpO1xuICB9XG4gIHZhciB0YXNrID0gdGFza3NbMF07XG4gIGNoZWNrKHRhc2ssIGlzLm5vdFVuZGVmLCAnam9pbih0YXNrKTogYXJndW1lbnQgdGFzayBpcyB1bmRlZmluZWQnKTtcbiAgY2hlY2sodGFzaywgaXMudGFzaywgJ2pvaW4odGFzayk6IGFyZ3VtZW50ICcgKyB0YXNrICsgJyBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCAnICsgVEVTVF9ISU5UKTtcbiAgcmV0dXJuIGVmZmVjdChKT0lOLCB0YXNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCB0YXNrcyA9IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgdGFza3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIGlmICh0YXNrcy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIGFsbCh0YXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBjYW5jZWwodCk7XG4gICAgfSkpO1xuICB9XG4gIHZhciB0YXNrID0gdGFza3NbMF07XG4gIGlmICh0YXNrcy5sZW5ndGggPT09IDEpIHtcbiAgICBjaGVjayh0YXNrLCBpcy5ub3RVbmRlZiwgJ2NhbmNlbCh0YXNrKTogYXJndW1lbnQgdGFzayBpcyB1bmRlZmluZWQnKTtcbiAgICBjaGVjayh0YXNrLCBpcy50YXNrLCAnY2FuY2VsKHRhc2spOiBhcmd1bWVudCAnICsgdGFzayArICcgaXMgbm90IGEgdmFsaWQgVGFzayBvYmplY3QgJyArIFRFU1RfSElOVCk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChDQU5DRUwsIHRhc2sgfHwgU0VMRl9DQU5DRUxMQVRJT04pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0KHNlbGVjdG9yKSB7XG4gIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW43ID4gMSA/IF9sZW43IC0gMSA6IDApLCBfa2V5NyA9IDE7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICBhcmdzW19rZXk3IC0gMV0gPSBhcmd1bWVudHNbX2tleTddO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBzZWxlY3RvciA9IGlkZW50O1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKHNlbGVjdG9yLCBpcy5ub3RVbmRlZiwgJ3NlbGVjdChzZWxlY3RvcixbLi4uXSk6IGFyZ3VtZW50IHNlbGVjdG9yIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKHNlbGVjdG9yLCBpcy5mdW5jLCAnc2VsZWN0KHNlbGVjdG9yLFsuLi5dKTogYXJndW1lbnQgJyArIHNlbGVjdG9yICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoU0VMRUNULCB7IHNlbGVjdG9yOiBzZWxlY3RvciwgYXJnczogYXJncyB9KTtcbn1cblxuLyoqXG4gIGNoYW5uZWwocGF0dGVybiwgW2J1ZmZlcl0pICAgID0+IGNyZWF0ZXMgYW4gZXZlbnQgY2hhbm5lbCBmb3Igc3RvcmUgYWN0aW9uc1xuKiovXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpIHtcbiAgY2hlY2socGF0dGVybiwgaXMubm90VW5kZWYsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sLi4uKTogYXJndW1lbnQgcGF0dGVybiBpcyB1bmRlZmluZWQnKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgY2hlY2soYnVmZmVyLCBpcy5ub3RVbmRlZiwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKTogYXJndW1lbnQgYnVmZmVyIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKGJ1ZmZlciwgaXMuYnVmZmVyLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpOiBhcmd1bWVudCAnICsgYnVmZmVyICsgJyBpcyBub3QgYSB2YWxpZCBidWZmZXInKTtcbiAgfVxuICByZXR1cm4gZWZmZWN0KEFDVElPTl9DSEFOTkVMLCB7IHBhdHRlcm46IHBhdHRlcm4sIGJ1ZmZlcjogYnVmZmVyIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsbGVkKCkge1xuICByZXR1cm4gZWZmZWN0KENBTkNFTExFRCwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmx1c2goY2hhbm5lbCkge1xuICBjaGVjayhjaGFubmVsLCBpcy5jaGFubmVsLCAnZmx1c2goY2hhbm5lbCk6IGFyZ3VtZW50ICcgKyBjaGFubmVsICsgJyBpcyBub3QgdmFsaWQgY2hhbm5lbCcpO1xuICByZXR1cm4gZWZmZWN0KEZMVVNILCBjaGFubmVsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHQocHJvcCkge1xuICBjaGVjayhwcm9wLCBpcy5zdHJpbmcsICdnZXRDb250ZXh0KHByb3ApOiBhcmd1bWVudCAnICsgcHJvcCArICcgaXMgbm90IGEgc3RyaW5nJyk7XG4gIHJldHVybiBlZmZlY3QoR0VUX0NPTlRFWFQsIHByb3ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dChwcm9wcykge1xuICBjaGVjayhwcm9wcywgaXMub2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZyhudWxsLCBwcm9wcykpO1xuICByZXR1cm4gZWZmZWN0KFNFVF9DT05URVhULCBwcm9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWtlRXZlcnkocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW44ID4gMiA/IF9sZW44IC0gMiA6IDApLCBfa2V5OCA9IDI7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICBhcmdzW19rZXk4IC0gMl0gPSBhcmd1bWVudHNbX2tleThdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbdGFrZUV2ZXJ5SGVscGVyLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWtlTGF0ZXN0KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuOSA+IDIgPyBfbGVuOSAtIDIgOiAwKSwgX2tleTkgPSAyOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7XG4gICAgYXJnc1tfa2V5OSAtIDJdID0gYXJndW1lbnRzW19rZXk5XTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3Rha2VMYXRlc3RIZWxwZXIsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKG1zLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4xMCA+IDMgPyBfbGVuMTAgLSAzIDogMCksIF9rZXkxMCA9IDM7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHtcbiAgICBhcmdzW19rZXkxMCAtIDNdID0gYXJndW1lbnRzW19rZXkxMF07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFt0aHJvdHRsZUhlbHBlciwgbXMsIHBhdHRlcm4sIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxudmFyIGNyZWF0ZUFzRWZmZWN0VHlwZSA9IGZ1bmN0aW9uIGNyZWF0ZUFzRWZmZWN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWZmZWN0KSB7XG4gICAgcmV0dXJuIGVmZmVjdCAmJiBlZmZlY3RbSU9dICYmIGVmZmVjdFt0eXBlXTtcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgYXNFZmZlY3QgPSB7XG4gIHRha2U6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoVEFLRSksXG4gIHB1dDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShQVVQpLFxuICBhbGw6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQUxMKSxcbiAgcmFjZTogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShSQUNFKSxcbiAgY2FsbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShDQUxMKSxcbiAgY3BzOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENQUyksXG4gIGZvcms6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoRk9SSyksXG4gIGpvaW46IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoSk9JTiksXG4gIGNhbmNlbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShDQU5DRUwpLFxuICBzZWxlY3Q6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoU0VMRUNUKSxcbiAgYWN0aW9uQ2hhbm5lbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShBQ1RJT05fQ0hBTk5FTCksXG4gIGNhbmNlbGxlZDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShDQU5DRUxMRUQpLFxuICBmbHVzaDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShGTFVTSCksXG4gIGdldENvbnRleHQ6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoR0VUX0NPTlRFWFQpLFxuICBzZXRDb250ZXh0OiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFNFVF9DT05URVhUKVxufTsiLCJpbXBvcnQgeyBrVHJ1ZSwgbm9vcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdmFyIEJVRkZFUl9PVkVSRkxPVyA9IFwiQ2hhbm5lbCdzIEJ1ZmZlciBvdmVyZmxvdyFcIjtcblxudmFyIE9OX09WRVJGTE9XX1RIUk9XID0gMTtcbnZhciBPTl9PVkVSRkxPV19EUk9QID0gMjtcbnZhciBPTl9PVkVSRkxPV19TTElERSA9IDM7XG52YXIgT05fT1ZFUkZMT1dfRVhQQU5EID0gNDtcblxudmFyIHplcm9CdWZmZXIgPSB7IGlzRW1wdHk6IGtUcnVlLCBwdXQ6IG5vb3AsIHRha2U6IG5vb3AgfTtcblxuZnVuY3Rpb24gcmluZ0J1ZmZlcigpIHtcbiAgdmFyIGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxMDtcbiAgdmFyIG92ZXJmbG93QWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBhcnIgPSBuZXcgQXJyYXkobGltaXQpO1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHB1c2hJbmRleCA9IDA7XG4gIHZhciBwb3BJbmRleCA9IDA7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKGl0KSB7XG4gICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICBsZW5ndGgrKztcbiAgfTtcblxuICB2YXIgdGFrZSA9IGZ1bmN0aW9uIHRha2UoKSB7XG4gICAgaWYgKGxlbmd0aCAhPSAwKSB7XG4gICAgICB2YXIgaXQgPSBhcnJbcG9wSW5kZXhdO1xuICAgICAgYXJyW3BvcEluZGV4XSA9IG51bGw7XG4gICAgICBsZW5ndGgtLTtcbiAgICAgIHBvcEluZGV4ID0gKHBvcEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgIHJldHVybiBpdDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgd2hpbGUgKGxlbmd0aCkge1xuICAgICAgaXRlbXMucHVzaCh0YWtlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgcmV0dXJuIGxlbmd0aCA9PSAwO1xuICAgIH0sXG4gICAgcHV0OiBmdW5jdGlvbiBwdXQoaXQpIHtcbiAgICAgIGlmIChsZW5ndGggPCBsaW1pdCkge1xuICAgICAgICBwdXNoKGl0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkb3VibGVkTGltaXQgPSB2b2lkIDA7XG4gICAgICAgIHN3aXRjaCAob3ZlcmZsb3dBY3Rpb24pIHtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1RIUk9XOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEJVRkZFUl9PVkVSRkxPVyk7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19TTElERTpcbiAgICAgICAgICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gcHVzaEluZGV4O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19FWFBBTkQ6XG4gICAgICAgICAgICBkb3VibGVkTGltaXQgPSAyICogbGltaXQ7XG5cbiAgICAgICAgICAgIGFyciA9IGZsdXNoKCk7XG5cbiAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcG9wSW5kZXggPSAwO1xuXG4gICAgICAgICAgICBhcnIubGVuZ3RoID0gZG91YmxlZExpbWl0O1xuICAgICAgICAgICAgbGltaXQgPSBkb3VibGVkTGltaXQ7XG5cbiAgICAgICAgICAgIHB1c2goaXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBEUk9QXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRha2U6IHRha2UsXG4gICAgZmx1c2g6IGZsdXNoXG4gIH07XG59XG5cbmV4cG9ydCB2YXIgYnVmZmVycyA9IHtcbiAgbm9uZTogZnVuY3Rpb24gbm9uZSgpIHtcbiAgICByZXR1cm4gemVyb0J1ZmZlcjtcbiAgfSxcbiAgZml4ZWQ6IGZ1bmN0aW9uIGZpeGVkKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1RIUk9XKTtcbiAgfSxcbiAgZHJvcHBpbmc6IGZ1bmN0aW9uIGRyb3BwaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX0RST1ApO1xuICB9LFxuICBzbGlkaW5nOiBmdW5jdGlvbiBzbGlkaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1NMSURFKTtcbiAgfSxcbiAgZXhwYW5kaW5nOiBmdW5jdGlvbiBleHBhbmRpbmcoaW5pdGlhbFNpemUpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihpbml0aWFsU2l6ZSwgT05fT1ZFUkZMT1dfRVhQQU5EKTtcbiAgfVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImltcG9ydCB7IGlzLCBtYWtlSXRlcmF0b3IgfSBmcm9tICcuLi91dGlscyc7XG5cbnZhciBkb25lID0geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG5leHBvcnQgdmFyIHFFbmQgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpIHtcbiAgaWYgKGlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gJ2NoYW5uZWwnO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhlbnRyeSk7XG4gICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnNtSXRlcmF0b3IoZnNtLCBxMCkge1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2l0ZXJhdG9yJztcblxuICB2YXIgdXBkYXRlU3RhdGUgPSB2b2lkIDAsXG4gICAgICBxTmV4dCA9IHEwO1xuXG4gIGZ1bmN0aW9uIG5leHQoYXJnLCBlcnJvcikge1xuICAgIGlmIChxTmV4dCA9PT0gcUVuZCkge1xuICAgICAgcmV0dXJuIGRvbmU7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBxTmV4dCA9IHFFbmQ7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlU3RhdGUgJiYgdXBkYXRlU3RhdGUoYXJnKTtcblxuICAgICAgdmFyIF9mc20kcU5leHQgPSBmc21bcU5leHRdKCksXG4gICAgICAgICAgcSA9IF9mc20kcU5leHRbMF0sXG4gICAgICAgICAgb3V0cHV0ID0gX2ZzbSRxTmV4dFsxXSxcbiAgICAgICAgICBfdXBkYXRlU3RhdGUgPSBfZnNtJHFOZXh0WzJdO1xuXG4gICAgICBxTmV4dCA9IHE7XG4gICAgICB1cGRhdGVTdGF0ZSA9IF91cGRhdGVTdGF0ZTtcbiAgICAgIHJldHVybiBxTmV4dCA9PT0gcUVuZCA/IGRvbmUgOiBvdXRwdXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VJdGVyYXRvcihuZXh0LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gbmV4dChudWxsLCBlcnJvcik7XG4gIH0sIG5hbWUsIHRydWUpO1xufSIsImltcG9ydCBmc21JdGVyYXRvciwgeyBxRW5kLCBzYWZlTmFtZSB9IGZyb20gJy4vZnNtSXRlcmF0b3InO1xuaW1wb3J0IHsgdGFrZSwgZm9yayB9IGZyb20gJy4uL2lvJztcbmltcG9ydCB7IEVORCB9IGZyb20gJy4uL2NoYW5uZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0YWtlRXZlcnkocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbCkgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG5cbiAgdmFyIGFjdGlvbiA9IHZvaWQgMCxcbiAgICAgIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeVRha2UsIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiBbJ3ExJywgeUZvcmsoYWN0aW9uKV07XG4gICAgfVxuICB9LCAncTEnLCAndGFrZUV2ZXJ5KCcgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArICcsICcgKyB3b3JrZXIubmFtZSArICcpJyk7XG59IiwiaW1wb3J0IGZzbUl0ZXJhdG9yLCB7IHFFbmQsIHNhZmVOYW1lIH0gZnJvbSAnLi9mc21JdGVyYXRvcic7XG5pbXBvcnQgeyBjYW5jZWwsIHRha2UsIGZvcmsgfSBmcm9tICcuLi9pbyc7XG5pbXBvcnQgeyBFTkQgfSBmcm9tICcuLi9jaGFubmVsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogdGFrZShwYXR0ZXJuT3JDaGFubmVsKSB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZm9yay5hcHBseSh1bmRlZmluZWQsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSkgfTtcbiAgfTtcbiAgdmFyIHlDYW5jZWwgPSBmdW5jdGlvbiB5Q2FuY2VsKHRhc2spIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGNhbmNlbCh0YXNrKSB9O1xuICB9O1xuXG4gIHZhciB0YXNrID0gdm9pZCAwLFxuICAgICAgYWN0aW9uID0gdm9pZCAwO1xuICB2YXIgc2V0VGFzayA9IGZ1bmN0aW9uIHNldFRhc2sodCkge1xuICAgIHJldHVybiB0YXNrID0gdDtcbiAgfTtcbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeVRha2UsIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiB0YXNrID8gWydxMycsIHlDYW5jZWwodGFzayldIDogWydxMScsIHlGb3JrKGFjdGlvbiksIHNldFRhc2tdO1xuICAgIH0sXG4gICAgcTM6IGZ1bmN0aW9uIHEzKCkge1xuICAgICAgcmV0dXJuIFsncTEnLCB5Rm9yayhhY3Rpb24pLCBzZXRUYXNrXTtcbiAgICB9XG4gIH0sICdxMScsICd0YWtlTGF0ZXN0KCcgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArICcsICcgKyB3b3JrZXIubmFtZSArICcpJyk7XG59IiwiaW1wb3J0IGZzbUl0ZXJhdG9yLCB7IHFFbmQsIHNhZmVOYW1lIH0gZnJvbSAnLi9mc21JdGVyYXRvcic7XG5pbXBvcnQgeyB0YWtlLCBmb3JrLCBhY3Rpb25DaGFubmVsLCBjYWxsIH0gZnJvbSAnLi4vaW8nO1xuaW1wb3J0IHsgRU5EIH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQgeyBidWZmZXJzIH0gZnJvbSAnLi4vYnVmZmVycyc7XG5pbXBvcnQgeyBkZWxheSB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyb3R0bGUoZGVsYXlMZW5ndGgsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAzXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBhY3Rpb24gPSB2b2lkIDAsXG4gICAgICBjaGFubmVsID0gdm9pZCAwO1xuXG4gIHZhciB5QWN0aW9uQ2hhbm5lbCA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcnMuc2xpZGluZygxKSkgfTtcbiAgdmFyIHlUYWtlID0gZnVuY3Rpb24geVRha2UoKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiB0YWtlKGNoYW5uZWwpIH07XG4gIH07XG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuICB2YXIgeURlbGF5ID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IGNhbGwoZGVsYXksIGRlbGF5TGVuZ3RoKSB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG4gIHZhciBzZXRDaGFubmVsID0gZnVuY3Rpb24gc2V0Q2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaGFubmVsID0gY2g7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlBY3Rpb25DaGFubmVsLCBzZXRDaGFubmVsXTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiBbJ3EzJywgeVRha2UoKSwgc2V0QWN0aW9uXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBhY3Rpb24gPT09IEVORCA/IFtxRW5kXSA6IFsncTQnLCB5Rm9yayhhY3Rpb24pXTtcbiAgICB9LFxuICAgIHE0OiBmdW5jdGlvbiBxNCgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeURlbGF5XTtcbiAgICB9XG4gIH0sICdxMScsICd0aHJvdHRsZSgnICsgc2FmZU5hbWUocGF0dGVybikgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufSIsImltcG9ydCB0YWtlRXZlcnlIZWxwZXIgZnJvbSAnLi90YWtlRXZlcnknO1xuaW1wb3J0IHRha2VMYXRlc3RIZWxwZXIgZnJvbSAnLi90YWtlTGF0ZXN0JztcbmltcG9ydCB0aHJvdHRsZUhlbHBlciBmcm9tICcuL3Rocm90dGxlJztcblxuaW1wb3J0IHsgZGVwcmVjYXRlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG52YXIgZGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gZGVwcmVjYXRpb25XYXJuaW5nKGhlbHBlck5hbWUpIHtcbiAgcmV0dXJuICdpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2FcXCcgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2EvZWZmZWN0c1xcJy5cXG5UaGUgbGF0dGVyIHdpbGwgbm90IHdvcmsgd2l0aCB5aWVsZCosIGFzIGhlbHBlciBlZmZlY3RzIGFyZSB3cmFwcGVkIGF1dG9tYXRpY2FsbHkgZm9yIHlvdSBpbiBmb3JrIGVmZmVjdC5cXG5UaGVyZWZvcmUgeWllbGQgJyArIGhlbHBlck5hbWUgKyAnIHdpbGwgcmV0dXJuIHRhc2sgZGVzY3JpcHRvciB0byB5b3VyIHNhZ2EgYW5kIGV4ZWN1dGUgbmV4dCBsaW5lcyBvZiBjb2RlLic7XG59O1xuXG52YXIgdGFrZUV2ZXJ5ID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlRXZlcnlIZWxwZXIsIC8qI19fUFVSRV9fKi9kZXByZWNhdGlvbldhcm5pbmcoJ3Rha2VFdmVyeScpKTtcbnZhciB0YWtlTGF0ZXN0ID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlTGF0ZXN0SGVscGVyLCAvKiNfX1BVUkVfXyovZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlTGF0ZXN0JykpO1xudmFyIHRocm90dGxlID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0aHJvdHRsZUhlbHBlciwgLyojX19QVVJFX18qL2RlcHJlY2F0aW9uV2FybmluZygndGhyb3R0bGUnKSk7XG5cbmV4cG9ydCB7IHRha2VFdmVyeSwgdGFrZUxhdGVzdCwgdGhyb3R0bGUsIHRha2VFdmVyeUhlbHBlciwgdGFrZUxhdGVzdEhlbHBlciwgdGhyb3R0bGVIZWxwZXIgfTsiLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCBcIkEgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudFwiKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsInZhciBxdWV1ZSA9IFtdO1xuLyoqXG4gIFZhcmlhYmxlIHRvIGhvbGQgYSBjb3VudGluZyBzZW1hcGhvcmVcbiAgLSBJbmNyZW1lbnRpbmcgYWRkcyBhIGxvY2sgYW5kIHB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGBzdXNwZW5kZWRgIHN0YXRlIChpZiBpdCdzIG5vdFxuICAgIGFscmVhZHkgc3VzcGVuZGVkKVxuICAtIERlY3JlbWVudGluZyByZWxlYXNlcyBhIGxvY2suIFplcm8gbG9ja3MgcHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHJlbGVhc2VkYCBzdGF0ZS4gVGhpc1xuICAgIHRyaWdnZXJzIGZsdXNoaW5nIHRoZSBxdWV1ZWQgdGFza3MuXG4qKi9cbnZhciBzZW1hcGhvcmUgPSAwO1xuXG4vKipcbiAgRXhlY3V0ZXMgYSB0YXNrICdhdG9taWNhbGx5Jy4gVGFza3Mgc2NoZWR1bGVkIGR1cmluZyB0aGlzIGV4ZWN1dGlvbiB3aWxsIGJlIHF1ZXVlZFxuICBhbmQgZmx1c2hlZCBhZnRlciB0aGlzIHRhc2sgaGFzIGZpbmlzaGVkIChhc3N1bWluZyB0aGUgc2NoZWR1bGVyIGVuZHVwIGluIGEgcmVsZWFzZWRcbiAgc3RhdGUpLlxuKiovXG5mdW5jdGlvbiBleGVjKHRhc2spIHtcbiAgdHJ5IHtcbiAgICBzdXNwZW5kKCk7XG4gICAgdGFzaygpO1xuICB9IGZpbmFsbHkge1xuICAgIHJlbGVhc2UoKTtcbiAgfVxufVxuXG4vKipcbiAgRXhlY3V0ZXMgb3IgcXVldWVzIGEgdGFzayBkZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIHRoZSBzY2hlZHVsZXIgKGBzdXNwZW5kZWRgIG9yIGByZWxlYXNlZGApXG4qKi9cbmV4cG9ydCBmdW5jdGlvbiBhc2FwKHRhc2spIHtcbiAgcXVldWUucHVzaCh0YXNrKTtcblxuICBpZiAoIXNlbWFwaG9yZSkge1xuICAgIHN1c3BlbmQoKTtcbiAgICBmbHVzaCgpO1xuICB9XG59XG5cbi8qKlxuICBQdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgc3VzcGVuZGVkYCBzdGF0ZS4gU2NoZWR1bGVkIHRhc2tzIHdpbGwgYmUgcXVldWVkIHVudGlsIHRoZVxuICBzY2hlZHVsZXIgaXMgcmVsZWFzZWQuXG4qKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXNwZW5kKCkge1xuICBzZW1hcGhvcmUrKztcbn1cblxuLyoqXG4gIFB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGByZWxlYXNlZGAgc3RhdGUuXG4qKi9cbmZ1bmN0aW9uIHJlbGVhc2UoKSB7XG4gIHNlbWFwaG9yZS0tO1xufVxuXG4vKipcbiAgUmVsZWFzZXMgdGhlIGN1cnJlbnQgbG9jay4gRXhlY3V0ZXMgYWxsIHF1ZXVlZCB0YXNrcyBpZiB0aGUgc2NoZWR1bGVyIGlzIGluIHRoZSByZWxlYXNlZCBzdGF0ZS5cbioqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKCkge1xuICByZWxlYXNlKCk7XG5cbiAgdmFyIHRhc2sgPSB2b2lkIDA7XG4gIHdoaWxlICghc2VtYXBob3JlICYmICh0YXNrID0gcXVldWUuc2hpZnQoKSkgIT09IHVuZGVmaW5lZCkge1xuICAgIGV4ZWModGFzayk7XG4gIH1cbn0iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=